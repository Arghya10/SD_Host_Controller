$module [dataTx] $in(lastBlock:$uint<1> blockCountEnable:$uint<1> blockCount:$uint<16>) $out(blockCountNext:$uint<16> transferComplete:$uint<8>) $is
{
	$branchblock[data]
	{	
		//Host Control1 Register: Data Transfer Width (1: 4-bit Mode) (0: 1-bit Mode)
		$call readSDHCRegisters (HostControl) (hostControlRegVal)
		$if(hostControlRegVal [] 1)$then
			$branchblock[dat_store_4]
			{
				$dopipeline $depth 10 $fullrate
				$merge $entry $loopback
					$phi i:= ($bitcast ($uint<10>) 0) $on $entry next_i $on $loopback
					$phi dat0:= ($bitcast ($uint<1024>) 0) $on $entry next_data0 $on $loopback
					$phi dat1:= ($bitcast ($uint<1024>) 0) $on $entry next_data1 $on $loopback
					$phi dat2:= ($bitcast ($uint<1024>) 0) $on $entry next_data2 $on $loopback
					$phi dat3:= ($bitcast ($uint<1024>) 0) $on $entry next_data3 $on $loopback
				$endmerge
				tempBuffer:= dataBuffer
				$volatile next_data3:= ((dat3<<2) | ($concat ($bitcast ($uint<1022>)0) (tempBuffer [] 7) (tempBuffer[] 3) ))
				$volatile next_data2:= ((dat2<<2) | ($concat ($bitcast ($uint<1022>)0) (tempBuffer [] 6) (tempBuffer[] 2) ))
				$volatile next_data1:= ((dat1<<2) | ($concat ($bitcast ($uint<1022>)0) (tempBuffer [] 5) (tempBuffer[] 1) ))
				$volatile next_data0:= ((dat0<<2) | ($concat ($bitcast ($uint<1022>)0) (tempBuffer [] 4) (tempBuffer[] 0) ))
				$volatile next_i := (i + 1)
				$while( next_i < 512)
			}(next_data0 => dat0 next_data1 => dat1 next_data2 => dat2 next_data3 => dat3)
			//All data Read from the buffer so pointer reset to zero
			txBufferPointer := ($bitcast ($uint<10>) 0)
			//---------Finding CRC 16 for data line 0-----------
				$dopipeline $depth 10 $fullrate
				$merge $entry $loopback
					$phi j_0:= ($bitcast ($uint<11>) 0) $on $entry next_j_0 $on $loopback
					$phi CRC_16_DAT0:= ($bitcast ($uint<16>) 0) $on $entry nextCRC16_DAT0 $on $loopback
					$phi tempDataD0 := dat0 $on $entry nextTempDataD0 $on $loopback
				$endmerge
				$volatile invd0:= ((tempDataD0 [] 1023) ^ (CRC_16_DAT0 [] 15) )
				$volatile nextCRC16_DAT0:= ($concat ($slice CRC_16_DAT0 14 12) ((CRC_16_DAT0 [] 11 )^ invd0) ($slice CRC_16_DAT0 10 5) ((CRC_16_DAT0 [] 4) ^ invd0) ($slice CRC_16_DAT0 3 0) invd0)
				$volatile nextTempDataD0:= (tempDataD0 << 1)
				$volatile next_j_0 := (j_0 + 1)
				$while(next_j_0 < 1024)
			//------------Finding CRC 16 for data line 1--------------
				$dopipeline $depth 10 $fullrate
				$merge $entry $loopback
					$phi j_1:= ($bitcast ($uint<11>) 0) $on $entry next_j_1 $on $loopback
					$phi CRC_16_DAT1:= ($bitcast ($uint<16>) 0) $on $entry nextCRC16_DAT1 $on $loopback
					$phi tempDataD1 := dat1 $on $entry nextTempDataD1 $on $loopback
				$endmerge
				$volatile invd1:= ((tempDataD1 [] 1023) ^ (CRC_16_DAT1 [] 15) )
				$volatile nextCRC16_DAT1:= ($concat ($slice CRC_16_DAT1 14 12) ((CRC_16_DAT1 [] 11 )^ invd1) ($slice CRC_16_DAT1 10 5) ((CRC_16_DAT1 [] 4) ^ invd1) ($slice CRC_16_DAT1 3 0) invd1)
				$volatile nextTempDataD1:= (tempDataD1 << 1)
				$volatile next_j_1 := (j_1 + 1)
				$while(next_j_1 < 1024)
			//---------------Finding CRC 16 for data line 2--------------
				$dopipeline $depth 10 $fullrate
				$merge $entry $loopback
					$phi j_2:= ($bitcast ($uint<11>) 0) $on $entry next_j_2 $on $loopback
					$phi CRC_16_DAT2:= ($bitcast ($uint<16>) 0) $on $entry nextCRC16_DAT2 $on $loopback
					$phi tempDataD2 := dat2 $on $entry nextTempDataD2 $on $loopback
				$endmerge
				$volatile invd2:= ((tempDataD2 [] 1023) ^ (CRC_16_DAT2 [] 15) )
				$volatile nextCRC16_DAT2:= ($concat ($slice CRC_16_DAT2 14 12) ((CRC_16_DAT2 [] 11 )^ invd2) ($slice CRC_16_DAT2 10 5) ((CRC_16_DAT2 [] 4) ^ invd2) ($slice CRC_16_DAT2 3 0) invd2)
				$volatile nextTempDataD2:= (tempDataD2 << 1)
				$volatile next_j_2 := (j_2 + 1)
				$while(next_j_2 < 1024)
			//-----------------Finding CRC 16 for data line 3---------------
				$dopipeline $depth 10 $fullrate
				$merge $entry $loopback
					$phi j_3:= ($bitcast ($uint<11>) 0) $on $entry next_j_3 $on $loopback
					$phi CRC_16_DAT3:= ($bitcast ($uint<16>) 0) $on $entry nextCRC16_DAT3 $on $loopback
					$phi tempDataD3 := dat3 $on $entry nextTempDataD3 $on $loopback
				$endmerge
				$volatile invd3:= ((tempDataD3 [] 1023) ^ (CRC_16_DAT3 [] 15) )
				$volatile nextCRC16_DAT3:= ($concat ($slice CRC_16_DAT3 14 12) ((CRC_16_DAT3 [] 11 )^ invd3) ($slice CRC_16_DAT3 10 5) ((CRC_16_DAT3 [] 4) ^ invd3) ($slice CRC_16_DAT3 3 0) invd3)
				$volatile nextTempDataD3:= (tempDataD3 << 1)
				$volatile next_j_3 := (j_3 + 1)
				$while(next_j_3 < 1024)
			//$rreport(OUTDATA data lastBlock)
			//-----------------------------------------------------------------------
			
			oe := ONE_1
			$parallelblock[senddata]
			{
			//-----------Send data through DAT0Tx-----------------
			$call sendDAT0 (dat0 nextCRC16_DAT0) ()
			//-----------Send data through DAT1Tx-----------------
			$call sendDAT1 (dat1 nextCRC16_DAT1) ()
			//------------Send dat through DAT2Tx-----------------------
			$call sendDAT2 (dat2 nextCRC16_DAT2) ()
			//------------Send data through DAT3Tx----------------------
			$call sendDAT3 (dat3 nextCRC16_DAT3) ()
			}
			oe := ZERO_1
			//--------------------------------------------------------------------------
			
		$else
			$null
		$endif
			busy := ONE_1
			//---------If Block Count Enable then decrease the block count ---------------
			$guard(blockCountEnable)
				blockCountNext:= (blockCount-1)
			//Check if it is last block 
			$if(lastBlock ==1)$then
				$merge $entry loopPresent
					$phi E:= ONE_8 $on $entry next_E $on loopPresent
					$phi readNewPresent := ($bitcast ($uint<16>)0) $on $entry readPresentState $on loopPresent
				$endmerge
					$call readSDHCRegisters ((PresentState + E)) (readPresentStateTemp)
					$volatile readPresentState := (($slice readNewPresent 7 0) && readPresentStateTemp )
					$volatile next_E := (E-1)
				$if(E != 0)$then
					$place[loopPresent]
				$endif
				$volatile presentState0Var := ($slice readPresentState 7 0)
				$volatile presentState1Var := ($slice readPresentState 15 8)
				//------------Write Transfer Inactive-----------
				$call writeSDHCRegisters ({PresentState + 1} (presentState1Var & _hfe)) ()
			$endif
			//-----Wait till the end of busy bit---------------
			$merge $entry waitloop $endmerge
				wait:= DAT0Rx
			$if(wait == ZERO_1)$then
				$place[waitloop]
			$endif
			busy := ZERO_1
			//-----------Busy ends with a One-------------------------------
			$if(lastBlock ==1)$then
				//-------------DAT Line Active and Command Inhibit (DAT) = 0------------------
				$call writeSDHCRegisters (PresentState (presentState0Var & _hf9)) ()
				transferComplete := (ZERO_8 | _h02)
			$endif
	}
}

$module [sendDAT0] $in(dat0:$uint<1024> nextCRC16_DAT0:$uint<16>) $out() $is
{
	$branchblock[parallelblock_one]
	{
			newDat0 := ($concat ZERO_1 dat0 nextCRC16_DAT0 ONE_1)
			$dopipeline $depth 5 $fullrate
			$merge $entry $loopback
				$phi k_0:= ($bitcast ($uint<11>) 0) $on $entry next_k_0 $on $loopback
				$phi dat0bit4_0:= newDat0 $on $entry nextbit4_0 $on $loopback
			$endmerge
			DAT0Tx := (dat0bit4_0 [] 1041)
			$volatile nextbit4_0 := (dat0bit4_0 << 1)
			$volatile next_k_0 := (k_0 + 1)
			$while(next_k_0 < 1042)
	}
}
$module [sendDAT1] $in(dat1:$uint<1024> nextCRC16_DAT1:$uint<16>) $out() $is
{
	$branchblock[parallelblock_two]
	{
			newDat1 := ($concat ZERO_1 dat1 nextCRC16_DAT1 ONE_1)
			$dopipeline $depth 5 $fullrate
			$merge $entry $loopback
				$phi k_1:= ($bitcast ($uint<11>) 0) $on $entry next_k_1 $on $loopback
				$phi dat0bit4_1:= newDat1 $on $entry nextbit4_1 $on $loopback
			$endmerge
			DAT1Tx := (dat0bit4_1 [] 1041)
			$volatile nextbit4_1 := (dat0bit4_1 << 1)
			$volatile next_k_1 := (k_1 + 1)
			$while(next_k_1 < 1042)
	}
}

$module [sendDAT2] $in(dat2:$uint<1024> nextCRC16_DAT2:$uint<16>) $out() $is
{
	$branchblock[parallelblock_three]
	{
			newDat2 := ($concat ZERO_1 dat2 nextCRC16_DAT2 ONE_1)
			$dopipeline $depth 5 $fullrate
			$merge $entry $loopback
				$phi k_2:= ($bitcast ($uint<11>) 0) $on $entry next_k_2 $on $loopback
				$phi dat0bit4_2:= newDat2 $on $entry nextbit4_2 $on $loopback
			$endmerge
			DAT2Tx := (dat0bit4_2 [] 1041)
			$volatile nextbit4_2 := (dat0bit4_2 << 1)
			$volatile next_k_2 := (k_2 + 1)
			$while(next_k_2 < 1042)
	}
}
$module [sendDAT3] $in(dat3:$uint<1024> nextCRC16_DAT3:$uint<16>) $out() $is
{
	$branchblock[parallelblock_four]
	{
			newDat3 := ($concat ZERO_1 dat3 nextCRC16_DAT3 ONE_1)
			$dopipeline $depth 5 $fullrate
			$merge $entry $loopback
				$phi k_3:= ($bitcast ($uint<11>) 0) $on $entry next_k_3 $on $loopback
				$phi dat0bit4_3:= newDat3 $on $entry nextbit4_3 $on $loopback
			$endmerge
			DAT3Tx := (dat0bit4_3 [] 1041)
			$volatile nextbit4_3 := (dat0bit4_3 << 1)
			$volatile next_k_3 := (k_3 + 1)
			$while(next_k_3 < 1042)
	}
}