//Top Module 


$module [sdhc_daemon] $in() $out() $is
{

	//read the request pipe
	//split the data into the following 
	// 63: rwbar
	// 62-59: bytemask
	// 55-32: address
	// 31-00: data
	//decide whether to read or write
	//decode register array index from address
	//On completion of write first write to the register then
	//send back zero as acknowledgment through the response pipe
	//On read from register send back data through response pipe

	//Initializing module
	$call initialize () ()
	
	$branchblock[loop]{
		
		$merge $entry loopback 
		$endmerge

		//read peripheral bridge request
		request := peripheral_bridge_to_sdhc_request 
		$volatile $split (request 1 4 3 16 8 32) (rwbar bytemask unused addressunused address data)

		$if(rwbar == 0) $then
			$call sdhc_register_write(address data bytemask) ()

			//Send back zero as acknowledgment
			sdhc_to_peripheral_bridge_response:= ZERO_32

			//Check for SoftwareReset
			$if(((address + 3) == SoftwareReset)& (bytemask [] 0)) $then
				$call readSDHCRegisters (SoftwareReset) (softwareResetVal)
				$volatile condition := ($excmux (softwareResetVal [] 0) ZERO_2 (softwareResetVal [] 1) ONE_2 (softwareResetVal [] 2) ($bitcast ($uint<2>) 2))	
				$call resetRegisters (condition) ()
			$endif		

			//When the most significant byte of the Command Register is written 
			//Command should be sent
			$call readSDHCRegisters (PresentState) (presentStateVal) 
			$volatile commandInhibit_CMD:= ((presentStateVal [] 0) == 0 )
			$volatile addresscheck := (((address + 3) == _h0f) & (bytemask [] 0))
			$volatile presentState:= ((presentStateVal>>1) << 1)
			$if(addresscheck & commandInhibit_CMD) $then
				$volatile tempPresentStateHere := (presentState | _h01)// Writing 1 to commandInhibit(CMD)
				$call writeSDHCRegisters (PresentState tempPresentStateHere) ()
				$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete)
			$endif

			//Buffer Read or Write Enable Check
			$call bufferReadWriteCheck () (bufferReadReady bufferWriteReady)

			//Check if BufferDataPort is written
			$volatile bufferDataPortCheck := (address  == 32)
			$if((bufferDataPortCheck == 1) & (txBufferPointer<512))$then
				$call bufferDataPortCheckWrite () (transferComplete)
			$endif
			
		$else
			//Check if BufferDataPort is read
			$volatile readBufferDataPortCheck := (address  == 32)
			$if((readBufferDataPortCheck ==1) & (rxBufferPointer != 0))$then
				$call bufferDataPortCheckRead () (dataErrorInterruptStatusVar readDataTransferComplete)
			$endif
			
			$call sdhc_register_read (address bytemask) (readdata)	
			sdhc_to_peripheral_bridge_response := readdata
		$endif


		//Error Interrupt Status and Normal Interrupt 	
		$call interruptGeneration (dataErrorInterruptStatusVar1 dataErrorInterruptStatusVar errorInterruptStatusVar1 errorInterruptStatusVar2 readDataTransferComplete dataTransferComplete transferComplete bufferReadReady bufferWriteReady normalInterruptStatusVar1) ()
		
		//Clock Controller
		//frequencyDivider:= ($concat ($slice sdhcRegisters[ClockControl] 7 6) sdhcRegisters[{ClockControl + 1}])
		//$call readSDHCRegisters (ClockControl) (clockControlVal0)
		//$call readSDHCRegisters ({ClockControl + 1}) (clockControlVal1)
		//$volatile frequencyDivider:= ($concat ($slice clockControlVal0 7 6) clockControlVal1)
		//$if(frequencyDivider == 0)$then
		//	frequencySelect:= ($bitcast ($uint<20>) 2)
		//$else
		//	frequencySelect:= (($bitcast ($uint<20>) frequencyDivider) * 2)
		//$endif
		//sdhcRegisters[ClockControl]:= ($concat ($slice sdhcRegisters[ClockControl] 7 2) clkStable (sdhcRegisters[ClockControl] [] 0))
		//$volatile tempclockcontroller := ($concat ($slice clockControlVal0 7 2) clkStable (clockControlVal0 [] 0))
		//$call writeSDHCRegisters (ClockControl tempclockcontroller) ()
		//sdClkEnable:= (tempclockcontroller [] 2)
		$call clockController () () 

		$place[loopback]	
	}
} 
