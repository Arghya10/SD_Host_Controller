//Read-only register (RO): Register bits are read-only and cannot be altered by software or any reset
//operation. Writes to these bits are ignored.
//Read-only status (ROC): These bits are initialized to zero at reset. Writes to these bits are ignored.
//Read-Write register (RW): Register bits are read-write and may be either set or cleared by software
//to the desired state.
//Read-only status, Write-1-to-clear status(RW1C): Register bits indicate status when read, a set bit
//indicating a status event may be cleared by writing a 1. Writing a 0 to RW1C bits has no
//effect.
//Read-Write, automatic clear register (RWAC) :The Host Driver requests a Host Controller operation by
//setting the bit. The Host Controllers shall clear the bit automatically when the operation of
//complete. Writing a 0 to RWAC bits has no effect.
//Hardware Initialized(HWInit): Register bits are initialized by firmware or hardware mechanisms such
//as pin strapping or serial EEPROM. Bits are read-only after initialization, and writes to these
//bits are ignored.
//Reserved. These bits are initialized to zero.
// Writing into the registers
// Rsvd : Write zeros
// ROC  : $null (should be initialized to zero on reset)
// RO   : $null (reset does not affect)
// RWAC : Like RW
// RW1C : module RW1C
// RW   : Default

$module [sdhc_register_write] $in(address:$uint<8> dataIn:$uint<32> bytemask:$uint<4>) $out() $is
{
	$branchblock[addresscheckloop]
	{
		$merge $entry startloop 
			$phi addressTemp := address $on $entry next_address $on startloop
			$phi bytemaskTemp := bytemask $on $entry next_bytemask $on startloop
			$phi dataTemp := dataIn $on $entry next_data $on startloop
			$phi I:= ZERO_8 $on $entry next_I $on startloop
		$endmerge
		data := ($slice dataTemp 31 24)
		$rreport( Out following addressTemp bytemaskTemp data)
		$if(bytemaskTemp [] 3)$then
			$branchblock[write_register]
			{
			$rreport( Show following addressTemp data)
			$switch addressTemp
			$when {BlockSize + 1} $then $call writeSDHCRegisters (addressTemp (data & _h7f)) () //sdhcRegisters[addressTemp]:= (data & _h7f)

			$when Transfer $then $call writeSDHCRegisters (addressTemp (data & _h3f)) () //sdhcRegisters[addressTemp]:= (data & _h3f)
			$when {Transfer + 1} $then $call writeSDHCRegisters (addressTemp ZERO_8) () //sdhcRegisters[addressTemp]:= ZERO_8

			$when Command $then $call writeSDHCRegisters (addressTemp (data & _hfb)) () //sdhcRegisters[addressTemp]:= (data & _hfb)
			$when {Command + 1} $then $call writeSDHCRegisters (addressTemp (data & _h3f)) ()//sdhcRegisters[addressTemp]:= (data & _h3f)
			
			$when Response0 $then $null
			$when {Response0 + 1} $then $null
			$when {Response0 + 2} $then $null
			$when {Response0 + 3} $then $null
			$when Response2 $then $null
			$when {Response2 + 1} $then $null
			$when {Response2 + 2} $then $null
			$when {Response2 + 3} $then $null
			$when Response4 $then $null
			$when {Response4 + 1} $then $null
			$when {Response4 + 2} $then $null
			$when {Response4 + 3} $then $null
			$when Response6 $then $null
			$when {Response6 + 1} $then $null
			$when {Response6 + 2} $then $null
			$when {Response6 + 3}  $then $null

			$when PresentState $then $null
			$when {PresentState + 1} $then $null
			$when {PresentState + 2} $then $null
			$when {PresentState + 3} $then $null
			

			$when ClockControl $then $call writeSDHCRegisters (addressTemp (data & _h05)) () //sdhcRegisters[addressTemp] := (data & _h05)
			
			$when SoftwareReset $then $call writeSDHCRegisters (addressTemp (data & _h7)) () //sdhcRegisters[addressTemp] := (data & _h7)

			$when NormalInterruptStatus $then $call RW1C (data addressTemp) () 
			$when {NormalInterruptStatus + 1} $then $null
			
			$when ErrorInterruptStatus $then $call RW1C (data addressTemp) ()
			$when {ErrorInterruptStatus + 1} $then $call RW1C (data addressTemp) ()
			
			$when {NormalInterruptStatusEnable + 1} $then $call writeSDHCRegisters (addressTemp (data & _h1f)) ()//sdhcRegisters[addressTemp] := (data & _h1f)
			
			$when {ErrorInterruptStatusEnable + 1} $then $call writeSDHCRegisters (addressTemp (data & _hf7)) ()//sdhcRegisters[addressTemp] := (data & _hf7)
			
			$when {NormalInterruptSignalEnable + 1} $then $call writeSDHCRegisters (addressTemp (data & _h1f)) () //sdhcRegisters[addressTemp] := (data & _h1f)

			$when {ErrorInterruptSignalEnable + 1} $then $call writeSDHCRegisters (addressTemp (data & _hf7)) () //sdhcRegisters[addressTemp] := (data & _hf7)
			

			$when {HostControl2 + 1} $then $call writeSDHCRegisters (addressTemp (data & _hC0)) ()//sdhcRegisters[addressTemp] := (data & _hC0)
			
			$when Capabilities $then $null
			$when {Capabilities + 1} $then $null
			$when {Capabilities + 2} $then $null
			$when {Capabilities + 3} $then $null
			$when {Capabilities + 4} $then $null
			$when {Capabilities + 5} $then $null
			$when {Capabilities + 6} $then $null
			$when {Capabilities + 7} $then $call writeSDHCRegisters (addressTemp ZERO_8) ()//sdhcRegisters[addressTemp] := ZERO_8

			$when HostControllerVersion $then $null
			$when {HostControllerVersion + 1} $then $null

			//For RW bits
			$default $call writeSDHCRegisters (addressTemp data) ()//sdhcRegisters[addressTemp]:= data
			$endswitch	
			}
		$endif
		$volatile next_address := (addressTemp + 1)
		$volatile next_bytemask:= (bytemaskTemp << 1)
		$volatile next_data:= (dataTemp << 8)
		$volatile next_I:= (I + 1)
		$if(next_I<4)$then
			$place[startloop]
		$endif
	}
}
//Module for storing RW1C type bits
$module [RW1C] $in(data:$uint<8> address:$uint<8>) $out() $is
{
	//current_data:= sdhcRegisters[address]
	$call readSDHCRegisters (address) (current_data)
	$branchblock[rw1c]
	{
	$volatile $split (data 1 1 1 1 1 1 1 1) (d7 d6 d5 d4 d3 d2 d1 d0)
	$volatile $split (current_data 1 1 1 1 1 1 1 1) (current_d7 current_d6 current_d5 current_d4 current_d3 current_d2 current_d1 current_d0)

	$volatile b0:= ($mux d0 ZERO_1 current_d0)
	$volatile b1:= ($mux d1 ZERO_1 current_d1)
	$volatile b2:= ($mux d2 ZERO_1 current_d2)
	$volatile b3:= ($mux d3 ZERO_1 current_d3)
	$volatile b4:= ($mux d4 ZERO_1 current_d4)
	$volatile b5:= ($mux d5 ZERO_1 current_d5)
	$volatile b6:= ($mux d6 ZERO_1 current_d6)
	$volatile b7:= ($mux d7 ZERO_1 current_d7)

	$call writeSDHCRegisters (address ($concat b7 b6 b5 b4 b3 b2 b1 b0)) () 
	$if(address == NormalInterruptStatus)$then
		normalInterruptFlag1:= ((~data) & normalInterruptFlag1)
	$endif
	$if(address == {NormalInterruptStatus + 1})$then
		normalInterruptFlag2:= ((~data) & normalInterruptFlag2)
	$endif
	$if(address == ErrorInterruptStatus)$then
		errorInterruptFlag1:= ((~data) & errorInterruptFlag1)
	$endif
	$if(address == {ErrorInterruptStatus + 1})$then
		errorInterruptFlag2:= ((~data) & errorInterruptFlag2)
	$endif
	}
}

//Module for reseting registers to initial values
$module [resetRegisters] $in(resetCondition:$uint<2>) $out() $is
{
	//HWInit Values
  	$call writeSDHCRegisters (Capabilities _h8A) () //sdhcRegisters[Capabilities]:= _h8A
	$call writeSDHCRegisters ({Capabilities + 1} _h64) () //sdhcRegisters[{Capabilities + 1}]:= _h64
	$call writeSDHCRegisters ({Capabilities + 2} _h20) () //sdhcRegisters[{Capabilities + 2}]:= _h20
	$call writeSDHCRegisters ({Capabilities + 3} _h05) () //sdhcRegisters[{Capabilities + 3}]:= _h05
	$call writeSDHCRegisters ({Capabilities + 4} _h31) () //sdhcRegisters[{Capabilities + 4}]:= _h31
	$call writeSDHCRegisters ({Capabilities + 5} ZERO_8) () //sdhcRegisters[{Capabilities + 5}]:= _h00
	$call writeSDHCRegisters ({Capabilities + 6} ZERO_8) () //sdhcRegisters[{Capabilities + 6}]:= _h00
	$call writeSDHCRegisters ({Capabilities + 7} ZERO_8) () //sdhcRegisters[{Capabilities + 7}]:= _h00

	$call writeSDHCRegisters ({ClockControl + 1} _h7D) ()//sdhcRegisters[{ClockControl + 1}] :=_h7D 

	sdhcRegisters[HostControllerVersion]:= _h02  //Host Controller Version 3.00
	sdhcRegisters[{HostControllerVersion + 1}]:= _h00

	$branchblock[resetRegister]
	{
		$merge $entry loopback
			$phi I:= ($bitcast ($uint<8>) 0) $on $entry next_I $on loopback
		$endmerge
		$call readSDHCRegisters (I) (current_register_value) //current_register_value:= sdhcRegisters[I]
		$call readSDHCRegisters (SoftwareReset) (current_softwarereset_register_value) //current_softwarereset_register_value:= sdhcRegisters[SoftwareReset]
		$volatile condition1:= ((I>=Capabilities) & (I<{Capabilities + 8})) 
		$volatile condition2:=((I>=HostControllerVersion) & (I<{HostControllerVersion + 2}))
		$volatile condition3:=(I == {ClockControl + 1})
		$if($reduce | condition1 condition2 condition3) $then
			$null
		$else $if(resetCondition == ZERO_2) $then
			$call writeSDHCRegisters (I ZERO_8) () //sdhcRegisters[I]:= ZERO_8
		$else $if((resetCondition == ONE_2) & ((I == PresentState)| (I == NormalInterruptStatus))) $then
			$call writeSDHCRegisters (I (current_register_value & _hfe)) () //sdhcRegisters[I]:= (current_register_value & _hfe)
		$else $if(resetCondition == ($bitcast ($uint<2>)2))$then
			//Clear DAT line 
				$if((I>=BufferDataPort) & (I<{BufferDataPort + 4}))$then
					$call writeSDHCRegisters (I ZERO_8) () //sdhcRegisters[I] := ZERO_8
				$endif
				$if(I==PresentState)$then
					$call writeSDHCRegisters (I (current_register_value & _h09)) () //sdhcRegisters[I]:= (current_register_value & _h09)
				$endif
				$if(I=={PresentState + 1}) $then
					$call writeSDHCRegisters (I ZERO_8) () //sdhcRegisters[I]:= ZERO_8
				$endif
				$if(I==NormalInterruptStatus) $then
					$call writeSDHCRegisters (I (current_register_value & _hC1) ) () //sdhcRegisters[I]:= (current_register_value & _hC1)
				$endif
		$endif
		$endif
		$endif
		$endif
		$volatile next_I:= (I + 1)
		$if(next_I < 72) $then
			$place[loopback]
		$endif
		$if(resetCondition == ONE_2)$then
			$call writeSDHCRegisters (SoftwareReset (current_softwarereset_register_value & _hfd)) () //sdhcRegisters[SoftwareReset]:= (current_softwarereset_register_value & _hfd)
		$endif
		$if(resetCondition == ($bitcast ($uint<2>)2)) $then
			$call writeSDHCRegisters (SoftwareReset(current_softwarereset_register_value & _hfb) ) () //sdhcRegisters[SoftwareReset]:= (current_softwarereset_register_value & _hfb)
		$endif
	}
}
// Module for writing into registers
$module [writeSDHCRegisters]
$in (address:$uint<8> data:$uint<8>) $out () $is
{
	sdhcRegisters[address] := data
}