// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  DAT0Rx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT0Rx] 1 $depth 5 
// $pipe  DAT0Tx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT0Tx] 1 $depth 5 
// $pipe  DAT1Rx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT1Rx] 1 $depth 5 
// $pipe  DAT1Tx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT1Tx] 1 $depth 5 
// $pipe  DAT2Rx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT2Rx] 1 $depth 5 
// $pipe  DAT2Tx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT2Tx] 1 $depth 5 
// $pipe  DAT3Rx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT3Rx] 1 $depth 5 
// $pipe  DAT3Tx : $uint<1>  $depth 5 
// can point into 
// in scope  top-level
$pipe [DAT3Tx] 1 $depth 5 
// $pipe  SDHC_to_IRC_INT : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [SDHC_to_IRC_INT] 1 $depth 1 $out  $signal 
// $pipe  bigResponseEnable : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [bigResponseEnable] 1 $depth 1 $out  $signal 
// $pipe  busy : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [busy] 1 $depth 1 $out  $signal 
// $pipe  busyResponse : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [busyResponse] 1 $depth 1 $out  $signal 
// $pipe  clkStable : $uint<1>  $depth 1  $in  $signal 
// can point into 
// in scope  top-level
$pipe [clkStable] 1 $depth 1 $in  $signal 
// $pipe  commandTx : $uint<1>  $depth 48 
// can point into 
// in scope  top-level
$pipe [commandTx] 1 $depth 48 
// $pipe  dataBufferRx : $uint<8>  $depth 512 
// can point into 
// in scope  top-level
$pipe [dataBufferRx] 8 $depth 512 
// $pipe  dataBufferTx : $uint<8>  $depth 512 
// can point into 
// in scope  top-level
$pipe [dataBufferTx] 8 $depth 512 
// $pipe  dummy : $uint<1>  $depth 1 
// can point into 
// in scope  top-level
$pipe [dummy] 1 $depth 1 
// $pipe  frequencySelect : $uint<20>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [frequencySelect] 20 $depth 1 $out  $signal 
// $pipe  in_data : $uint<8>  $depth 16 
// can point into 
// in scope  top-level
$pipe [in_data] 8 $depth 16 
// $pipe  oe : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [oe] 1 $depth 1 $out  $signal 
// $pipe  out_data : $uint<8>  $depth 8 
// can point into 
// in scope  top-level
$pipe [out_data] 8 $depth 8 
// $pipe  peripheral_bridge_to_sdhc_request : $uint<64>  $depth 1 
// can point into 
// in scope  top-level
$pipe [peripheral_bridge_to_sdhc_request] 64 $depth 1 
// $pipe  ready : $uint<1>  $depth 1  $in  $signal 
// can point into 
// in scope  top-level
$pipe [ready] 1 $depth 1 $in  $signal 
// $pipe  ready8clocks : $uint<1>  $depth 1  $in  $signal 
// can point into 
// in scope  top-level
$pipe [ready8clocks] 1 $depth 1 $in  $signal 
// $pipe  readyClockCountEnable : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [readyClockCountEnable] 1 $depth 1 $out  $signal 
// $pipe  responseEnable : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [responseEnable] 1 $depth 1 $out  $signal 
// $pipe  responseRx : $uint<1>  $depth 4 
// can point into 
// in scope  top-level
$pipe [responseRx] 1 $depth 4 
// $pipe  sdClkEnable : $uint<1>  $depth 1  $out  $signal 
// can point into 
// in scope  top-level
$pipe [sdClkEnable] 1 $depth 1 $out  $signal 
// $pipe  sdhc_to_peripheral_bridge_response : $uint<32>  $depth 1 
// can point into 
// in scope  top-level
$pipe [sdhc_to_peripheral_bridge_response] 32 $depth 1 
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_16] : $int<16> := _b0000000000000000// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_32] : $int<32> := _b00000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
// load store constants for object dataErrorInterruptStatus
$constant $W[dataErrorInterruptStatus_base_address] : $int<1> := _b0
// load store constants for object dataRxEnrty1
$constant $W[dataRxEnrty1_base_address] : $int<1> := _b0
// load store constants for object dataRxEnrty2
$constant $W[dataRxEnrty2_base_address] : $int<1> := _b0
// load store constants for object errorInterruptFlag1
$constant $W[errorInterruptFlag1_base_address] : $int<1> := _b0
// load store constants for object errorInterruptFlag2
$constant $W[errorInterruptFlag2_base_address] : $int<1> := _b0
// load store constants for object normalInterruptFlag1
$constant $W[normalInterruptFlag1_base_address] : $int<1> := _b0
// load store constants for object normalInterruptFlag2
$constant $W[normalInterruptFlag2_base_address] : $int<1> := _b0
// load store constants for object rxBufferPointer
$constant $W[rxBufferPointer_base_address] : $int<1> := _b0
// load store constants for object sdhcRegisters
$constant $W[sdhcRegisters_base_address] : $int<7> := _b0000000
// load store constants for object txBufferPointer
$constant $W[txBufferPointer_base_address] : $int<1> := _b0
$memoryspace [memory_space_0] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  dataErrorInterruptStatus : $uint<8> // memory space index = 0  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [dataErrorInterruptStatus] : $int<8>
}
$memoryspace [memory_space_1] 
{
  $capacity 1
  $datawidth 1
  $addrwidth 1
  $maxaccesswidth 1
  // $storage  dataRxEnrty1 : $uint<1> // memory space index = 1  base address = 0  word size = 1
  // can point into 
  // in scope  top-level
  $object [dataRxEnrty1] : $int<1>
}
$memoryspace [memory_space_2] 
{
  $capacity 1
  $datawidth 1
  $addrwidth 1
  $maxaccesswidth 1
  // $storage  dataRxEnrty2 : $uint<1> // memory space index = 2  base address = 0  word size = 1
  // can point into 
  // in scope  top-level
  $object [dataRxEnrty2] : $int<1>
}
$memoryspace [memory_space_3] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  errorInterruptFlag1 : $uint<8> // memory space index = 3  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [errorInterruptFlag1] : $int<8>
}
$memoryspace [memory_space_4] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  errorInterruptFlag2 : $uint<8> // memory space index = 4  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [errorInterruptFlag2] : $int<8>
}
$memoryspace [memory_space_5] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  normalInterruptFlag1 : $uint<8> // memory space index = 5  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [normalInterruptFlag1] : $int<8>
}
$memoryspace [memory_space_6] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  normalInterruptFlag2 : $uint<8> // memory space index = 6  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [normalInterruptFlag2] : $int<8>
}
$memoryspace [memory_space_7] 
{
  $capacity 1
  $datawidth 10
  $addrwidth 1
  $maxaccesswidth 10
  // $storage  rxBufferPointer : $uint<10> // memory space index = 7  base address = 0  word size = 10
  // can point into 
  // in scope  top-level
  $object [rxBufferPointer] : $int<10>
}
$memoryspace [memory_space_8] 
{
  $capacity 72
  $datawidth 8
  $addrwidth 7
  $maxaccesswidth 8
  // $storage  sdhcRegisters : $array[72] $of $uint<8> // memory space index = 8  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [sdhcRegisters] : $array[72] $of $int<8>
}
$memoryspace [memory_space_9] 
{
  $capacity 1
  $datawidth 10
  $addrwidth 1
  $maxaccesswidth 10
  // $storage  txBufferPointer : $uint<10> // memory space index = 9  base address = 0  word size = 10
  // can point into 
  // in scope  top-level
  $object [txBufferPointer] : $int<10>
}
$module [readSDHCRegisters] 
{
  $in address:$int<8>
  // can point into 
  $out data:$int<8>
  // can point into 
  // pipe-declarations for block %readSDHCRegisters
  //  file .Aa/sdhc.opt.aa, line 87
  // memory-space 8 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_78] 
    {
      // start:  	data := sdhcRegisters[address] $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 92
      // Source expression
      // sdhcRegisters[address]
      $T[array_obj_ref_77_base_address_calculated] 
      $T[array_obj_ref_77_sample_start_] 
      $T[array_obj_ref_77_sample_completed_] 
      $T[array_obj_ref_77_update_start_] 
      $T[array_obj_ref_77_update_completed_] 
      $T[array_obj_ref_77_word_address_calculated] 
      $T[array_obj_ref_77_root_address_calculated] 
      $T[array_obj_ref_77_offset_calculated] 
      $T[array_obj_ref_77_index_resized_0] 
      $T[array_obj_ref_77_index_scaled_0] 
      $T[array_obj_ref_77_index_computed_0] 
      // address
      // start: Forward dependencies from address to transition array_obj_ref_77_index_computed_0
      // done: Forward dependencies from address to transition array_obj_ref_77_index_computed_0
      ;;[array_obj_ref_77_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_77_index_computed_0 &-> (array_obj_ref_77_index_resize_0)
      array_obj_ref_77_index_resized_0 <-& (array_obj_ref_77_index_resize_0)
      ;;[array_obj_ref_77_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_77_index_resized_0 &-> (array_obj_ref_77_index_scale_0)
      array_obj_ref_77_index_scaled_0 <-& (array_obj_ref_77_index_scale_0)
      ;;[array_obj_ref_77_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_77_index_scaled_0 &-> (array_obj_ref_77_final_index_sum_regn)
      array_obj_ref_77_offset_calculated <-& (array_obj_ref_77_final_index_sum_regn)
      ;;[array_obj_ref_77_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_77_offset_calculated &-> (array_obj_ref_77_base_plus_offset)
      array_obj_ref_77_root_address_calculated <-& (array_obj_ref_77_base_plus_offset)
      ;;[array_obj_ref_77_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_77_root_address_calculated &-> (array_obj_ref_77_word_addrgen)
      array_obj_ref_77_word_address_calculated <-& (array_obj_ref_77_word_addrgen)
      ;;[array_obj_ref_77_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_77_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_77_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_77_sample_start_ <-& (array_obj_ref_77_word_address_calculated)
      array_obj_ref_77_sample_start_ &-> (array_obj_ref_77_Sample)
      array_obj_ref_77_sample_completed_ <-& (array_obj_ref_77_Sample)
      array_obj_ref_77_sample_completed_ &-> ($null)
      array_obj_ref_77_update_start_ &-> (array_obj_ref_77_Update)
      array_obj_ref_77_update_completed_ <-& (array_obj_ref_77_Update)
      // Target expression
      // (as target) data
      // data
      // write to interface object
      // start: WAR dependencies for data
      // done: WAR dependencies for data
      // data
      // write to interface object
      // end:  	data := sdhcRegisters[address] $buffering 1// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_8
      //  array_obj_ref_77 load
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readSDHCRegisters
    //  file .Aa/sdhc.opt.aa, line 87
    // sdhcRegisters[address]
    $constant $W[array_obj_ref_77_resized_base_address] : $int<7> := _b0000000// 0
    $constant $W[array_obj_ref_77_offset_scale_factor_0] : $int<7> := _b0000001// 1
    $constant $W[array_obj_ref_77_word_offset_0] : $int<7> := _b0000000// 0
    // 	data := sdhcRegisters[address] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 92
    // sdhcRegisters[address]
    $intermediate $W[R_address_76_resized] : $int<7>
    $intermediate $W[R_address_76_scaled] : $int<7>
    $intermediate $W[array_obj_ref_77_final_offset] : $int<7>
    $intermediate $W[array_obj_ref_77_root_address] : $int<7>
    $W[array_obj_ref_77_word_address_0] : $pointer<memory_space_8>
    $W[array_obj_ref_77_data_0] : $int<8>
    // data
    // 	data := sdhcRegisters[address] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 92
    // sdhcRegisters[address]
    &/ [array_obj_ref_77_index_0_resize] (address) (R_address_76_resized) 
    $flowthrough 
    &/ [array_obj_ref_77_index_0_rename] (R_address_76_resized) (R_address_76_scaled) 
    $flowthrough 
    &/ [array_obj_ref_77_index_offset] (R_address_76_scaled) (array_obj_ref_77_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_77_root_address_inst] (array_obj_ref_77_final_offset) (array_obj_ref_77_root_address) 
    $flowthrough 
    &/ [array_obj_ref_77_addr_0] (array_obj_ref_77_root_address) (array_obj_ref_77_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_77_load_0] $from memory_space_8 (array_obj_ref_77_word_address_0) (array_obj_ref_77_data_0) 
    $delay array_obj_ref_77_load_0 5
    &/ [array_obj_ref_77_gather_scatter] (array_obj_ref_77_data_0) (data) 
    $flowthrough 
  }
  // end data-path
  // 	data := sdhcRegisters[address] $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 92
  // sdhcRegisters[address]
  // address
  array_obj_ref_77_index_0_resize <=> (assign_stmt_78/array_obj_ref_77_index_resize_0/index_resize_req) (assign_stmt_78/array_obj_ref_77_index_resize_0/index_resize_ack)
  array_obj_ref_77_index_0_rename <=> (assign_stmt_78/array_obj_ref_77_index_scale_0/scale_rename_req) (assign_stmt_78/array_obj_ref_77_index_scale_0/scale_rename_ack)
  array_obj_ref_77_index_offset <=> (assign_stmt_78/array_obj_ref_77_final_index_sum_regn/req) (assign_stmt_78/array_obj_ref_77_final_index_sum_regn/ack)
  array_obj_ref_77_root_address_inst <=> (assign_stmt_78/array_obj_ref_77_base_plus_offset/sum_rename_req) (assign_stmt_78/array_obj_ref_77_base_plus_offset/sum_rename_ack)
  array_obj_ref_77_addr_0 <=> (assign_stmt_78/array_obj_ref_77_word_addrgen/root_register_req) (assign_stmt_78/array_obj_ref_77_word_addrgen/root_register_ack)
  array_obj_ref_77_gather_scatter <=> (assign_stmt_78/array_obj_ref_77_Update/array_obj_ref_77_Merge/merge_req) (assign_stmt_78/array_obj_ref_77_Update/array_obj_ref_77_Merge/merge_ack)
  array_obj_ref_77_load_0 <=> (assign_stmt_78/array_obj_ref_77_Sample/word_access_start/word_0/rr assign_stmt_78/array_obj_ref_77_Update/word_access_complete/word_0/cr) (assign_stmt_78/array_obj_ref_77_Sample/word_access_start/word_0/ra assign_stmt_78/array_obj_ref_77_Update/word_access_complete/word_0/ca)
}
$module [writeSDHCRegisters] 
{
  $in address:$int<8>
  // can point into 
  data:$int<8>
  // can point into 
  // pipe-declarations for block %writeSDHCRegisters
  //  file .Aa/sdhc.opt.aa, line 94
  // memory-space 8 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_86] 
    {
      // start:  	sdhcRegisters[address] := data $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 99
      // Source expression
      // data
      // Target expression
      // sdhcRegisters[address]
      $T[array_obj_ref_84_sample_start_] 
      $T[array_obj_ref_84_sample_completed_] 
      $T[array_obj_ref_84_update_start_] 
      $T[array_obj_ref_84_update_completed_] 
      $T[array_obj_ref_84_word_address_calculated] 
      $T[array_obj_ref_84_root_address_calculated] 
      $T[array_obj_ref_84_offset_calculated] 
      $T[array_obj_ref_84_index_resized_0] 
      $T[array_obj_ref_84_index_scaled_0] 
      $T[array_obj_ref_84_index_computed_0] 
      // address
      // start: Forward dependencies from address to transition array_obj_ref_84_index_computed_0
      // done: Forward dependencies from address to transition array_obj_ref_84_index_computed_0
      ;;[array_obj_ref_84_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_84_index_computed_0 &-> (array_obj_ref_84_index_resize_0)
      array_obj_ref_84_index_resized_0 <-& (array_obj_ref_84_index_resize_0)
      ;;[array_obj_ref_84_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_84_index_resized_0 &-> (array_obj_ref_84_index_scale_0)
      array_obj_ref_84_index_scaled_0 <-& (array_obj_ref_84_index_scale_0)
      ;;[array_obj_ref_84_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_84_index_scaled_0 &-> (array_obj_ref_84_final_index_sum_regn)
      array_obj_ref_84_offset_calculated <-& (array_obj_ref_84_final_index_sum_regn)
      ;;[array_obj_ref_84_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_84_offset_calculated &-> (array_obj_ref_84_base_plus_offset)
      array_obj_ref_84_root_address_calculated <-& (array_obj_ref_84_base_plus_offset)
      ;;[array_obj_ref_84_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_84_root_address_calculated &-> (array_obj_ref_84_word_addrgen)
      array_obj_ref_84_word_address_calculated <-& (array_obj_ref_84_word_addrgen)
      ;;[array_obj_ref_84_Sample] 
      {
        ;;[array_obj_ref_84_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_84_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_84_sample_start_ <-& (array_obj_ref_84_word_address_calculated)
      array_obj_ref_84_sample_start_ &-> (array_obj_ref_84_Sample)
      array_obj_ref_84_sample_completed_ <-& (array_obj_ref_84_Sample)
      array_obj_ref_84_sample_completed_ &-> ($null)
      array_obj_ref_84_update_start_ &-> (array_obj_ref_84_Update)
      array_obj_ref_84_update_completed_ <-& (array_obj_ref_84_Update)
      // start: Forward dependencies from data to transition array_obj_ref_84_sample_start_
      // done: Forward dependencies from data to transition array_obj_ref_84_sample_start_
      // end:  	sdhcRegisters[address] := data $buffering 1// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_8
      //  array_obj_ref_84 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeSDHCRegisters
    //  file .Aa/sdhc.opt.aa, line 94
    // sdhcRegisters[address]
    $constant $W[array_obj_ref_84_resized_base_address] : $int<7> := _b0000000// 0
    $constant $W[array_obj_ref_84_offset_scale_factor_0] : $int<7> := _b0000001// 1
    $constant $W[array_obj_ref_84_word_offset_0] : $int<7> := _b0000000// 0
    // 	sdhcRegisters[address] := data $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 99
    // sdhcRegisters[address]
    $intermediate $W[R_address_83_resized] : $int<7>
    $intermediate $W[R_address_83_scaled] : $int<7>
    $intermediate $W[array_obj_ref_84_final_offset] : $int<7>
    $intermediate $W[array_obj_ref_84_root_address] : $int<7>
    $W[array_obj_ref_84_word_address_0] : $pointer<memory_space_8>
    $W[array_obj_ref_84_data_0] : $int<8>
    // 	sdhcRegisters[address] := data $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 99
    // sdhcRegisters[address]
    &/ [array_obj_ref_84_index_0_resize] (address) (R_address_83_resized) 
    $flowthrough 
    &/ [array_obj_ref_84_index_0_rename] (R_address_83_resized) (R_address_83_scaled) 
    $flowthrough 
    &/ [array_obj_ref_84_index_offset] (R_address_83_scaled) (array_obj_ref_84_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_84_root_address_inst] (array_obj_ref_84_final_offset) (array_obj_ref_84_root_address) 
    $flowthrough 
    &/ [array_obj_ref_84_addr_0] (array_obj_ref_84_root_address) (array_obj_ref_84_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_84_store_0] $to memory_space_8 (array_obj_ref_84_word_address_0 array_obj_ref_84_data_0) 
    $delay array_obj_ref_84_store_0 5
    &/ [array_obj_ref_84_gather_scatter] (data) (array_obj_ref_84_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	sdhcRegisters[address] := data $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 99
  // data
  // address
  array_obj_ref_84_index_0_resize <=> (assign_stmt_86/array_obj_ref_84_index_resize_0/index_resize_req) (assign_stmt_86/array_obj_ref_84_index_resize_0/index_resize_ack)
  array_obj_ref_84_index_0_rename <=> (assign_stmt_86/array_obj_ref_84_index_scale_0/scale_rename_req) (assign_stmt_86/array_obj_ref_84_index_scale_0/scale_rename_ack)
  array_obj_ref_84_index_offset <=> (assign_stmt_86/array_obj_ref_84_final_index_sum_regn/req) (assign_stmt_86/array_obj_ref_84_final_index_sum_regn/ack)
  array_obj_ref_84_root_address_inst <=> (assign_stmt_86/array_obj_ref_84_base_plus_offset/sum_rename_req) (assign_stmt_86/array_obj_ref_84_base_plus_offset/sum_rename_ack)
  array_obj_ref_84_addr_0 <=> (assign_stmt_86/array_obj_ref_84_word_addrgen/root_register_req) (assign_stmt_86/array_obj_ref_84_word_addrgen/root_register_ack)
  array_obj_ref_84_gather_scatter <=> (assign_stmt_86/array_obj_ref_84_Sample/array_obj_ref_84_Split/split_req) (assign_stmt_86/array_obj_ref_84_Sample/array_obj_ref_84_Split/split_ack)
  array_obj_ref_84_store_0 <=> (assign_stmt_86/array_obj_ref_84_Sample/word_access_start/word_0/rr assign_stmt_86/array_obj_ref_84_Update/word_access_complete/word_0/cr) (assign_stmt_86/array_obj_ref_84_Sample/word_access_start/word_0/ra assign_stmt_86/array_obj_ref_84_Update/word_access_complete/word_0/ca)
}
$module [RW1C] 
{
  $in data:$int<8>
  // can point into 
  address:$int<8>
  // can point into 
  // pipe-declarations for block %RW1C
  //  file .Aa/sdhc.opt.aa, line 101
  // pipe-declarations for block %RW1C%rw1c
  //  file .Aa/sdhc.opt.aa, line 107
  // memory-space 3 is written into.
  // memory-space 4 is written into.
  // memory-space 5 is written into.
  // memory-space 6 is written into.
  // memory-space 3 is read from.
  // memory-space 4 is read from.
  // memory-space 5 is read from.
  // memory-space 6 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_93] 
    {
      // start: 	$call readSDHCRegisters (address ) (current_data ) 
      //  file .Aa/sdhc.opt.aa, line 106
      $T[call_stmt_93_sample_start_] 
      $T[call_stmt_93_sample_completed_] 
      $T[call_stmt_93_update_start_] 
      $T[call_stmt_93_update_completed_] 
      // Call input argument 0
      // address
      // start: Forward dependencies from address to transition call_stmt_93_sample_start_
      // done: Forward dependencies from address to transition call_stmt_93_sample_start_
      ;;[call_stmt_93_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_93_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_93_sample_start_ &-> (call_stmt_93_Sample)
      call_stmt_93_sample_completed_ <-& (call_stmt_93_Sample)
      call_stmt_93_sample_completed_ &-> ($null)
      call_stmt_93_update_start_ &-> (call_stmt_93_Update)
      call_stmt_93_update_completed_ <-& (call_stmt_93_Update)
      // Call output argument 0
      // (as target) current_data
      // start: WAR dependencies for current_data
      // done: WAR dependencies for current_data
      // end: 	$call readSDHCRegisters (address ) (current_data ) 
      // load-store dependencies..
      // memory-space  memory_space_8
      //  call_stmt_93 load
    }
    <>[branch_block_stmt_94] // Branch Block  file .Aa/sdhc.opt.aa, line 107
    {
      $P [branch_block_stmt_94__entry__]
      branch_block_stmt_94__entry__ <-| ($entry)
      $P [branch_block_stmt_94__exit__]
      branch_block_stmt_94__exit__ |-> ($exit)
      $P [assign_stmt_98_to_call_stmt_223__entry__] 
      $P [assign_stmt_98_to_call_stmt_223__exit__] 
      $P [if_stmt_224__entry__] 
      $P [if_stmt_224__exit__] 
      $P [if_stmt_235__entry__] 
      $P [if_stmt_235__exit__] 
      $P [if_stmt_246__entry__] 
      $P [if_stmt_246__exit__] 
      $P [if_stmt_257__entry__] 
      $P [if_stmt_257__exit__] 
      ::[assign_stmt_98_to_call_stmt_223] 
      {
        // start: WAR dependencies for d7
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d7
        // start:  		$volatile d7 := ( $slice data 7 7 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 109
        // volatile! 
        // Source expression
        // ( $slice data 7 7 ) 
        // data
        // Target expression
        // (as target) d7
        // start: WAR dependencies for d7
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d7
        // end:  		$volatile d7 := ( $slice data 7 7 )  $buffering 1
        // start: WAR dependencies for d6
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d6
        // start:  		$volatile d6 := ( $slice data 6 6 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 110
        // volatile! 
        // Source expression
        // ( $slice data 6 6 ) 
        // data
        // Target expression
        // (as target) d6
        // start: WAR dependencies for d6
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d6
        // end:  		$volatile d6 := ( $slice data 6 6 )  $buffering 1
        // start: WAR dependencies for d5
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d5
        // start:  		$volatile d5 := ( $slice data 5 5 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 111
        // volatile! 
        // Source expression
        // ( $slice data 5 5 ) 
        // data
        // Target expression
        // (as target) d5
        // start: WAR dependencies for d5
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d5
        // end:  		$volatile d5 := ( $slice data 5 5 )  $buffering 1
        // start: WAR dependencies for d4
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d4
        // start:  		$volatile d4 := ( $slice data 4 4 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 112
        // volatile! 
        // Source expression
        // ( $slice data 4 4 ) 
        // data
        // Target expression
        // (as target) d4
        // start: WAR dependencies for d4
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d4
        // end:  		$volatile d4 := ( $slice data 4 4 )  $buffering 1
        // start: WAR dependencies for d3
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d3
        // start:  		$volatile d3 := ( $slice data 3 3 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 113
        // volatile! 
        // Source expression
        // ( $slice data 3 3 ) 
        // data
        // Target expression
        // (as target) d3
        // start: WAR dependencies for d3
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d3
        // end:  		$volatile d3 := ( $slice data 3 3 )  $buffering 1
        // start: WAR dependencies for d2
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d2
        // start:  		$volatile d2 := ( $slice data 2 2 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 114
        // volatile! 
        // Source expression
        // ( $slice data 2 2 ) 
        // data
        // Target expression
        // (as target) d2
        // start: WAR dependencies for d2
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d2
        // end:  		$volatile d2 := ( $slice data 2 2 )  $buffering 1
        // start: WAR dependencies for d1
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d1
        // start:  		$volatile d1 := ( $slice data 1 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 115
        // volatile! 
        // Source expression
        // ( $slice data 1 1 ) 
        // data
        // Target expression
        // (as target) d1
        // start: WAR dependencies for d1
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d1
        // end:  		$volatile d1 := ( $slice data 1 1 )  $buffering 1
        // start: WAR dependencies for d0
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d0
        // start:  		$volatile d0 := ( $slice data 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 116
        // volatile! 
        // Source expression
        // ( $slice data 0 0 ) 
        // data
        // Target expression
        // (as target) d0
        // start: WAR dependencies for d0
        // ignored out-of-scope w_root  data : $uint<8> 
        // done: WAR dependencies for d0
        // end:  		$volatile d0 := ( $slice data 0 0 )  $buffering 1
        // start: WAR dependencies for current_d7
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d7
        // start:  		$volatile current_d7 := ( $slice current_data 7 7 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 117
        // volatile! 
        // Source expression
        // ( $slice current_data 7 7 ) 
        // current_data
        // Target expression
        // (as target) current_d7
        // start: WAR dependencies for current_d7
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d7
        // end:  		$volatile current_d7 := ( $slice current_data 7 7 )  $buffering 1
        // start: WAR dependencies for current_d6
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d6
        // start:  		$volatile current_d6 := ( $slice current_data 6 6 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 118
        // volatile! 
        // Source expression
        // ( $slice current_data 6 6 ) 
        // current_data
        // Target expression
        // (as target) current_d6
        // start: WAR dependencies for current_d6
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d6
        // end:  		$volatile current_d6 := ( $slice current_data 6 6 )  $buffering 1
        // start: WAR dependencies for current_d5
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d5
        // start:  		$volatile current_d5 := ( $slice current_data 5 5 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 119
        // volatile! 
        // Source expression
        // ( $slice current_data 5 5 ) 
        // current_data
        // Target expression
        // (as target) current_d5
        // start: WAR dependencies for current_d5
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d5
        // end:  		$volatile current_d5 := ( $slice current_data 5 5 )  $buffering 1
        // start: WAR dependencies for current_d4
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d4
        // start:  		$volatile current_d4 := ( $slice current_data 4 4 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 120
        // volatile! 
        // Source expression
        // ( $slice current_data 4 4 ) 
        // current_data
        // Target expression
        // (as target) current_d4
        // start: WAR dependencies for current_d4
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d4
        // end:  		$volatile current_d4 := ( $slice current_data 4 4 )  $buffering 1
        // start: WAR dependencies for current_d3
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d3
        // start:  		$volatile current_d3 := ( $slice current_data 3 3 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 121
        // volatile! 
        // Source expression
        // ( $slice current_data 3 3 ) 
        // current_data
        // Target expression
        // (as target) current_d3
        // start: WAR dependencies for current_d3
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d3
        // end:  		$volatile current_d3 := ( $slice current_data 3 3 )  $buffering 1
        // start: WAR dependencies for current_d2
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d2
        // start:  		$volatile current_d2 := ( $slice current_data 2 2 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 122
        // volatile! 
        // Source expression
        // ( $slice current_data 2 2 ) 
        // current_data
        // Target expression
        // (as target) current_d2
        // start: WAR dependencies for current_d2
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d2
        // end:  		$volatile current_d2 := ( $slice current_data 2 2 )  $buffering 1
        // start: WAR dependencies for current_d1
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d1
        // start:  		$volatile current_d1 := ( $slice current_data 1 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 123
        // volatile! 
        // Source expression
        // ( $slice current_data 1 1 ) 
        // current_data
        // Target expression
        // (as target) current_d1
        // start: WAR dependencies for current_d1
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d1
        // end:  		$volatile current_d1 := ( $slice current_data 1 1 )  $buffering 1
        // start: WAR dependencies for current_d0
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d0
        // start:  		$volatile current_d0 := ( $slice current_data 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 124
        // volatile! 
        // Source expression
        // ( $slice current_data 0 0 ) 
        // current_data
        // Target expression
        // (as target) current_d0
        // start: WAR dependencies for current_d0
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for current_d0
        // end:  		$volatile current_d0 := ( $slice current_data 0 0 )  $buffering 1
        // start: WAR dependencies for b0
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b0
        // start:  		$volatile b0 := ( $mux d0 ZERO_1  current_d0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 125
        // volatile! 
        // Source expression
        // ( $mux d0 ZERO_1  current_d0 ) 
        // d0
        // current_d0
        // Target expression
        // (as target) b0
        // start: WAR dependencies for b0
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b0
        // end:  		$volatile b0 := ( $mux d0 ZERO_1  current_d0 )  $buffering 1
        // start: WAR dependencies for b1
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b1
        // start:  		$volatile b1 := ( $mux d1 ZERO_1  current_d1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 126
        // volatile! 
        // Source expression
        // ( $mux d1 ZERO_1  current_d1 ) 
        // d1
        // current_d1
        // Target expression
        // (as target) b1
        // start: WAR dependencies for b1
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b1
        // end:  		$volatile b1 := ( $mux d1 ZERO_1  current_d1 )  $buffering 1
        // start: WAR dependencies for b2
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b2
        // start:  		$volatile b2 := ( $mux d2 ZERO_1  current_d2 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 127
        // volatile! 
        // Source expression
        // ( $mux d2 ZERO_1  current_d2 ) 
        // d2
        // current_d2
        // Target expression
        // (as target) b2
        // start: WAR dependencies for b2
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b2
        // end:  		$volatile b2 := ( $mux d2 ZERO_1  current_d2 )  $buffering 1
        // start: WAR dependencies for b3
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b3
        // start:  		$volatile b3 := ( $mux d3 ZERO_1  current_d3 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 128
        // volatile! 
        // Source expression
        // ( $mux d3 ZERO_1  current_d3 ) 
        // d3
        // current_d3
        // Target expression
        // (as target) b3
        // start: WAR dependencies for b3
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b3
        // end:  		$volatile b3 := ( $mux d3 ZERO_1  current_d3 )  $buffering 1
        // start: WAR dependencies for b4
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b4
        // start:  		$volatile b4 := ( $mux d4 ZERO_1  current_d4 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 129
        // volatile! 
        // Source expression
        // ( $mux d4 ZERO_1  current_d4 ) 
        // d4
        // current_d4
        // Target expression
        // (as target) b4
        // start: WAR dependencies for b4
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b4
        // end:  		$volatile b4 := ( $mux d4 ZERO_1  current_d4 )  $buffering 1
        // start: WAR dependencies for b5
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b5
        // start:  		$volatile b5 := ( $mux d5 ZERO_1  current_d5 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 130
        // volatile! 
        // Source expression
        // ( $mux d5 ZERO_1  current_d5 ) 
        // d5
        // current_d5
        // Target expression
        // (as target) b5
        // start: WAR dependencies for b5
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b5
        // end:  		$volatile b5 := ( $mux d5 ZERO_1  current_d5 )  $buffering 1
        // start: WAR dependencies for b6
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b6
        // start:  		$volatile b6 := ( $mux d6 ZERO_1  current_d6 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 131
        // volatile! 
        // Source expression
        // ( $mux d6 ZERO_1  current_d6 ) 
        // d6
        // current_d6
        // Target expression
        // (as target) b6
        // start: WAR dependencies for b6
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b6
        // end:  		$volatile b6 := ( $mux d6 ZERO_1  current_d6 )  $buffering 1
        // start: WAR dependencies for b7
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b7
        // start:  		$volatile b7 := ( $mux d7 ZERO_1  current_d7 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 132
        // volatile! 
        // Source expression
        // ( $mux d7 ZERO_1  current_d7 ) 
        // d7
        // current_d7
        // Target expression
        // (as target) b7
        // start: WAR dependencies for b7
        // ignored out-of-scope w_root  data : $uint<8> 
        // ignored out-of-scope w_root 	$call readSDHCRegisters (address ) (current_data ) 
        // done: WAR dependencies for b7
        // end:  		$volatile b7 := ( $mux d7 ZERO_1  current_d7 )  $buffering 1
        // start: 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
        //  file .Aa/sdhc.opt.aa, line 133
        $T[call_stmt_223_sample_start_] 
        $T[call_stmt_223_sample_completed_] 
        $T[call_stmt_223_update_start_] 
        $T[call_stmt_223_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0)))
        // ((b7 && b6) && (b5 && b4))
        // (b7 && b6)
        // b7
        // b6
        // (b5 && b4)
        // b5
        // b4
        // ((b3 && b2) && (b1 && b0))
        // (b3 && b2)
        // b3
        // b2
        // (b1 && b0)
        // b1
        // b0
        // start: Forward dependencies from address to transition call_stmt_223_sample_start_
        // done: Forward dependencies from address to transition call_stmt_223_sample_start_
        // start: Forward dependencies from (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) to transition call_stmt_223_sample_start_
        // done: Forward dependencies from (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) to transition call_stmt_223_sample_start_
        ;;[call_stmt_223_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_223_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_223_sample_start_ &-> (call_stmt_223_Sample)
        call_stmt_223_sample_completed_ <-& (call_stmt_223_Sample)
        call_stmt_223_sample_completed_ &-> ($null)
        call_stmt_223_update_start_ &-> (call_stmt_223_Update)
        call_stmt_223_update_completed_ <-& (call_stmt_223_Update)
        // end: 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_223 store
      }
      assign_stmt_98_to_call_stmt_223__entry__ |-> (assign_stmt_98_to_call_stmt_223)
      assign_stmt_98_to_call_stmt_223__exit__ <-| (assign_stmt_98_to_call_stmt_223)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_224_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_224__entry__ |-> (if_stmt_224_dead_link)
      if_stmt_224__exit__ <-| (if_stmt_224_dead_link)
      ;;[if_stmt_224_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (address == 48 )
        ;;[EQ_u8_u1_227] 
        {
          // binary expression 
          ||[EQ_u8_u1_227_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_224__entry__ |-> (if_stmt_224_eval_test)
      $P [EQ_u8_u1_227_place]
      EQ_u8_u1_227_place <-| (if_stmt_224_eval_test)
      ;;[if_stmt_224_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_224_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_227_place |-> (if_stmt_224_if_link if_stmt_224_else_link)
      $P [assign_stmt_233__entry__] 
      $P [assign_stmt_233__exit__] 
      ::[assign_stmt_233] 
      {
        // start:  			normalInterruptFlag1 := (( ~ data ) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 135
        // Source expression
        // (( ~ data ) & normalInterruptFlag1)
        $T[AND_u8_u8_232_sample_start_] 
        $T[AND_u8_u8_232_sample_completed_] 
        $T[AND_u8_u8_232_update_start_] 
        $T[AND_u8_u8_232_update_completed_] 
        // ( ~ data )
        // data
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_231_sample_start_] 
        $T[LOAD_normalInterruptFlag1_231_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_231_update_start_] 
        $T[LOAD_normalInterruptFlag1_231_update_completed_] 
        $T[LOAD_normalInterruptFlag1_231_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_231_root_address_calculated] 
        LOAD_normalInterruptFlag1_231_word_address_calculated <-& (LOAD_normalInterruptFlag1_231_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_231_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_231_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_231_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_231_sample_start_ <-& (LOAD_normalInterruptFlag1_231_word_address_calculated)
        LOAD_normalInterruptFlag1_231_sample_start_ &-> (LOAD_normalInterruptFlag1_231_Sample)
        LOAD_normalInterruptFlag1_231_sample_completed_ <-& (LOAD_normalInterruptFlag1_231_Sample)
        LOAD_normalInterruptFlag1_231_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_231_update_start_ &-> (LOAD_normalInterruptFlag1_231_Update)
        LOAD_normalInterruptFlag1_231_update_completed_ <-& (LOAD_normalInterruptFlag1_231_Update)
        // start: Forward dependencies from ( ~ data ) to transition AND_u8_u8_232_sample_start_
        // done: Forward dependencies from ( ~ data ) to transition AND_u8_u8_232_sample_start_
        // start: Forward dependencies from normalInterruptFlag1 to transition AND_u8_u8_232_sample_start_
        AND_u8_u8_232_sample_start_ <-& (LOAD_normalInterruptFlag1_231_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition AND_u8_u8_232_sample_start_
        ;;[AND_u8_u8_232_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_232_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_232_sample_start_ &-> (AND_u8_u8_232_Sample)
        AND_u8_u8_232_sample_completed_ <-& (AND_u8_u8_232_Sample)
        AND_u8_u8_232_sample_completed_ &-> ($null)
        AND_u8_u8_232_update_start_ &-> (AND_u8_u8_232_Update)
        AND_u8_u8_232_update_completed_ <-& (AND_u8_u8_232_Update)
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_228_sample_start_] 
        $T[STORE_normalInterruptFlag1_228_sample_completed_] 
        $T[STORE_normalInterruptFlag1_228_update_start_] 
        $T[STORE_normalInterruptFlag1_228_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_228_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_228_root_address_calculated] 
        STORE_normalInterruptFlag1_228_word_address_calculated <-& (STORE_normalInterruptFlag1_228_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_228_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_228_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_228_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_228_sample_start_ <-& (STORE_normalInterruptFlag1_228_word_address_calculated)
        STORE_normalInterruptFlag1_228_sample_start_ &-> (STORE_normalInterruptFlag1_228_Sample)
        STORE_normalInterruptFlag1_228_sample_completed_ <-& (STORE_normalInterruptFlag1_228_Sample)
        STORE_normalInterruptFlag1_228_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_228_update_start_ &-> (STORE_normalInterruptFlag1_228_Update)
        STORE_normalInterruptFlag1_228_update_completed_ <-& (STORE_normalInterruptFlag1_228_Update)
        // start: Forward dependencies from (( ~ data ) & normalInterruptFlag1) to transition STORE_normalInterruptFlag1_228_sample_start_
        STORE_normalInterruptFlag1_228_sample_start_ <-& (AND_u8_u8_232_update_completed_)
        // done: Forward dependencies from (( ~ data ) & normalInterruptFlag1) to transition STORE_normalInterruptFlag1_228_sample_start_
        // end:  			normalInterruptFlag1 := (( ~ data ) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_231 load
        //  STORE_normalInterruptFlag1_228 store
        $T [LOAD_normalInterruptFlag1_231_STORE_normalInterruptFlag1_228_delay] $delay
        // LOAD_normalInterruptFlag1_231(load) -> STORE_normalInterruptFlag1_228(store)
        STORE_normalInterruptFlag1_228_sample_start_ <-& (LOAD_normalInterruptFlag1_231_STORE_normalInterruptFlag1_228_delay)
        LOAD_normalInterruptFlag1_231_STORE_normalInterruptFlag1_228_delay <-& (LOAD_normalInterruptFlag1_231_sample_completed_)
      }
      assign_stmt_233__entry__ |-> (assign_stmt_233)
      assign_stmt_233__exit__ <-| (assign_stmt_233)
      assign_stmt_233__entry__ <-| (if_stmt_224_if_link)
      assign_stmt_233__exit__ |-> (if_stmt_224__exit__)
      if_stmt_224__exit__ <-| (if_stmt_224_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_235_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_235__entry__ |-> (if_stmt_235_dead_link)
      if_stmt_235__exit__ <-| (if_stmt_235_dead_link)
      ;;[if_stmt_235_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (address == 49 )
        ;;[EQ_u8_u1_238] 
        {
          // binary expression 
          ||[EQ_u8_u1_238_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_235__entry__ |-> (if_stmt_235_eval_test)
      $P [EQ_u8_u1_238_place]
      EQ_u8_u1_238_place <-| (if_stmt_235_eval_test)
      ;;[if_stmt_235_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_235_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_238_place |-> (if_stmt_235_if_link if_stmt_235_else_link)
      $P [assign_stmt_244__entry__] 
      $P [assign_stmt_244__exit__] 
      ::[assign_stmt_244] 
      {
        // start:  			normalInterruptFlag2 := (( ~ data ) & normalInterruptFlag2) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 138
        // Source expression
        // (( ~ data ) & normalInterruptFlag2)
        $T[AND_u8_u8_243_sample_start_] 
        $T[AND_u8_u8_243_sample_completed_] 
        $T[AND_u8_u8_243_update_start_] 
        $T[AND_u8_u8_243_update_completed_] 
        // ( ~ data )
        // data
        // normalInterruptFlag2
        $T[LOAD_normalInterruptFlag2_242_sample_start_] 
        $T[LOAD_normalInterruptFlag2_242_sample_completed_] 
        $T[LOAD_normalInterruptFlag2_242_update_start_] 
        $T[LOAD_normalInterruptFlag2_242_update_completed_] 
        $T[LOAD_normalInterruptFlag2_242_word_address_calculated] 
        $T[LOAD_normalInterruptFlag2_242_root_address_calculated] 
        LOAD_normalInterruptFlag2_242_word_address_calculated <-& (LOAD_normalInterruptFlag2_242_root_address_calculated)
        ;;[LOAD_normalInterruptFlag2_242_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag2_242_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag2_242_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag2_242_sample_start_ <-& (LOAD_normalInterruptFlag2_242_word_address_calculated)
        LOAD_normalInterruptFlag2_242_sample_start_ &-> (LOAD_normalInterruptFlag2_242_Sample)
        LOAD_normalInterruptFlag2_242_sample_completed_ <-& (LOAD_normalInterruptFlag2_242_Sample)
        LOAD_normalInterruptFlag2_242_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag2_242_update_start_ &-> (LOAD_normalInterruptFlag2_242_Update)
        LOAD_normalInterruptFlag2_242_update_completed_ <-& (LOAD_normalInterruptFlag2_242_Update)
        // start: Forward dependencies from ( ~ data ) to transition AND_u8_u8_243_sample_start_
        // done: Forward dependencies from ( ~ data ) to transition AND_u8_u8_243_sample_start_
        // start: Forward dependencies from normalInterruptFlag2 to transition AND_u8_u8_243_sample_start_
        AND_u8_u8_243_sample_start_ <-& (LOAD_normalInterruptFlag2_242_update_completed_)
        // done: Forward dependencies from normalInterruptFlag2 to transition AND_u8_u8_243_sample_start_
        ;;[AND_u8_u8_243_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_243_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_243_sample_start_ &-> (AND_u8_u8_243_Sample)
        AND_u8_u8_243_sample_completed_ <-& (AND_u8_u8_243_Sample)
        AND_u8_u8_243_sample_completed_ &-> ($null)
        AND_u8_u8_243_update_start_ &-> (AND_u8_u8_243_Update)
        AND_u8_u8_243_update_completed_ <-& (AND_u8_u8_243_Update)
        // Target expression
        // (as target) normalInterruptFlag2
        $T[STORE_normalInterruptFlag2_239_sample_start_] 
        $T[STORE_normalInterruptFlag2_239_sample_completed_] 
        $T[STORE_normalInterruptFlag2_239_update_start_] 
        $T[STORE_normalInterruptFlag2_239_update_completed_] 
        // normalInterruptFlag2
        $T[STORE_normalInterruptFlag2_239_word_address_calculated] 
        $T[STORE_normalInterruptFlag2_239_root_address_calculated] 
        STORE_normalInterruptFlag2_239_word_address_calculated <-& (STORE_normalInterruptFlag2_239_root_address_calculated)
        ;;[STORE_normalInterruptFlag2_239_Sample] 
        {
          ;;[STORE_normalInterruptFlag2_239_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag2_239_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag2_239_sample_start_ <-& (STORE_normalInterruptFlag2_239_word_address_calculated)
        STORE_normalInterruptFlag2_239_sample_start_ &-> (STORE_normalInterruptFlag2_239_Sample)
        STORE_normalInterruptFlag2_239_sample_completed_ <-& (STORE_normalInterruptFlag2_239_Sample)
        STORE_normalInterruptFlag2_239_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag2_239_update_start_ &-> (STORE_normalInterruptFlag2_239_Update)
        STORE_normalInterruptFlag2_239_update_completed_ <-& (STORE_normalInterruptFlag2_239_Update)
        // start: Forward dependencies from (( ~ data ) & normalInterruptFlag2) to transition STORE_normalInterruptFlag2_239_sample_start_
        STORE_normalInterruptFlag2_239_sample_start_ <-& (AND_u8_u8_243_update_completed_)
        // done: Forward dependencies from (( ~ data ) & normalInterruptFlag2) to transition STORE_normalInterruptFlag2_239_sample_start_
        // end:  			normalInterruptFlag2 := (( ~ data ) & normalInterruptFlag2) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_6
        //  LOAD_normalInterruptFlag2_242 load
        //  STORE_normalInterruptFlag2_239 store
        $T [LOAD_normalInterruptFlag2_242_STORE_normalInterruptFlag2_239_delay] $delay
        // LOAD_normalInterruptFlag2_242(load) -> STORE_normalInterruptFlag2_239(store)
        STORE_normalInterruptFlag2_239_sample_start_ <-& (LOAD_normalInterruptFlag2_242_STORE_normalInterruptFlag2_239_delay)
        LOAD_normalInterruptFlag2_242_STORE_normalInterruptFlag2_239_delay <-& (LOAD_normalInterruptFlag2_242_sample_completed_)
      }
      assign_stmt_244__entry__ |-> (assign_stmt_244)
      assign_stmt_244__exit__ <-| (assign_stmt_244)
      assign_stmt_244__entry__ <-| (if_stmt_235_if_link)
      assign_stmt_244__exit__ |-> (if_stmt_235__exit__)
      if_stmt_235__exit__ <-| (if_stmt_235_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_246_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_246__entry__ |-> (if_stmt_246_dead_link)
      if_stmt_246__exit__ <-| (if_stmt_246_dead_link)
      ;;[if_stmt_246_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (address == 50 )
        ;;[EQ_u8_u1_249] 
        {
          // binary expression 
          ||[EQ_u8_u1_249_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_246__entry__ |-> (if_stmt_246_eval_test)
      $P [EQ_u8_u1_249_place]
      EQ_u8_u1_249_place <-| (if_stmt_246_eval_test)
      ;;[if_stmt_246_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_246_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_249_place |-> (if_stmt_246_if_link if_stmt_246_else_link)
      $P [assign_stmt_255__entry__] 
      $P [assign_stmt_255__exit__] 
      ::[assign_stmt_255] 
      {
        // start:  			errorInterruptFlag1 := (( ~ data ) & errorInterruptFlag1) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 141
        // Source expression
        // (( ~ data ) & errorInterruptFlag1)
        $T[AND_u8_u8_254_sample_start_] 
        $T[AND_u8_u8_254_sample_completed_] 
        $T[AND_u8_u8_254_update_start_] 
        $T[AND_u8_u8_254_update_completed_] 
        // ( ~ data )
        // data
        // errorInterruptFlag1
        $T[LOAD_errorInterruptFlag1_253_sample_start_] 
        $T[LOAD_errorInterruptFlag1_253_sample_completed_] 
        $T[LOAD_errorInterruptFlag1_253_update_start_] 
        $T[LOAD_errorInterruptFlag1_253_update_completed_] 
        $T[LOAD_errorInterruptFlag1_253_word_address_calculated] 
        $T[LOAD_errorInterruptFlag1_253_root_address_calculated] 
        LOAD_errorInterruptFlag1_253_word_address_calculated <-& (LOAD_errorInterruptFlag1_253_root_address_calculated)
        ;;[LOAD_errorInterruptFlag1_253_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag1_253_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag1_253_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag1_253_sample_start_ <-& (LOAD_errorInterruptFlag1_253_word_address_calculated)
        LOAD_errorInterruptFlag1_253_sample_start_ &-> (LOAD_errorInterruptFlag1_253_Sample)
        LOAD_errorInterruptFlag1_253_sample_completed_ <-& (LOAD_errorInterruptFlag1_253_Sample)
        LOAD_errorInterruptFlag1_253_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag1_253_update_start_ &-> (LOAD_errorInterruptFlag1_253_Update)
        LOAD_errorInterruptFlag1_253_update_completed_ <-& (LOAD_errorInterruptFlag1_253_Update)
        // start: Forward dependencies from ( ~ data ) to transition AND_u8_u8_254_sample_start_
        // done: Forward dependencies from ( ~ data ) to transition AND_u8_u8_254_sample_start_
        // start: Forward dependencies from errorInterruptFlag1 to transition AND_u8_u8_254_sample_start_
        AND_u8_u8_254_sample_start_ <-& (LOAD_errorInterruptFlag1_253_update_completed_)
        // done: Forward dependencies from errorInterruptFlag1 to transition AND_u8_u8_254_sample_start_
        ;;[AND_u8_u8_254_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_254_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_254_sample_start_ &-> (AND_u8_u8_254_Sample)
        AND_u8_u8_254_sample_completed_ <-& (AND_u8_u8_254_Sample)
        AND_u8_u8_254_sample_completed_ &-> ($null)
        AND_u8_u8_254_update_start_ &-> (AND_u8_u8_254_Update)
        AND_u8_u8_254_update_completed_ <-& (AND_u8_u8_254_Update)
        // Target expression
        // (as target) errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_250_sample_start_] 
        $T[STORE_errorInterruptFlag1_250_sample_completed_] 
        $T[STORE_errorInterruptFlag1_250_update_start_] 
        $T[STORE_errorInterruptFlag1_250_update_completed_] 
        // errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_250_word_address_calculated] 
        $T[STORE_errorInterruptFlag1_250_root_address_calculated] 
        STORE_errorInterruptFlag1_250_word_address_calculated <-& (STORE_errorInterruptFlag1_250_root_address_calculated)
        ;;[STORE_errorInterruptFlag1_250_Sample] 
        {
          ;;[STORE_errorInterruptFlag1_250_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag1_250_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag1_250_sample_start_ <-& (STORE_errorInterruptFlag1_250_word_address_calculated)
        STORE_errorInterruptFlag1_250_sample_start_ &-> (STORE_errorInterruptFlag1_250_Sample)
        STORE_errorInterruptFlag1_250_sample_completed_ <-& (STORE_errorInterruptFlag1_250_Sample)
        STORE_errorInterruptFlag1_250_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag1_250_update_start_ &-> (STORE_errorInterruptFlag1_250_Update)
        STORE_errorInterruptFlag1_250_update_completed_ <-& (STORE_errorInterruptFlag1_250_Update)
        // start: Forward dependencies from (( ~ data ) & errorInterruptFlag1) to transition STORE_errorInterruptFlag1_250_sample_start_
        STORE_errorInterruptFlag1_250_sample_start_ <-& (AND_u8_u8_254_update_completed_)
        // done: Forward dependencies from (( ~ data ) & errorInterruptFlag1) to transition STORE_errorInterruptFlag1_250_sample_start_
        // end:  			errorInterruptFlag1 := (( ~ data ) & errorInterruptFlag1) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  LOAD_errorInterruptFlag1_253 load
        //  STORE_errorInterruptFlag1_250 store
        $T [LOAD_errorInterruptFlag1_253_STORE_errorInterruptFlag1_250_delay] $delay
        // LOAD_errorInterruptFlag1_253(load) -> STORE_errorInterruptFlag1_250(store)
        STORE_errorInterruptFlag1_250_sample_start_ <-& (LOAD_errorInterruptFlag1_253_STORE_errorInterruptFlag1_250_delay)
        LOAD_errorInterruptFlag1_253_STORE_errorInterruptFlag1_250_delay <-& (LOAD_errorInterruptFlag1_253_sample_completed_)
      }
      assign_stmt_255__entry__ |-> (assign_stmt_255)
      assign_stmt_255__exit__ <-| (assign_stmt_255)
      assign_stmt_255__entry__ <-| (if_stmt_246_if_link)
      assign_stmt_255__exit__ |-> (if_stmt_246__exit__)
      if_stmt_246__exit__ <-| (if_stmt_246_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_257_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_257__entry__ |-> (if_stmt_257_dead_link)
      if_stmt_257__exit__ <-| (if_stmt_257_dead_link)
      ;;[if_stmt_257_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (address == 51 )
        ;;[EQ_u8_u1_260] 
        {
          // binary expression 
          ||[EQ_u8_u1_260_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_257__entry__ |-> (if_stmt_257_eval_test)
      $P [EQ_u8_u1_260_place]
      EQ_u8_u1_260_place <-| (if_stmt_257_eval_test)
      ;;[if_stmt_257_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_257_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_260_place |-> (if_stmt_257_if_link if_stmt_257_else_link)
      $P [assign_stmt_266__entry__] 
      $P [assign_stmt_266__exit__] 
      ::[assign_stmt_266] 
      {
        // start:  			errorInterruptFlag2 := (( ~ data ) & errorInterruptFlag2) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 144
        // Source expression
        // (( ~ data ) & errorInterruptFlag2)
        $T[AND_u8_u8_265_sample_start_] 
        $T[AND_u8_u8_265_sample_completed_] 
        $T[AND_u8_u8_265_update_start_] 
        $T[AND_u8_u8_265_update_completed_] 
        // ( ~ data )
        // data
        // errorInterruptFlag2
        $T[LOAD_errorInterruptFlag2_264_sample_start_] 
        $T[LOAD_errorInterruptFlag2_264_sample_completed_] 
        $T[LOAD_errorInterruptFlag2_264_update_start_] 
        $T[LOAD_errorInterruptFlag2_264_update_completed_] 
        $T[LOAD_errorInterruptFlag2_264_word_address_calculated] 
        $T[LOAD_errorInterruptFlag2_264_root_address_calculated] 
        LOAD_errorInterruptFlag2_264_word_address_calculated <-& (LOAD_errorInterruptFlag2_264_root_address_calculated)
        ;;[LOAD_errorInterruptFlag2_264_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag2_264_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag2_264_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag2_264_sample_start_ <-& (LOAD_errorInterruptFlag2_264_word_address_calculated)
        LOAD_errorInterruptFlag2_264_sample_start_ &-> (LOAD_errorInterruptFlag2_264_Sample)
        LOAD_errorInterruptFlag2_264_sample_completed_ <-& (LOAD_errorInterruptFlag2_264_Sample)
        LOAD_errorInterruptFlag2_264_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag2_264_update_start_ &-> (LOAD_errorInterruptFlag2_264_Update)
        LOAD_errorInterruptFlag2_264_update_completed_ <-& (LOAD_errorInterruptFlag2_264_Update)
        // start: Forward dependencies from ( ~ data ) to transition AND_u8_u8_265_sample_start_
        // done: Forward dependencies from ( ~ data ) to transition AND_u8_u8_265_sample_start_
        // start: Forward dependencies from errorInterruptFlag2 to transition AND_u8_u8_265_sample_start_
        AND_u8_u8_265_sample_start_ <-& (LOAD_errorInterruptFlag2_264_update_completed_)
        // done: Forward dependencies from errorInterruptFlag2 to transition AND_u8_u8_265_sample_start_
        ;;[AND_u8_u8_265_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_265_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_265_sample_start_ &-> (AND_u8_u8_265_Sample)
        AND_u8_u8_265_sample_completed_ <-& (AND_u8_u8_265_Sample)
        AND_u8_u8_265_sample_completed_ &-> ($null)
        AND_u8_u8_265_update_start_ &-> (AND_u8_u8_265_Update)
        AND_u8_u8_265_update_completed_ <-& (AND_u8_u8_265_Update)
        // Target expression
        // (as target) errorInterruptFlag2
        $T[STORE_errorInterruptFlag2_261_sample_start_] 
        $T[STORE_errorInterruptFlag2_261_sample_completed_] 
        $T[STORE_errorInterruptFlag2_261_update_start_] 
        $T[STORE_errorInterruptFlag2_261_update_completed_] 
        // errorInterruptFlag2
        $T[STORE_errorInterruptFlag2_261_word_address_calculated] 
        $T[STORE_errorInterruptFlag2_261_root_address_calculated] 
        STORE_errorInterruptFlag2_261_word_address_calculated <-& (STORE_errorInterruptFlag2_261_root_address_calculated)
        ;;[STORE_errorInterruptFlag2_261_Sample] 
        {
          ;;[STORE_errorInterruptFlag2_261_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag2_261_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag2_261_sample_start_ <-& (STORE_errorInterruptFlag2_261_word_address_calculated)
        STORE_errorInterruptFlag2_261_sample_start_ &-> (STORE_errorInterruptFlag2_261_Sample)
        STORE_errorInterruptFlag2_261_sample_completed_ <-& (STORE_errorInterruptFlag2_261_Sample)
        STORE_errorInterruptFlag2_261_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag2_261_update_start_ &-> (STORE_errorInterruptFlag2_261_Update)
        STORE_errorInterruptFlag2_261_update_completed_ <-& (STORE_errorInterruptFlag2_261_Update)
        // start: Forward dependencies from (( ~ data ) & errorInterruptFlag2) to transition STORE_errorInterruptFlag2_261_sample_start_
        STORE_errorInterruptFlag2_261_sample_start_ <-& (AND_u8_u8_265_update_completed_)
        // done: Forward dependencies from (( ~ data ) & errorInterruptFlag2) to transition STORE_errorInterruptFlag2_261_sample_start_
        // end:  			errorInterruptFlag2 := (( ~ data ) & errorInterruptFlag2) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_4
        //  LOAD_errorInterruptFlag2_264 load
        //  STORE_errorInterruptFlag2_261 store
        $T [LOAD_errorInterruptFlag2_264_STORE_errorInterruptFlag2_261_delay] $delay
        // LOAD_errorInterruptFlag2_264(load) -> STORE_errorInterruptFlag2_261(store)
        STORE_errorInterruptFlag2_261_sample_start_ <-& (LOAD_errorInterruptFlag2_264_STORE_errorInterruptFlag2_261_delay)
        LOAD_errorInterruptFlag2_264_STORE_errorInterruptFlag2_261_delay <-& (LOAD_errorInterruptFlag2_264_sample_completed_)
      }
      assign_stmt_266__entry__ |-> (assign_stmt_266)
      assign_stmt_266__exit__ <-| (assign_stmt_266)
      assign_stmt_266__entry__ <-| (if_stmt_257_if_link)
      assign_stmt_266__exit__ |-> (if_stmt_257__exit__)
      if_stmt_257__exit__ <-| (if_stmt_257_else_link)
      assign_stmt_98_to_call_stmt_223__entry__ <-| (branch_block_stmt_94__entry__)
      if_stmt_224__entry__ <-| (assign_stmt_98_to_call_stmt_223__exit__)
      if_stmt_235__entry__ <-| (if_stmt_224__exit__)
      if_stmt_246__entry__ <-| (if_stmt_235__exit__)
      if_stmt_257__entry__ <-| (if_stmt_246__exit__)
      if_stmt_257__exit__ |-> (branch_block_stmt_94__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %RW1C%rw1c
    //  file .Aa/sdhc.opt.aa, line 107
    // constant-object-declarations for block %RW1C
    //  file .Aa/sdhc.opt.aa, line 101
    // 	$call readSDHCRegisters (address ) (current_data ) 
    //  file .Aa/sdhc.opt.aa, line 106
    // constant-declarations for block %RW1C%rw1c
    //  file .Aa/sdhc.opt.aa, line 107
    // ( $mux d0 ZERO_1  current_d0 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_161_wire_constant] : $int<1> := _b0// 0
    // ( $mux d1 ZERO_1  current_d1 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_167_wire_constant] : $int<1> := _b0// 0
    // ( $mux d2 ZERO_1  current_d2 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_173_wire_constant] : $int<1> := _b0// 0
    // ( $mux d3 ZERO_1  current_d3 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_179_wire_constant] : $int<1> := _b0// 0
    // ( $mux d4 ZERO_1  current_d4 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_185_wire_constant] : $int<1> := _b0// 0
    // ( $mux d5 ZERO_1  current_d5 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_191_wire_constant] : $int<1> := _b0// 0
    // ( $mux d6 ZERO_1  current_d6 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_197_wire_constant] : $int<1> := _b0// 0
    // ( $mux d7 ZERO_1  current_d7 ) 
    // ZERO_1
    $constant $W[R_ZERO_1_203_wire_constant] : $int<1> := _b0// 0
    // 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
    //  file .Aa/sdhc.opt.aa, line 133
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 48 
    $constant $W[konst_226_wire_constant] : $int<8> := _b00110000// 48
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_231_word_address_0] : $pointer<memory_space_5> := _b0
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_228_word_address_0] : $pointer<memory_space_5> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 49 
    $constant $W[konst_237_wire_constant] : $int<8> := _b00110001// 49
    // normalInterruptFlag2
    $constant $W[LOAD_normalInterruptFlag2_242_word_address_0] : $pointer<memory_space_6> := _b0
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_239_word_address_0] : $pointer<memory_space_6> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 50 
    $constant $W[konst_248_wire_constant] : $int<8> := _b00110010// 50
    // errorInterruptFlag1
    $constant $W[LOAD_errorInterruptFlag1_253_word_address_0] : $pointer<memory_space_3> := _b0
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_250_word_address_0] : $pointer<memory_space_3> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 51 
    $constant $W[konst_259_wire_constant] : $int<8> := _b00110011// 51
    // errorInterruptFlag2
    $constant $W[LOAD_errorInterruptFlag2_264_word_address_0] : $pointer<memory_space_4> := _b0
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_261_word_address_0] : $pointer<memory_space_4> := _b0
    // 	$call readSDHCRegisters (address ) (current_data ) 
    //  file .Aa/sdhc.opt.aa, line 106
    // current_data
    $W[current_data_93] : $int<8>
    // block %RW1C%rw1c
    //  file .Aa/sdhc.opt.aa, line 107
    // 		$volatile d7 := ( $slice data 7 7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 109
    // d7
    $W[d7_98] : $int<1>
    // 		$volatile d6 := ( $slice data 6 6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 110
    // d6
    $W[d6_102] : $int<1>
    // 		$volatile d5 := ( $slice data 5 5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 111
    // d5
    $W[d5_106] : $int<1>
    // 		$volatile d4 := ( $slice data 4 4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 112
    // d4
    $W[d4_110] : $int<1>
    // 		$volatile d3 := ( $slice data 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 113
    // d3
    $W[d3_114] : $int<1>
    // 		$volatile d2 := ( $slice data 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 114
    // d2
    $W[d2_118] : $int<1>
    // 		$volatile d1 := ( $slice data 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 115
    // d1
    $W[d1_122] : $int<1>
    // 		$volatile d0 := ( $slice data 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 116
    // d0
    $W[d0_126] : $int<1>
    // 		$volatile current_d7 := ( $slice current_data 7 7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 117
    // current_d7
    $W[current_d7_130] : $int<1>
    // 		$volatile current_d6 := ( $slice current_data 6 6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 118
    // current_d6
    $W[current_d6_134] : $int<1>
    // 		$volatile current_d5 := ( $slice current_data 5 5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 119
    // current_d5
    $W[current_d5_138] : $int<1>
    // 		$volatile current_d4 := ( $slice current_data 4 4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 120
    // current_d4
    $W[current_d4_142] : $int<1>
    // 		$volatile current_d3 := ( $slice current_data 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 121
    // current_d3
    $W[current_d3_146] : $int<1>
    // 		$volatile current_d2 := ( $slice current_data 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 122
    // current_d2
    $W[current_d2_150] : $int<1>
    // 		$volatile current_d1 := ( $slice current_data 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 123
    // current_d1
    $W[current_d1_154] : $int<1>
    // 		$volatile current_d0 := ( $slice current_data 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 124
    // current_d0
    $W[current_d0_158] : $int<1>
    // 		$volatile b0 := ( $mux d0 ZERO_1  current_d0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 125
    // b0
    $W[b0_164] : $int<1>
    // 		$volatile b1 := ( $mux d1 ZERO_1  current_d1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 126
    // b1
    $W[b1_170] : $int<1>
    // 		$volatile b2 := ( $mux d2 ZERO_1  current_d2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 127
    // b2
    $W[b2_176] : $int<1>
    // 		$volatile b3 := ( $mux d3 ZERO_1  current_d3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 128
    // b3
    $W[b3_182] : $int<1>
    // 		$volatile b4 := ( $mux d4 ZERO_1  current_d4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 129
    // b4
    $W[b4_188] : $int<1>
    // 		$volatile b5 := ( $mux d5 ZERO_1  current_d5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 130
    // b5
    $W[b5_194] : $int<1>
    // 		$volatile b6 := ( $mux d6 ZERO_1  current_d6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 131
    // b6
    $W[b6_200] : $int<1>
    // 		$volatile b7 := ( $mux d7 ZERO_1  current_d7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 132
    // b7
    $W[b7_206] : $int<1>
    // 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
    //  file .Aa/sdhc.opt.aa, line 133
    // (b7 && b6)
    $intermediate $W[CONCAT_u1_u2_210_wire] : $int<2>
    // (b5 && b4)
    $intermediate $W[CONCAT_u1_u2_213_wire] : $int<2>
    // ((b7 && b6) && (b5 && b4))
    $intermediate $W[CONCAT_u2_u4_214_wire] : $int<4>
    // (b3 && b2)
    $intermediate $W[CONCAT_u1_u2_217_wire] : $int<2>
    // (b1 && b0)
    $intermediate $W[CONCAT_u1_u2_220_wire] : $int<2>
    // ((b3 && b2) && (b1 && b0))
    $intermediate $W[CONCAT_u2_u4_221_wire] : $int<4>
    // (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0)))
    $intermediate $W[CONCAT_u4_u8_222_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 48 )
    $intermediate $W[EQ_u8_u1_227_wire] : $int<1>
    // 			normalInterruptFlag1 := (( ~ data ) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 135
    // ( ~ data )
    $intermediate $W[NOT_u8_u8_230_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_231_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_231_data_0] : $int<8>
    // (( ~ data ) & normalInterruptFlag1)
    $intermediate $W[AND_u8_u8_232_wire] : $int<8>
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_228_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_228_data_0] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 49 )
    $intermediate $W[EQ_u8_u1_238_wire] : $int<1>
    // 			normalInterruptFlag2 := (( ~ data ) & normalInterruptFlag2) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 138
    // ( ~ data )
    $intermediate $W[NOT_u8_u8_241_wire] : $int<8>
    // normalInterruptFlag2
    $W[LOAD_normalInterruptFlag2_242_wire] : $int<8>
    // normalInterruptFlag2
    $W[LOAD_normalInterruptFlag2_242_data_0] : $int<8>
    // (( ~ data ) & normalInterruptFlag2)
    $intermediate $W[AND_u8_u8_243_wire] : $int<8>
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_239_word_address_0] : $pointer<memory_space_6> := _b0
    $W[STORE_normalInterruptFlag2_239_data_0] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 50 )
    $intermediate $W[EQ_u8_u1_249_wire] : $int<1>
    // 			errorInterruptFlag1 := (( ~ data ) & errorInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 141
    // ( ~ data )
    $intermediate $W[NOT_u8_u8_252_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_253_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_253_data_0] : $int<8>
    // (( ~ data ) & errorInterruptFlag1)
    $intermediate $W[AND_u8_u8_254_wire] : $int<8>
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_250_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_errorInterruptFlag1_250_data_0] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 51 )
    $intermediate $W[EQ_u8_u1_260_wire] : $int<1>
    // 			errorInterruptFlag2 := (( ~ data ) & errorInterruptFlag2) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 144
    // ( ~ data )
    $intermediate $W[NOT_u8_u8_263_wire] : $int<8>
    // errorInterruptFlag2
    $W[LOAD_errorInterruptFlag2_264_wire] : $int<8>
    // errorInterruptFlag2
    $W[LOAD_errorInterruptFlag2_264_data_0] : $int<8>
    // (( ~ data ) & errorInterruptFlag2)
    $intermediate $W[AND_u8_u8_265_wire] : $int<8>
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_261_word_address_0] : $pointer<memory_space_4> := _b0
    $W[STORE_errorInterruptFlag2_261_data_0] : $int<8>
    // 	$call readSDHCRegisters (address ) (current_data ) 
    //  file .Aa/sdhc.opt.aa, line 106
    $call [call_stmt_93_call] $module readSDHCRegisters(address) (current_data_93)  
    $delay call_stmt_93_call 4
    $buffering  $in call_stmt_93_call address 1
    $buffering  $out call_stmt_93_call current_data_93 1
    // datapath-instances for block %RW1C%rw1c
    //  file .Aa/sdhc.opt.aa, line 107
    // 		$volatile d7 := ( $slice data 7 7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 109
    // ( $slice data 7 7 ) 
    [:] [slice_97_inst] (data 7 7) (d7_98)  $flowthrough
    $delay slice_97_inst 0
    // 		$volatile d6 := ( $slice data 6 6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 110
    // ( $slice data 6 6 ) 
    [:] [slice_101_inst] (data 6 6) (d6_102)  $flowthrough
    $delay slice_101_inst 0
    // 		$volatile d5 := ( $slice data 5 5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 111
    // ( $slice data 5 5 ) 
    [:] [slice_105_inst] (data 5 5) (d5_106)  $flowthrough
    $delay slice_105_inst 0
    // 		$volatile d4 := ( $slice data 4 4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 112
    // ( $slice data 4 4 ) 
    [:] [slice_109_inst] (data 4 4) (d4_110)  $flowthrough
    $delay slice_109_inst 0
    // 		$volatile d3 := ( $slice data 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 113
    // ( $slice data 3 3 ) 
    [:] [slice_113_inst] (data 3 3) (d3_114)  $flowthrough
    $delay slice_113_inst 0
    // 		$volatile d2 := ( $slice data 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 114
    // ( $slice data 2 2 ) 
    [:] [slice_117_inst] (data 2 2) (d2_118)  $flowthrough
    $delay slice_117_inst 0
    // 		$volatile d1 := ( $slice data 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 115
    // ( $slice data 1 1 ) 
    [:] [slice_121_inst] (data 1 1) (d1_122)  $flowthrough
    $delay slice_121_inst 0
    // 		$volatile d0 := ( $slice data 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 116
    // ( $slice data 0 0 ) 
    [:] [slice_125_inst] (data 0 0) (d0_126)  $flowthrough
    $delay slice_125_inst 0
    // 		$volatile current_d7 := ( $slice current_data 7 7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 117
    // ( $slice current_data 7 7 ) 
    [:] [slice_129_inst] (current_data_93 7 7) (current_d7_130)  $flowthrough
    $delay slice_129_inst 0
    // 		$volatile current_d6 := ( $slice current_data 6 6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 118
    // ( $slice current_data 6 6 ) 
    [:] [slice_133_inst] (current_data_93 6 6) (current_d6_134)  $flowthrough
    $delay slice_133_inst 0
    // 		$volatile current_d5 := ( $slice current_data 5 5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 119
    // ( $slice current_data 5 5 ) 
    [:] [slice_137_inst] (current_data_93 5 5) (current_d5_138)  $flowthrough
    $delay slice_137_inst 0
    // 		$volatile current_d4 := ( $slice current_data 4 4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 120
    // ( $slice current_data 4 4 ) 
    [:] [slice_141_inst] (current_data_93 4 4) (current_d4_142)  $flowthrough
    $delay slice_141_inst 0
    // 		$volatile current_d3 := ( $slice current_data 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 121
    // ( $slice current_data 3 3 ) 
    [:] [slice_145_inst] (current_data_93 3 3) (current_d3_146)  $flowthrough
    $delay slice_145_inst 0
    // 		$volatile current_d2 := ( $slice current_data 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 122
    // ( $slice current_data 2 2 ) 
    [:] [slice_149_inst] (current_data_93 2 2) (current_d2_150)  $flowthrough
    $delay slice_149_inst 0
    // 		$volatile current_d1 := ( $slice current_data 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 123
    // ( $slice current_data 1 1 ) 
    [:] [slice_153_inst] (current_data_93 1 1) (current_d1_154)  $flowthrough
    $delay slice_153_inst 0
    // 		$volatile current_d0 := ( $slice current_data 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 124
    // ( $slice current_data 0 0 ) 
    [:] [slice_157_inst] (current_data_93 0 0) (current_d0_158)  $flowthrough
    $delay slice_157_inst 0
    // 		$volatile b0 := ( $mux d0 ZERO_1  current_d0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 125
    // ( $mux d0 ZERO_1  current_d0 ) 
    ? [MUX_163_inst] (d0_126 R_ZERO_1_161_wire_constant current_d0_158) (b0_164)  $flowthrough
    // 		$volatile b1 := ( $mux d1 ZERO_1  current_d1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 126
    // ( $mux d1 ZERO_1  current_d1 ) 
    ? [MUX_169_inst] (d1_122 R_ZERO_1_167_wire_constant current_d1_154) (b1_170)  $flowthrough
    // 		$volatile b2 := ( $mux d2 ZERO_1  current_d2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 127
    // ( $mux d2 ZERO_1  current_d2 ) 
    ? [MUX_175_inst] (d2_118 R_ZERO_1_173_wire_constant current_d2_150) (b2_176)  $flowthrough
    // 		$volatile b3 := ( $mux d3 ZERO_1  current_d3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 128
    // ( $mux d3 ZERO_1  current_d3 ) 
    ? [MUX_181_inst] (d3_114 R_ZERO_1_179_wire_constant current_d3_146) (b3_182)  $flowthrough
    // 		$volatile b4 := ( $mux d4 ZERO_1  current_d4 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 129
    // ( $mux d4 ZERO_1  current_d4 ) 
    ? [MUX_187_inst] (d4_110 R_ZERO_1_185_wire_constant current_d4_142) (b4_188)  $flowthrough
    // 		$volatile b5 := ( $mux d5 ZERO_1  current_d5 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 130
    // ( $mux d5 ZERO_1  current_d5 ) 
    ? [MUX_193_inst] (d5_106 R_ZERO_1_191_wire_constant current_d5_138) (b5_194)  $flowthrough
    // 		$volatile b6 := ( $mux d6 ZERO_1  current_d6 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 131
    // ( $mux d6 ZERO_1  current_d6 ) 
    ? [MUX_199_inst] (d6_102 R_ZERO_1_197_wire_constant current_d6_134) (b6_200)  $flowthrough
    // 		$volatile b7 := ( $mux d7 ZERO_1  current_d7 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 132
    // ( $mux d7 ZERO_1  current_d7 ) 
    ? [MUX_205_inst] (d7_98 R_ZERO_1_203_wire_constant current_d7_130) (b7_206)  $flowthrough
    // 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
    //  file .Aa/sdhc.opt.aa, line 133
    // (b7 && b6)
    &&[CONCAT_u1_u2_210_inst] (b7_206 b6_200) (CONCAT_u1_u2_210_wire)   $flowthrough 
    $delay CONCAT_u1_u2_210_inst 0
    // (b5 && b4)
    &&[CONCAT_u1_u2_213_inst] (b5_194 b4_188) (CONCAT_u1_u2_213_wire)   $flowthrough 
    $delay CONCAT_u1_u2_213_inst 0
    // ((b7 && b6) && (b5 && b4))
    &&[CONCAT_u2_u4_214_inst] (CONCAT_u1_u2_210_wire CONCAT_u1_u2_213_wire) (CONCAT_u2_u4_214_wire)   $flowthrough 
    $delay CONCAT_u2_u4_214_inst 0
    // (b3 && b2)
    &&[CONCAT_u1_u2_217_inst] (b3_182 b2_176) (CONCAT_u1_u2_217_wire)   $flowthrough 
    $delay CONCAT_u1_u2_217_inst 0
    // (b1 && b0)
    &&[CONCAT_u1_u2_220_inst] (b1_170 b0_164) (CONCAT_u1_u2_220_wire)   $flowthrough 
    $delay CONCAT_u1_u2_220_inst 0
    // ((b3 && b2) && (b1 && b0))
    &&[CONCAT_u2_u4_221_inst] (CONCAT_u1_u2_217_wire CONCAT_u1_u2_220_wire) (CONCAT_u2_u4_221_wire)   $flowthrough 
    $delay CONCAT_u2_u4_221_inst 0
    // (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0)))
    &&[CONCAT_u4_u8_222_inst] (CONCAT_u2_u4_214_wire CONCAT_u2_u4_221_wire) (CONCAT_u4_u8_222_wire)   $flowthrough 
    $delay CONCAT_u4_u8_222_inst 0
    $call [call_stmt_223_call] $module writeSDHCRegisters(address CONCAT_u4_u8_222_wire) ()  
    $delay call_stmt_223_call 4
    $buffering  $in call_stmt_223_call address 1
    $buffering  $in call_stmt_223_call CONCAT_u4_u8_222_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 48 )
    ==[EQ_u8_u1_227_inst] (address konst_226_wire_constant) (EQ_u8_u1_227_wire)   $flowthrough 
    $delay EQ_u8_u1_227_inst 0
    ==0? [if_stmt_224_branch] (EQ_u8_u1_227_wire)
    // 			normalInterruptFlag1 := (( ~ data ) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 135
    // ( ~ data )
    ~ [NOT_u8_u8_230_inst] (data) (NOT_u8_u8_230_wire)   $flowthrough
    $delay NOT_u8_u8_230_inst 0
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_231_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_231_word_address_0) (LOAD_normalInterruptFlag1_231_data_0) 
    $delay LOAD_normalInterruptFlag1_231_load_0 5
    &/ [LOAD_normalInterruptFlag1_231_gather_scatter] (LOAD_normalInterruptFlag1_231_data_0) (LOAD_normalInterruptFlag1_231_wire) 
    $flowthrough 
    // (( ~ data ) & normalInterruptFlag1)
    &[AND_u8_u8_232_inst] (NOT_u8_u8_230_wire LOAD_normalInterruptFlag1_231_wire) (AND_u8_u8_232_wire)   
    $buffering  $out AND_u8_u8_232_inst AND_u8_u8_232_wire 1
    $delay AND_u8_u8_232_inst 1
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_228_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_228_word_address_0 STORE_normalInterruptFlag1_228_data_0) 
    $delay STORE_normalInterruptFlag1_228_store_0 5
    &/ [STORE_normalInterruptFlag1_228_gather_scatter] (AND_u8_u8_232_wire) (STORE_normalInterruptFlag1_228_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 49 )
    ==[EQ_u8_u1_238_inst] (address konst_237_wire_constant) (EQ_u8_u1_238_wire)   $flowthrough 
    $delay EQ_u8_u1_238_inst 0
    ==0? [if_stmt_235_branch] (EQ_u8_u1_238_wire)
    // 			normalInterruptFlag2 := (( ~ data ) & normalInterruptFlag2) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 138
    // ( ~ data )
    ~ [NOT_u8_u8_241_inst] (data) (NOT_u8_u8_241_wire)   $flowthrough
    $delay NOT_u8_u8_241_inst 0
    // normalInterruptFlag2
    $load [LOAD_normalInterruptFlag2_242_load_0] $from memory_space_6 (LOAD_normalInterruptFlag2_242_word_address_0) (LOAD_normalInterruptFlag2_242_data_0) 
    $delay LOAD_normalInterruptFlag2_242_load_0 4
    &/ [LOAD_normalInterruptFlag2_242_gather_scatter] (LOAD_normalInterruptFlag2_242_data_0) (LOAD_normalInterruptFlag2_242_wire) 
    $flowthrough 
    // (( ~ data ) & normalInterruptFlag2)
    &[AND_u8_u8_243_inst] (NOT_u8_u8_241_wire LOAD_normalInterruptFlag2_242_wire) (AND_u8_u8_243_wire)   
    $buffering  $out AND_u8_u8_243_inst AND_u8_u8_243_wire 1
    $delay AND_u8_u8_243_inst 1
    // normalInterruptFlag2
    $store [STORE_normalInterruptFlag2_239_store_0] $to memory_space_6 (STORE_normalInterruptFlag2_239_word_address_0 STORE_normalInterruptFlag2_239_data_0) 
    $delay STORE_normalInterruptFlag2_239_store_0 5
    &/ [STORE_normalInterruptFlag2_239_gather_scatter] (AND_u8_u8_243_wire) (STORE_normalInterruptFlag2_239_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 50 )
    ==[EQ_u8_u1_249_inst] (address konst_248_wire_constant) (EQ_u8_u1_249_wire)   $flowthrough 
    $delay EQ_u8_u1_249_inst 0
    ==0? [if_stmt_246_branch] (EQ_u8_u1_249_wire)
    // 			errorInterruptFlag1 := (( ~ data ) & errorInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 141
    // ( ~ data )
    ~ [NOT_u8_u8_252_inst] (data) (NOT_u8_u8_252_wire)   $flowthrough
    $delay NOT_u8_u8_252_inst 0
    // errorInterruptFlag1
    $load [LOAD_errorInterruptFlag1_253_load_0] $from memory_space_3 (LOAD_errorInterruptFlag1_253_word_address_0) (LOAD_errorInterruptFlag1_253_data_0) 
    $delay LOAD_errorInterruptFlag1_253_load_0 5
    &/ [LOAD_errorInterruptFlag1_253_gather_scatter] (LOAD_errorInterruptFlag1_253_data_0) (LOAD_errorInterruptFlag1_253_wire) 
    $flowthrough 
    // (( ~ data ) & errorInterruptFlag1)
    &[AND_u8_u8_254_inst] (NOT_u8_u8_252_wire LOAD_errorInterruptFlag1_253_wire) (AND_u8_u8_254_wire)   
    $buffering  $out AND_u8_u8_254_inst AND_u8_u8_254_wire 1
    $delay AND_u8_u8_254_inst 1
    // errorInterruptFlag1
    $store [STORE_errorInterruptFlag1_250_store_0] $to memory_space_3 (STORE_errorInterruptFlag1_250_word_address_0 STORE_errorInterruptFlag1_250_data_0) 
    $delay STORE_errorInterruptFlag1_250_store_0 5
    &/ [STORE_errorInterruptFlag1_250_gather_scatter] (AND_u8_u8_254_wire) (STORE_errorInterruptFlag1_250_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address == 51 )
    ==[EQ_u8_u1_260_inst] (address konst_259_wire_constant) (EQ_u8_u1_260_wire)   $flowthrough 
    $delay EQ_u8_u1_260_inst 0
    ==0? [if_stmt_257_branch] (EQ_u8_u1_260_wire)
    // 			errorInterruptFlag2 := (( ~ data ) & errorInterruptFlag2) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 144
    // ( ~ data )
    ~ [NOT_u8_u8_263_inst] (data) (NOT_u8_u8_263_wire)   $flowthrough
    $delay NOT_u8_u8_263_inst 0
    // errorInterruptFlag2
    $load [LOAD_errorInterruptFlag2_264_load_0] $from memory_space_4 (LOAD_errorInterruptFlag2_264_word_address_0) (LOAD_errorInterruptFlag2_264_data_0) 
    $delay LOAD_errorInterruptFlag2_264_load_0 5
    &/ [LOAD_errorInterruptFlag2_264_gather_scatter] (LOAD_errorInterruptFlag2_264_data_0) (LOAD_errorInterruptFlag2_264_wire) 
    $flowthrough 
    // (( ~ data ) & errorInterruptFlag2)
    &[AND_u8_u8_265_inst] (NOT_u8_u8_263_wire LOAD_errorInterruptFlag2_264_wire) (AND_u8_u8_265_wire)   
    $buffering  $out AND_u8_u8_265_inst AND_u8_u8_265_wire 1
    $delay AND_u8_u8_265_inst 1
    // errorInterruptFlag2
    $store [STORE_errorInterruptFlag2_261_store_0] $to memory_space_4 (STORE_errorInterruptFlag2_261_word_address_0 STORE_errorInterruptFlag2_261_data_0) 
    $delay STORE_errorInterruptFlag2_261_store_0 5
    &/ [STORE_errorInterruptFlag2_261_gather_scatter] (AND_u8_u8_265_wire) (STORE_errorInterruptFlag2_261_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$call readSDHCRegisters (address ) (current_data ) 
  //  file .Aa/sdhc.opt.aa, line 106
  // address
  call_stmt_93_call <=> (call_stmt_93/call_stmt_93_Sample/crr call_stmt_93/call_stmt_93_Update/ccr) (call_stmt_93/call_stmt_93_Sample/cra call_stmt_93/call_stmt_93_Update/cca)
  // 		$volatile d7 := ( $slice data 7 7 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 109
  // data
  // 		$volatile d6 := ( $slice data 6 6 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 110
  // data
  // 		$volatile d5 := ( $slice data 5 5 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 111
  // data
  // 		$volatile d4 := ( $slice data 4 4 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 112
  // data
  // 		$volatile d3 := ( $slice data 3 3 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 113
  // data
  // 		$volatile d2 := ( $slice data 2 2 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 114
  // data
  // 		$volatile d1 := ( $slice data 1 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 115
  // data
  // 		$volatile d0 := ( $slice data 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 116
  // data
  // 		$volatile current_d7 := ( $slice current_data 7 7 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 117
  // current_data
  // 		$volatile current_d6 := ( $slice current_data 6 6 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 118
  // current_data
  // 		$volatile current_d5 := ( $slice current_data 5 5 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 119
  // current_data
  // 		$volatile current_d4 := ( $slice current_data 4 4 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 120
  // current_data
  // 		$volatile current_d3 := ( $slice current_data 3 3 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 121
  // current_data
  // 		$volatile current_d2 := ( $slice current_data 2 2 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 122
  // current_data
  // 		$volatile current_d1 := ( $slice current_data 1 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 123
  // current_data
  // 		$volatile current_d0 := ( $slice current_data 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 124
  // current_data
  // 		$volatile b0 := ( $mux d0 ZERO_1  current_d0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 125
  // d0
  // current_d0
  // ( $mux d0 ZERO_1  current_d0 ) 
  // 		$volatile b1 := ( $mux d1 ZERO_1  current_d1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 126
  // d1
  // current_d1
  // ( $mux d1 ZERO_1  current_d1 ) 
  // 		$volatile b2 := ( $mux d2 ZERO_1  current_d2 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 127
  // d2
  // current_d2
  // ( $mux d2 ZERO_1  current_d2 ) 
  // 		$volatile b3 := ( $mux d3 ZERO_1  current_d3 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 128
  // d3
  // current_d3
  // ( $mux d3 ZERO_1  current_d3 ) 
  // 		$volatile b4 := ( $mux d4 ZERO_1  current_d4 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 129
  // d4
  // current_d4
  // ( $mux d4 ZERO_1  current_d4 ) 
  // 		$volatile b5 := ( $mux d5 ZERO_1  current_d5 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 130
  // d5
  // current_d5
  // ( $mux d5 ZERO_1  current_d5 ) 
  // 		$volatile b6 := ( $mux d6 ZERO_1  current_d6 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 131
  // d6
  // current_d6
  // ( $mux d6 ZERO_1  current_d6 ) 
  // 		$volatile b7 := ( $mux d7 ZERO_1  current_d7 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 132
  // d7
  // current_d7
  // ( $mux d7 ZERO_1  current_d7 ) 
  // 		$call writeSDHCRegisters (address (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0))) ) () 
  //  file .Aa/sdhc.opt.aa, line 133
  // address
  // (((b7 && b6) && (b5 && b4)) && ((b3 && b2) && (b1 && b0)))
  // ((b7 && b6) && (b5 && b4))
  // (b7 && b6)
  // b7
  // b6
  // (b5 && b4)
  // b5
  // b4
  // ((b3 && b2) && (b1 && b0))
  // (b3 && b2)
  // b3
  // b2
  // (b1 && b0)
  // b1
  // b0
  call_stmt_223_call <=> (branch_block_stmt_94/assign_stmt_98_to_call_stmt_223/call_stmt_223_Sample/crr branch_block_stmt_94/assign_stmt_98_to_call_stmt_223/call_stmt_223_Update/ccr) (branch_block_stmt_94/assign_stmt_98_to_call_stmt_223/call_stmt_223_Sample/cra branch_block_stmt_94/assign_stmt_98_to_call_stmt_223/call_stmt_223_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (address == 48 )
  if_stmt_224_branch <=> (branch_block_stmt_94/if_stmt_224_eval_test/branch_req) (branch_block_stmt_94/if_stmt_224_else_link/else_choice_transition branch_block_stmt_94/if_stmt_224_if_link/if_choice_transition)
  // 			normalInterruptFlag1 := (( ~ data ) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 135
  // (( ~ data ) & normalInterruptFlag1)
  // data
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_231_gather_scatter <=> (branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Update/LOAD_normalInterruptFlag1_231_Merge/merge_req) (branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Update/LOAD_normalInterruptFlag1_231_Merge/merge_ack)
  LOAD_normalInterruptFlag1_231_load_0 <=> (branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_233/LOAD_normalInterruptFlag1_231_Update/word_access_complete/word_0/ca)
  AND_u8_u8_232_inst <=> (branch_block_stmt_94/assign_stmt_233/AND_u8_u8_232_Sample/rr branch_block_stmt_94/assign_stmt_233/AND_u8_u8_232_Update/cr) (branch_block_stmt_94/assign_stmt_233/AND_u8_u8_232_Sample/ra branch_block_stmt_94/assign_stmt_233/AND_u8_u8_232_Update/ca)
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_228_gather_scatter <=> (branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Sample/STORE_normalInterruptFlag1_228_Split/split_req) (branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Sample/STORE_normalInterruptFlag1_228_Split/split_ack)
  STORE_normalInterruptFlag1_228_store_0 <=> (branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_233/STORE_normalInterruptFlag1_228_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (address == 49 )
  if_stmt_235_branch <=> (branch_block_stmt_94/if_stmt_235_eval_test/branch_req) (branch_block_stmt_94/if_stmt_235_else_link/else_choice_transition branch_block_stmt_94/if_stmt_235_if_link/if_choice_transition)
  // 			normalInterruptFlag2 := (( ~ data ) & normalInterruptFlag2) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 138
  // (( ~ data ) & normalInterruptFlag2)
  // data
  // normalInterruptFlag2
  LOAD_normalInterruptFlag2_242_gather_scatter <=> (branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Update/LOAD_normalInterruptFlag2_242_Merge/merge_req) (branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Update/LOAD_normalInterruptFlag2_242_Merge/merge_ack)
  LOAD_normalInterruptFlag2_242_load_0 <=> (branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_244/LOAD_normalInterruptFlag2_242_Update/word_access_complete/word_0/ca)
  AND_u8_u8_243_inst <=> (branch_block_stmt_94/assign_stmt_244/AND_u8_u8_243_Sample/rr branch_block_stmt_94/assign_stmt_244/AND_u8_u8_243_Update/cr) (branch_block_stmt_94/assign_stmt_244/AND_u8_u8_243_Sample/ra branch_block_stmt_94/assign_stmt_244/AND_u8_u8_243_Update/ca)
  // normalInterruptFlag2
  STORE_normalInterruptFlag2_239_gather_scatter <=> (branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Sample/STORE_normalInterruptFlag2_239_Split/split_req) (branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Sample/STORE_normalInterruptFlag2_239_Split/split_ack)
  STORE_normalInterruptFlag2_239_store_0 <=> (branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_244/STORE_normalInterruptFlag2_239_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (address == 50 )
  if_stmt_246_branch <=> (branch_block_stmt_94/if_stmt_246_eval_test/branch_req) (branch_block_stmt_94/if_stmt_246_else_link/else_choice_transition branch_block_stmt_94/if_stmt_246_if_link/if_choice_transition)
  // 			errorInterruptFlag1 := (( ~ data ) & errorInterruptFlag1) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 141
  // (( ~ data ) & errorInterruptFlag1)
  // data
  // errorInterruptFlag1
  LOAD_errorInterruptFlag1_253_gather_scatter <=> (branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Update/LOAD_errorInterruptFlag1_253_Merge/merge_req) (branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Update/LOAD_errorInterruptFlag1_253_Merge/merge_ack)
  LOAD_errorInterruptFlag1_253_load_0 <=> (branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_255/LOAD_errorInterruptFlag1_253_Update/word_access_complete/word_0/ca)
  AND_u8_u8_254_inst <=> (branch_block_stmt_94/assign_stmt_255/AND_u8_u8_254_Sample/rr branch_block_stmt_94/assign_stmt_255/AND_u8_u8_254_Update/cr) (branch_block_stmt_94/assign_stmt_255/AND_u8_u8_254_Sample/ra branch_block_stmt_94/assign_stmt_255/AND_u8_u8_254_Update/ca)
  // errorInterruptFlag1
  STORE_errorInterruptFlag1_250_gather_scatter <=> (branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Sample/STORE_errorInterruptFlag1_250_Split/split_req) (branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Sample/STORE_errorInterruptFlag1_250_Split/split_ack)
  STORE_errorInterruptFlag1_250_store_0 <=> (branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_255/STORE_errorInterruptFlag1_250_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (address == 51 )
  if_stmt_257_branch <=> (branch_block_stmt_94/if_stmt_257_eval_test/branch_req) (branch_block_stmt_94/if_stmt_257_else_link/else_choice_transition branch_block_stmt_94/if_stmt_257_if_link/if_choice_transition)
  // 			errorInterruptFlag2 := (( ~ data ) & errorInterruptFlag2) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 144
  // (( ~ data ) & errorInterruptFlag2)
  // data
  // errorInterruptFlag2
  LOAD_errorInterruptFlag2_264_gather_scatter <=> (branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Update/LOAD_errorInterruptFlag2_264_Merge/merge_req) (branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Update/LOAD_errorInterruptFlag2_264_Merge/merge_ack)
  LOAD_errorInterruptFlag2_264_load_0 <=> (branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_266/LOAD_errorInterruptFlag2_264_Update/word_access_complete/word_0/ca)
  AND_u8_u8_265_inst <=> (branch_block_stmt_94/assign_stmt_266/AND_u8_u8_265_Sample/rr branch_block_stmt_94/assign_stmt_266/AND_u8_u8_265_Update/cr) (branch_block_stmt_94/assign_stmt_266/AND_u8_u8_265_Sample/ra branch_block_stmt_94/assign_stmt_266/AND_u8_u8_265_Update/ca)
  // errorInterruptFlag2
  STORE_errorInterruptFlag2_261_gather_scatter <=> (branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Sample/STORE_errorInterruptFlag2_261_Split/split_req) (branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Sample/STORE_errorInterruptFlag2_261_Split/split_ack)
  STORE_errorInterruptFlag2_261_store_0 <=> (branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Sample/word_access_start/word_0/rr branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Update/word_access_complete/word_0/cr) (branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Sample/word_access_start/word_0/ra branch_block_stmt_94/assign_stmt_266/STORE_errorInterruptFlag2_261_Update/word_access_complete/word_0/ca)
}
$module [generate_crc_7] 
{
  $in message_signal:$int<40>
  // can point into 
  $out generated_crc:$int<7>
  // can point into 
  // pipe-declarations for block %generate_crc_7
  //  file .Aa/sdhc.opt.aa, line 148
  // pipe-declarations for block %generate_crc_7%loop
  //  file .Aa/sdhc.opt.aa, line 153
  // pipe-declarations for block %generate_crc_7%loop%
  //  file .Aa/sdhc.opt.aa, line 155
  // pipe-declarations for block %generate_crc_7%loop%
  //  file .Aa/sdhc.opt.aa, line 177
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_275] // Branch Block  file .Aa/sdhc.opt.aa, line 153
    {
      $P [branch_block_stmt_275__entry__]
      branch_block_stmt_275__entry__ <-| ($entry)
      $P [branch_block_stmt_275__exit__]
      branch_block_stmt_275__exit__ |-> ($exit)
      $P [merge_stmt_276__entry__] 
      $P [merge_stmt_276__exit__] 
      $P [if_stmt_295__entry__] 
      $P [if_stmt_295__exit__] 
      $P [merge_stmt_367__entry__] 
      $P [merge_stmt_367__exit__] 
      $P [assign_stmt_377_to_assign_stmt_382__entry__] 
      $P [assign_stmt_377_to_assign_stmt_382__exit__] 
      $P [if_stmt_383__entry__] 
      $P [if_stmt_383__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 163
      ;;[if_stmt_295_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_295__entry__ |-> (if_stmt_295_dead_link)
      if_stmt_295__exit__ <-| (if_stmt_295_dead_link)
      ;;[if_stmt_295_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((crc_out [] 6 ) == 1 )
        ;;[EQ_u1_u1_300] 
        {
          // binary expression 
          ||[EQ_u1_u1_300_inputs] 
          {
            // (crc_out [] 6 )
            ;;[BITSEL_u7_u1_298] 
            {
              // binary expression 
              ||[BITSEL_u7_u1_298_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_295__entry__ |-> (if_stmt_295_eval_test)
      $P [EQ_u1_u1_300_place]
      EQ_u1_u1_300_place <-| (if_stmt_295_eval_test)
      ;;[if_stmt_295_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_295_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_300_place |-> (if_stmt_295_if_link if_stmt_295_else_link)
      $P [assign_stmt_305_to_assign_stmt_354__entry__] 
      $P [assign_stmt_305_to_assign_stmt_354__exit__] 
      $P [MSB_true]
      ::[assign_stmt_305_to_assign_stmt_354] 
      {
        // start: WAR dependencies for a
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for a
        // start:  			$volatile a := (crc_out [] 5 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 164
        // volatile! 
        // Source expression
        // (crc_out [] 5 )
        // crc_out
        // Target expression
        // (as target) a
        // start: WAR dependencies for a
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for a
        // end:  			$volatile a := (crc_out [] 5 ) $buffering 1
        // start: WAR dependencies for b
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for b
        // start:  			$volatile b := (crc_out [] 4 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 165
        // volatile! 
        // Source expression
        // (crc_out [] 4 )
        // crc_out
        // Target expression
        // (as target) b
        // start: WAR dependencies for b
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for b
        // end:  			$volatile b := (crc_out [] 4 ) $buffering 1
        // start: WAR dependencies for c
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for c
        // start:  			$volatile c := (crc_out [] 3 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 166
        // volatile! 
        // Source expression
        // (crc_out [] 3 )
        // crc_out
        // Target expression
        // (as target) c
        // start: WAR dependencies for c
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for c
        // end:  			$volatile c := (crc_out [] 3 ) $buffering 1
        // start: WAR dependencies for d
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for d
        // start:  			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 167
        // volatile! 
        // Source expression
        // ((crc_out [] 2 ) ^ 1 )
        // (crc_out [] 2 )
        // crc_out
        // Target expression
        // (as target) d
        // start: WAR dependencies for d
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for d
        // end:  			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
        // start: WAR dependencies for e
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for e
        // start:  			$volatile e := (crc_out [] 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 168
        // volatile! 
        // Source expression
        // (crc_out [] 1 )
        // crc_out
        // Target expression
        // (as target) e
        // start: WAR dependencies for e
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for e
        // end:  			$volatile e := (crc_out [] 1 ) $buffering 1
        // start: WAR dependencies for f
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for f
        // start:  			$volatile f := (crc_out [] 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 169
        // volatile! 
        // Source expression
        // (crc_out [] 0 )
        // crc_out
        // Target expression
        // (as target) f
        // start: WAR dependencies for f
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // done: WAR dependencies for f
        // end:  			$volatile f := (crc_out [] 0 ) $buffering 1
        // start: WAR dependencies for g
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for g
        // start:  			$volatile g := ((temp [] 32 ) ^ 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 170
        // volatile! 
        // Source expression
        // ((temp [] 32 ) ^ 1 )
        // (temp [] 32 )
        // temp
        // Target expression
        // (as target) g
        // start: WAR dependencies for g
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for g
        // end:  			$volatile g := ((temp [] 32 ) ^ 1 ) $buffering 1
        // start: WAR dependencies for crc_out_true
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for crc_out_true
        // start:  			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 171
        // volatile! 
        // Source expression
        // (((a && b) && (c && d)) && ((e && f) && g))
        // ((a && b) && (c && d))
        // (a && b)
        // a
        // b
        // (c && d)
        // c
        // d
        // ((e && f) && g)
        // (e && f)
        // e
        // f
        // g
        // Target expression
        // (as target) crc_out_true
        // start: WAR dependencies for crc_out_true
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for crc_out_true
        // end:  			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_305_to_assign_stmt_354__entry__ |-> (assign_stmt_305_to_assign_stmt_354)
      assign_stmt_305_to_assign_stmt_354__exit__ <-| (assign_stmt_305_to_assign_stmt_354)
      assign_stmt_305_to_assign_stmt_354__entry__ <-| (if_stmt_295_if_link)
      MSB_true <-| (assign_stmt_305_to_assign_stmt_354__exit__)
      $P [assign_stmt_364__entry__] 
      $P [assign_stmt_364__exit__] 
      $P [MSB_false]
      ::[assign_stmt_364] 
      {
        // start: WAR dependencies for crc_out_false
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for crc_out_false
        // start:  			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 32 )) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 174
        // volatile! 
        // Source expression
        // (( $slice crc_out 5 0 )  && (temp [] 32 ))
        // ( $slice crc_out 5 0 ) 
        // crc_out
        // (temp [] 32 )
        // temp
        // Target expression
        // (as target) crc_out_false
        // start: WAR dependencies for crc_out_false
        // ignored out-of-scope w_root 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for crc_out_false
        // end:  			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 32 )) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_364__entry__ |-> (assign_stmt_364)
      assign_stmt_364__exit__ <-| (assign_stmt_364)
      assign_stmt_364__entry__ <-| (if_stmt_295_else_link)
      MSB_false <-| (assign_stmt_364__exit__)
      ::[assign_stmt_377_to_assign_stmt_382] 
      {
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
        // type of target is $uint<6>
        // done: WAR dependencies for next_I
        // start:  		$volatile next_I := (I - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 181
        // volatile! 
        // Source expression
        // (I - 1 )
        // I
        // Target expression
        // (as target) next_I
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
        // type of target is $uint<6>
        // done: WAR dependencies for next_I
        // end:  		$volatile next_I := (I - 1 ) $buffering 1
        // start: WAR dependencies for next_temp
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for next_temp
        // start:  		$volatile next_temp := (temp << 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 182
        // volatile! 
        // Source expression
        // (temp << 1 )
        // temp
        // Target expression
        // (as target) next_temp
        // start: WAR dependencies for next_temp
        // ignored out-of-scope w_root 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
        // type of target is $uint<33>
        // done: WAR dependencies for next_temp
        // end:  		$volatile next_temp := (temp << 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_377_to_assign_stmt_382__entry__ |-> (assign_stmt_377_to_assign_stmt_382)
      assign_stmt_377_to_assign_stmt_382__exit__ <-| (assign_stmt_377_to_assign_stmt_382)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_383_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_383__entry__ |-> (if_stmt_383_dead_link)
      if_stmt_383__exit__ <-| (if_stmt_383_dead_link)
      ;;[if_stmt_383_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_I > 0 )
        ;;[UGT_u6_u1_386] 
        {
          // binary expression 
          ||[UGT_u6_u1_386_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_383__entry__ |-> (if_stmt_383_eval_test)
      $P [UGT_u6_u1_386_place]
      UGT_u6_u1_386_place <-| (if_stmt_383_eval_test)
      ;;[if_stmt_383_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_383_else_link] 
      {
        $T [else_choice_transition] 
      }
      UGT_u6_u1_386_place |-> (if_stmt_383_if_link if_stmt_383_else_link)
      $P [loopback]
      loopback <-| (if_stmt_383_if_link)
      if_stmt_383__exit__ <-| (if_stmt_383_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 155
      ;;[merge_stmt_276_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_276__entry__ |-> (merge_stmt_276_dead_link)
      merge_stmt_276__exit__ <-| (merge_stmt_276_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 155  --------------------------
      ||[merge_stmt_276__entry___PhiReq] 
      {
        ;;[phi_stmt_277] 
        {
          ||[phi_stmt_277_sources] 
          {
            // sources for 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
            // type of target is $uint<6>
            // constant source .... delay transition 
            $T [type_cast_282_konst_delay_trans] $delay
          }
          $T [phi_stmt_277_req] 
        }
        ;;[phi_stmt_283] 
        {
          ||[phi_stmt_283_sources] 
          {
            // sources for 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            // ( $slice message_signal 39 33 ) 
            ;;[slice_287] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_283_req] 
        }
        ;;[phi_stmt_288] 
        {
          ||[phi_stmt_288_sources] 
          {
            // sources for 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
            // type of target is $uint<33>
            // trivial non-constant source .... interlock-buffer introduced 
            // ( $slice message_signal 32 0 ) 
            ;;[slice_293] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_288_req] 
        }
      }
      merge_stmt_276__entry__ |-> (merge_stmt_276__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_277] 
        {
          ||[phi_stmt_277_sources] 
          {
            // sources for 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_277_req] 
        }
        ;;[phi_stmt_283] 
        {
          ||[phi_stmt_283_sources] 
          {
            // sources for 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_283_req] 
        }
        ;;[phi_stmt_288] 
        {
          ||[phi_stmt_288_sources] 
          {
            // sources for 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
            // type of target is $uint<33>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_288_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_276_PhiReqMerge] 
      merge_stmt_276_PhiReqMerge <-| ( merge_stmt_276__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_276_PhiAck] 
      {
        $T [phi_stmt_277_ack] 
        $T [phi_stmt_283_ack] 
        $T [phi_stmt_288_ack] 
      }
      merge_stmt_276_PhiReqMerge |-> (merge_stmt_276_PhiAck)
      merge_stmt_276__exit__  <-| (merge_stmt_276_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 155  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 177
      ;;[merge_stmt_367_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_367__entry__ |-> (merge_stmt_367_dead_link)
      merge_stmt_367__exit__ <-| (merge_stmt_367_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 177  --------------------------
      ||[MSB_false_PhiReq] 
      {
        ;;[phi_stmt_368] 
        {
          ||[phi_stmt_368_sources] 
          {
            // sources for 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_368_req] 
        }
      }
      MSB_false |-> (MSB_false_PhiReq)
      ||[MSB_true_PhiReq] 
      {
        ;;[phi_stmt_368] 
        {
          ||[phi_stmt_368_sources] 
          {
            // sources for 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_368_req] 
        }
      }
      MSB_true |-> (MSB_true_PhiReq)
      $P [merge_stmt_367_PhiReqMerge] 
      merge_stmt_367_PhiReqMerge <-| ( MSB_false_PhiReq  MSB_true_PhiReq )
      ||[merge_stmt_367_PhiAck] 
      {
        $T [phi_stmt_368_ack] 
      }
      merge_stmt_367_PhiReqMerge |-> (merge_stmt_367_PhiAck)
      merge_stmt_367__exit__  <-| (merge_stmt_367_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 177  --------------------------
      merge_stmt_276__entry__ <-| (branch_block_stmt_275__entry__)
      if_stmt_295__entry__ <-| (merge_stmt_276__exit__)
      merge_stmt_367__entry__ <-| (if_stmt_295__exit__)
      assign_stmt_377_to_assign_stmt_382__entry__ <-| (merge_stmt_367__exit__)
      if_stmt_383__entry__ <-| (assign_stmt_377_to_assign_stmt_382__exit__)
      if_stmt_383__exit__ |-> (branch_block_stmt_275__exit__)
    }
    ::[assign_stmt_392] 
    {
      // start:  	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
      //  file .Aa/sdhc.opt.aa, line 188
      $T[assign_stmt_392_sample_start_] 
      $T[assign_stmt_392_sample_completed_] 
      $T[assign_stmt_392_update_start_] 
      $T[assign_stmt_392_update_completed_] 
      // Source expression
      // crc_out
      // Target expression
      // (as target) generated_crc
      // generated_crc
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_392_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_392_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_392_sample_start_ &-> (assign_stmt_392_Sample)
      assign_stmt_392_sample_completed_ <-& (assign_stmt_392_Sample)
      assign_stmt_392_sample_completed_ &-> ($null)
      assign_stmt_392_update_start_ &-> (assign_stmt_392_Update)
      assign_stmt_392_update_completed_ <-& (assign_stmt_392_Update)
      // start: Forward dependencies from crc_out to transition assign_stmt_392_sample_start_
      // done: Forward dependencies from crc_out to transition assign_stmt_392_sample_start_
      // start: WAR dependencies for generated_crc
      // done: WAR dependencies for generated_crc
      // generated_crc
      // write to interface object
      // end:  	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %generate_crc_7%loop%
    //  file .Aa/sdhc.opt.aa, line 155
    // constant-object-declarations for block %generate_crc_7%loop%
    //  file .Aa/sdhc.opt.aa, line 177
    // constant-object-declarations for block %generate_crc_7%loop
    //  file .Aa/sdhc.opt.aa, line 153
    // constant-object-declarations for block %generate_crc_7
    //  file .Aa/sdhc.opt.aa, line 148
    // constant-declarations for block %generate_crc_7%loop
    //  file .Aa/sdhc.opt.aa, line 153
    // constant-declarations for block %generate_crc_7%loop%
    //  file .Aa/sdhc.opt.aa, line 155
    // constant-declarations for phi:  			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 156
    // ($bitcast ($uint<6>) 41  )
    $constant $W[type_cast_282_wire_constant] : $int<6> := _b101001// 41
    // constant-declarations for phi:  			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 158
    // constant-declarations for phi:  			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
    // type of target is $uint<33>
    //  file .Aa/sdhc.opt.aa, line 160
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 163
    // 6 
    $constant $W[konst_297_wire_constant] : $int<7> := _b0000110// 6
    // 1 
    $constant $W[konst_299_wire_constant] : $int<1> := _b1// 1
    // 5 
    $constant $W[konst_303_wire_constant] : $int<7> := _b0000101// 5
    // 4 
    $constant $W[konst_308_wire_constant] : $int<7> := _b0000100// 4
    // 3 
    $constant $W[konst_313_wire_constant] : $int<7> := _b0000011// 3
    // 2 
    $constant $W[konst_318_wire_constant] : $int<7> := _b0000010// 2
    // 1 
    $constant $W[konst_320_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_325_wire_constant] : $int<7> := _b0000001// 1
    // 0 
    $constant $W[konst_330_wire_constant] : $int<7> := _b0000000// 0
    // 32 
    $constant $W[konst_335_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 1 
    $constant $W[konst_337_wire_constant] : $int<1> := _b1// 1
    // 32 
    $constant $W[konst_361_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // constant-declarations for block %generate_crc_7%loop%
    //  file .Aa/sdhc.opt.aa, line 177
    // constant-declarations for phi:  			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 178
    // 1 
    $constant $W[konst_375_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_380_wire_constant] : $int<33> := _b000000000000000000000000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_385_wire_constant] : $int<6> := _b000000// 0
    // block %generate_crc_7%loop
    //  file .Aa/sdhc.opt.aa, line 153
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 155
    // 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 156
    $W[next_I_377_279_buffered] : $int<6>
    // I
    $W[I_277] : $int<6>
    // 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 158
    $W[final_crc_out_368_285_buffered] : $int<7>
    // ( $slice message_signal 39 33 ) 
    $intermediate $W[slice_287_wire] : $int<7>
    // crc_out
    $W[crc_out_283] : $int<7>
    // 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
    // type of target is $uint<33>
    //  file .Aa/sdhc.opt.aa, line 160
    $W[next_temp_382_290_buffered] : $int<33>
    // ( $slice message_signal 32 0 ) 
    $intermediate $W[slice_293_wire] : $int<33>
    // temp
    $W[temp_288] : $int<33>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 163
    // (crc_out [] 6 )
    $intermediate $W[BITSEL_u7_u1_298_wire] : $int<1>
    // ((crc_out [] 6 ) == 1 )
    $intermediate $W[EQ_u1_u1_300_wire] : $int<1>
    // 			$volatile a := (crc_out [] 5 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 164
    // a
    $W[a_305] : $int<1>
    // 			$volatile b := (crc_out [] 4 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 165
    // b
    $W[b_310] : $int<1>
    // 			$volatile c := (crc_out [] 3 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 166
    // c
    $W[c_315] : $int<1>
    // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 167
    // (crc_out [] 2 )
    $intermediate $W[BITSEL_u7_u1_319_wire] : $int<1>
    // d
    $W[d_322] : $int<1>
    // 			$volatile e := (crc_out [] 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 168
    // e
    $W[e_327] : $int<1>
    // 			$volatile f := (crc_out [] 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 169
    // f
    $W[f_332] : $int<1>
    // 			$volatile g := ((temp [] 32 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 170
    // (temp [] 32 )
    $intermediate $W[BITSEL_u33_u1_336_wire] : $int<1>
    // g
    $W[g_339] : $int<1>
    // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 171
    // (a && b)
    $intermediate $W[CONCAT_u1_u2_343_wire] : $int<2>
    // (c && d)
    $intermediate $W[CONCAT_u1_u2_346_wire] : $int<2>
    // ((a && b) && (c && d))
    $intermediate $W[CONCAT_u2_u4_347_wire] : $int<4>
    // (e && f)
    $intermediate $W[CONCAT_u1_u2_350_wire] : $int<2>
    // ((e && f) && g)
    $intermediate $W[CONCAT_u2_u3_352_wire] : $int<3>
    // crc_out_true
    $W[crc_out_true_354] : $int<7>
    // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 32 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 174
    // ( $slice crc_out 5 0 ) 
    $intermediate $W[slice_359_wire] : $int<6>
    // (temp [] 32 )
    $intermediate $W[BITSEL_u33_u1_362_wire] : $int<1>
    // crc_out_false
    $W[crc_out_false_364] : $int<7>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 177
    // 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 178
    $W[crc_out_true_354_370_buffered] : $int<7>
    $W[crc_out_false_364_371_buffered] : $int<7>
    // final_crc_out
    $W[final_crc_out_368] : $int<7>
    // 		$volatile next_I := (I - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 181
    // next_I
    $W[next_I_377] : $int<6>
    // 		$volatile next_temp := (temp << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 182
    // next_temp
    $W[next_temp_382] : $int<33>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I > 0 )
    $intermediate $W[UGT_u6_u1_386_wire] : $int<1>
    // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
    //  file .Aa/sdhc.opt.aa, line 188
    // generated_crc
    // datapath-instances for block %generate_crc_7%loop
    //  file .Aa/sdhc.opt.aa, line 153
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 155
    // 			$phi I := 			  next_I $on   loopback 			  ($bitcast ($uint<6>) 41  ) $on   $entry 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 156
    # := [next_I_377_279_buf] (next_I_377) (next_I_377_279_buffered)    
    $phi [phi_stmt_277] (next_I_377_279_buffered type_cast_282_wire_constant) ( I_277 ) 
    // 			$phi crc_out := 			  final_crc_out $on   loopback 			  ( $slice message_signal 39 33 )  $on   $entry 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 158
    # := [final_crc_out_368_285_buf] (final_crc_out_368) (final_crc_out_368_285_buffered)    
    // ( $slice message_signal 39 33 ) 
    [:] [slice_287_inst] (message_signal 39 33) (slice_287_wire) 
    $buffering  $out slice_287_inst slice_287_wire 1
    $delay slice_287_inst 1
    $phi [phi_stmt_283] (final_crc_out_368_285_buffered slice_287_wire) ( crc_out_283 ) 
    // 			$phi temp := 			  next_temp $on   loopback 			  ( $slice message_signal 32 0 )  $on   $entry 
    // type of target is $uint<33>
    //  file .Aa/sdhc.opt.aa, line 160
    # := [next_temp_382_290_buf] (next_temp_382) (next_temp_382_290_buffered)    
    // ( $slice message_signal 32 0 ) 
    [:] [slice_293_inst] (message_signal 32 0) (slice_293_wire) 
    $buffering  $out slice_293_inst slice_293_wire 1
    $delay slice_293_inst 1
    $phi [phi_stmt_288] (next_temp_382_290_buffered slice_293_wire) ( temp_288 ) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 163
    // (crc_out [] 6 )
    [][BITSEL_u7_u1_298_inst] (crc_out_283 konst_297_wire_constant) (BITSEL_u7_u1_298_wire)   $flowthrough 
    $delay BITSEL_u7_u1_298_inst 0
    // ((crc_out [] 6 ) == 1 )
    ==[EQ_u1_u1_300_inst] (BITSEL_u7_u1_298_wire konst_299_wire_constant) (EQ_u1_u1_300_wire)   $flowthrough 
    $delay EQ_u1_u1_300_inst 0
    ==0? [if_stmt_295_branch] (EQ_u1_u1_300_wire)
    // 			$volatile a := (crc_out [] 5 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 164
    // (crc_out [] 5 )
    [][BITSEL_u7_u1_304_inst] (crc_out_283 konst_303_wire_constant) (a_305)   $flowthrough 
    $delay BITSEL_u7_u1_304_inst 0
    // 			$volatile b := (crc_out [] 4 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 165
    // (crc_out [] 4 )
    [][BITSEL_u7_u1_309_inst] (crc_out_283 konst_308_wire_constant) (b_310)   $flowthrough 
    $delay BITSEL_u7_u1_309_inst 0
    // 			$volatile c := (crc_out [] 3 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 166
    // (crc_out [] 3 )
    [][BITSEL_u7_u1_314_inst] (crc_out_283 konst_313_wire_constant) (c_315)   $flowthrough 
    $delay BITSEL_u7_u1_314_inst 0
    // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 167
    // (crc_out [] 2 )
    [][BITSEL_u7_u1_319_inst] (crc_out_283 konst_318_wire_constant) (BITSEL_u7_u1_319_wire)   $flowthrough 
    $delay BITSEL_u7_u1_319_inst 0
    // ((crc_out [] 2 ) ^ 1 )
    ^[XOR_u1_u1_321_inst] (BITSEL_u7_u1_319_wire konst_320_wire_constant) (d_322)   $flowthrough 
    $delay XOR_u1_u1_321_inst 0
    // 			$volatile e := (crc_out [] 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 168
    // (crc_out [] 1 )
    [][BITSEL_u7_u1_326_inst] (crc_out_283 konst_325_wire_constant) (e_327)   $flowthrough 
    $delay BITSEL_u7_u1_326_inst 0
    // 			$volatile f := (crc_out [] 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 169
    // (crc_out [] 0 )
    [][BITSEL_u7_u1_331_inst] (crc_out_283 konst_330_wire_constant) (f_332)   $flowthrough 
    $delay BITSEL_u7_u1_331_inst 0
    // 			$volatile g := ((temp [] 32 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 170
    // (temp [] 32 )
    [][BITSEL_u33_u1_336_inst] (temp_288 konst_335_wire_constant) (BITSEL_u33_u1_336_wire)   $flowthrough 
    $delay BITSEL_u33_u1_336_inst 0
    // ((temp [] 32 ) ^ 1 )
    ^[XOR_u1_u1_338_inst] (BITSEL_u33_u1_336_wire konst_337_wire_constant) (g_339)   $flowthrough 
    $delay XOR_u1_u1_338_inst 0
    // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 171
    // (a && b)
    &&[CONCAT_u1_u2_343_inst] (a_305 b_310) (CONCAT_u1_u2_343_wire)   $flowthrough 
    $delay CONCAT_u1_u2_343_inst 0
    // (c && d)
    &&[CONCAT_u1_u2_346_inst] (c_315 d_322) (CONCAT_u1_u2_346_wire)   $flowthrough 
    $delay CONCAT_u1_u2_346_inst 0
    // ((a && b) && (c && d))
    &&[CONCAT_u2_u4_347_inst] (CONCAT_u1_u2_343_wire CONCAT_u1_u2_346_wire) (CONCAT_u2_u4_347_wire)   $flowthrough 
    $delay CONCAT_u2_u4_347_inst 0
    // (e && f)
    &&[CONCAT_u1_u2_350_inst] (e_327 f_332) (CONCAT_u1_u2_350_wire)   $flowthrough 
    $delay CONCAT_u1_u2_350_inst 0
    // ((e && f) && g)
    &&[CONCAT_u2_u3_352_inst] (CONCAT_u1_u2_350_wire g_339) (CONCAT_u2_u3_352_wire)   $flowthrough 
    $delay CONCAT_u2_u3_352_inst 0
    // (((a && b) && (c && d)) && ((e && f) && g))
    &&[CONCAT_u4_u7_353_inst] (CONCAT_u2_u4_347_wire CONCAT_u2_u3_352_wire) (crc_out_true_354)   $flowthrough 
    $delay CONCAT_u4_u7_353_inst 0
    // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 32 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 174
    // ( $slice crc_out 5 0 ) 
    [:] [slice_359_inst] (crc_out_283 5 0) (slice_359_wire)  $flowthrough
    $delay slice_359_inst 0
    // (temp [] 32 )
    [][BITSEL_u33_u1_362_inst] (temp_288 konst_361_wire_constant) (BITSEL_u33_u1_362_wire)   $flowthrough 
    $delay BITSEL_u33_u1_362_inst 0
    // (( $slice crc_out 5 0 )  && (temp [] 32 ))
    &&[CONCAT_u6_u7_363_inst] (slice_359_wire BITSEL_u33_u1_362_wire) (crc_out_false_364)   $flowthrough 
    $delay CONCAT_u6_u7_363_inst 0
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 177
    // 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 178
    # := [crc_out_true_354_370_buf] (crc_out_true_354) (crc_out_true_354_370_buffered)    
    # := [crc_out_false_364_371_buf] (crc_out_false_364) (crc_out_false_364_371_buffered)    
    $phi [phi_stmt_368] (crc_out_true_354_370_buffered crc_out_false_364_371_buffered) ( final_crc_out_368 ) 
    // 		$volatile next_I := (I - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 181
    // (I - 1 )
    -[SUB_u6_u6_376_inst] (I_277 konst_375_wire_constant) (next_I_377)   $flowthrough 
    $delay SUB_u6_u6_376_inst 0
    // 		$volatile next_temp := (temp << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 182
    // (temp << 1 )
    <<[SHL_u33_u33_381_inst] (temp_288 konst_380_wire_constant) (next_temp_382)   $flowthrough 
    $delay SHL_u33_u33_381_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I > 0 )
    >[UGT_u6_u1_386_inst] (next_I_377 konst_385_wire_constant) (UGT_u6_u1_386_wire)   $flowthrough 
    $delay UGT_u6_u1_386_inst 0
    ==0? [if_stmt_383_branch] (UGT_u6_u1_386_wire)
    // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
    //  file .Aa/sdhc.opt.aa, line 188
    # := [W_generated_crc_390_inst] (crc_out_283) (generated_crc)    
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 155
  next_I_377_279_buf <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_277/phi_stmt_277_sources/Interlock/Sample/req branch_block_stmt_275/loopback_PhiReq/phi_stmt_277/phi_stmt_277_sources/Interlock/Update/req) (branch_block_stmt_275/loopback_PhiReq/phi_stmt_277/phi_stmt_277_sources/Interlock/Sample/ack branch_block_stmt_275/loopback_PhiReq/phi_stmt_277/phi_stmt_277_sources/Interlock/Update/ack)
  phi_stmt_277 <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_277/phi_stmt_277_req branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_277/phi_stmt_277_req) (branch_block_stmt_275/merge_stmt_276_PhiAck/phi_stmt_277_ack)
  final_crc_out_368_285_buf <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_283/phi_stmt_283_sources/Interlock/Sample/req branch_block_stmt_275/loopback_PhiReq/phi_stmt_283/phi_stmt_283_sources/Interlock/Update/req) (branch_block_stmt_275/loopback_PhiReq/phi_stmt_283/phi_stmt_283_sources/Interlock/Sample/ack branch_block_stmt_275/loopback_PhiReq/phi_stmt_283/phi_stmt_283_sources/Interlock/Update/ack)
  // ( $slice message_signal 39 33 ) 
  slice_287_inst <=> (branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_283/phi_stmt_283_sources/slice_287/SplitProtocol/Sample/rr branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_283/phi_stmt_283_sources/slice_287/SplitProtocol/Update/cr) (branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_283/phi_stmt_283_sources/slice_287/SplitProtocol/Sample/ra branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_283/phi_stmt_283_sources/slice_287/SplitProtocol/Update/ca)
  phi_stmt_283 <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_283/phi_stmt_283_req branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_283/phi_stmt_283_req) (branch_block_stmt_275/merge_stmt_276_PhiAck/phi_stmt_283_ack)
  next_temp_382_290_buf <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_288/phi_stmt_288_sources/Interlock/Sample/req branch_block_stmt_275/loopback_PhiReq/phi_stmt_288/phi_stmt_288_sources/Interlock/Update/req) (branch_block_stmt_275/loopback_PhiReq/phi_stmt_288/phi_stmt_288_sources/Interlock/Sample/ack branch_block_stmt_275/loopback_PhiReq/phi_stmt_288/phi_stmt_288_sources/Interlock/Update/ack)
  // ( $slice message_signal 32 0 ) 
  slice_293_inst <=> (branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_288/phi_stmt_288_sources/slice_293/SplitProtocol/Sample/rr branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_288/phi_stmt_288_sources/slice_293/SplitProtocol/Update/cr) (branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_288/phi_stmt_288_sources/slice_293/SplitProtocol/Sample/ra branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_288/phi_stmt_288_sources/slice_293/SplitProtocol/Update/ca)
  phi_stmt_288 <=> (branch_block_stmt_275/loopback_PhiReq/phi_stmt_288/phi_stmt_288_req branch_block_stmt_275/merge_stmt_276__entry___PhiReq/phi_stmt_288/phi_stmt_288_req) (branch_block_stmt_275/merge_stmt_276_PhiAck/phi_stmt_288_ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 163
  // (crc_out [] 6 )
  // ((crc_out [] 6 ) == 1 )
  if_stmt_295_branch <=> (branch_block_stmt_275/if_stmt_295_eval_test/branch_req) (branch_block_stmt_275/if_stmt_295_else_link/else_choice_transition branch_block_stmt_275/if_stmt_295_if_link/if_choice_transition)
  // 			$volatile a := (crc_out [] 5 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 164
  // (crc_out [] 5 )
  // crc_out
  // 			$volatile b := (crc_out [] 4 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 165
  // (crc_out [] 4 )
  // crc_out
  // 			$volatile c := (crc_out [] 3 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 166
  // (crc_out [] 3 )
  // crc_out
  // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 167
  // ((crc_out [] 2 ) ^ 1 )
  // (crc_out [] 2 )
  // crc_out
  // 			$volatile e := (crc_out [] 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 168
  // (crc_out [] 1 )
  // crc_out
  // 			$volatile f := (crc_out [] 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 169
  // (crc_out [] 0 )
  // crc_out
  // 			$volatile g := ((temp [] 32 ) ^ 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 170
  // ((temp [] 32 ) ^ 1 )
  // (temp [] 32 )
  // temp
  // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 171
  // (((a && b) && (c && d)) && ((e && f) && g))
  // ((a && b) && (c && d))
  // (a && b)
  // a
  // b
  // (c && d)
  // c
  // d
  // ((e && f) && g)
  // (e && f)
  // e
  // f
  // g
  // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 32 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 174
  // (( $slice crc_out 5 0 )  && (temp [] 32 ))
  // crc_out
  // (temp [] 32 )
  // temp
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 177
  crc_out_true_354_370_buf <=> (branch_block_stmt_275/MSB_true_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Sample/req branch_block_stmt_275/MSB_true_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Update/req) (branch_block_stmt_275/MSB_true_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Sample/ack branch_block_stmt_275/MSB_true_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Update/ack)
  crc_out_false_364_371_buf <=> (branch_block_stmt_275/MSB_false_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Sample/req branch_block_stmt_275/MSB_false_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Update/req) (branch_block_stmt_275/MSB_false_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Sample/ack branch_block_stmt_275/MSB_false_PhiReq/phi_stmt_368/phi_stmt_368_sources/Interlock/Update/ack)
  phi_stmt_368 <=> (branch_block_stmt_275/MSB_true_PhiReq/phi_stmt_368/phi_stmt_368_req branch_block_stmt_275/MSB_false_PhiReq/phi_stmt_368/phi_stmt_368_req) (branch_block_stmt_275/merge_stmt_367_PhiAck/phi_stmt_368_ack)
  // 		$volatile next_I := (I - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 181
  // (I - 1 )
  // I
  // 		$volatile next_temp := (temp << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 182
  // (temp << 1 )
  // temp
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_I > 0 )
  if_stmt_383_branch <=> (branch_block_stmt_275/if_stmt_383_eval_test/branch_req) (branch_block_stmt_275/if_stmt_383_else_link/else_choice_transition branch_block_stmt_275/if_stmt_383_if_link/if_choice_transition)
  // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
  //  file .Aa/sdhc.opt.aa, line 188
  // crc_out
  W_generated_crc_390_inst <=> (assign_stmt_392/assign_stmt_392_Sample/req assign_stmt_392/assign_stmt_392_Update/req) (assign_stmt_392/assign_stmt_392_Sample/ack assign_stmt_392/assign_stmt_392_Update/ack)
}
$module [generate_crc_7_120] 
{
  $in message_signal:$int<120>
  // can point into 
  $out generated_crc:$int<7>
  // can point into 
  // pipe-declarations for block %generate_crc_7_120
  //  file .Aa/sdhc.opt.aa, line 190
  // pipe-declarations for block %generate_crc_7_120%loop
  //  file .Aa/sdhc.opt.aa, line 195
  // pipe-declarations for block %generate_crc_7_120%loop%
  //  file .Aa/sdhc.opt.aa, line 197
  // pipe-declarations for block %generate_crc_7_120%loop%
  //  file .Aa/sdhc.opt.aa, line 219
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_398] // Branch Block  file .Aa/sdhc.opt.aa, line 195
    {
      $P [branch_block_stmt_398__entry__]
      branch_block_stmt_398__entry__ <-| ($entry)
      $P [branch_block_stmt_398__exit__]
      branch_block_stmt_398__exit__ |-> ($exit)
      $P [merge_stmt_399__entry__] 
      $P [merge_stmt_399__exit__] 
      $P [if_stmt_417__entry__] 
      $P [if_stmt_417__exit__] 
      $P [merge_stmt_489__entry__] 
      $P [merge_stmt_489__exit__] 
      $P [assign_stmt_499_to_assign_stmt_504__entry__] 
      $P [assign_stmt_499_to_assign_stmt_504__exit__] 
      $P [if_stmt_505__entry__] 
      $P [if_stmt_505__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 205
      ;;[if_stmt_417_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_417__entry__ |-> (if_stmt_417_dead_link)
      if_stmt_417__exit__ <-| (if_stmt_417_dead_link)
      ;;[if_stmt_417_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((crc_out [] 6 ) == 1 )
        ;;[EQ_u1_u1_422] 
        {
          // binary expression 
          ||[EQ_u1_u1_422_inputs] 
          {
            // (crc_out [] 6 )
            ;;[BITSEL_u7_u1_420] 
            {
              // binary expression 
              ||[BITSEL_u7_u1_420_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_417__entry__ |-> (if_stmt_417_eval_test)
      $P [EQ_u1_u1_422_place]
      EQ_u1_u1_422_place <-| (if_stmt_417_eval_test)
      ;;[if_stmt_417_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_417_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_422_place |-> (if_stmt_417_if_link if_stmt_417_else_link)
      $P [assign_stmt_427_to_assign_stmt_476__entry__] 
      $P [assign_stmt_427_to_assign_stmt_476__exit__] 
      $P [MSB_true]
      ::[assign_stmt_427_to_assign_stmt_476] 
      {
        // start: WAR dependencies for a
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for a
        // start:  			$volatile a := (crc_out [] 5 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 206
        // volatile! 
        // Source expression
        // (crc_out [] 5 )
        // crc_out
        // Target expression
        // (as target) a
        // start: WAR dependencies for a
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for a
        // end:  			$volatile a := (crc_out [] 5 ) $buffering 1
        // start: WAR dependencies for b
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for b
        // start:  			$volatile b := (crc_out [] 4 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 207
        // volatile! 
        // Source expression
        // (crc_out [] 4 )
        // crc_out
        // Target expression
        // (as target) b
        // start: WAR dependencies for b
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for b
        // end:  			$volatile b := (crc_out [] 4 ) $buffering 1
        // start: WAR dependencies for c
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for c
        // start:  			$volatile c := (crc_out [] 3 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 208
        // volatile! 
        // Source expression
        // (crc_out [] 3 )
        // crc_out
        // Target expression
        // (as target) c
        // start: WAR dependencies for c
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for c
        // end:  			$volatile c := (crc_out [] 3 ) $buffering 1
        // start: WAR dependencies for d
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for d
        // start:  			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 209
        // volatile! 
        // Source expression
        // ((crc_out [] 2 ) ^ 1 )
        // (crc_out [] 2 )
        // crc_out
        // Target expression
        // (as target) d
        // start: WAR dependencies for d
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for d
        // end:  			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
        // start: WAR dependencies for e
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for e
        // start:  			$volatile e := (crc_out [] 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 210
        // volatile! 
        // Source expression
        // (crc_out [] 1 )
        // crc_out
        // Target expression
        // (as target) e
        // start: WAR dependencies for e
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for e
        // end:  			$volatile e := (crc_out [] 1 ) $buffering 1
        // start: WAR dependencies for f
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for f
        // start:  			$volatile f := (crc_out [] 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 211
        // volatile! 
        // Source expression
        // (crc_out [] 0 )
        // crc_out
        // Target expression
        // (as target) f
        // start: WAR dependencies for f
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // done: WAR dependencies for f
        // end:  			$volatile f := (crc_out [] 0 ) $buffering 1
        // start: WAR dependencies for g
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for g
        // start:  			$volatile g := ((temp [] 112 ) ^ 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 212
        // volatile! 
        // Source expression
        // ((temp [] 112 ) ^ 1 )
        // (temp [] 112 )
        // temp
        // Target expression
        // (as target) g
        // start: WAR dependencies for g
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for g
        // end:  			$volatile g := ((temp [] 112 ) ^ 1 ) $buffering 1
        // start: WAR dependencies for crc_out_true
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for crc_out_true
        // start:  			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 213
        // volatile! 
        // Source expression
        // (((a && b) && (c && d)) && ((e && f) && g))
        // ((a && b) && (c && d))
        // (a && b)
        // a
        // b
        // (c && d)
        // c
        // d
        // ((e && f) && g)
        // (e && f)
        // e
        // f
        // g
        // Target expression
        // (as target) crc_out_true
        // start: WAR dependencies for crc_out_true
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for crc_out_true
        // end:  			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_427_to_assign_stmt_476__entry__ |-> (assign_stmt_427_to_assign_stmt_476)
      assign_stmt_427_to_assign_stmt_476__exit__ <-| (assign_stmt_427_to_assign_stmt_476)
      assign_stmt_427_to_assign_stmt_476__entry__ <-| (if_stmt_417_if_link)
      MSB_true <-| (assign_stmt_427_to_assign_stmt_476__exit__)
      $P [assign_stmt_486__entry__] 
      $P [assign_stmt_486__exit__] 
      $P [MSB_false]
      ::[assign_stmt_486] 
      {
        // start: WAR dependencies for crc_out_false
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for crc_out_false
        // start:  			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 112 )) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 216
        // volatile! 
        // Source expression
        // (( $slice crc_out 5 0 )  && (temp [] 112 ))
        // ( $slice crc_out 5 0 ) 
        // crc_out
        // (temp [] 112 )
        // temp
        // Target expression
        // (as target) crc_out_false
        // start: WAR dependencies for crc_out_false
        // ignored out-of-scope w_root 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
        // type of target is $uint<7>
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for crc_out_false
        // end:  			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 112 )) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_486__entry__ |-> (assign_stmt_486)
      assign_stmt_486__exit__ <-| (assign_stmt_486)
      assign_stmt_486__entry__ <-| (if_stmt_417_else_link)
      MSB_false <-| (assign_stmt_486__exit__)
      ::[assign_stmt_499_to_assign_stmt_504] 
      {
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for next_I
        // start:  		$volatile next_I := (I - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 223
        // volatile! 
        // Source expression
        // (I - 1 )
        // I
        // Target expression
        // (as target) next_I
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for next_I
        // end:  		$volatile next_I := (I - 1 ) $buffering 1
        // start: WAR dependencies for next_temp
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for next_temp
        // start:  		$volatile next_temp := (temp << 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 224
        // volatile! 
        // Source expression
        // (temp << 1 )
        // temp
        // Target expression
        // (as target) next_temp
        // start: WAR dependencies for next_temp
        // ignored out-of-scope w_root 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
        // type of target is $uint<113>
        // done: WAR dependencies for next_temp
        // end:  		$volatile next_temp := (temp << 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_499_to_assign_stmt_504__entry__ |-> (assign_stmt_499_to_assign_stmt_504)
      assign_stmt_499_to_assign_stmt_504__exit__ <-| (assign_stmt_499_to_assign_stmt_504)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_505_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_505__entry__ |-> (if_stmt_505_dead_link)
      if_stmt_505__exit__ <-| (if_stmt_505_dead_link)
      ;;[if_stmt_505_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_I > 0 )
        ;;[UGT_u8_u1_508] 
        {
          // binary expression 
          ||[UGT_u8_u1_508_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_505__entry__ |-> (if_stmt_505_eval_test)
      $P [UGT_u8_u1_508_place]
      UGT_u8_u1_508_place <-| (if_stmt_505_eval_test)
      ;;[if_stmt_505_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_505_else_link] 
      {
        $T [else_choice_transition] 
      }
      UGT_u8_u1_508_place |-> (if_stmt_505_if_link if_stmt_505_else_link)
      $P [loopback]
      loopback <-| (if_stmt_505_if_link)
      if_stmt_505__exit__ <-| (if_stmt_505_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 197
      ;;[merge_stmt_399_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_399__entry__ |-> (merge_stmt_399_dead_link)
      merge_stmt_399__exit__ <-| (merge_stmt_399_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 197  --------------------------
      ||[merge_stmt_399__entry___PhiReq] 
      {
        ;;[phi_stmt_400] 
        {
          ||[phi_stmt_400_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_403_konst_delay_trans] $delay
          }
          $T [phi_stmt_400_req] 
        }
        ;;[phi_stmt_405] 
        {
          ||[phi_stmt_405_sources] 
          {
            // sources for 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            // ( $slice message_signal 119 113 ) 
            ;;[slice_408] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_405_req] 
        }
        ;;[phi_stmt_410] 
        {
          ||[phi_stmt_410_sources] 
          {
            // sources for 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
            // type of target is $uint<113>
            // trivial non-constant source .... interlock-buffer introduced 
            // ( $slice message_signal 112 0 ) 
            ;;[slice_414] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_410_req] 
        }
      }
      merge_stmt_399__entry__ |-> (merge_stmt_399__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_400] 
        {
          ||[phi_stmt_400_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_400_req] 
        }
        ;;[phi_stmt_405] 
        {
          ||[phi_stmt_405_sources] 
          {
            // sources for 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_405_req] 
        }
        ;;[phi_stmt_410] 
        {
          ||[phi_stmt_410_sources] 
          {
            // sources for 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
            // type of target is $uint<113>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_410_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_399_PhiReqMerge] 
      merge_stmt_399_PhiReqMerge <-| ( merge_stmt_399__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_399_PhiAck] 
      {
        $T [phi_stmt_400_ack] 
        $T [phi_stmt_405_ack] 
        $T [phi_stmt_410_ack] 
      }
      merge_stmt_399_PhiReqMerge |-> (merge_stmt_399_PhiAck)
      merge_stmt_399__exit__  <-| (merge_stmt_399_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 197  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 219
      ;;[merge_stmt_489_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_489__entry__ |-> (merge_stmt_489_dead_link)
      merge_stmt_489__exit__ <-| (merge_stmt_489_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 219  --------------------------
      ||[MSB_false_PhiReq] 
      {
        ;;[phi_stmt_490] 
        {
          ||[phi_stmt_490_sources] 
          {
            // sources for 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_490_req] 
        }
      }
      MSB_false |-> (MSB_false_PhiReq)
      ||[MSB_true_PhiReq] 
      {
        ;;[phi_stmt_490] 
        {
          ||[phi_stmt_490_sources] 
          {
            // sources for 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
            // type of target is $uint<7>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_490_req] 
        }
      }
      MSB_true |-> (MSB_true_PhiReq)
      $P [merge_stmt_489_PhiReqMerge] 
      merge_stmt_489_PhiReqMerge <-| ( MSB_false_PhiReq  MSB_true_PhiReq )
      ||[merge_stmt_489_PhiAck] 
      {
        $T [phi_stmt_490_ack] 
      }
      merge_stmt_489_PhiReqMerge |-> (merge_stmt_489_PhiAck)
      merge_stmt_489__exit__  <-| (merge_stmt_489_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 219  --------------------------
      merge_stmt_399__entry__ <-| (branch_block_stmt_398__entry__)
      if_stmt_417__entry__ <-| (merge_stmt_399__exit__)
      merge_stmt_489__entry__ <-| (if_stmt_417__exit__)
      assign_stmt_499_to_assign_stmt_504__entry__ <-| (merge_stmt_489__exit__)
      if_stmt_505__entry__ <-| (assign_stmt_499_to_assign_stmt_504__exit__)
      if_stmt_505__exit__ |-> (branch_block_stmt_398__exit__)
    }
    ::[assign_stmt_514] 
    {
      // start:  	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
      //  file .Aa/sdhc.opt.aa, line 230
      $T[assign_stmt_514_sample_start_] 
      $T[assign_stmt_514_sample_completed_] 
      $T[assign_stmt_514_update_start_] 
      $T[assign_stmt_514_update_completed_] 
      // Source expression
      // crc_out
      // Target expression
      // (as target) generated_crc
      // generated_crc
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_514_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_514_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_514_sample_start_ &-> (assign_stmt_514_Sample)
      assign_stmt_514_sample_completed_ <-& (assign_stmt_514_Sample)
      assign_stmt_514_sample_completed_ &-> ($null)
      assign_stmt_514_update_start_ &-> (assign_stmt_514_Update)
      assign_stmt_514_update_completed_ <-& (assign_stmt_514_Update)
      // start: Forward dependencies from crc_out to transition assign_stmt_514_sample_start_
      // done: Forward dependencies from crc_out to transition assign_stmt_514_sample_start_
      // start: WAR dependencies for generated_crc
      // done: WAR dependencies for generated_crc
      // generated_crc
      // write to interface object
      // end:  	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %generate_crc_7_120%loop%
    //  file .Aa/sdhc.opt.aa, line 197
    // constant-object-declarations for block %generate_crc_7_120%loop%
    //  file .Aa/sdhc.opt.aa, line 219
    // constant-object-declarations for block %generate_crc_7_120%loop
    //  file .Aa/sdhc.opt.aa, line 195
    // constant-object-declarations for block %generate_crc_7_120
    //  file .Aa/sdhc.opt.aa, line 190
    // constant-declarations for block %generate_crc_7_120%loop
    //  file .Aa/sdhc.opt.aa, line 195
    // constant-declarations for block %generate_crc_7_120%loop%
    //  file .Aa/sdhc.opt.aa, line 197
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 198
    // ($bitcast ($uint<8>) 121  )
    $constant $W[type_cast_403_wire_constant] : $int<8> := _b01111001// 121
    // constant-declarations for phi:  			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 200
    // constant-declarations for phi:  			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
    // type of target is $uint<113>
    //  file .Aa/sdhc.opt.aa, line 202
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 205
    // 6 
    $constant $W[konst_419_wire_constant] : $int<7> := _b0000110// 6
    // 1 
    $constant $W[konst_421_wire_constant] : $int<1> := _b1// 1
    // 5 
    $constant $W[konst_425_wire_constant] : $int<7> := _b0000101// 5
    // 4 
    $constant $W[konst_430_wire_constant] : $int<7> := _b0000100// 4
    // 3 
    $constant $W[konst_435_wire_constant] : $int<7> := _b0000011// 3
    // 2 
    $constant $W[konst_440_wire_constant] : $int<7> := _b0000010// 2
    // 1 
    $constant $W[konst_442_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_447_wire_constant] : $int<7> := _b0000001// 1
    // 0 
    $constant $W[konst_452_wire_constant] : $int<7> := _b0000000// 0
    // 112 
    $constant $W[konst_457_wire_constant] : $int<113> := _b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000// 112
    // 1 
    $constant $W[konst_459_wire_constant] : $int<1> := _b1// 1
    // 112 
    $constant $W[konst_483_wire_constant] : $int<113> := _b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000// 112
    // constant-declarations for block %generate_crc_7_120%loop%
    //  file .Aa/sdhc.opt.aa, line 219
    // constant-declarations for phi:  			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 220
    // 1 
    $constant $W[konst_497_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_502_wire_constant] : $int<113> := _b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_507_wire_constant] : $int<8> := _b00000000// 0
    // block %generate_crc_7_120%loop
    //  file .Aa/sdhc.opt.aa, line 195
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 197
    // 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 198
    $W[next_I_499_404_buffered] : $int<8>
    // I
    $W[I_400] : $int<8>
    // 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 200
    // ( $slice message_signal 119 113 ) 
    $intermediate $W[slice_408_wire] : $int<7>
    $W[final_crc_out_490_409_buffered] : $int<7>
    // crc_out
    $W[crc_out_405] : $int<7>
    // 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
    // type of target is $uint<113>
    //  file .Aa/sdhc.opt.aa, line 202
    // ( $slice message_signal 112 0 ) 
    $intermediate $W[slice_414_wire] : $int<113>
    $W[next_temp_504_415_buffered] : $int<113>
    // temp
    $W[temp_410] : $int<113>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 205
    // (crc_out [] 6 )
    $intermediate $W[BITSEL_u7_u1_420_wire] : $int<1>
    // ((crc_out [] 6 ) == 1 )
    $intermediate $W[EQ_u1_u1_422_wire] : $int<1>
    // 			$volatile a := (crc_out [] 5 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 206
    // a
    $W[a_427] : $int<1>
    // 			$volatile b := (crc_out [] 4 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 207
    // b
    $W[b_432] : $int<1>
    // 			$volatile c := (crc_out [] 3 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 208
    // c
    $W[c_437] : $int<1>
    // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 209
    // (crc_out [] 2 )
    $intermediate $W[BITSEL_u7_u1_441_wire] : $int<1>
    // d
    $W[d_444] : $int<1>
    // 			$volatile e := (crc_out [] 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 210
    // e
    $W[e_449] : $int<1>
    // 			$volatile f := (crc_out [] 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 211
    // f
    $W[f_454] : $int<1>
    // 			$volatile g := ((temp [] 112 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 212
    // (temp [] 112 )
    $intermediate $W[BITSEL_u113_u1_458_wire] : $int<1>
    // g
    $W[g_461] : $int<1>
    // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 213
    // (a && b)
    $intermediate $W[CONCAT_u1_u2_465_wire] : $int<2>
    // (c && d)
    $intermediate $W[CONCAT_u1_u2_468_wire] : $int<2>
    // ((a && b) && (c && d))
    $intermediate $W[CONCAT_u2_u4_469_wire] : $int<4>
    // (e && f)
    $intermediate $W[CONCAT_u1_u2_472_wire] : $int<2>
    // ((e && f) && g)
    $intermediate $W[CONCAT_u2_u3_474_wire] : $int<3>
    // crc_out_true
    $W[crc_out_true_476] : $int<7>
    // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 112 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 216
    // ( $slice crc_out 5 0 ) 
    $intermediate $W[slice_481_wire] : $int<6>
    // (temp [] 112 )
    $intermediate $W[BITSEL_u113_u1_484_wire] : $int<1>
    // crc_out_false
    $W[crc_out_false_486] : $int<7>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 219
    // 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 220
    $W[crc_out_true_476_492_buffered] : $int<7>
    $W[crc_out_false_486_493_buffered] : $int<7>
    // final_crc_out
    $W[final_crc_out_490] : $int<7>
    // 		$volatile next_I := (I - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 223
    // next_I
    $W[next_I_499] : $int<8>
    // 		$volatile next_temp := (temp << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 224
    // next_temp
    $W[next_temp_504] : $int<113>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I > 0 )
    $intermediate $W[UGT_u8_u1_508_wire] : $int<1>
    // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
    //  file .Aa/sdhc.opt.aa, line 230
    // generated_crc
    // datapath-instances for block %generate_crc_7_120%loop
    //  file .Aa/sdhc.opt.aa, line 195
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 197
    // 			$phi I := 			  ($bitcast ($uint<8>) 121  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 198
    # := [next_I_499_404_buf] (next_I_499) (next_I_499_404_buffered)    
    $phi [phi_stmt_400] (type_cast_403_wire_constant next_I_499_404_buffered) ( I_400 ) 
    // 			$phi crc_out := 			  ( $slice message_signal 119 113 )  $on   $entry 			  final_crc_out $on   loopback 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 200
    // ( $slice message_signal 119 113 ) 
    [:] [slice_408_inst] (message_signal 119 113) (slice_408_wire) 
    $buffering  $out slice_408_inst slice_408_wire 1
    $delay slice_408_inst 1
    # := [final_crc_out_490_409_buf] (final_crc_out_490) (final_crc_out_490_409_buffered)    
    $phi [phi_stmt_405] (slice_408_wire final_crc_out_490_409_buffered) ( crc_out_405 ) 
    // 			$phi temp := 			  ( $slice message_signal 112 0 )  $on   $entry 			  next_temp $on   loopback 
    // type of target is $uint<113>
    //  file .Aa/sdhc.opt.aa, line 202
    // ( $slice message_signal 112 0 ) 
    [:] [slice_414_inst] (message_signal 112 0) (slice_414_wire) 
    $buffering  $out slice_414_inst slice_414_wire 1
    $delay slice_414_inst 1
    # := [next_temp_504_415_buf] (next_temp_504) (next_temp_504_415_buffered)    
    $phi [phi_stmt_410] (slice_414_wire next_temp_504_415_buffered) ( temp_410 ) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 205
    // (crc_out [] 6 )
    [][BITSEL_u7_u1_420_inst] (crc_out_405 konst_419_wire_constant) (BITSEL_u7_u1_420_wire)   $flowthrough 
    $delay BITSEL_u7_u1_420_inst 0
    // ((crc_out [] 6 ) == 1 )
    ==[EQ_u1_u1_422_inst] (BITSEL_u7_u1_420_wire konst_421_wire_constant) (EQ_u1_u1_422_wire)   $flowthrough 
    $delay EQ_u1_u1_422_inst 0
    ==0? [if_stmt_417_branch] (EQ_u1_u1_422_wire)
    // 			$volatile a := (crc_out [] 5 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 206
    // (crc_out [] 5 )
    [][BITSEL_u7_u1_426_inst] (crc_out_405 konst_425_wire_constant) (a_427)   $flowthrough 
    $delay BITSEL_u7_u1_426_inst 0
    // 			$volatile b := (crc_out [] 4 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 207
    // (crc_out [] 4 )
    [][BITSEL_u7_u1_431_inst] (crc_out_405 konst_430_wire_constant) (b_432)   $flowthrough 
    $delay BITSEL_u7_u1_431_inst 0
    // 			$volatile c := (crc_out [] 3 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 208
    // (crc_out [] 3 )
    [][BITSEL_u7_u1_436_inst] (crc_out_405 konst_435_wire_constant) (c_437)   $flowthrough 
    $delay BITSEL_u7_u1_436_inst 0
    // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 209
    // (crc_out [] 2 )
    [][BITSEL_u7_u1_441_inst] (crc_out_405 konst_440_wire_constant) (BITSEL_u7_u1_441_wire)   $flowthrough 
    $delay BITSEL_u7_u1_441_inst 0
    // ((crc_out [] 2 ) ^ 1 )
    ^[XOR_u1_u1_443_inst] (BITSEL_u7_u1_441_wire konst_442_wire_constant) (d_444)   $flowthrough 
    $delay XOR_u1_u1_443_inst 0
    // 			$volatile e := (crc_out [] 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 210
    // (crc_out [] 1 )
    [][BITSEL_u7_u1_448_inst] (crc_out_405 konst_447_wire_constant) (e_449)   $flowthrough 
    $delay BITSEL_u7_u1_448_inst 0
    // 			$volatile f := (crc_out [] 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 211
    // (crc_out [] 0 )
    [][BITSEL_u7_u1_453_inst] (crc_out_405 konst_452_wire_constant) (f_454)   $flowthrough 
    $delay BITSEL_u7_u1_453_inst 0
    // 			$volatile g := ((temp [] 112 ) ^ 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 212
    // (temp [] 112 )
    [][BITSEL_u113_u1_458_inst] (temp_410 konst_457_wire_constant) (BITSEL_u113_u1_458_wire)   $flowthrough 
    $delay BITSEL_u113_u1_458_inst 0
    // ((temp [] 112 ) ^ 1 )
    ^[XOR_u1_u1_460_inst] (BITSEL_u113_u1_458_wire konst_459_wire_constant) (g_461)   $flowthrough 
    $delay XOR_u1_u1_460_inst 0
    // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 213
    // (a && b)
    &&[CONCAT_u1_u2_465_inst] (a_427 b_432) (CONCAT_u1_u2_465_wire)   $flowthrough 
    $delay CONCAT_u1_u2_465_inst 0
    // (c && d)
    &&[CONCAT_u1_u2_468_inst] (c_437 d_444) (CONCAT_u1_u2_468_wire)   $flowthrough 
    $delay CONCAT_u1_u2_468_inst 0
    // ((a && b) && (c && d))
    &&[CONCAT_u2_u4_469_inst] (CONCAT_u1_u2_465_wire CONCAT_u1_u2_468_wire) (CONCAT_u2_u4_469_wire)   $flowthrough 
    $delay CONCAT_u2_u4_469_inst 0
    // (e && f)
    &&[CONCAT_u1_u2_472_inst] (e_449 f_454) (CONCAT_u1_u2_472_wire)   $flowthrough 
    $delay CONCAT_u1_u2_472_inst 0
    // ((e && f) && g)
    &&[CONCAT_u2_u3_474_inst] (CONCAT_u1_u2_472_wire g_461) (CONCAT_u2_u3_474_wire)   $flowthrough 
    $delay CONCAT_u2_u3_474_inst 0
    // (((a && b) && (c && d)) && ((e && f) && g))
    &&[CONCAT_u4_u7_475_inst] (CONCAT_u2_u4_469_wire CONCAT_u2_u3_474_wire) (crc_out_true_476)   $flowthrough 
    $delay CONCAT_u4_u7_475_inst 0
    // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 112 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 216
    // ( $slice crc_out 5 0 ) 
    [:] [slice_481_inst] (crc_out_405 5 0) (slice_481_wire)  $flowthrough
    $delay slice_481_inst 0
    // (temp [] 112 )
    [][BITSEL_u113_u1_484_inst] (temp_410 konst_483_wire_constant) (BITSEL_u113_u1_484_wire)   $flowthrough 
    $delay BITSEL_u113_u1_484_inst 0
    // (( $slice crc_out 5 0 )  && (temp [] 112 ))
    &&[CONCAT_u6_u7_485_inst] (slice_481_wire BITSEL_u113_u1_484_wire) (crc_out_false_486)   $flowthrough 
    $delay CONCAT_u6_u7_485_inst 0
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 219
    // 			$phi final_crc_out := 			  crc_out_true $on   MSB_true 			  crc_out_false $on   MSB_false 
    // type of target is $uint<7>
    //  file .Aa/sdhc.opt.aa, line 220
    # := [crc_out_true_476_492_buf] (crc_out_true_476) (crc_out_true_476_492_buffered)    
    # := [crc_out_false_486_493_buf] (crc_out_false_486) (crc_out_false_486_493_buffered)    
    $phi [phi_stmt_490] (crc_out_true_476_492_buffered crc_out_false_486_493_buffered) ( final_crc_out_490 ) 
    // 		$volatile next_I := (I - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 223
    // (I - 1 )
    -[SUB_u8_u8_498_inst] (I_400 konst_497_wire_constant) (next_I_499)   $flowthrough 
    $delay SUB_u8_u8_498_inst 0
    // 		$volatile next_temp := (temp << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 224
    // (temp << 1 )
    <<[SHL_u113_u113_503_inst] (temp_410 konst_502_wire_constant) (next_temp_504)   $flowthrough 
    $delay SHL_u113_u113_503_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I > 0 )
    >[UGT_u8_u1_508_inst] (next_I_499 konst_507_wire_constant) (UGT_u8_u1_508_wire)   $flowthrough 
    $delay UGT_u8_u1_508_inst 0
    ==0? [if_stmt_505_branch] (UGT_u8_u1_508_wire)
    // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
    //  file .Aa/sdhc.opt.aa, line 230
    # := [W_generated_crc_512_inst] (crc_out_405) (generated_crc)    
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 197
  next_I_499_404_buf <=> (branch_block_stmt_398/loopback_PhiReq/phi_stmt_400/phi_stmt_400_sources/Interlock/Sample/req branch_block_stmt_398/loopback_PhiReq/phi_stmt_400/phi_stmt_400_sources/Interlock/Update/req) (branch_block_stmt_398/loopback_PhiReq/phi_stmt_400/phi_stmt_400_sources/Interlock/Sample/ack branch_block_stmt_398/loopback_PhiReq/phi_stmt_400/phi_stmt_400_sources/Interlock/Update/ack)
  phi_stmt_400 <=> (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_400/phi_stmt_400_req branch_block_stmt_398/loopback_PhiReq/phi_stmt_400/phi_stmt_400_req) (branch_block_stmt_398/merge_stmt_399_PhiAck/phi_stmt_400_ack)
  // ( $slice message_signal 119 113 ) 
  slice_408_inst <=> (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_405/phi_stmt_405_sources/slice_408/SplitProtocol/Sample/rr branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_405/phi_stmt_405_sources/slice_408/SplitProtocol/Update/cr) (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_405/phi_stmt_405_sources/slice_408/SplitProtocol/Sample/ra branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_405/phi_stmt_405_sources/slice_408/SplitProtocol/Update/ca)
  final_crc_out_490_409_buf <=> (branch_block_stmt_398/loopback_PhiReq/phi_stmt_405/phi_stmt_405_sources/Interlock/Sample/req branch_block_stmt_398/loopback_PhiReq/phi_stmt_405/phi_stmt_405_sources/Interlock/Update/req) (branch_block_stmt_398/loopback_PhiReq/phi_stmt_405/phi_stmt_405_sources/Interlock/Sample/ack branch_block_stmt_398/loopback_PhiReq/phi_stmt_405/phi_stmt_405_sources/Interlock/Update/ack)
  phi_stmt_405 <=> (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_405/phi_stmt_405_req branch_block_stmt_398/loopback_PhiReq/phi_stmt_405/phi_stmt_405_req) (branch_block_stmt_398/merge_stmt_399_PhiAck/phi_stmt_405_ack)
  // ( $slice message_signal 112 0 ) 
  slice_414_inst <=> (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_410/phi_stmt_410_sources/slice_414/SplitProtocol/Sample/rr branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_410/phi_stmt_410_sources/slice_414/SplitProtocol/Update/cr) (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_410/phi_stmt_410_sources/slice_414/SplitProtocol/Sample/ra branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_410/phi_stmt_410_sources/slice_414/SplitProtocol/Update/ca)
  next_temp_504_415_buf <=> (branch_block_stmt_398/loopback_PhiReq/phi_stmt_410/phi_stmt_410_sources/Interlock/Sample/req branch_block_stmt_398/loopback_PhiReq/phi_stmt_410/phi_stmt_410_sources/Interlock/Update/req) (branch_block_stmt_398/loopback_PhiReq/phi_stmt_410/phi_stmt_410_sources/Interlock/Sample/ack branch_block_stmt_398/loopback_PhiReq/phi_stmt_410/phi_stmt_410_sources/Interlock/Update/ack)
  phi_stmt_410 <=> (branch_block_stmt_398/merge_stmt_399__entry___PhiReq/phi_stmt_410/phi_stmt_410_req branch_block_stmt_398/loopback_PhiReq/phi_stmt_410/phi_stmt_410_req) (branch_block_stmt_398/merge_stmt_399_PhiAck/phi_stmt_410_ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 205
  // (crc_out [] 6 )
  // ((crc_out [] 6 ) == 1 )
  if_stmt_417_branch <=> (branch_block_stmt_398/if_stmt_417_eval_test/branch_req) (branch_block_stmt_398/if_stmt_417_else_link/else_choice_transition branch_block_stmt_398/if_stmt_417_if_link/if_choice_transition)
  // 			$volatile a := (crc_out [] 5 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 206
  // (crc_out [] 5 )
  // crc_out
  // 			$volatile b := (crc_out [] 4 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 207
  // (crc_out [] 4 )
  // crc_out
  // 			$volatile c := (crc_out [] 3 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 208
  // (crc_out [] 3 )
  // crc_out
  // 			$volatile d := ((crc_out [] 2 ) ^ 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 209
  // ((crc_out [] 2 ) ^ 1 )
  // (crc_out [] 2 )
  // crc_out
  // 			$volatile e := (crc_out [] 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 210
  // (crc_out [] 1 )
  // crc_out
  // 			$volatile f := (crc_out [] 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 211
  // (crc_out [] 0 )
  // crc_out
  // 			$volatile g := ((temp [] 112 ) ^ 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 212
  // ((temp [] 112 ) ^ 1 )
  // (temp [] 112 )
  // temp
  // 			$volatile crc_out_true := (((a && b) && (c && d)) && ((e && f) && g)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 213
  // (((a && b) && (c && d)) && ((e && f) && g))
  // ((a && b) && (c && d))
  // (a && b)
  // a
  // b
  // (c && d)
  // c
  // d
  // ((e && f) && g)
  // (e && f)
  // e
  // f
  // g
  // 			$volatile crc_out_false := (( $slice crc_out 5 0 )  && (temp [] 112 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 216
  // (( $slice crc_out 5 0 )  && (temp [] 112 ))
  // crc_out
  // (temp [] 112 )
  // temp
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 219
  crc_out_true_476_492_buf <=> (branch_block_stmt_398/MSB_true_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Sample/req branch_block_stmt_398/MSB_true_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Update/req) (branch_block_stmt_398/MSB_true_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Sample/ack branch_block_stmt_398/MSB_true_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Update/ack)
  crc_out_false_486_493_buf <=> (branch_block_stmt_398/MSB_false_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Sample/req branch_block_stmt_398/MSB_false_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Update/req) (branch_block_stmt_398/MSB_false_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Sample/ack branch_block_stmt_398/MSB_false_PhiReq/phi_stmt_490/phi_stmt_490_sources/Interlock/Update/ack)
  phi_stmt_490 <=> (branch_block_stmt_398/MSB_true_PhiReq/phi_stmt_490/phi_stmt_490_req branch_block_stmt_398/MSB_false_PhiReq/phi_stmt_490/phi_stmt_490_req) (branch_block_stmt_398/merge_stmt_489_PhiAck/phi_stmt_490_ack)
  // 		$volatile next_I := (I - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 223
  // (I - 1 )
  // I
  // 		$volatile next_temp := (temp << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 224
  // (temp << 1 )
  // temp
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_I > 0 )
  if_stmt_505_branch <=> (branch_block_stmt_398/if_stmt_505_eval_test/branch_req) (branch_block_stmt_398/if_stmt_505_else_link/else_choice_transition branch_block_stmt_398/if_stmt_505_if_link/if_choice_transition)
  // 	generated_crc := crc_out $buffering 1// bits of buffering = 7. 
  //  file .Aa/sdhc.opt.aa, line 230
  // crc_out
  W_generated_crc_512_inst <=> (assign_stmt_514/assign_stmt_514_Sample/req assign_stmt_514/assign_stmt_514_Update/req) (assign_stmt_514/assign_stmt_514_Sample/ack assign_stmt_514/assign_stmt_514_Update/ack)
}
$module [recvdat0] 
{
  $out dat0:$int<1024>
  // can point into 
  nextCRC_0:$int<16>
  // can point into 
  stopBit0:$int<1>
  // can point into 
  // pipe-declarations for block %recvdat0
  //  file .Aa/sdhc.opt.aa, line 232
  // pipe-declarations for block %recvdat0%parallelblock_1
  //  file .Aa/sdhc.opt.aa, line 237
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_521] // Branch Block  file .Aa/sdhc.opt.aa, line 237
    {
      $P [branch_block_stmt_521__entry__]
      branch_block_stmt_521__entry__ <-| ($entry)
      $P [branch_block_stmt_521__exit__]
      branch_block_stmt_521__exit__ |-> ($exit)
      $P [do_while_stmt_522__entry__] 
      $P [do_while_stmt_522__exit__] 
      $P [assign_stmt_560_to_assign_stmt_568__entry__] 
      $P [assign_stmt_560_to_assign_stmt_568__exit__] 
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 239
      <o> [do_while_stmt_522]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_522__entry__] 
        $P[do_while_stmt_522__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_522_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_524
          // 			$phi I_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_0 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_524_sample_start_] 
          $T[phi_stmt_524_sample_completed_] 
          $T[phi_stmt_524_update_start_] 
          $T[phi_stmt_524_update_completed_] 
          $T[phi_stmt_524_sample_start__ps] 
          phi_stmt_524_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_524_sample_completed__ps] 
          phi_stmt_524_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_524_update_start__ps] 
          phi_stmt_524_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_524_update_completed__ps] 
          phi_stmt_524_update_completed_ <-& (phi_stmt_524_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_524_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_524_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_524_update_start_)
          $T[phi_stmt_524_loopback_trigger] 
          phi_stmt_524_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_524_loopback_sample_req] 
          $T[phi_stmt_524_loopback_sample_req_ps] 
          phi_stmt_524_loopback_sample_req <-& (phi_stmt_524_loopback_sample_req_ps)
          phi_stmt_524_loopback_sample_req &-> ($null)
          $T[phi_stmt_524_entry_trigger] 
          phi_stmt_524_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_524_entry_sample_req] 
          $T[phi_stmt_524_entry_sample_req_ps] 
          phi_stmt_524_entry_sample_req <-& (phi_stmt_524_entry_sample_req_ps)
          phi_stmt_524_entry_sample_req &-> ($null)
          phi_stmt_524_update_start_ o<-& (phi_stmt_524_update_completed_ 0)
          phi_stmt_524_sample_start_ o<-& (phi_stmt_524_sample_completed_ 1)
          $T[phi_stmt_524_merged_reqs] 
          $T[phi_stmt_524_phi_mux_ack] 
          $T[phi_stmt_524_phi_mux_ack_ps] 
          phi_stmt_524_phi_mux_ack_ps <-& (phi_stmt_524_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_524_update_completed_)
          $T[type_cast_528_sample_start__ps] 
          $T[type_cast_528_sample_completed__ps] 
          $T[type_cast_528_update_start__ps] 
          $T[type_cast_528_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_528_sample_start_] 
          $T[type_cast_528_sample_completed_] 
          type_cast_528_sample_completed_ <-& (type_cast_528_sample_start_)
          $T[type_cast_528_update_start_] 
          $T [type_cast_528_update_completed_] $delay 
          type_cast_528_update_completed_ <-& (type_cast_528_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_528_sample_start_ <-& (type_cast_528_sample_start__ps)
          type_cast_528_update_start_ <-& (type_cast_528_update_start__ps)
          // Phi complete dependency.
          type_cast_528_sample_completed__ps <-& (type_cast_528_sample_completed_)
          type_cast_528_update_completed__ps <-& (type_cast_528_update_completed_)
          $T[R_next_I_0_529_sample_start__ps] 
          $T[R_next_I_0_529_sample_completed__ps] 
          $T[R_next_I_0_529_update_start__ps] 
          $T[R_next_I_0_529_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_I_0_529_sample_start_] 
          $T[R_next_I_0_529_sample_completed_] 
          $T[R_next_I_0_529_update_start_] 
          $T[R_next_I_0_529_update_completed_] 
          ;;[R_next_I_0_529_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_I_0_529_sample_start_ &-> (R_next_I_0_529_Sample)
          R_next_I_0_529_sample_completed_ <-& (R_next_I_0_529_Sample)
          ;;[R_next_I_0_529_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_I_0_529_update_start_ &-> (R_next_I_0_529_Update)
          R_next_I_0_529_update_completed_ <-& (R_next_I_0_529_Update)
          // RAW reenables for next_I_0
          // Phi start dependency for implicit/constant alternative.
          R_next_I_0_529_sample_start_ <-& (R_next_I_0_529_sample_start__ps)
          R_next_I_0_529_update_start_ <-& (R_next_I_0_529_update_start__ps)
          // Phi complete dependency.
          R_next_I_0_529_sample_completed__ps <-& (R_next_I_0_529_sample_completed_)
          R_next_I_0_529_update_completed__ps <-& (R_next_I_0_529_update_completed_)
          $phisequencer [ phi_stmt_524_phi_seq] : 
          phi_stmt_524_entry_trigger type_cast_528_sample_start__ps type_cast_528_sample_completed__ps type_cast_528_update_start__ps type_cast_528_update_completed__ps phi_stmt_524_loopback_trigger R_next_I_0_529_sample_start__ps R_next_I_0_529_sample_completed__ps R_next_I_0_529_update_start__ps R_next_I_0_529_update_completed__ps :
          phi_stmt_524_sample_start__ps phi_stmt_524_sample_completed__ps phi_stmt_524_update_start__ps phi_stmt_524_update_completed__ps :
          phi_stmt_524_entry_sample_req_ps phi_stmt_524_loopback_sample_req_ps : 
          phi_stmt_524_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_524
          // start:  PHI statement phi_stmt_530
          // 			$phi dat0_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data0 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_530_sample_start_] 
          $T[phi_stmt_530_sample_completed_] 
          $T[phi_stmt_530_update_start_] 
          $T[phi_stmt_530_update_completed_] 
          $T[phi_stmt_530_sample_start__ps] 
          phi_stmt_530_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_530_sample_completed__ps] 
          phi_stmt_530_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_530_update_start__ps] 
          phi_stmt_530_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_530_update_completed__ps] 
          phi_stmt_530_update_completed_ <-& (phi_stmt_530_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_530_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_530_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_530_update_start_)
          $T[phi_stmt_530_loopback_trigger] 
          phi_stmt_530_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_530_loopback_sample_req] 
          $T[phi_stmt_530_loopback_sample_req_ps] 
          phi_stmt_530_loopback_sample_req <-& (phi_stmt_530_loopback_sample_req_ps)
          phi_stmt_530_loopback_sample_req &-> ($null)
          $T[phi_stmt_530_entry_trigger] 
          phi_stmt_530_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_530_entry_sample_req] 
          $T[phi_stmt_530_entry_sample_req_ps] 
          phi_stmt_530_entry_sample_req <-& (phi_stmt_530_entry_sample_req_ps)
          phi_stmt_530_entry_sample_req &-> ($null)
          phi_stmt_530_update_start_ o<-& (phi_stmt_530_update_completed_ 0)
          phi_stmt_530_sample_start_ o<-& (phi_stmt_530_sample_completed_ 1)
          $T[phi_stmt_530_merged_reqs] 
          $T[phi_stmt_530_phi_mux_ack] 
          $T[phi_stmt_530_phi_mux_ack_ps] 
          phi_stmt_530_phi_mux_ack_ps <-& (phi_stmt_530_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_530_update_completed_)
          $T[type_cast_534_sample_start__ps] 
          $T[type_cast_534_sample_completed__ps] 
          $T[type_cast_534_update_start__ps] 
          $T[type_cast_534_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_534_sample_start_] 
          $T[type_cast_534_sample_completed_] 
          type_cast_534_sample_completed_ <-& (type_cast_534_sample_start_)
          $T[type_cast_534_update_start_] 
          $T [type_cast_534_update_completed_] $delay 
          type_cast_534_update_completed_ <-& (type_cast_534_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_534_sample_start_ <-& (type_cast_534_sample_start__ps)
          type_cast_534_update_start_ <-& (type_cast_534_update_start__ps)
          // Phi complete dependency.
          type_cast_534_sample_completed__ps <-& (type_cast_534_sample_completed_)
          type_cast_534_update_completed__ps <-& (type_cast_534_update_completed_)
          $T[R_next_data0_535_sample_start__ps] 
          $T[R_next_data0_535_sample_completed__ps] 
          $T[R_next_data0_535_update_start__ps] 
          $T[R_next_data0_535_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_data0_535_sample_start_] 
          $T[R_next_data0_535_sample_completed_] 
          $T[R_next_data0_535_update_start_] 
          $T[R_next_data0_535_update_completed_] 
          ;;[R_next_data0_535_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_data0_535_sample_start_ &-> (R_next_data0_535_Sample)
          R_next_data0_535_sample_completed_ <-& (R_next_data0_535_Sample)
          ;;[R_next_data0_535_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_data0_535_update_start_ &-> (R_next_data0_535_Update)
          R_next_data0_535_update_completed_ <-& (R_next_data0_535_Update)
          // RAW reenables for next_data0
          // Phi start dependency for implicit/constant alternative.
          R_next_data0_535_sample_start_ <-& (R_next_data0_535_sample_start__ps)
          R_next_data0_535_update_start_ <-& (R_next_data0_535_update_start__ps)
          // Phi complete dependency.
          R_next_data0_535_sample_completed__ps <-& (R_next_data0_535_sample_completed_)
          R_next_data0_535_update_completed__ps <-& (R_next_data0_535_update_completed_)
          $phisequencer [ phi_stmt_530_phi_seq] : 
          phi_stmt_530_entry_trigger type_cast_534_sample_start__ps type_cast_534_sample_completed__ps type_cast_534_update_start__ps type_cast_534_update_completed__ps phi_stmt_530_loopback_trigger R_next_data0_535_sample_start__ps R_next_data0_535_sample_completed__ps R_next_data0_535_update_start__ps R_next_data0_535_update_completed__ps :
          phi_stmt_530_sample_start__ps phi_stmt_530_sample_completed__ps phi_stmt_530_update_start__ps phi_stmt_530_update_completed__ps :
          phi_stmt_530_entry_sample_req_ps phi_stmt_530_loopback_sample_req_ps : 
          phi_stmt_530_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_530
          // start:  			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 1042. 
          //  file .Aa/sdhc.opt.aa, line 247
          // Source expression
          // ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx))
          $T[OR_u1042_u1042_546_sample_start_] 
          $T[OR_u1042_u1042_546_sample_completed_] 
          $T[OR_u1042_u1042_546_update_start_] 
          $T[OR_u1042_u1042_546_update_completed_] 
          // (dat0_t << 1 )
          // dat0_t
          // (($bitcast ($uint<1041>) 0  ) && DAT0Rx)
          // DAT0Rx
          $T[RPIPE_DAT0Rx_544_sample_start_] 
          $T[RPIPE_DAT0Rx_544_sample_completed_] 
          $T[RPIPE_DAT0Rx_544_update_start_] 
          $T[RPIPE_DAT0Rx_544_update_completed_] 
          ;;[RPIPE_DAT0Rx_544_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_544_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_544_sample_start_ &-> (RPIPE_DAT0Rx_544_Sample)
          RPIPE_DAT0Rx_544_sample_completed_ <-& (RPIPE_DAT0Rx_544_Sample)
          RPIPE_DAT0Rx_544_update_start_ <-& (RPIPE_DAT0Rx_544_sample_completed_)
          RPIPE_DAT0Rx_544_update_start_ &-> (RPIPE_DAT0Rx_544_Update)
          RPIPE_DAT0Rx_544_update_completed_ <-& (RPIPE_DAT0Rx_544_Update)
          RPIPE_DAT0Rx_544_sample_start_ o<-& (RPIPE_DAT0Rx_544_update_completed_ 0)
          // start: Forward dependencies from (dat0_t << 1 ) to transition OR_u1042_u1042_546_sample_start_
          OR_u1042_u1042_546_sample_start_ <-& (phi_stmt_530_update_completed_)
          // done: Forward dependencies from (dat0_t << 1 ) to transition OR_u1042_u1042_546_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT0Rx) to transition OR_u1042_u1042_546_sample_start_
          OR_u1042_u1042_546_sample_start_ <-& (RPIPE_DAT0Rx_544_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT0Rx) to transition OR_u1042_u1042_546_sample_start_
          ;;[OR_u1042_u1042_546_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u1042_u1042_546_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u1042_u1042_546_sample_start_ &-> (OR_u1042_u1042_546_Sample)
          OR_u1042_u1042_546_sample_completed_ <-& (OR_u1042_u1042_546_Sample)
          OR_u1042_u1042_546_sample_completed_ &-> ($null)
          OR_u1042_u1042_546_update_start_ &-> (OR_u1042_u1042_546_Update)
          OR_u1042_u1042_546_update_completed_ <-& (OR_u1042_u1042_546_Update)
          // RAW reenables for (dat0_t << 1 )
          phi_stmt_530_update_start_ o<-& (OR_u1042_u1042_546_sample_completed_ 0)
          // RAW reenables for (($bitcast ($uint<1041>) 0  ) && DAT0Rx)
          RPIPE_DAT0Rx_544_update_start_ o<-& (OR_u1042_u1042_546_sample_completed_ 0)
          // self-release: 
          OR_u1042_u1042_546_sample_start_ o<-& (OR_u1042_u1042_546_sample_completed_ 1)
          $null &-> (OR_u1042_u1042_546_update_start_)
          OR_u1042_u1042_546_update_start_ o<-& (OR_u1042_u1042_546_update_completed_ 0)
          // Target expression
          // (as target) next_data0
          // start: WAR dependencies for next_data0
          // WAR dependency: Read: next_data0 before Write: 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 1042. 
          OR_u1042_u1042_546_update_start_ <-& (phi_stmt_530_sample_completed_)
          phi_stmt_530_sample_start_ o<-& (OR_u1042_u1042_546_update_completed_ 0)
          // WAR dependency: release  Read: next_data0 with Write: 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 1042. 
          // done: WAR dependencies for next_data0
          // end:  			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
          // start: WAR dependencies for next_I_0
          // WAR dependency: Read: next_I_0 before Write: 			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_0
          // start:  			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 248
          // volatile! 
          // Source expression
          // (I_0 + 1 )
          // I_0
          // Target expression
          // (as target) next_I_0
          // start: WAR dependencies for next_I_0
          // WAR dependency: Read: next_I_0 before Write: 			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_0
          // end:  			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
          // (next_I_0 < 1042 )
          // next_I_0
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_I_0 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_524_update_completed_)
          // done: Forward dependencies from (next_I_0 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT0Rx
          // read-dependencies for pipe DAT0Rx
          // write-dependencies for pipe DAT0Rx
          // signal write dependencies for DAT0Rx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_522__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_522_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_522__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_522_loop_body : condition_evaluated
        $bind do_while_stmt_522__entry__  => do_while_stmt_522_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_522_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_522__exit__)
      }
      do_while_stmt_522__entry__ |-> (do_while_stmt_522)
      do_while_stmt_522__exit__ <-| (do_while_stmt_522)
      ::[assign_stmt_560_to_assign_stmt_568] 
      {
        // start: WAR dependencies for dat0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat0
        // start:  		$volatile dat0 := ( $slice next_data0 1040 17 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 250
        // volatile! 
        // Source expression
        // ( $slice next_data0 1040 17 ) 
        // next_data0
        // Target expression
        // (as target) dat0
        // dat0
        // write to interface object
        // start: WAR dependencies for dat0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat0
        // dat0
        // write to interface object
        // end:  		$volatile dat0 := ( $slice next_data0 1040 17 )  $buffering 1
        // start: WAR dependencies for nextCRC_0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_0
        // start:  		$volatile nextCRC_0 := ( $slice next_data0 16 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 251
        // volatile! 
        // Source expression
        // ( $slice next_data0 16 1 ) 
        // next_data0
        // Target expression
        // (as target) nextCRC_0
        // nextCRC_0
        // write to interface object
        // start: WAR dependencies for nextCRC_0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_0
        // nextCRC_0
        // write to interface object
        // end:  		$volatile nextCRC_0 := ( $slice next_data0 16 1 )  $buffering 1
        // start: WAR dependencies for stopBit0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit0
        // start:  		$volatile stopBit0 := ( $slice next_data0 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 252
        // volatile! 
        // Source expression
        // ( $slice next_data0 0 0 ) 
        // next_data0
        // Target expression
        // (as target) stopBit0
        // stopBit0
        // write to interface object
        // start: WAR dependencies for stopBit0
        // ignored out-of-scope w_root 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit0
        // stopBit0
        // write to interface object
        // end:  		$volatile stopBit0 := ( $slice next_data0 0 0 )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_560_to_assign_stmt_568__entry__ |-> (assign_stmt_560_to_assign_stmt_568)
      assign_stmt_560_to_assign_stmt_568__exit__ <-| (assign_stmt_560_to_assign_stmt_568)
      do_while_stmt_522__entry__ <-| (branch_block_stmt_521__entry__)
      assign_stmt_560_to_assign_stmt_568__entry__ <-| (do_while_stmt_522__exit__)
      assign_stmt_560_to_assign_stmt_568__exit__ |-> (branch_block_stmt_521__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %recvdat0%parallelblock_1%
    //  file .Aa/sdhc.opt.aa, line 241
    // constant-object-declarations for block %recvdat0%parallelblock_1
    //  file .Aa/sdhc.opt.aa, line 237
    // constant-object-declarations for block %recvdat0
    //  file .Aa/sdhc.opt.aa, line 232
    // constant-declarations for block %recvdat0%parallelblock_1
    //  file .Aa/sdhc.opt.aa, line 237
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 239
    // 1042 
    $constant $W[konst_555_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %recvdat0%parallelblock_1%
    //  file .Aa/sdhc.opt.aa, line 241
    // constant-declarations for phi:  			$phi I_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 242
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_528_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat0_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 244
    // ($bitcast ($uint<1042>) 0  )
    $constant $W[type_cast_534_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_539_wire_constant] : $int<1042> := _b
    // ($bitcast ($uint<1041>) 0  )
    $constant $W[type_cast_543_wire_constant] : $int<1041> := _b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_550_wire_constant] : $int<11> := _b00000000001// 1
    // block %recvdat0%parallelblock_1
    //  file .Aa/sdhc.opt.aa, line 237
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 239
    // (next_I_0 < 1042 )
    $intermediate $W[ULT_u11_u1_556_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 241
    // 			$phi I_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 242
    $W[next_I_0_552_529_buffered] : $int<11>
    // I_0
    $W[I_0_524] : $int<11>
    // 			$phi dat0_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 244
    $W[next_data0_547_535_buffered] : $int<1042>
    // dat0_t
    $W[dat0_t_530] : $int<1042>
    // 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 247
    // (dat0_t << 1 )
    $intermediate $W[SHL_u1042_u1042_540_wire] : $int<1042>
    // DAT0Rx
    $W[RPIPE_DAT0Rx_544_wire] : $int<1>
    // (($bitcast ($uint<1041>) 0  ) && DAT0Rx)
    $intermediate $W[CONCAT_u1041_u1042_545_wire] : $int<1042>
    // next_data0
    $W[next_data0_547] : $int<1042>
    // 			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 248
    // next_I_0
    $W[next_I_0_552] : $int<11>
    // 		$volatile dat0 := ( $slice next_data0 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 250
    // dat0
    // 		$volatile nextCRC_0 := ( $slice next_data0 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 251
    // nextCRC_0
    // 		$volatile stopBit0 := ( $slice next_data0 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 252
    // stopBit0
    // datapath-instances for block %recvdat0%parallelblock_1
    //  file .Aa/sdhc.opt.aa, line 237
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 239
    // (next_I_0 < 1042 )
    <[ULT_u11_u1_556_inst] (next_I_0_552 konst_555_wire_constant) (ULT_u11_u1_556_wire)   $flowthrough 
    $delay ULT_u11_u1_556_inst 0
    ==0? [do_while_stmt_522_branch] (ULT_u11_u1_556_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 241
    // 			$phi I_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 242
    # := [next_I_0_552_529_buf] (next_I_0_552) (next_I_0_552_529_buffered)     $fullrate
    $buffering $out next_I_0_552_529_buf next_I_0_552_529_buffered  1
    # $phi [phi_stmt_524] (type_cast_528_wire_constant next_I_0_552_529_buffered) ( I_0_524 ) $fullrate
    // $buffering  $out phi_stmt_524 I_0_524 2
    // 			$phi dat0_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 244
    # := [next_data0_547_535_buf] (next_data0_547) (next_data0_547_535_buffered)     $fullrate
    $buffering $out next_data0_547_535_buf next_data0_547_535_buffered  1
    # $phi [phi_stmt_530] (type_cast_534_wire_constant next_data0_547_535_buffered) ( dat0_t_530 ) $fullrate
    // $buffering  $out phi_stmt_530 dat0_t_530 2
    // 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 247
    // (dat0_t << 1 )
    <<[SHL_u1042_u1042_540_inst] (dat0_t_530 konst_539_wire_constant) (SHL_u1042_u1042_540_wire)   $flowthrough 
    $delay SHL_u1042_u1042_540_inst 0
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_544_inst] (DAT0Rx) (RPIPE_DAT0Rx_544_wire)  $fullrate 
    $buffering $out RPIPE_DAT0Rx_544_inst RPIPE_DAT0Rx_544_wire 1
    // (($bitcast ($uint<1041>) 0  ) && DAT0Rx)
    &&[CONCAT_u1041_u1042_545_inst] (type_cast_543_wire_constant RPIPE_DAT0Rx_544_wire) (CONCAT_u1041_u1042_545_wire)   $flowthrough 
    $delay CONCAT_u1041_u1042_545_inst 0
    // ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx))
    |[OR_u1042_u1042_546_inst] (SHL_u1042_u1042_540_wire CONCAT_u1041_u1042_545_wire) (next_data0_547)    $fullrate
    $buffering  $out OR_u1042_u1042_546_inst next_data0_547 2
    $delay OR_u1042_u1042_546_inst 1
    // 			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 248
    // (I_0 + 1 )
    +[ADD_u11_u11_551_inst] (I_0_524 konst_550_wire_constant) (next_I_0_552)   $flowthrough 
    $delay ADD_u11_u11_551_inst 0
    // 		$volatile dat0 := ( $slice next_data0 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 250
    // ( $slice next_data0 1040 17 ) 
    [:] [slice_559_inst] (next_data0_547 1040 17) (dat0)  $flowthrough
    $delay slice_559_inst 0
    // 		$volatile nextCRC_0 := ( $slice next_data0 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 251
    // ( $slice next_data0 16 1 ) 
    [:] [slice_563_inst] (next_data0_547 16 1) (nextCRC_0)  $flowthrough
    $delay slice_563_inst 0
    // 		$volatile stopBit0 := ( $slice next_data0 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 252
    // ( $slice next_data0 0 0 ) 
    [:] [slice_567_inst] (next_data0_547 0 0) (stopBit0)  $flowthrough
    $delay slice_567_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_522
  //  file .Aa/sdhc.opt.aa, line 239
  phi_stmt_524 <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_524_entry_sample_req branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_524_loopback_sample_req) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_524_phi_mux_ack)
  next_I_0_552_529_buf <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_I_0_529_Sample/req branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_I_0_529_Update/req) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_I_0_529_Sample/ack branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_I_0_529_Update/ack)
  phi_stmt_530 <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_530_entry_sample_req branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_530_loopback_sample_req) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/phi_stmt_530_phi_mux_ack)
  next_data0_547_535_buf <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_data0_535_Sample/req branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_data0_535_Update/req) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_data0_535_Sample/ack branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/R_next_data0_535_Update/ack)
  // 			next_data0 := ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx)) $buffering 2// bits of buffering = 2084. 
  //  file .Aa/sdhc.opt.aa, line 247
  // ((dat0_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT0Rx))
  // (dat0_t << 1 )
  // dat0_t
  // (($bitcast ($uint<1041>) 0  ) && DAT0Rx)
  // DAT0Rx
  RPIPE_DAT0Rx_544_inst <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_DAT0Rx_544_Sample/rr branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_DAT0Rx_544_Update/cr) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_DAT0Rx_544_Sample/ra branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_DAT0Rx_544_Update/ca)
  OR_u1042_u1042_546_inst <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/OR_u1042_u1042_546_Sample/rr branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/OR_u1042_u1042_546_Update/cr) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/OR_u1042_u1042_546_Sample/ra branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/OR_u1042_u1042_546_Update/ca)
  // 			$volatile next_I_0 := (I_0 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 248
  // (I_0 + 1 )
  // I_0
  // (next_I_0 < 1042 )
  // next_I_0
  do_while_stmt_522_branch <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/condition_evaluated) (branch_block_stmt_521/do_while_stmt_522/loop_exit/ack branch_block_stmt_521/do_while_stmt_522/loop_taken/ack)
  // 		$volatile dat0 := ( $slice next_data0 1040 17 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 250
  // next_data0
  // 		$volatile nextCRC_0 := ( $slice next_data0 16 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 251
  // next_data0
  // 		$volatile stopBit0 := ( $slice next_data0 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 252
  // next_data0
}
$module [recvdat1] 
{
  $out dat1:$int<1024>
  // can point into 
  nextCRC_1:$int<16>
  // can point into 
  stopBit1:$int<1>
  // can point into 
  // pipe-declarations for block %recvdat1
  //  file .Aa/sdhc.opt.aa, line 255
  // pipe-declarations for block %recvdat1%parallelblock_2
  //  file .Aa/sdhc.opt.aa, line 260
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_575] // Branch Block  file .Aa/sdhc.opt.aa, line 260
    {
      $P [branch_block_stmt_575__entry__]
      branch_block_stmt_575__entry__ <-| ($entry)
      $P [branch_block_stmt_575__exit__]
      branch_block_stmt_575__exit__ |-> ($exit)
      $P [do_while_stmt_576__entry__] 
      $P [do_while_stmt_576__exit__] 
      $P [assign_stmt_611_to_assign_stmt_619__entry__] 
      $P [assign_stmt_611_to_assign_stmt_619__exit__] 
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 262
      <o> [do_while_stmt_576]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_576__entry__] 
        $P[do_while_stmt_576__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_576_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_578
          // 			$phi I_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_1 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_578_sample_start_] 
          $T[phi_stmt_578_sample_completed_] 
          $T[phi_stmt_578_update_start_] 
          $T[phi_stmt_578_update_completed_] 
          $T[phi_stmt_578_sample_start__ps] 
          phi_stmt_578_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_578_sample_completed__ps] 
          phi_stmt_578_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_578_update_start__ps] 
          phi_stmt_578_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_578_update_completed__ps] 
          phi_stmt_578_update_completed_ <-& (phi_stmt_578_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_578_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_578_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_578_update_start_)
          $T[phi_stmt_578_loopback_trigger] 
          phi_stmt_578_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_578_loopback_sample_req] 
          $T[phi_stmt_578_loopback_sample_req_ps] 
          phi_stmt_578_loopback_sample_req <-& (phi_stmt_578_loopback_sample_req_ps)
          phi_stmt_578_loopback_sample_req &-> ($null)
          $T[phi_stmt_578_entry_trigger] 
          phi_stmt_578_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_578_entry_sample_req] 
          $T[phi_stmt_578_entry_sample_req_ps] 
          phi_stmt_578_entry_sample_req <-& (phi_stmt_578_entry_sample_req_ps)
          phi_stmt_578_entry_sample_req &-> ($null)
          phi_stmt_578_update_start_ o<-& (phi_stmt_578_update_completed_ 0)
          phi_stmt_578_sample_start_ o<-& (phi_stmt_578_sample_completed_ 1)
          $T[phi_stmt_578_merged_reqs] 
          $T[phi_stmt_578_phi_mux_ack] 
          $T[phi_stmt_578_phi_mux_ack_ps] 
          phi_stmt_578_phi_mux_ack_ps <-& (phi_stmt_578_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_578_update_completed_)
          $T[type_cast_581_sample_start__ps] 
          $T[type_cast_581_sample_completed__ps] 
          $T[type_cast_581_update_start__ps] 
          $T[type_cast_581_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_581_sample_start_] 
          $T[type_cast_581_sample_completed_] 
          type_cast_581_sample_completed_ <-& (type_cast_581_sample_start_)
          $T[type_cast_581_update_start_] 
          $T [type_cast_581_update_completed_] $delay 
          type_cast_581_update_completed_ <-& (type_cast_581_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_581_sample_start_ <-& (type_cast_581_sample_start__ps)
          type_cast_581_update_start_ <-& (type_cast_581_update_start__ps)
          // Phi complete dependency.
          type_cast_581_sample_completed__ps <-& (type_cast_581_sample_completed_)
          type_cast_581_update_completed__ps <-& (type_cast_581_update_completed_)
          $T[R_next_I_1_582_sample_start__ps] 
          $T[R_next_I_1_582_sample_completed__ps] 
          $T[R_next_I_1_582_update_start__ps] 
          $T[R_next_I_1_582_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_I_1_582_sample_start_] 
          $T[R_next_I_1_582_sample_completed_] 
          $T[R_next_I_1_582_update_start_] 
          $T[R_next_I_1_582_update_completed_] 
          ;;[R_next_I_1_582_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_I_1_582_sample_start_ &-> (R_next_I_1_582_Sample)
          R_next_I_1_582_sample_completed_ <-& (R_next_I_1_582_Sample)
          ;;[R_next_I_1_582_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_I_1_582_update_start_ &-> (R_next_I_1_582_Update)
          R_next_I_1_582_update_completed_ <-& (R_next_I_1_582_Update)
          // RAW reenables for next_I_1
          // Phi start dependency for implicit/constant alternative.
          R_next_I_1_582_sample_start_ <-& (R_next_I_1_582_sample_start__ps)
          R_next_I_1_582_update_start_ <-& (R_next_I_1_582_update_start__ps)
          // Phi complete dependency.
          R_next_I_1_582_sample_completed__ps <-& (R_next_I_1_582_sample_completed_)
          R_next_I_1_582_update_completed__ps <-& (R_next_I_1_582_update_completed_)
          $phisequencer [ phi_stmt_578_phi_seq] : 
          phi_stmt_578_entry_trigger type_cast_581_sample_start__ps type_cast_581_sample_completed__ps type_cast_581_update_start__ps type_cast_581_update_completed__ps phi_stmt_578_loopback_trigger R_next_I_1_582_sample_start__ps R_next_I_1_582_sample_completed__ps R_next_I_1_582_update_start__ps R_next_I_1_582_update_completed__ps :
          phi_stmt_578_sample_start__ps phi_stmt_578_sample_completed__ps phi_stmt_578_update_start__ps phi_stmt_578_update_completed__ps :
          phi_stmt_578_entry_sample_req_ps phi_stmt_578_loopback_sample_req_ps : 
          phi_stmt_578_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_578
          // start:  PHI statement phi_stmt_583
          // 			$phi dat1_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data1 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_583_sample_start_] 
          $T[phi_stmt_583_sample_completed_] 
          $T[phi_stmt_583_update_start_] 
          $T[phi_stmt_583_update_completed_] 
          $T[phi_stmt_583_sample_start__ps] 
          phi_stmt_583_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_583_sample_completed__ps] 
          phi_stmt_583_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_583_update_start__ps] 
          phi_stmt_583_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_583_update_completed__ps] 
          phi_stmt_583_update_completed_ <-& (phi_stmt_583_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_583_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_583_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_583_update_start_)
          $T[phi_stmt_583_loopback_trigger] 
          phi_stmt_583_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_583_loopback_sample_req] 
          $T[phi_stmt_583_loopback_sample_req_ps] 
          phi_stmt_583_loopback_sample_req <-& (phi_stmt_583_loopback_sample_req_ps)
          phi_stmt_583_loopback_sample_req &-> ($null)
          $T[phi_stmt_583_entry_trigger] 
          phi_stmt_583_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_583_entry_sample_req] 
          $T[phi_stmt_583_entry_sample_req_ps] 
          phi_stmt_583_entry_sample_req <-& (phi_stmt_583_entry_sample_req_ps)
          phi_stmt_583_entry_sample_req &-> ($null)
          phi_stmt_583_update_start_ o<-& (phi_stmt_583_update_completed_ 0)
          phi_stmt_583_sample_start_ o<-& (phi_stmt_583_sample_completed_ 1)
          $T[phi_stmt_583_merged_reqs] 
          $T[phi_stmt_583_phi_mux_ack] 
          $T[phi_stmt_583_phi_mux_ack_ps] 
          phi_stmt_583_phi_mux_ack_ps <-& (phi_stmt_583_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_583_update_completed_)
          $T[type_cast_586_sample_start__ps] 
          $T[type_cast_586_sample_completed__ps] 
          $T[type_cast_586_update_start__ps] 
          $T[type_cast_586_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_586_sample_start_] 
          $T[type_cast_586_sample_completed_] 
          type_cast_586_sample_completed_ <-& (type_cast_586_sample_start_)
          $T[type_cast_586_update_start_] 
          $T [type_cast_586_update_completed_] $delay 
          type_cast_586_update_completed_ <-& (type_cast_586_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_586_sample_start_ <-& (type_cast_586_sample_start__ps)
          type_cast_586_update_start_ <-& (type_cast_586_update_start__ps)
          // Phi complete dependency.
          type_cast_586_sample_completed__ps <-& (type_cast_586_sample_completed_)
          type_cast_586_update_completed__ps <-& (type_cast_586_update_completed_)
          $T[R_next_data1_587_sample_start__ps] 
          $T[R_next_data1_587_sample_completed__ps] 
          $T[R_next_data1_587_update_start__ps] 
          $T[R_next_data1_587_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_data1_587_sample_start_] 
          $T[R_next_data1_587_sample_completed_] 
          $T[R_next_data1_587_update_start_] 
          $T[R_next_data1_587_update_completed_] 
          ;;[R_next_data1_587_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_data1_587_sample_start_ &-> (R_next_data1_587_Sample)
          R_next_data1_587_sample_completed_ <-& (R_next_data1_587_Sample)
          ;;[R_next_data1_587_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_data1_587_update_start_ &-> (R_next_data1_587_Update)
          R_next_data1_587_update_completed_ <-& (R_next_data1_587_Update)
          // RAW reenables for next_data1
          // Phi start dependency for implicit/constant alternative.
          R_next_data1_587_sample_start_ <-& (R_next_data1_587_sample_start__ps)
          R_next_data1_587_update_start_ <-& (R_next_data1_587_update_start__ps)
          // Phi complete dependency.
          R_next_data1_587_sample_completed__ps <-& (R_next_data1_587_sample_completed_)
          R_next_data1_587_update_completed__ps <-& (R_next_data1_587_update_completed_)
          $phisequencer [ phi_stmt_583_phi_seq] : 
          phi_stmt_583_entry_trigger type_cast_586_sample_start__ps type_cast_586_sample_completed__ps type_cast_586_update_start__ps type_cast_586_update_completed__ps phi_stmt_583_loopback_trigger R_next_data1_587_sample_start__ps R_next_data1_587_sample_completed__ps R_next_data1_587_update_start__ps R_next_data1_587_update_completed__ps :
          phi_stmt_583_sample_start__ps phi_stmt_583_sample_completed__ps phi_stmt_583_update_start__ps phi_stmt_583_update_completed__ps :
          phi_stmt_583_entry_sample_req_ps phi_stmt_583_loopback_sample_req_ps : 
          phi_stmt_583_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_583
          // start:  			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 1// bits of buffering = 1042. 
          //  file .Aa/sdhc.opt.aa, line 270
          // Source expression
          // ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx))
          $T[OR_u1042_u1042_597_sample_start_] 
          $T[OR_u1042_u1042_597_sample_completed_] 
          $T[OR_u1042_u1042_597_update_start_] 
          $T[OR_u1042_u1042_597_update_completed_] 
          // (dat1_t << 1 )
          // dat1_t
          // (($bitcast ($uint<1041>) 0  ) && DAT1Rx)
          // DAT1Rx
          $T[RPIPE_DAT1Rx_595_sample_start_] 
          $T[RPIPE_DAT1Rx_595_sample_completed_] 
          $T[RPIPE_DAT1Rx_595_update_start_] 
          $T[RPIPE_DAT1Rx_595_update_completed_] 
          ;;[RPIPE_DAT1Rx_595_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT1Rx_595_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT1Rx_595_sample_start_ &-> (RPIPE_DAT1Rx_595_Sample)
          RPIPE_DAT1Rx_595_sample_completed_ <-& (RPIPE_DAT1Rx_595_Sample)
          RPIPE_DAT1Rx_595_update_start_ <-& (RPIPE_DAT1Rx_595_sample_completed_)
          RPIPE_DAT1Rx_595_update_start_ &-> (RPIPE_DAT1Rx_595_Update)
          RPIPE_DAT1Rx_595_update_completed_ <-& (RPIPE_DAT1Rx_595_Update)
          RPIPE_DAT1Rx_595_sample_start_ o<-& (RPIPE_DAT1Rx_595_update_completed_ 0)
          // start: Forward dependencies from (dat1_t << 1 ) to transition OR_u1042_u1042_597_sample_start_
          OR_u1042_u1042_597_sample_start_ <-& (phi_stmt_583_update_completed_)
          // done: Forward dependencies from (dat1_t << 1 ) to transition OR_u1042_u1042_597_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT1Rx) to transition OR_u1042_u1042_597_sample_start_
          OR_u1042_u1042_597_sample_start_ <-& (RPIPE_DAT1Rx_595_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT1Rx) to transition OR_u1042_u1042_597_sample_start_
          ;;[OR_u1042_u1042_597_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u1042_u1042_597_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u1042_u1042_597_sample_start_ &-> (OR_u1042_u1042_597_Sample)
          OR_u1042_u1042_597_sample_completed_ <-& (OR_u1042_u1042_597_Sample)
          OR_u1042_u1042_597_sample_completed_ &-> ($null)
          OR_u1042_u1042_597_update_start_ &-> (OR_u1042_u1042_597_Update)
          OR_u1042_u1042_597_update_completed_ <-& (OR_u1042_u1042_597_Update)
          // RAW reenables for (dat1_t << 1 )
          phi_stmt_583_update_start_ o<-& (OR_u1042_u1042_597_sample_completed_ 0)
          // RAW reenables for (($bitcast ($uint<1041>) 0  ) && DAT1Rx)
          RPIPE_DAT1Rx_595_update_start_ o<-& (OR_u1042_u1042_597_sample_completed_ 0)
          // self-release: 
          OR_u1042_u1042_597_sample_start_ o<-& (OR_u1042_u1042_597_sample_completed_ 1)
          $null &-> (OR_u1042_u1042_597_update_start_)
          OR_u1042_u1042_597_update_start_ o<-& (OR_u1042_u1042_597_update_completed_ 0)
          // Target expression
          // (as target) next_data1
          // start: WAR dependencies for next_data1
          // WAR dependency: Read: next_data1 before Write: 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 1// bits of buffering = 1042. 
          OR_u1042_u1042_597_update_start_ <-& (phi_stmt_583_sample_completed_)
          phi_stmt_583_sample_start_ o<-& (OR_u1042_u1042_597_update_completed_ 0)
          // WAR dependency: release  Read: next_data1 with Write: 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 1// bits of buffering = 1042. 
          // done: WAR dependencies for next_data1
          // end:  			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
          // start: WAR dependencies for next_I_1
          // WAR dependency: Read: next_I_1 before Write: 			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_1
          // start:  			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 271
          // volatile! 
          // Source expression
          // (I_1 + 1 )
          // I_1
          // Target expression
          // (as target) next_I_1
          // start: WAR dependencies for next_I_1
          // WAR dependency: Read: next_I_1 before Write: 			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_1
          // end:  			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
          // (next_I_1 < 1042 )
          // next_I_1
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_I_1 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_578_update_completed_)
          // done: Forward dependencies from (next_I_1 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT1Rx
          // read-dependencies for pipe DAT1Rx
          // write-dependencies for pipe DAT1Rx
          // signal write dependencies for DAT1Rx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_576__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_576_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_576__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_576_loop_body : condition_evaluated
        $bind do_while_stmt_576__entry__  => do_while_stmt_576_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_576_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_576__exit__)
      }
      do_while_stmt_576__entry__ |-> (do_while_stmt_576)
      do_while_stmt_576__exit__ <-| (do_while_stmt_576)
      ::[assign_stmt_611_to_assign_stmt_619] 
      {
        // start: WAR dependencies for dat1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat1
        // start:  		$volatile dat1 := ( $slice next_data1 1040 17 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 273
        // volatile! 
        // Source expression
        // ( $slice next_data1 1040 17 ) 
        // next_data1
        // Target expression
        // (as target) dat1
        // dat1
        // write to interface object
        // start: WAR dependencies for dat1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat1
        // dat1
        // write to interface object
        // end:  		$volatile dat1 := ( $slice next_data1 1040 17 )  $buffering 1
        // start: WAR dependencies for nextCRC_1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_1
        // start:  		$volatile nextCRC_1 := ( $slice next_data1 16 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 274
        // volatile! 
        // Source expression
        // ( $slice next_data1 16 1 ) 
        // next_data1
        // Target expression
        // (as target) nextCRC_1
        // nextCRC_1
        // write to interface object
        // start: WAR dependencies for nextCRC_1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_1
        // nextCRC_1
        // write to interface object
        // end:  		$volatile nextCRC_1 := ( $slice next_data1 16 1 )  $buffering 1
        // start: WAR dependencies for stopBit1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit1
        // start:  		$volatile stopBit1 := ( $slice next_data1 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 275
        // volatile! 
        // Source expression
        // ( $slice next_data1 0 0 ) 
        // next_data1
        // Target expression
        // (as target) stopBit1
        // stopBit1
        // write to interface object
        // start: WAR dependencies for stopBit1
        // ignored out-of-scope w_root 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit1
        // stopBit1
        // write to interface object
        // end:  		$volatile stopBit1 := ( $slice next_data1 0 0 )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_611_to_assign_stmt_619__entry__ |-> (assign_stmt_611_to_assign_stmt_619)
      assign_stmt_611_to_assign_stmt_619__exit__ <-| (assign_stmt_611_to_assign_stmt_619)
      do_while_stmt_576__entry__ <-| (branch_block_stmt_575__entry__)
      assign_stmt_611_to_assign_stmt_619__entry__ <-| (do_while_stmt_576__exit__)
      assign_stmt_611_to_assign_stmt_619__exit__ |-> (branch_block_stmt_575__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %recvdat1%parallelblock_2%
    //  file .Aa/sdhc.opt.aa, line 264
    // constant-object-declarations for block %recvdat1%parallelblock_2
    //  file .Aa/sdhc.opt.aa, line 260
    // constant-object-declarations for block %recvdat1
    //  file .Aa/sdhc.opt.aa, line 255
    // constant-declarations for block %recvdat1%parallelblock_2
    //  file .Aa/sdhc.opt.aa, line 260
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 262
    // 1042 
    $constant $W[konst_606_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %recvdat1%parallelblock_2%
    //  file .Aa/sdhc.opt.aa, line 264
    // constant-declarations for phi:  			$phi I_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 265
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_581_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat1_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 267
    // ($bitcast ($uint<1042>) 0  )
    $constant $W[type_cast_586_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_591_wire_constant] : $int<1042> := _b
    // ($bitcast ($uint<1041>) 0  )
    $constant $W[type_cast_594_wire_constant] : $int<1041> := _b
    // 1 
    $constant $W[konst_601_wire_constant] : $int<11> := _b00000000001// 1
    // block %recvdat1%parallelblock_2
    //  file .Aa/sdhc.opt.aa, line 260
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 262
    // (next_I_1 < 1042 )
    $intermediate $W[ULT_u11_u1_607_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 264
    // 			$phi I_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 265
    $W[next_I_1_603_582_buffered] : $int<11>
    // I_1
    $W[I_1_578] : $int<11>
    // 			$phi dat1_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 267
    $W[next_data1_598_587_buffered] : $int<1042>
    // dat1_t
    $W[dat1_t_583] : $int<1042>
    // 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 270
    // (dat1_t << 1 )
    $intermediate $W[SHL_u1042_u1042_592_wire] : $int<1042>
    // DAT1Rx
    $W[RPIPE_DAT1Rx_595_wire] : $int<1>
    // (($bitcast ($uint<1041>) 0  ) && DAT1Rx)
    $intermediate $W[CONCAT_u1041_u1042_596_wire] : $int<1042>
    // next_data1
    $W[next_data1_598] : $int<1042>
    // 			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 271
    // next_I_1
    $W[next_I_1_603] : $int<11>
    // 		$volatile dat1 := ( $slice next_data1 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 273
    // dat1
    // 		$volatile nextCRC_1 := ( $slice next_data1 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 274
    // nextCRC_1
    // 		$volatile stopBit1 := ( $slice next_data1 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 275
    // stopBit1
    // datapath-instances for block %recvdat1%parallelblock_2
    //  file .Aa/sdhc.opt.aa, line 260
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 262
    // (next_I_1 < 1042 )
    <[ULT_u11_u1_607_inst] (next_I_1_603 konst_606_wire_constant) (ULT_u11_u1_607_wire)   $flowthrough 
    $delay ULT_u11_u1_607_inst 0
    ==0? [do_while_stmt_576_branch] (ULT_u11_u1_607_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 264
    // 			$phi I_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 265
    # := [next_I_1_603_582_buf] (next_I_1_603) (next_I_1_603_582_buffered)     $fullrate
    $buffering $out next_I_1_603_582_buf next_I_1_603_582_buffered  1
    # $phi [phi_stmt_578] (type_cast_581_wire_constant next_I_1_603_582_buffered) ( I_1_578 ) $fullrate
    // $buffering  $out phi_stmt_578 I_1_578 2
    // 			$phi dat1_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 267
    # := [next_data1_598_587_buf] (next_data1_598) (next_data1_598_587_buffered)     $fullrate
    $buffering $out next_data1_598_587_buf next_data1_598_587_buffered  1
    # $phi [phi_stmt_583] (type_cast_586_wire_constant next_data1_598_587_buffered) ( dat1_t_583 ) $fullrate
    // $buffering  $out phi_stmt_583 dat1_t_583 2
    // 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 270
    // (dat1_t << 1 )
    <<[SHL_u1042_u1042_592_inst] (dat1_t_583 konst_591_wire_constant) (SHL_u1042_u1042_592_wire)   $flowthrough 
    $delay SHL_u1042_u1042_592_inst 0
    // DAT1Rx
    $ioport $in [RPIPE_DAT1Rx_595_inst] (DAT1Rx) (RPIPE_DAT1Rx_595_wire)  $fullrate 
    $buffering $out RPIPE_DAT1Rx_595_inst RPIPE_DAT1Rx_595_wire 1
    // (($bitcast ($uint<1041>) 0  ) && DAT1Rx)
    &&[CONCAT_u1041_u1042_596_inst] (type_cast_594_wire_constant RPIPE_DAT1Rx_595_wire) (CONCAT_u1041_u1042_596_wire)   $flowthrough 
    $delay CONCAT_u1041_u1042_596_inst 0
    // ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx))
    |[OR_u1042_u1042_597_inst] (SHL_u1042_u1042_592_wire CONCAT_u1041_u1042_596_wire) (next_data1_598)    $fullrate
    $buffering  $out OR_u1042_u1042_597_inst next_data1_598 2
    $delay OR_u1042_u1042_597_inst 1
    // 			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 271
    // (I_1 + 1 )
    +[ADD_u11_u11_602_inst] (I_1_578 konst_601_wire_constant) (next_I_1_603)   $flowthrough 
    $delay ADD_u11_u11_602_inst 0
    // 		$volatile dat1 := ( $slice next_data1 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 273
    // ( $slice next_data1 1040 17 ) 
    [:] [slice_610_inst] (next_data1_598 1040 17) (dat1)  $flowthrough
    $delay slice_610_inst 0
    // 		$volatile nextCRC_1 := ( $slice next_data1 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 274
    // ( $slice next_data1 16 1 ) 
    [:] [slice_614_inst] (next_data1_598 16 1) (nextCRC_1)  $flowthrough
    $delay slice_614_inst 0
    // 		$volatile stopBit1 := ( $slice next_data1 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 275
    // ( $slice next_data1 0 0 ) 
    [:] [slice_618_inst] (next_data1_598 0 0) (stopBit1)  $flowthrough
    $delay slice_618_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_576
  //  file .Aa/sdhc.opt.aa, line 262
  phi_stmt_578 <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_578_entry_sample_req branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_578_loopback_sample_req) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_578_phi_mux_ack)
  next_I_1_603_582_buf <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_I_1_582_Sample/req branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_I_1_582_Update/req) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_I_1_582_Sample/ack branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_I_1_582_Update/ack)
  phi_stmt_583 <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_583_entry_sample_req branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_583_loopback_sample_req) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/phi_stmt_583_phi_mux_ack)
  next_data1_598_587_buf <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_data1_587_Sample/req branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_data1_587_Update/req) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_data1_587_Sample/ack branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/R_next_data1_587_Update/ack)
  // 			next_data1 := ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx)) $buffering 2// bits of buffering = 2084. 
  //  file .Aa/sdhc.opt.aa, line 270
  // ((dat1_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT1Rx))
  // (dat1_t << 1 )
  // dat1_t
  // (($bitcast ($uint<1041>) 0  ) && DAT1Rx)
  // DAT1Rx
  RPIPE_DAT1Rx_595_inst <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/RPIPE_DAT1Rx_595_Sample/rr branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/RPIPE_DAT1Rx_595_Update/cr) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/RPIPE_DAT1Rx_595_Sample/ra branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/RPIPE_DAT1Rx_595_Update/ca)
  OR_u1042_u1042_597_inst <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/OR_u1042_u1042_597_Sample/rr branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/OR_u1042_u1042_597_Update/cr) (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/OR_u1042_u1042_597_Sample/ra branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/OR_u1042_u1042_597_Update/ca)
  // 			$volatile next_I_1 := (I_1 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 271
  // (I_1 + 1 )
  // I_1
  // (next_I_1 < 1042 )
  // next_I_1
  do_while_stmt_576_branch <=> (branch_block_stmt_575/do_while_stmt_576/do_while_stmt_576_loop_body/condition_evaluated) (branch_block_stmt_575/do_while_stmt_576/loop_exit/ack branch_block_stmt_575/do_while_stmt_576/loop_taken/ack)
  // 		$volatile dat1 := ( $slice next_data1 1040 17 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 273
  // next_data1
  // 		$volatile nextCRC_1 := ( $slice next_data1 16 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 274
  // next_data1
  // 		$volatile stopBit1 := ( $slice next_data1 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 275
  // next_data1
}
$module [recvdat2] 
{
  $out dat2:$int<1024>
  // can point into 
  nextCRC_2:$int<16>
  // can point into 
  stopBit2:$int<1>
  // can point into 
  // pipe-declarations for block %recvdat2
  //  file .Aa/sdhc.opt.aa, line 278
  // pipe-declarations for block %recvdat2%parallelblock_3
  //  file .Aa/sdhc.opt.aa, line 283
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_626] // Branch Block  file .Aa/sdhc.opt.aa, line 283
    {
      $P [branch_block_stmt_626__entry__]
      branch_block_stmt_626__entry__ <-| ($entry)
      $P [branch_block_stmt_626__exit__]
      branch_block_stmt_626__exit__ |-> ($exit)
      $P [do_while_stmt_627__entry__] 
      $P [do_while_stmt_627__exit__] 
      $P [assign_stmt_662_to_assign_stmt_670__entry__] 
      $P [assign_stmt_662_to_assign_stmt_670__exit__] 
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 285
      <o> [do_while_stmt_627]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_627__entry__] 
        $P[do_while_stmt_627__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_627_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_629
          // 			$phi I_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_2 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_629_sample_start_] 
          $T[phi_stmt_629_sample_completed_] 
          $T[phi_stmt_629_update_start_] 
          $T[phi_stmt_629_update_completed_] 
          $T[phi_stmt_629_sample_start__ps] 
          phi_stmt_629_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_629_sample_completed__ps] 
          phi_stmt_629_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_629_update_start__ps] 
          phi_stmt_629_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_629_update_completed__ps] 
          phi_stmt_629_update_completed_ <-& (phi_stmt_629_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_629_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_629_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_629_update_start_)
          $T[phi_stmt_629_loopback_trigger] 
          phi_stmt_629_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_629_loopback_sample_req] 
          $T[phi_stmt_629_loopback_sample_req_ps] 
          phi_stmt_629_loopback_sample_req <-& (phi_stmt_629_loopback_sample_req_ps)
          phi_stmt_629_loopback_sample_req &-> ($null)
          $T[phi_stmt_629_entry_trigger] 
          phi_stmt_629_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_629_entry_sample_req] 
          $T[phi_stmt_629_entry_sample_req_ps] 
          phi_stmt_629_entry_sample_req <-& (phi_stmt_629_entry_sample_req_ps)
          phi_stmt_629_entry_sample_req &-> ($null)
          phi_stmt_629_update_start_ o<-& (phi_stmt_629_update_completed_ 0)
          phi_stmt_629_sample_start_ o<-& (phi_stmt_629_sample_completed_ 1)
          $T[phi_stmt_629_merged_reqs] 
          $T[phi_stmt_629_phi_mux_ack] 
          $T[phi_stmt_629_phi_mux_ack_ps] 
          phi_stmt_629_phi_mux_ack_ps <-& (phi_stmt_629_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_629_update_completed_)
          $T[type_cast_632_sample_start__ps] 
          $T[type_cast_632_sample_completed__ps] 
          $T[type_cast_632_update_start__ps] 
          $T[type_cast_632_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_632_sample_start_] 
          $T[type_cast_632_sample_completed_] 
          type_cast_632_sample_completed_ <-& (type_cast_632_sample_start_)
          $T[type_cast_632_update_start_] 
          $T [type_cast_632_update_completed_] $delay 
          type_cast_632_update_completed_ <-& (type_cast_632_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_632_sample_start_ <-& (type_cast_632_sample_start__ps)
          type_cast_632_update_start_ <-& (type_cast_632_update_start__ps)
          // Phi complete dependency.
          type_cast_632_sample_completed__ps <-& (type_cast_632_sample_completed_)
          type_cast_632_update_completed__ps <-& (type_cast_632_update_completed_)
          $T[R_next_I_2_633_sample_start__ps] 
          $T[R_next_I_2_633_sample_completed__ps] 
          $T[R_next_I_2_633_update_start__ps] 
          $T[R_next_I_2_633_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_I_2_633_sample_start_] 
          $T[R_next_I_2_633_sample_completed_] 
          $T[R_next_I_2_633_update_start_] 
          $T[R_next_I_2_633_update_completed_] 
          ;;[R_next_I_2_633_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_I_2_633_sample_start_ &-> (R_next_I_2_633_Sample)
          R_next_I_2_633_sample_completed_ <-& (R_next_I_2_633_Sample)
          ;;[R_next_I_2_633_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_I_2_633_update_start_ &-> (R_next_I_2_633_Update)
          R_next_I_2_633_update_completed_ <-& (R_next_I_2_633_Update)
          // RAW reenables for next_I_2
          // Phi start dependency for implicit/constant alternative.
          R_next_I_2_633_sample_start_ <-& (R_next_I_2_633_sample_start__ps)
          R_next_I_2_633_update_start_ <-& (R_next_I_2_633_update_start__ps)
          // Phi complete dependency.
          R_next_I_2_633_sample_completed__ps <-& (R_next_I_2_633_sample_completed_)
          R_next_I_2_633_update_completed__ps <-& (R_next_I_2_633_update_completed_)
          $phisequencer [ phi_stmt_629_phi_seq] : 
          phi_stmt_629_entry_trigger type_cast_632_sample_start__ps type_cast_632_sample_completed__ps type_cast_632_update_start__ps type_cast_632_update_completed__ps phi_stmt_629_loopback_trigger R_next_I_2_633_sample_start__ps R_next_I_2_633_sample_completed__ps R_next_I_2_633_update_start__ps R_next_I_2_633_update_completed__ps :
          phi_stmt_629_sample_start__ps phi_stmt_629_sample_completed__ps phi_stmt_629_update_start__ps phi_stmt_629_update_completed__ps :
          phi_stmt_629_entry_sample_req_ps phi_stmt_629_loopback_sample_req_ps : 
          phi_stmt_629_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_629
          // start:  PHI statement phi_stmt_634
          // 			$phi dat2_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data2 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_634_sample_start_] 
          $T[phi_stmt_634_sample_completed_] 
          $T[phi_stmt_634_update_start_] 
          $T[phi_stmt_634_update_completed_] 
          $T[phi_stmt_634_sample_start__ps] 
          phi_stmt_634_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_634_sample_completed__ps] 
          phi_stmt_634_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_634_update_start__ps] 
          phi_stmt_634_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_634_update_completed__ps] 
          phi_stmt_634_update_completed_ <-& (phi_stmt_634_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_634_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_634_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_634_update_start_)
          $T[phi_stmt_634_loopback_trigger] 
          phi_stmt_634_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_634_loopback_sample_req] 
          $T[phi_stmt_634_loopback_sample_req_ps] 
          phi_stmt_634_loopback_sample_req <-& (phi_stmt_634_loopback_sample_req_ps)
          phi_stmt_634_loopback_sample_req &-> ($null)
          $T[phi_stmt_634_entry_trigger] 
          phi_stmt_634_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_634_entry_sample_req] 
          $T[phi_stmt_634_entry_sample_req_ps] 
          phi_stmt_634_entry_sample_req <-& (phi_stmt_634_entry_sample_req_ps)
          phi_stmt_634_entry_sample_req &-> ($null)
          phi_stmt_634_update_start_ o<-& (phi_stmt_634_update_completed_ 0)
          phi_stmt_634_sample_start_ o<-& (phi_stmt_634_sample_completed_ 1)
          $T[phi_stmt_634_merged_reqs] 
          $T[phi_stmt_634_phi_mux_ack] 
          $T[phi_stmt_634_phi_mux_ack_ps] 
          phi_stmt_634_phi_mux_ack_ps <-& (phi_stmt_634_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_634_update_completed_)
          $T[type_cast_637_sample_start__ps] 
          $T[type_cast_637_sample_completed__ps] 
          $T[type_cast_637_update_start__ps] 
          $T[type_cast_637_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_637_sample_start_] 
          $T[type_cast_637_sample_completed_] 
          type_cast_637_sample_completed_ <-& (type_cast_637_sample_start_)
          $T[type_cast_637_update_start_] 
          $T [type_cast_637_update_completed_] $delay 
          type_cast_637_update_completed_ <-& (type_cast_637_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_637_sample_start_ <-& (type_cast_637_sample_start__ps)
          type_cast_637_update_start_ <-& (type_cast_637_update_start__ps)
          // Phi complete dependency.
          type_cast_637_sample_completed__ps <-& (type_cast_637_sample_completed_)
          type_cast_637_update_completed__ps <-& (type_cast_637_update_completed_)
          $T[R_next_data2_638_sample_start__ps] 
          $T[R_next_data2_638_sample_completed__ps] 
          $T[R_next_data2_638_update_start__ps] 
          $T[R_next_data2_638_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_data2_638_sample_start_] 
          $T[R_next_data2_638_sample_completed_] 
          $T[R_next_data2_638_update_start_] 
          $T[R_next_data2_638_update_completed_] 
          ;;[R_next_data2_638_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_data2_638_sample_start_ &-> (R_next_data2_638_Sample)
          R_next_data2_638_sample_completed_ <-& (R_next_data2_638_Sample)
          ;;[R_next_data2_638_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_data2_638_update_start_ &-> (R_next_data2_638_Update)
          R_next_data2_638_update_completed_ <-& (R_next_data2_638_Update)
          // RAW reenables for next_data2
          // Phi start dependency for implicit/constant alternative.
          R_next_data2_638_sample_start_ <-& (R_next_data2_638_sample_start__ps)
          R_next_data2_638_update_start_ <-& (R_next_data2_638_update_start__ps)
          // Phi complete dependency.
          R_next_data2_638_sample_completed__ps <-& (R_next_data2_638_sample_completed_)
          R_next_data2_638_update_completed__ps <-& (R_next_data2_638_update_completed_)
          $phisequencer [ phi_stmt_634_phi_seq] : 
          phi_stmt_634_entry_trigger type_cast_637_sample_start__ps type_cast_637_sample_completed__ps type_cast_637_update_start__ps type_cast_637_update_completed__ps phi_stmt_634_loopback_trigger R_next_data2_638_sample_start__ps R_next_data2_638_sample_completed__ps R_next_data2_638_update_start__ps R_next_data2_638_update_completed__ps :
          phi_stmt_634_sample_start__ps phi_stmt_634_sample_completed__ps phi_stmt_634_update_start__ps phi_stmt_634_update_completed__ps :
          phi_stmt_634_entry_sample_req_ps phi_stmt_634_loopback_sample_req_ps : 
          phi_stmt_634_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_634
          // start:  			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 1// bits of buffering = 1042. 
          //  file .Aa/sdhc.opt.aa, line 293
          // Source expression
          // ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx))
          $T[OR_u1042_u1042_648_sample_start_] 
          $T[OR_u1042_u1042_648_sample_completed_] 
          $T[OR_u1042_u1042_648_update_start_] 
          $T[OR_u1042_u1042_648_update_completed_] 
          // (dat2_t << 1 )
          // dat2_t
          // (($bitcast ($uint<1041>) 0  ) && DAT2Rx)
          // DAT2Rx
          $T[RPIPE_DAT2Rx_646_sample_start_] 
          $T[RPIPE_DAT2Rx_646_sample_completed_] 
          $T[RPIPE_DAT2Rx_646_update_start_] 
          $T[RPIPE_DAT2Rx_646_update_completed_] 
          ;;[RPIPE_DAT2Rx_646_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT2Rx_646_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT2Rx_646_sample_start_ &-> (RPIPE_DAT2Rx_646_Sample)
          RPIPE_DAT2Rx_646_sample_completed_ <-& (RPIPE_DAT2Rx_646_Sample)
          RPIPE_DAT2Rx_646_update_start_ <-& (RPIPE_DAT2Rx_646_sample_completed_)
          RPIPE_DAT2Rx_646_update_start_ &-> (RPIPE_DAT2Rx_646_Update)
          RPIPE_DAT2Rx_646_update_completed_ <-& (RPIPE_DAT2Rx_646_Update)
          RPIPE_DAT2Rx_646_sample_start_ o<-& (RPIPE_DAT2Rx_646_update_completed_ 0)
          // start: Forward dependencies from (dat2_t << 1 ) to transition OR_u1042_u1042_648_sample_start_
          OR_u1042_u1042_648_sample_start_ <-& (phi_stmt_634_update_completed_)
          // done: Forward dependencies from (dat2_t << 1 ) to transition OR_u1042_u1042_648_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT2Rx) to transition OR_u1042_u1042_648_sample_start_
          OR_u1042_u1042_648_sample_start_ <-& (RPIPE_DAT2Rx_646_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT2Rx) to transition OR_u1042_u1042_648_sample_start_
          ;;[OR_u1042_u1042_648_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u1042_u1042_648_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u1042_u1042_648_sample_start_ &-> (OR_u1042_u1042_648_Sample)
          OR_u1042_u1042_648_sample_completed_ <-& (OR_u1042_u1042_648_Sample)
          OR_u1042_u1042_648_sample_completed_ &-> ($null)
          OR_u1042_u1042_648_update_start_ &-> (OR_u1042_u1042_648_Update)
          OR_u1042_u1042_648_update_completed_ <-& (OR_u1042_u1042_648_Update)
          // RAW reenables for (dat2_t << 1 )
          phi_stmt_634_update_start_ o<-& (OR_u1042_u1042_648_sample_completed_ 0)
          // RAW reenables for (($bitcast ($uint<1041>) 0  ) && DAT2Rx)
          RPIPE_DAT2Rx_646_update_start_ o<-& (OR_u1042_u1042_648_sample_completed_ 0)
          // self-release: 
          OR_u1042_u1042_648_sample_start_ o<-& (OR_u1042_u1042_648_sample_completed_ 1)
          $null &-> (OR_u1042_u1042_648_update_start_)
          OR_u1042_u1042_648_update_start_ o<-& (OR_u1042_u1042_648_update_completed_ 0)
          // Target expression
          // (as target) next_data2
          // start: WAR dependencies for next_data2
          // WAR dependency: Read: next_data2 before Write: 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 1// bits of buffering = 1042. 
          OR_u1042_u1042_648_update_start_ <-& (phi_stmt_634_sample_completed_)
          phi_stmt_634_sample_start_ o<-& (OR_u1042_u1042_648_update_completed_ 0)
          // WAR dependency: release  Read: next_data2 with Write: 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 1// bits of buffering = 1042. 
          // done: WAR dependencies for next_data2
          // end:  			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
          // start: WAR dependencies for next_I_2
          // WAR dependency: Read: next_I_2 before Write: 			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_2
          // start:  			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 294
          // volatile! 
          // Source expression
          // (I_2 + 1 )
          // I_2
          // Target expression
          // (as target) next_I_2
          // start: WAR dependencies for next_I_2
          // WAR dependency: Read: next_I_2 before Write: 			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_2
          // end:  			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
          // (next_I_2 < 1042 )
          // next_I_2
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_I_2 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_629_update_completed_)
          // done: Forward dependencies from (next_I_2 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT2Rx
          // read-dependencies for pipe DAT2Rx
          // write-dependencies for pipe DAT2Rx
          // signal write dependencies for DAT2Rx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_627__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_627_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_627__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_627_loop_body : condition_evaluated
        $bind do_while_stmt_627__entry__  => do_while_stmt_627_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_627_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_627__exit__)
      }
      do_while_stmt_627__entry__ |-> (do_while_stmt_627)
      do_while_stmt_627__exit__ <-| (do_while_stmt_627)
      ::[assign_stmt_662_to_assign_stmt_670] 
      {
        // start: WAR dependencies for dat2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat2
        // start:  		$volatile dat2 := ( $slice next_data2 1040 17 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 296
        // volatile! 
        // Source expression
        // ( $slice next_data2 1040 17 ) 
        // next_data2
        // Target expression
        // (as target) dat2
        // dat2
        // write to interface object
        // start: WAR dependencies for dat2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat2
        // dat2
        // write to interface object
        // end:  		$volatile dat2 := ( $slice next_data2 1040 17 )  $buffering 1
        // start: WAR dependencies for nextCRC_2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_2
        // start:  		$volatile nextCRC_2 := ( $slice next_data2 16 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 297
        // volatile! 
        // Source expression
        // ( $slice next_data2 16 1 ) 
        // next_data2
        // Target expression
        // (as target) nextCRC_2
        // nextCRC_2
        // write to interface object
        // start: WAR dependencies for nextCRC_2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_2
        // nextCRC_2
        // write to interface object
        // end:  		$volatile nextCRC_2 := ( $slice next_data2 16 1 )  $buffering 1
        // start: WAR dependencies for stopBit2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit2
        // start:  		$volatile stopBit2 := ( $slice next_data2 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 298
        // volatile! 
        // Source expression
        // ( $slice next_data2 0 0 ) 
        // next_data2
        // Target expression
        // (as target) stopBit2
        // stopBit2
        // write to interface object
        // start: WAR dependencies for stopBit2
        // ignored out-of-scope w_root 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit2
        // stopBit2
        // write to interface object
        // end:  		$volatile stopBit2 := ( $slice next_data2 0 0 )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_662_to_assign_stmt_670__entry__ |-> (assign_stmt_662_to_assign_stmt_670)
      assign_stmt_662_to_assign_stmt_670__exit__ <-| (assign_stmt_662_to_assign_stmt_670)
      do_while_stmt_627__entry__ <-| (branch_block_stmt_626__entry__)
      assign_stmt_662_to_assign_stmt_670__entry__ <-| (do_while_stmt_627__exit__)
      assign_stmt_662_to_assign_stmt_670__exit__ |-> (branch_block_stmt_626__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %recvdat2%parallelblock_3%
    //  file .Aa/sdhc.opt.aa, line 287
    // constant-object-declarations for block %recvdat2%parallelblock_3
    //  file .Aa/sdhc.opt.aa, line 283
    // constant-object-declarations for block %recvdat2
    //  file .Aa/sdhc.opt.aa, line 278
    // constant-declarations for block %recvdat2%parallelblock_3
    //  file .Aa/sdhc.opt.aa, line 283
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 285
    // 1042 
    $constant $W[konst_657_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %recvdat2%parallelblock_3%
    //  file .Aa/sdhc.opt.aa, line 287
    // constant-declarations for phi:  			$phi I_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 288
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_632_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat2_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 290
    // ($bitcast ($uint<1042>) 0  )
    $constant $W[type_cast_637_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_642_wire_constant] : $int<1042> := _b
    // ($bitcast ($uint<1041>) 0  )
    $constant $W[type_cast_645_wire_constant] : $int<1041> := _b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_652_wire_constant] : $int<11> := _b00000000001// 1
    // block %recvdat2%parallelblock_3
    //  file .Aa/sdhc.opt.aa, line 283
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 285
    // (next_I_2 < 1042 )
    $intermediate $W[ULT_u11_u1_658_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 287
    // 			$phi I_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 288
    $W[next_I_2_654_633_buffered] : $int<11>
    // I_2
    $W[I_2_629] : $int<11>
    // 			$phi dat2_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 290
    $W[next_data2_649_638_buffered] : $int<1042>
    // dat2_t
    $W[dat2_t_634] : $int<1042>
    // 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 293
    // (dat2_t << 1 )
    $intermediate $W[SHL_u1042_u1042_643_wire] : $int<1042>
    // DAT2Rx
    $W[RPIPE_DAT2Rx_646_wire] : $int<1>
    // (($bitcast ($uint<1041>) 0  ) && DAT2Rx)
    $intermediate $W[CONCAT_u1041_u1042_647_wire] : $int<1042>
    // next_data2
    $W[next_data2_649] : $int<1042>
    // 			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 294
    // next_I_2
    $W[next_I_2_654] : $int<11>
    // 		$volatile dat2 := ( $slice next_data2 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 296
    // dat2
    // 		$volatile nextCRC_2 := ( $slice next_data2 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 297
    // nextCRC_2
    // 		$volatile stopBit2 := ( $slice next_data2 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 298
    // stopBit2
    // datapath-instances for block %recvdat2%parallelblock_3
    //  file .Aa/sdhc.opt.aa, line 283
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 285
    // (next_I_2 < 1042 )
    <[ULT_u11_u1_658_inst] (next_I_2_654 konst_657_wire_constant) (ULT_u11_u1_658_wire)   $flowthrough 
    $delay ULT_u11_u1_658_inst 0
    ==0? [do_while_stmt_627_branch] (ULT_u11_u1_658_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 287
    // 			$phi I_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_I_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 288
    # := [next_I_2_654_633_buf] (next_I_2_654) (next_I_2_654_633_buffered)     $fullrate
    $buffering $out next_I_2_654_633_buf next_I_2_654_633_buffered  1
    # $phi [phi_stmt_629] (type_cast_632_wire_constant next_I_2_654_633_buffered) ( I_2_629 ) $fullrate
    // $buffering  $out phi_stmt_629 I_2_629 2
    // 			$phi dat2_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 290
    # := [next_data2_649_638_buf] (next_data2_649) (next_data2_649_638_buffered)     $fullrate
    $buffering $out next_data2_649_638_buf next_data2_649_638_buffered  1
    # $phi [phi_stmt_634] (type_cast_637_wire_constant next_data2_649_638_buffered) ( dat2_t_634 ) $fullrate
    // $buffering  $out phi_stmt_634 dat2_t_634 2
    // 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 293
    // (dat2_t << 1 )
    <<[SHL_u1042_u1042_643_inst] (dat2_t_634 konst_642_wire_constant) (SHL_u1042_u1042_643_wire)   $flowthrough 
    $delay SHL_u1042_u1042_643_inst 0
    // DAT2Rx
    $ioport $in [RPIPE_DAT2Rx_646_inst] (DAT2Rx) (RPIPE_DAT2Rx_646_wire)  $fullrate 
    $buffering $out RPIPE_DAT2Rx_646_inst RPIPE_DAT2Rx_646_wire 1
    // (($bitcast ($uint<1041>) 0  ) && DAT2Rx)
    &&[CONCAT_u1041_u1042_647_inst] (type_cast_645_wire_constant RPIPE_DAT2Rx_646_wire) (CONCAT_u1041_u1042_647_wire)   $flowthrough 
    $delay CONCAT_u1041_u1042_647_inst 0
    // ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx))
    |[OR_u1042_u1042_648_inst] (SHL_u1042_u1042_643_wire CONCAT_u1041_u1042_647_wire) (next_data2_649)    $fullrate
    $buffering  $out OR_u1042_u1042_648_inst next_data2_649 2
    $delay OR_u1042_u1042_648_inst 1
    // 			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 294
    // (I_2 + 1 )
    +[ADD_u11_u11_653_inst] (I_2_629 konst_652_wire_constant) (next_I_2_654)   $flowthrough 
    $delay ADD_u11_u11_653_inst 0
    // 		$volatile dat2 := ( $slice next_data2 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 296
    // ( $slice next_data2 1040 17 ) 
    [:] [slice_661_inst] (next_data2_649 1040 17) (dat2)  $flowthrough
    $delay slice_661_inst 0
    // 		$volatile nextCRC_2 := ( $slice next_data2 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 297
    // ( $slice next_data2 16 1 ) 
    [:] [slice_665_inst] (next_data2_649 16 1) (nextCRC_2)  $flowthrough
    $delay slice_665_inst 0
    // 		$volatile stopBit2 := ( $slice next_data2 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 298
    // ( $slice next_data2 0 0 ) 
    [:] [slice_669_inst] (next_data2_649 0 0) (stopBit2)  $flowthrough
    $delay slice_669_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_627
  //  file .Aa/sdhc.opt.aa, line 285
  phi_stmt_629 <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_629_entry_sample_req branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_629_loopback_sample_req) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_629_phi_mux_ack)
  next_I_2_654_633_buf <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_I_2_633_Sample/req branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_I_2_633_Update/req) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_I_2_633_Sample/ack branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_I_2_633_Update/ack)
  phi_stmt_634 <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_634_entry_sample_req branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_634_loopback_sample_req) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/phi_stmt_634_phi_mux_ack)
  next_data2_649_638_buf <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_data2_638_Sample/req branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_data2_638_Update/req) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_data2_638_Sample/ack branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/R_next_data2_638_Update/ack)
  // 			next_data2 := ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx)) $buffering 2// bits of buffering = 2084. 
  //  file .Aa/sdhc.opt.aa, line 293
  // ((dat2_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT2Rx))
  // (dat2_t << 1 )
  // dat2_t
  // (($bitcast ($uint<1041>) 0  ) && DAT2Rx)
  // DAT2Rx
  RPIPE_DAT2Rx_646_inst <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_DAT2Rx_646_Sample/rr branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_DAT2Rx_646_Update/cr) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_DAT2Rx_646_Sample/ra branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_DAT2Rx_646_Update/ca)
  OR_u1042_u1042_648_inst <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/OR_u1042_u1042_648_Sample/rr branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/OR_u1042_u1042_648_Update/cr) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/OR_u1042_u1042_648_Sample/ra branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/OR_u1042_u1042_648_Update/ca)
  // 			$volatile next_I_2 := (I_2 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 294
  // (I_2 + 1 )
  // I_2
  // (next_I_2 < 1042 )
  // next_I_2
  do_while_stmt_627_branch <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/condition_evaluated) (branch_block_stmt_626/do_while_stmt_627/loop_exit/ack branch_block_stmt_626/do_while_stmt_627/loop_taken/ack)
  // 		$volatile dat2 := ( $slice next_data2 1040 17 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 296
  // next_data2
  // 		$volatile nextCRC_2 := ( $slice next_data2 16 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 297
  // next_data2
  // 		$volatile stopBit2 := ( $slice next_data2 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 298
  // next_data2
}
$module [recvdat3] 
{
  $out dat3:$int<1024>
  // can point into 
  nextCRC_3:$int<16>
  // can point into 
  stopBit3:$int<1>
  // can point into 
  // pipe-declarations for block %recvdat3
  //  file .Aa/sdhc.opt.aa, line 301
  // pipe-declarations for block %recvdat3%parallelblock_4
  //  file .Aa/sdhc.opt.aa, line 306
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_677] // Branch Block  file .Aa/sdhc.opt.aa, line 306
    {
      $P [branch_block_stmt_677__entry__]
      branch_block_stmt_677__entry__ <-| ($entry)
      $P [branch_block_stmt_677__exit__]
      branch_block_stmt_677__exit__ |-> ($exit)
      $P [do_while_stmt_678__entry__] 
      $P [do_while_stmt_678__exit__] 
      $P [assign_stmt_713_to_assign_stmt_721__entry__] 
      $P [assign_stmt_713_to_assign_stmt_721__exit__] 
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 308
      <o> [do_while_stmt_678]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_678__entry__] 
        $P[do_while_stmt_678__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_678_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_680
          // 			$phi I_3 := 			  next_I_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
          // type of target is $uint<11>
          $T[phi_stmt_680_sample_start_] 
          $T[phi_stmt_680_sample_completed_] 
          $T[phi_stmt_680_update_start_] 
          $T[phi_stmt_680_update_completed_] 
          $T[phi_stmt_680_sample_start__ps] 
          phi_stmt_680_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_680_sample_completed__ps] 
          phi_stmt_680_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_680_update_start__ps] 
          phi_stmt_680_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_680_update_completed__ps] 
          phi_stmt_680_update_completed_ <-& (phi_stmt_680_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_680_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_680_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_680_update_start_)
          $T[phi_stmt_680_loopback_trigger] 
          phi_stmt_680_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_680_loopback_sample_req] 
          $T[phi_stmt_680_loopback_sample_req_ps] 
          phi_stmt_680_loopback_sample_req <-& (phi_stmt_680_loopback_sample_req_ps)
          phi_stmt_680_loopback_sample_req &-> ($null)
          $T[phi_stmt_680_entry_trigger] 
          phi_stmt_680_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_680_entry_sample_req] 
          $T[phi_stmt_680_entry_sample_req_ps] 
          phi_stmt_680_entry_sample_req <-& (phi_stmt_680_entry_sample_req_ps)
          phi_stmt_680_entry_sample_req &-> ($null)
          phi_stmt_680_update_start_ o<-& (phi_stmt_680_update_completed_ 0)
          phi_stmt_680_sample_start_ o<-& (phi_stmt_680_sample_completed_ 1)
          $T[phi_stmt_680_merged_reqs] 
          $T[phi_stmt_680_phi_mux_ack] 
          $T[phi_stmt_680_phi_mux_ack_ps] 
          phi_stmt_680_phi_mux_ack_ps <-& (phi_stmt_680_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_680_update_completed_)
          $T[R_next_I_3_682_sample_start__ps] 
          $T[R_next_I_3_682_sample_completed__ps] 
          $T[R_next_I_3_682_update_start__ps] 
          $T[R_next_I_3_682_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_I_3_682_sample_start_] 
          $T[R_next_I_3_682_sample_completed_] 
          $T[R_next_I_3_682_update_start_] 
          $T[R_next_I_3_682_update_completed_] 
          ;;[R_next_I_3_682_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_I_3_682_sample_start_ &-> (R_next_I_3_682_Sample)
          R_next_I_3_682_sample_completed_ <-& (R_next_I_3_682_Sample)
          ;;[R_next_I_3_682_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_I_3_682_update_start_ &-> (R_next_I_3_682_Update)
          R_next_I_3_682_update_completed_ <-& (R_next_I_3_682_Update)
          // RAW reenables for next_I_3
          // Phi start dependency for implicit/constant alternative.
          R_next_I_3_682_sample_start_ <-& (R_next_I_3_682_sample_start__ps)
          R_next_I_3_682_update_start_ <-& (R_next_I_3_682_update_start__ps)
          // Phi complete dependency.
          R_next_I_3_682_sample_completed__ps <-& (R_next_I_3_682_sample_completed_)
          R_next_I_3_682_update_completed__ps <-& (R_next_I_3_682_update_completed_)
          $T[type_cast_684_sample_start__ps] 
          $T[type_cast_684_sample_completed__ps] 
          $T[type_cast_684_update_start__ps] 
          $T[type_cast_684_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_684_sample_start_] 
          $T[type_cast_684_sample_completed_] 
          type_cast_684_sample_completed_ <-& (type_cast_684_sample_start_)
          $T[type_cast_684_update_start_] 
          $T [type_cast_684_update_completed_] $delay 
          type_cast_684_update_completed_ <-& (type_cast_684_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_684_sample_start_ <-& (type_cast_684_sample_start__ps)
          type_cast_684_update_start_ <-& (type_cast_684_update_start__ps)
          // Phi complete dependency.
          type_cast_684_sample_completed__ps <-& (type_cast_684_sample_completed_)
          type_cast_684_update_completed__ps <-& (type_cast_684_update_completed_)
          $phisequencer [ phi_stmt_680_phi_seq] : 
          phi_stmt_680_loopback_trigger R_next_I_3_682_sample_start__ps R_next_I_3_682_sample_completed__ps R_next_I_3_682_update_start__ps R_next_I_3_682_update_completed__ps phi_stmt_680_entry_trigger type_cast_684_sample_start__ps type_cast_684_sample_completed__ps type_cast_684_update_start__ps type_cast_684_update_completed__ps :
          phi_stmt_680_sample_start__ps phi_stmt_680_sample_completed__ps phi_stmt_680_update_start__ps phi_stmt_680_update_completed__ps :
          phi_stmt_680_loopback_sample_req_ps phi_stmt_680_entry_sample_req_ps : 
          phi_stmt_680_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_680
          // start:  PHI statement phi_stmt_685
          // 			$phi dat3_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data3 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_685_sample_start_] 
          $T[phi_stmt_685_sample_completed_] 
          $T[phi_stmt_685_update_start_] 
          $T[phi_stmt_685_update_completed_] 
          $T[phi_stmt_685_sample_start__ps] 
          phi_stmt_685_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_685_sample_completed__ps] 
          phi_stmt_685_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_685_update_start__ps] 
          phi_stmt_685_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_685_update_completed__ps] 
          phi_stmt_685_update_completed_ <-& (phi_stmt_685_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_685_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_685_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_685_update_start_)
          $T[phi_stmt_685_loopback_trigger] 
          phi_stmt_685_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_685_loopback_sample_req] 
          $T[phi_stmt_685_loopback_sample_req_ps] 
          phi_stmt_685_loopback_sample_req <-& (phi_stmt_685_loopback_sample_req_ps)
          phi_stmt_685_loopback_sample_req &-> ($null)
          $T[phi_stmt_685_entry_trigger] 
          phi_stmt_685_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_685_entry_sample_req] 
          $T[phi_stmt_685_entry_sample_req_ps] 
          phi_stmt_685_entry_sample_req <-& (phi_stmt_685_entry_sample_req_ps)
          phi_stmt_685_entry_sample_req &-> ($null)
          phi_stmt_685_update_start_ o<-& (phi_stmt_685_update_completed_ 0)
          phi_stmt_685_sample_start_ o<-& (phi_stmt_685_sample_completed_ 1)
          $T[phi_stmt_685_merged_reqs] 
          $T[phi_stmt_685_phi_mux_ack] 
          $T[phi_stmt_685_phi_mux_ack_ps] 
          phi_stmt_685_phi_mux_ack_ps <-& (phi_stmt_685_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_685_update_completed_)
          $T[type_cast_688_sample_start__ps] 
          $T[type_cast_688_sample_completed__ps] 
          $T[type_cast_688_update_start__ps] 
          $T[type_cast_688_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_688_sample_start_] 
          $T[type_cast_688_sample_completed_] 
          type_cast_688_sample_completed_ <-& (type_cast_688_sample_start_)
          $T[type_cast_688_update_start_] 
          $T [type_cast_688_update_completed_] $delay 
          type_cast_688_update_completed_ <-& (type_cast_688_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_688_sample_start_ <-& (type_cast_688_sample_start__ps)
          type_cast_688_update_start_ <-& (type_cast_688_update_start__ps)
          // Phi complete dependency.
          type_cast_688_sample_completed__ps <-& (type_cast_688_sample_completed_)
          type_cast_688_update_completed__ps <-& (type_cast_688_update_completed_)
          $T[R_next_data3_689_sample_start__ps] 
          $T[R_next_data3_689_sample_completed__ps] 
          $T[R_next_data3_689_update_start__ps] 
          $T[R_next_data3_689_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_data3_689_sample_start_] 
          $T[R_next_data3_689_sample_completed_] 
          $T[R_next_data3_689_update_start_] 
          $T[R_next_data3_689_update_completed_] 
          ;;[R_next_data3_689_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_data3_689_sample_start_ &-> (R_next_data3_689_Sample)
          R_next_data3_689_sample_completed_ <-& (R_next_data3_689_Sample)
          ;;[R_next_data3_689_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_data3_689_update_start_ &-> (R_next_data3_689_Update)
          R_next_data3_689_update_completed_ <-& (R_next_data3_689_Update)
          // RAW reenables for next_data3
          // Phi start dependency for implicit/constant alternative.
          R_next_data3_689_sample_start_ <-& (R_next_data3_689_sample_start__ps)
          R_next_data3_689_update_start_ <-& (R_next_data3_689_update_start__ps)
          // Phi complete dependency.
          R_next_data3_689_sample_completed__ps <-& (R_next_data3_689_sample_completed_)
          R_next_data3_689_update_completed__ps <-& (R_next_data3_689_update_completed_)
          $phisequencer [ phi_stmt_685_phi_seq] : 
          phi_stmt_685_entry_trigger type_cast_688_sample_start__ps type_cast_688_sample_completed__ps type_cast_688_update_start__ps type_cast_688_update_completed__ps phi_stmt_685_loopback_trigger R_next_data3_689_sample_start__ps R_next_data3_689_sample_completed__ps R_next_data3_689_update_start__ps R_next_data3_689_update_completed__ps :
          phi_stmt_685_sample_start__ps phi_stmt_685_sample_completed__ps phi_stmt_685_update_start__ps phi_stmt_685_update_completed__ps :
          phi_stmt_685_entry_sample_req_ps phi_stmt_685_loopback_sample_req_ps : 
          phi_stmt_685_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_685
          // start:  			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 1// bits of buffering = 1042. 
          //  file .Aa/sdhc.opt.aa, line 316
          // Source expression
          // ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx))
          $T[OR_u1042_u1042_699_sample_start_] 
          $T[OR_u1042_u1042_699_sample_completed_] 
          $T[OR_u1042_u1042_699_update_start_] 
          $T[OR_u1042_u1042_699_update_completed_] 
          // (dat3_t << 1 )
          // dat3_t
          // (($bitcast ($uint<1041>) 0  ) && DAT3Rx)
          // DAT3Rx
          $T[RPIPE_DAT3Rx_697_sample_start_] 
          $T[RPIPE_DAT3Rx_697_sample_completed_] 
          $T[RPIPE_DAT3Rx_697_update_start_] 
          $T[RPIPE_DAT3Rx_697_update_completed_] 
          ;;[RPIPE_DAT3Rx_697_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT3Rx_697_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT3Rx_697_sample_start_ &-> (RPIPE_DAT3Rx_697_Sample)
          RPIPE_DAT3Rx_697_sample_completed_ <-& (RPIPE_DAT3Rx_697_Sample)
          RPIPE_DAT3Rx_697_update_start_ <-& (RPIPE_DAT3Rx_697_sample_completed_)
          RPIPE_DAT3Rx_697_update_start_ &-> (RPIPE_DAT3Rx_697_Update)
          RPIPE_DAT3Rx_697_update_completed_ <-& (RPIPE_DAT3Rx_697_Update)
          RPIPE_DAT3Rx_697_sample_start_ o<-& (RPIPE_DAT3Rx_697_update_completed_ 0)
          // start: Forward dependencies from (dat3_t << 1 ) to transition OR_u1042_u1042_699_sample_start_
          OR_u1042_u1042_699_sample_start_ <-& (phi_stmt_685_update_completed_)
          // done: Forward dependencies from (dat3_t << 1 ) to transition OR_u1042_u1042_699_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT3Rx) to transition OR_u1042_u1042_699_sample_start_
          OR_u1042_u1042_699_sample_start_ <-& (RPIPE_DAT3Rx_697_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1041>) 0  ) && DAT3Rx) to transition OR_u1042_u1042_699_sample_start_
          ;;[OR_u1042_u1042_699_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u1042_u1042_699_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u1042_u1042_699_sample_start_ &-> (OR_u1042_u1042_699_Sample)
          OR_u1042_u1042_699_sample_completed_ <-& (OR_u1042_u1042_699_Sample)
          OR_u1042_u1042_699_sample_completed_ &-> ($null)
          OR_u1042_u1042_699_update_start_ &-> (OR_u1042_u1042_699_Update)
          OR_u1042_u1042_699_update_completed_ <-& (OR_u1042_u1042_699_Update)
          // RAW reenables for (dat3_t << 1 )
          phi_stmt_685_update_start_ o<-& (OR_u1042_u1042_699_sample_completed_ 0)
          // RAW reenables for (($bitcast ($uint<1041>) 0  ) && DAT3Rx)
          RPIPE_DAT3Rx_697_update_start_ o<-& (OR_u1042_u1042_699_sample_completed_ 0)
          // self-release: 
          OR_u1042_u1042_699_sample_start_ o<-& (OR_u1042_u1042_699_sample_completed_ 1)
          $null &-> (OR_u1042_u1042_699_update_start_)
          OR_u1042_u1042_699_update_start_ o<-& (OR_u1042_u1042_699_update_completed_ 0)
          // Target expression
          // (as target) next_data3
          // start: WAR dependencies for next_data3
          // WAR dependency: Read: next_data3 before Write: 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 1// bits of buffering = 1042. 
          OR_u1042_u1042_699_update_start_ <-& (phi_stmt_685_sample_completed_)
          phi_stmt_685_sample_start_ o<-& (OR_u1042_u1042_699_update_completed_ 0)
          // WAR dependency: release  Read: next_data3 with Write: 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 1// bits of buffering = 1042. 
          // done: WAR dependencies for next_data3
          // end:  			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
          // start: WAR dependencies for next_I_3
          // WAR dependency: Read: next_I_3 before Write: 			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_3
          // start:  			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 317
          // volatile! 
          // Source expression
          // (I_3 + 1 )
          // I_3
          // Target expression
          // (as target) next_I_3
          // start: WAR dependencies for next_I_3
          // WAR dependency: Read: next_I_3 before Write: 			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_I_3
          // end:  			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
          // (next_I_3 < 1042 )
          // next_I_3
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_I_3 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from (next_I_3 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT3Rx
          // read-dependencies for pipe DAT3Rx
          // write-dependencies for pipe DAT3Rx
          // signal write dependencies for DAT3Rx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_678__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_678_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_678__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_678_loop_body : condition_evaluated
        $bind do_while_stmt_678__entry__  => do_while_stmt_678_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_678_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_678__exit__)
      }
      do_while_stmt_678__entry__ |-> (do_while_stmt_678)
      do_while_stmt_678__exit__ <-| (do_while_stmt_678)
      ::[assign_stmt_713_to_assign_stmt_721] 
      {
        // start: WAR dependencies for dat3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat3
        // start:  		$volatile dat3 := ( $slice next_data3 1040 17 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 319
        // volatile! 
        // Source expression
        // ( $slice next_data3 1040 17 ) 
        // next_data3
        // Target expression
        // (as target) dat3
        // dat3
        // write to interface object
        // start: WAR dependencies for dat3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for dat3
        // dat3
        // write to interface object
        // end:  		$volatile dat3 := ( $slice next_data3 1040 17 )  $buffering 1
        // start: WAR dependencies for nextCRC_3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_3
        // start:  		$volatile nextCRC_3 := ( $slice next_data3 16 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 320
        // volatile! 
        // Source expression
        // ( $slice next_data3 16 1 ) 
        // next_data3
        // Target expression
        // (as target) nextCRC_3
        // nextCRC_3
        // write to interface object
        // start: WAR dependencies for nextCRC_3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for nextCRC_3
        // nextCRC_3
        // write to interface object
        // end:  		$volatile nextCRC_3 := ( $slice next_data3 16 1 )  $buffering 1
        // start: WAR dependencies for stopBit3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit3
        // start:  		$volatile stopBit3 := ( $slice next_data3 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 321
        // volatile! 
        // Source expression
        // ( $slice next_data3 0 0 ) 
        // next_data3
        // Target expression
        // (as target) stopBit3
        // stopBit3
        // write to interface object
        // start: WAR dependencies for stopBit3
        // ignored out-of-scope w_root 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
        // done: WAR dependencies for stopBit3
        // stopBit3
        // write to interface object
        // end:  		$volatile stopBit3 := ( $slice next_data3 0 0 )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_713_to_assign_stmt_721__entry__ |-> (assign_stmt_713_to_assign_stmt_721)
      assign_stmt_713_to_assign_stmt_721__exit__ <-| (assign_stmt_713_to_assign_stmt_721)
      do_while_stmt_678__entry__ <-| (branch_block_stmt_677__entry__)
      assign_stmt_713_to_assign_stmt_721__entry__ <-| (do_while_stmt_678__exit__)
      assign_stmt_713_to_assign_stmt_721__exit__ |-> (branch_block_stmt_677__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %recvdat3%parallelblock_4%
    //  file .Aa/sdhc.opt.aa, line 310
    // constant-object-declarations for block %recvdat3%parallelblock_4
    //  file .Aa/sdhc.opt.aa, line 306
    // constant-object-declarations for block %recvdat3
    //  file .Aa/sdhc.opt.aa, line 301
    // constant-declarations for block %recvdat3%parallelblock_4
    //  file .Aa/sdhc.opt.aa, line 306
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 308
    // 1042 
    $constant $W[konst_708_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %recvdat3%parallelblock_4%
    //  file .Aa/sdhc.opt.aa, line 310
    // constant-declarations for phi:  			$phi I_3 := 			  next_I_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 311
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_684_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat3_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data3 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 313
    // ($bitcast ($uint<1042>) 0  )
    $constant $W[type_cast_688_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_693_wire_constant] : $int<1042> := _b
    // ($bitcast ($uint<1041>) 0  )
    $constant $W[type_cast_696_wire_constant] : $int<1041> := _b
    // 1 
    $constant $W[konst_703_wire_constant] : $int<11> := _b00000000001// 1
    // block %recvdat3%parallelblock_4
    //  file .Aa/sdhc.opt.aa, line 306
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 308
    // (next_I_3 < 1042 )
    $intermediate $W[ULT_u11_u1_709_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 310
    // 			$phi I_3 := 			  next_I_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 311
    $W[next_I_3_705_682_buffered] : $int<11>
    // I_3
    $W[I_3_680] : $int<11>
    // 			$phi dat3_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data3 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 313
    $W[next_data3_700_689_buffered] : $int<1042>
    // dat3_t
    $W[dat3_t_685] : $int<1042>
    // 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 316
    // (dat3_t << 1 )
    $intermediate $W[SHL_u1042_u1042_694_wire] : $int<1042>
    // DAT3Rx
    $W[RPIPE_DAT3Rx_697_wire] : $int<1>
    // (($bitcast ($uint<1041>) 0  ) && DAT3Rx)
    $intermediate $W[CONCAT_u1041_u1042_698_wire] : $int<1042>
    // next_data3
    $W[next_data3_700] : $int<1042>
    // 			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 317
    // next_I_3
    $W[next_I_3_705] : $int<11>
    // 		$volatile dat3 := ( $slice next_data3 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 319
    // dat3
    // 		$volatile nextCRC_3 := ( $slice next_data3 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 320
    // nextCRC_3
    // 		$volatile stopBit3 := ( $slice next_data3 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 321
    // stopBit3
    // datapath-instances for block %recvdat3%parallelblock_4
    //  file .Aa/sdhc.opt.aa, line 306
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 308
    // (next_I_3 < 1042 )
    <[ULT_u11_u1_709_inst] (next_I_3_705 konst_708_wire_constant) (ULT_u11_u1_709_wire)   $flowthrough 
    $delay ULT_u11_u1_709_inst 0
    ==0? [do_while_stmt_678_branch] (ULT_u11_u1_709_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 310
    // 			$phi I_3 := 			  next_I_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 311
    # := [next_I_3_705_682_buf] (next_I_3_705) (next_I_3_705_682_buffered)     $fullrate
    $buffering $out next_I_3_705_682_buf next_I_3_705_682_buffered  1
    # $phi [phi_stmt_680] (next_I_3_705_682_buffered type_cast_684_wire_constant) ( I_3_680 ) $fullrate
    // $buffering  $out phi_stmt_680 I_3_680 2
    // 			$phi dat3_t := 			  ($bitcast ($uint<1042>) 0  ) $on   $entry 			  next_data3 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 313
    # := [next_data3_700_689_buf] (next_data3_700) (next_data3_700_689_buffered)     $fullrate
    $buffering $out next_data3_700_689_buf next_data3_700_689_buffered  1
    # $phi [phi_stmt_685] (type_cast_688_wire_constant next_data3_700_689_buffered) ( dat3_t_685 ) $fullrate
    // $buffering  $out phi_stmt_685 dat3_t_685 2
    // 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
    //  file .Aa/sdhc.opt.aa, line 316
    // (dat3_t << 1 )
    <<[SHL_u1042_u1042_694_inst] (dat3_t_685 konst_693_wire_constant) (SHL_u1042_u1042_694_wire)   $flowthrough 
    $delay SHL_u1042_u1042_694_inst 0
    // DAT3Rx
    $ioport $in [RPIPE_DAT3Rx_697_inst] (DAT3Rx) (RPIPE_DAT3Rx_697_wire)  $fullrate 
    $buffering $out RPIPE_DAT3Rx_697_inst RPIPE_DAT3Rx_697_wire 1
    // (($bitcast ($uint<1041>) 0  ) && DAT3Rx)
    &&[CONCAT_u1041_u1042_698_inst] (type_cast_696_wire_constant RPIPE_DAT3Rx_697_wire) (CONCAT_u1041_u1042_698_wire)   $flowthrough 
    $delay CONCAT_u1041_u1042_698_inst 0
    // ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx))
    |[OR_u1042_u1042_699_inst] (SHL_u1042_u1042_694_wire CONCAT_u1041_u1042_698_wire) (next_data3_700)    $fullrate
    $buffering  $out OR_u1042_u1042_699_inst next_data3_700 2
    $delay OR_u1042_u1042_699_inst 1
    // 			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 317
    // (I_3 + 1 )
    +[ADD_u11_u11_704_inst] (I_3_680 konst_703_wire_constant) (next_I_3_705)   $flowthrough 
    $delay ADD_u11_u11_704_inst 0
    // 		$volatile dat3 := ( $slice next_data3 1040 17 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 319
    // ( $slice next_data3 1040 17 ) 
    [:] [slice_712_inst] (next_data3_700 1040 17) (dat3)  $flowthrough
    $delay slice_712_inst 0
    // 		$volatile nextCRC_3 := ( $slice next_data3 16 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 320
    // ( $slice next_data3 16 1 ) 
    [:] [slice_716_inst] (next_data3_700 16 1) (nextCRC_3)  $flowthrough
    $delay slice_716_inst 0
    // 		$volatile stopBit3 := ( $slice next_data3 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 321
    // ( $slice next_data3 0 0 ) 
    [:] [slice_720_inst] (next_data3_700 0 0) (stopBit3)  $flowthrough
    $delay slice_720_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_678
  //  file .Aa/sdhc.opt.aa, line 308
  phi_stmt_680 <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_680_loopback_sample_req branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_680_entry_sample_req) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_680_phi_mux_ack)
  next_I_3_705_682_buf <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_I_3_682_Sample/req branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_I_3_682_Update/req) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_I_3_682_Sample/ack branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_I_3_682_Update/ack)
  phi_stmt_685 <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_685_entry_sample_req branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_685_loopback_sample_req) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/phi_stmt_685_phi_mux_ack)
  next_data3_700_689_buf <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_data3_689_Sample/req branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_data3_689_Update/req) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_data3_689_Sample/ack branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/R_next_data3_689_Update/ack)
  // 			next_data3 := ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx)) $buffering 2// bits of buffering = 2084. 
  //  file .Aa/sdhc.opt.aa, line 316
  // ((dat3_t << 1 ) | (($bitcast ($uint<1041>) 0  ) && DAT3Rx))
  // (dat3_t << 1 )
  // dat3_t
  // (($bitcast ($uint<1041>) 0  ) && DAT3Rx)
  // DAT3Rx
  RPIPE_DAT3Rx_697_inst <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/RPIPE_DAT3Rx_697_Sample/rr branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/RPIPE_DAT3Rx_697_Update/cr) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/RPIPE_DAT3Rx_697_Sample/ra branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/RPIPE_DAT3Rx_697_Update/ca)
  OR_u1042_u1042_699_inst <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/OR_u1042_u1042_699_Sample/rr branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/OR_u1042_u1042_699_Update/cr) (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/OR_u1042_u1042_699_Sample/ra branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/OR_u1042_u1042_699_Update/ca)
  // 			$volatile next_I_3 := (I_3 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 317
  // (I_3 + 1 )
  // I_3
  // (next_I_3 < 1042 )
  // next_I_3
  do_while_stmt_678_branch <=> (branch_block_stmt_677/do_while_stmt_678/do_while_stmt_678_loop_body/condition_evaluated) (branch_block_stmt_677/do_while_stmt_678/loop_exit/ack branch_block_stmt_677/do_while_stmt_678/loop_taken/ack)
  // 		$volatile dat3 := ( $slice next_data3 1040 17 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 319
  // next_data3
  // 		$volatile nextCRC_3 := ( $slice next_data3 16 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 320
  // next_data3
  // 		$volatile stopBit3 := ( $slice next_data3 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 321
  // next_data3
}
$module [dataRx] 
{
  $in singleMultipleReadBlock:$int<1>
  // can point into 
  $out dataErrorInterruptStatusVar1:$int<8>
  // can point into 
  // pipe-declarations for block %dataRx
  //  file .Aa/sdhc.opt.aa, line 324
  // pipe-declarations for block %dataRx%data_rx
  //  file .Aa/sdhc.opt.aa, line 329
  // memory-space 7 is written into.
  // memory-space 8 is written into.
  // memory-space 7 is read from.
  // memory-space 8 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_727] // Branch Block  file .Aa/sdhc.opt.aa, line 329
    {
      $P [branch_block_stmt_727__entry__]
      branch_block_stmt_727__entry__ <-| ($entry)
      $P [branch_block_stmt_727__exit__]
      branch_block_stmt_727__exit__ |-> ($exit)
      $P [assign_stmt_731_to_assign_stmt_735__entry__] 
      $P [assign_stmt_731_to_assign_stmt_735__exit__] 
      $P [if_stmt_736__entry__] 
      $P [if_stmt_736__exit__] 
      $P [assign_stmt_1436__entry__] 
      $P [assign_stmt_1436__exit__] 
      $P [if_stmt_1437__entry__] 
      $P [if_stmt_1437__exit__] 
      ::[assign_stmt_731_to_assign_stmt_735] 
      {
        // start:  		presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 331
        // Source expression
        // sdhcRegisters[37 ]
        $T[array_obj_ref_730_base_address_calculated] 
        $T[array_obj_ref_730_sample_start_] 
        $T[array_obj_ref_730_sample_completed_] 
        $T[array_obj_ref_730_update_start_] 
        $T[array_obj_ref_730_update_completed_] 
        $T[array_obj_ref_730_word_address_calculated] 
        $T[array_obj_ref_730_root_address_calculated] 
        array_obj_ref_730_word_address_calculated <-& (array_obj_ref_730_root_address_calculated)
        ;;[array_obj_ref_730_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_730_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_730_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_730_sample_start_ <-& (array_obj_ref_730_word_address_calculated)
        array_obj_ref_730_sample_start_ &-> (array_obj_ref_730_Sample)
        array_obj_ref_730_sample_completed_ <-& (array_obj_ref_730_Sample)
        array_obj_ref_730_sample_completed_ &-> ($null)
        array_obj_ref_730_update_start_ &-> (array_obj_ref_730_Update)
        array_obj_ref_730_update_completed_ <-& (array_obj_ref_730_Update)
        // Target expression
        // (as target) presentState1Var
        // start: WAR dependencies for presentState1Var
        // done: WAR dependencies for presentState1Var
        // end:  		presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
        // start:  		presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 332
        // Source expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_734_base_address_calculated] 
        $T[array_obj_ref_734_sample_start_] 
        $T[array_obj_ref_734_sample_completed_] 
        $T[array_obj_ref_734_update_start_] 
        $T[array_obj_ref_734_update_completed_] 
        $T[array_obj_ref_734_word_address_calculated] 
        $T[array_obj_ref_734_root_address_calculated] 
        array_obj_ref_734_word_address_calculated <-& (array_obj_ref_734_root_address_calculated)
        ;;[array_obj_ref_734_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_734_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_734_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_734_sample_start_ <-& (array_obj_ref_734_word_address_calculated)
        array_obj_ref_734_sample_start_ &-> (array_obj_ref_734_Sample)
        array_obj_ref_734_sample_completed_ <-& (array_obj_ref_734_Sample)
        array_obj_ref_734_sample_completed_ &-> ($null)
        array_obj_ref_734_update_start_ &-> (array_obj_ref_734_Update)
        array_obj_ref_734_update_completed_ <-& (array_obj_ref_734_Update)
        // Target expression
        // (as target) presentState0Var
        // start: WAR dependencies for presentState0Var
        // done: WAR dependencies for presentState0Var
        // end:  		presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_730 load
        //  array_obj_ref_734 load
      }
      assign_stmt_731_to_assign_stmt_735__entry__ |-> (assign_stmt_731_to_assign_stmt_735)
      assign_stmt_731_to_assign_stmt_735__exit__ <-| (assign_stmt_731_to_assign_stmt_735)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 333
      ;;[if_stmt_736_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_736__entry__ |-> (if_stmt_736_dead_link)
      if_stmt_736__exit__ <-| (if_stmt_736_dead_link)
      ;;[if_stmt_736_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (sdhcRegisters[40 ] [] 1 )
        ;;[BITSEL_u8_u1_740] 
        {
          // binary expression 
          ||[BITSEL_u8_u1_740_inputs] 
          {
            // sdhcRegisters[40 ]
            ;;[array_obj_ref_738] 
            {
              // load 
              ;;[array_obj_ref_738_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_736__entry__ |-> (if_stmt_736_eval_test)
      $P [BITSEL_u8_u1_740_place]
      BITSEL_u8_u1_740_place <-| (if_stmt_736_eval_test)
      ;;[if_stmt_736_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_736_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u8_u1_740_place |-> (if_stmt_736_if_link if_stmt_736_else_link)
      $P [parallel_block_stmt_741__entry__] 
      $P [parallel_block_stmt_741__exit__] 
      $P [assign_stmt_763__entry__] 
      $P [assign_stmt_763__exit__] 
      $P [do_while_stmt_764__entry__] 
      $P [do_while_stmt_764__exit__] 
      $P [assign_stmt_835_to_assign_stmt_840__entry__] 
      $P [assign_stmt_835_to_assign_stmt_840__exit__] 
      $P [do_while_stmt_841__entry__] 
      $P [do_while_stmt_841__exit__] 
      $P [assign_stmt_909_to_assign_stmt_914__entry__] 
      $P [assign_stmt_909_to_assign_stmt_914__exit__] 
      $P [do_while_stmt_915__entry__] 
      $P [do_while_stmt_915__exit__] 
      $P [assign_stmt_983_to_assign_stmt_988__entry__] 
      $P [assign_stmt_983_to_assign_stmt_988__exit__] 
      $P [do_while_stmt_989__entry__] 
      $P [do_while_stmt_989__exit__] 
      $P [assign_stmt_1057_to_assign_stmt_1061__entry__] 
      $P [assign_stmt_1057_to_assign_stmt_1061__exit__] 
      $P [if_stmt_1062__entry__] 
      $P [if_stmt_1062__exit__] 
      $P [do_while_stmt_1073__entry__] 
      $P [do_while_stmt_1073__exit__] 
      $P [assign_stmt_1167_to_assign_stmt_1189__entry__] 
      $P [assign_stmt_1167_to_assign_stmt_1189__exit__] 
      ||[parallel_block_stmt_741] 
      {
        ::[call_stmt_745] 
        {
          // start: 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
          //  file .Aa/sdhc.opt.aa, line 336
          $T[call_stmt_745_sample_start_] 
          $T[call_stmt_745_sample_completed_] 
          $T[call_stmt_745_update_start_] 
          $T[call_stmt_745_update_completed_] 
          ;;[call_stmt_745_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_745_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_745_sample_start_ &-> (call_stmt_745_Sample)
          call_stmt_745_sample_completed_ <-& (call_stmt_745_Sample)
          call_stmt_745_sample_completed_ &-> ($null)
          call_stmt_745_update_start_ &-> (call_stmt_745_Update)
          call_stmt_745_update_completed_ <-& (call_stmt_745_Update)
          // Call output argument 0
          // (as target) dat0
          // Call output argument 1
          // (as target) nextCRC_0
          // Call output argument 2
          // (as target) stopBit0
          // start: WAR dependencies for dat0
          // done: WAR dependencies for dat0
          // start: WAR dependencies for nextCRC_0
          // done: WAR dependencies for nextCRC_0
          // start: WAR dependencies for stopBit0
          // done: WAR dependencies for stopBit0
          // end: 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT0Rx
          // read-dependencies for pipe DAT0Rx
          // write-dependencies for pipe DAT0Rx
          // signal write dependencies for DAT0Rx
        }
        ::[call_stmt_749] 
        {
          // start: 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
          //  file .Aa/sdhc.opt.aa, line 337
          $T[call_stmt_749_sample_start_] 
          $T[call_stmt_749_sample_completed_] 
          $T[call_stmt_749_update_start_] 
          $T[call_stmt_749_update_completed_] 
          ;;[call_stmt_749_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_749_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_749_sample_start_ &-> (call_stmt_749_Sample)
          call_stmt_749_sample_completed_ <-& (call_stmt_749_Sample)
          call_stmt_749_sample_completed_ &-> ($null)
          call_stmt_749_update_start_ &-> (call_stmt_749_Update)
          call_stmt_749_update_completed_ <-& (call_stmt_749_Update)
          // Call output argument 0
          // (as target) dat1
          // Call output argument 1
          // (as target) nextCRC_1
          // Call output argument 2
          // (as target) stopBit1
          // start: WAR dependencies for dat1
          // done: WAR dependencies for dat1
          // start: WAR dependencies for nextCRC_1
          // done: WAR dependencies for nextCRC_1
          // start: WAR dependencies for stopBit1
          // done: WAR dependencies for stopBit1
          // end: 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT1Rx
          // read-dependencies for pipe DAT1Rx
          // write-dependencies for pipe DAT1Rx
          // signal write dependencies for DAT1Rx
        }
        ::[call_stmt_753] 
        {
          // start: 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
          //  file .Aa/sdhc.opt.aa, line 338
          $T[call_stmt_753_sample_start_] 
          $T[call_stmt_753_sample_completed_] 
          $T[call_stmt_753_update_start_] 
          $T[call_stmt_753_update_completed_] 
          ;;[call_stmt_753_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_753_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_753_sample_start_ &-> (call_stmt_753_Sample)
          call_stmt_753_sample_completed_ <-& (call_stmt_753_Sample)
          call_stmt_753_sample_completed_ &-> ($null)
          call_stmt_753_update_start_ &-> (call_stmt_753_Update)
          call_stmt_753_update_completed_ <-& (call_stmt_753_Update)
          // Call output argument 0
          // (as target) dat2
          // Call output argument 1
          // (as target) nextCRC_2
          // Call output argument 2
          // (as target) stopBit2
          // start: WAR dependencies for dat2
          // done: WAR dependencies for dat2
          // start: WAR dependencies for nextCRC_2
          // done: WAR dependencies for nextCRC_2
          // start: WAR dependencies for stopBit2
          // done: WAR dependencies for stopBit2
          // end: 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT2Rx
          // read-dependencies for pipe DAT2Rx
          // write-dependencies for pipe DAT2Rx
          // signal write dependencies for DAT2Rx
        }
        ::[call_stmt_757] 
        {
          // start: 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
          //  file .Aa/sdhc.opt.aa, line 339
          $T[call_stmt_757_sample_start_] 
          $T[call_stmt_757_sample_completed_] 
          $T[call_stmt_757_update_start_] 
          $T[call_stmt_757_update_completed_] 
          ;;[call_stmt_757_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_757_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_757_sample_start_ &-> (call_stmt_757_Sample)
          call_stmt_757_sample_completed_ <-& (call_stmt_757_Sample)
          call_stmt_757_sample_completed_ &-> ($null)
          call_stmt_757_update_start_ &-> (call_stmt_757_Update)
          call_stmt_757_update_completed_ <-& (call_stmt_757_Update)
          // Call output argument 0
          // (as target) dat3
          // Call output argument 1
          // (as target) nextCRC_3
          // Call output argument 2
          // (as target) stopBit3
          // start: WAR dependencies for dat3
          // done: WAR dependencies for dat3
          // start: WAR dependencies for nextCRC_3
          // done: WAR dependencies for nextCRC_3
          // start: WAR dependencies for stopBit3
          // done: WAR dependencies for stopBit3
          // end: 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT3Rx
          // read-dependencies for pipe DAT3Rx
          // write-dependencies for pipe DAT3Rx
          // signal write dependencies for DAT3Rx
        }
      }
      parallel_block_stmt_741__entry__ |-> (parallel_block_stmt_741)
      parallel_block_stmt_741__exit__ <-| (parallel_block_stmt_741)
      ::[assign_stmt_763] 
      {
        // start: WAR dependencies for stopBitError0
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // done: WAR dependencies for stopBitError0
        // start:  			$volatile stopBitError0 := (stopBit0 == 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 342
        // volatile! 
        // Source expression
        // (stopBit0 == 0 )
        // stopBit0
        // Target expression
        // (as target) stopBitError0
        // start: WAR dependencies for stopBitError0
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // done: WAR dependencies for stopBitError0
        // end:  			$volatile stopBitError0 := (stopBit0 == 0 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_763__entry__ |-> (assign_stmt_763)
      assign_stmt_763__exit__ <-| (assign_stmt_763)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 343
      <o> [do_while_stmt_764]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_764__entry__] 
        $P[do_while_stmt_764__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_764_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_766
          // 			$phi J_0 := 			  next_J_0 $on   $loopback 			  ($bitcast ($uint<13>) 0  ) $on   $entry 
          // type of target is $uint<13>
          $T[phi_stmt_766_sample_start_] 
          $T[phi_stmt_766_sample_completed_] 
          $T[phi_stmt_766_update_start_] 
          $T[phi_stmt_766_update_completed_] 
          $T[phi_stmt_766_sample_start__ps] 
          phi_stmt_766_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_766_sample_completed__ps] 
          phi_stmt_766_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_766_update_start__ps] 
          phi_stmt_766_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_766_update_completed__ps] 
          phi_stmt_766_update_completed_ <-& (phi_stmt_766_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_766_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_766_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_766_update_start_)
          $T[phi_stmt_766_loopback_trigger] 
          phi_stmt_766_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_766_loopback_sample_req] 
          $T[phi_stmt_766_loopback_sample_req_ps] 
          phi_stmt_766_loopback_sample_req <-& (phi_stmt_766_loopback_sample_req_ps)
          phi_stmt_766_loopback_sample_req &-> ($null)
          $T[phi_stmt_766_entry_trigger] 
          phi_stmt_766_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_766_entry_sample_req] 
          $T[phi_stmt_766_entry_sample_req_ps] 
          phi_stmt_766_entry_sample_req <-& (phi_stmt_766_entry_sample_req_ps)
          phi_stmt_766_entry_sample_req &-> ($null)
          phi_stmt_766_update_start_ o<-& (phi_stmt_766_update_completed_ 0)
          phi_stmt_766_sample_start_ o<-& (phi_stmt_766_sample_completed_ 1)
          $T[phi_stmt_766_merged_reqs] 
          $T[phi_stmt_766_phi_mux_ack] 
          $T[phi_stmt_766_phi_mux_ack_ps] 
          phi_stmt_766_phi_mux_ack_ps <-& (phi_stmt_766_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_766_update_completed_)
          $T[R_next_J_0_768_sample_start__ps] 
          $T[R_next_J_0_768_sample_completed__ps] 
          $T[R_next_J_0_768_update_start__ps] 
          $T[R_next_J_0_768_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_J_0_768_sample_start_] 
          $T[R_next_J_0_768_sample_completed_] 
          $T[R_next_J_0_768_update_start_] 
          $T[R_next_J_0_768_update_completed_] 
          ;;[R_next_J_0_768_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_J_0_768_sample_start_ &-> (R_next_J_0_768_Sample)
          R_next_J_0_768_sample_completed_ <-& (R_next_J_0_768_Sample)
          ;;[R_next_J_0_768_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_J_0_768_update_start_ &-> (R_next_J_0_768_Update)
          R_next_J_0_768_update_completed_ <-& (R_next_J_0_768_Update)
          // RAW reenables for next_J_0
          // Phi start dependency for implicit/constant alternative.
          R_next_J_0_768_sample_start_ <-& (R_next_J_0_768_sample_start__ps)
          R_next_J_0_768_update_start_ <-& (R_next_J_0_768_update_start__ps)
          // Phi complete dependency.
          R_next_J_0_768_sample_completed__ps <-& (R_next_J_0_768_sample_completed_)
          R_next_J_0_768_update_completed__ps <-& (R_next_J_0_768_update_completed_)
          $T[type_cast_771_sample_start__ps] 
          $T[type_cast_771_sample_completed__ps] 
          $T[type_cast_771_update_start__ps] 
          $T[type_cast_771_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_771_sample_start_] 
          $T[type_cast_771_sample_completed_] 
          type_cast_771_sample_completed_ <-& (type_cast_771_sample_start_)
          $T[type_cast_771_update_start_] 
          $T [type_cast_771_update_completed_] $delay 
          type_cast_771_update_completed_ <-& (type_cast_771_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_771_sample_start_ <-& (type_cast_771_sample_start__ps)
          type_cast_771_update_start_ <-& (type_cast_771_update_start__ps)
          // Phi complete dependency.
          type_cast_771_sample_completed__ps <-& (type_cast_771_sample_completed_)
          type_cast_771_update_completed__ps <-& (type_cast_771_update_completed_)
          $phisequencer [ phi_stmt_766_phi_seq] : 
          phi_stmt_766_loopback_trigger R_next_J_0_768_sample_start__ps R_next_J_0_768_sample_completed__ps R_next_J_0_768_update_start__ps R_next_J_0_768_update_completed__ps phi_stmt_766_entry_trigger type_cast_771_sample_start__ps type_cast_771_sample_completed__ps type_cast_771_update_start__ps type_cast_771_update_completed__ps :
          phi_stmt_766_sample_start__ps phi_stmt_766_sample_completed__ps phi_stmt_766_update_start__ps phi_stmt_766_update_completed__ps :
          phi_stmt_766_loopback_sample_req_ps phi_stmt_766_entry_sample_req_ps : 
          phi_stmt_766_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_766
          // start:  PHI statement phi_stmt_772
          // 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_772_sample_start_] 
          $T[phi_stmt_772_sample_completed_] 
          $T[phi_stmt_772_update_start_] 
          $T[phi_stmt_772_update_completed_] 
          $T[phi_stmt_772_sample_start__ps] 
          phi_stmt_772_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_772_sample_completed__ps] 
          phi_stmt_772_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_772_update_start__ps] 
          phi_stmt_772_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_772_update_completed__ps] 
          phi_stmt_772_update_completed_ <-& (phi_stmt_772_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_772_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_772_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_772_update_start_)
          $T[phi_stmt_772_loopback_trigger] 
          phi_stmt_772_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_772_loopback_sample_req] 
          $T[phi_stmt_772_loopback_sample_req_ps] 
          phi_stmt_772_loopback_sample_req <-& (phi_stmt_772_loopback_sample_req_ps)
          phi_stmt_772_loopback_sample_req &-> ($null)
          $T[phi_stmt_772_entry_trigger] 
          phi_stmt_772_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_772_entry_sample_req] 
          $T[phi_stmt_772_entry_sample_req_ps] 
          phi_stmt_772_entry_sample_req <-& (phi_stmt_772_entry_sample_req_ps)
          phi_stmt_772_entry_sample_req &-> ($null)
          phi_stmt_772_update_start_ o<-& (phi_stmt_772_update_completed_ 0)
          phi_stmt_772_sample_start_ o<-& (phi_stmt_772_sample_completed_ 1)
          $T[phi_stmt_772_merged_reqs] 
          $T[phi_stmt_772_phi_mux_ack] 
          $T[phi_stmt_772_phi_mux_ack_ps] 
          phi_stmt_772_phi_mux_ack_ps <-& (phi_stmt_772_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_772_update_completed_)
          $T[type_cast_775_sample_start__ps] 
          $T[type_cast_775_sample_completed__ps] 
          $T[type_cast_775_update_start__ps] 
          $T[type_cast_775_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_775_sample_start_] 
          $T[type_cast_775_sample_completed_] 
          type_cast_775_sample_completed_ <-& (type_cast_775_sample_start_)
          $T[type_cast_775_update_start_] 
          $T [type_cast_775_update_completed_] $delay 
          type_cast_775_update_completed_ <-& (type_cast_775_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_775_sample_start_ <-& (type_cast_775_sample_start__ps)
          type_cast_775_update_start_ <-& (type_cast_775_update_start__ps)
          // Phi complete dependency.
          type_cast_775_sample_completed__ps <-& (type_cast_775_sample_completed_)
          type_cast_775_update_completed__ps <-& (type_cast_775_update_completed_)
          $T[R_nextCRC16_0_776_sample_start__ps] 
          $T[R_nextCRC16_0_776_sample_completed__ps] 
          $T[R_nextCRC16_0_776_update_start__ps] 
          $T[R_nextCRC16_0_776_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_0_776_sample_start_] 
          $T[R_nextCRC16_0_776_sample_completed_] 
          $T[R_nextCRC16_0_776_update_start_] 
          $T[R_nextCRC16_0_776_update_completed_] 
          ;;[R_nextCRC16_0_776_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_0_776_sample_start_ &-> (R_nextCRC16_0_776_Sample)
          R_nextCRC16_0_776_sample_completed_ <-& (R_nextCRC16_0_776_Sample)
          ;;[R_nextCRC16_0_776_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_0_776_update_start_ &-> (R_nextCRC16_0_776_Update)
          R_nextCRC16_0_776_update_completed_ <-& (R_nextCRC16_0_776_Update)
          // RAW reenables for nextCRC16_0
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_0_776_sample_start_ <-& (R_nextCRC16_0_776_sample_start__ps)
          R_nextCRC16_0_776_update_start_ <-& (R_nextCRC16_0_776_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_0_776_sample_completed__ps <-& (R_nextCRC16_0_776_sample_completed_)
          R_nextCRC16_0_776_update_completed__ps <-& (R_nextCRC16_0_776_update_completed_)
          $phisequencer [ phi_stmt_772_phi_seq] : 
          phi_stmt_772_entry_trigger type_cast_775_sample_start__ps type_cast_775_sample_completed__ps type_cast_775_update_start__ps type_cast_775_update_completed__ps phi_stmt_772_loopback_trigger R_nextCRC16_0_776_sample_start__ps R_nextCRC16_0_776_sample_completed__ps R_nextCRC16_0_776_update_start__ps R_nextCRC16_0_776_update_completed__ps :
          phi_stmt_772_sample_start__ps phi_stmt_772_sample_completed__ps phi_stmt_772_update_start__ps phi_stmt_772_update_completed__ps :
          phi_stmt_772_entry_sample_req_ps phi_stmt_772_loopback_sample_req_ps : 
          phi_stmt_772_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_772
          // start:  PHI statement phi_stmt_777
          // 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_777_sample_start_] 
          $T[phi_stmt_777_sample_completed_] 
          $T[phi_stmt_777_update_start_] 
          $T[phi_stmt_777_update_completed_] 
          $T[phi_stmt_777_sample_start__ps] 
          phi_stmt_777_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_777_sample_completed__ps] 
          phi_stmt_777_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_777_update_start__ps] 
          phi_stmt_777_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_777_update_completed__ps] 
          phi_stmt_777_update_completed_ <-& (phi_stmt_777_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_777_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_777_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_777_update_start_)
          $T[phi_stmt_777_loopback_trigger] 
          phi_stmt_777_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_777_loopback_sample_req] 
          $T[phi_stmt_777_loopback_sample_req_ps] 
          phi_stmt_777_loopback_sample_req <-& (phi_stmt_777_loopback_sample_req_ps)
          phi_stmt_777_loopback_sample_req &-> ($null)
          $T[phi_stmt_777_entry_trigger] 
          phi_stmt_777_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_777_entry_sample_req] 
          $T[phi_stmt_777_entry_sample_req_ps] 
          phi_stmt_777_entry_sample_req <-& (phi_stmt_777_entry_sample_req_ps)
          phi_stmt_777_entry_sample_req &-> ($null)
          phi_stmt_777_update_start_ o<-& (phi_stmt_777_update_completed_ 0)
          phi_stmt_777_sample_start_ o<-& (phi_stmt_777_sample_completed_ 1)
          $T[phi_stmt_777_merged_reqs] 
          $T[phi_stmt_777_phi_mux_ack] 
          $T[phi_stmt_777_phi_mux_ack_ps] 
          phi_stmt_777_phi_mux_ack_ps <-& (phi_stmt_777_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_777_update_completed_)
          $T[R_dat0_779_sample_start__ps] 
          $T[R_dat0_779_sample_completed__ps] 
          $T[R_dat0_779_update_start__ps] 
          $T[R_dat0_779_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat0_779_sample_start_] 
          $T[R_dat0_779_sample_completed_] 
          $T[R_dat0_779_update_start_] 
          $T[R_dat0_779_update_completed_] 
          ;;[R_dat0_779_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat0_779_sample_start_ &-> (R_dat0_779_Sample)
          R_dat0_779_sample_completed_ <-& (R_dat0_779_Sample)
          ;;[R_dat0_779_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat0_779_update_start_ &-> (R_dat0_779_Update)
          R_dat0_779_update_completed_ <-& (R_dat0_779_Update)
          // RAW reenables for dat0
          // Phi start dependency for implicit/constant alternative.
          R_dat0_779_sample_start_ <-& (R_dat0_779_sample_start__ps)
          R_dat0_779_update_start_ <-& (R_dat0_779_update_start__ps)
          // Phi complete dependency.
          R_dat0_779_sample_completed__ps <-& (R_dat0_779_sample_completed_)
          R_dat0_779_update_completed__ps <-& (R_dat0_779_update_completed_)
          $T[R_nextTempData0_780_sample_start__ps] 
          $T[R_nextTempData0_780_sample_completed__ps] 
          $T[R_nextTempData0_780_update_start__ps] 
          $T[R_nextTempData0_780_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempData0_780_sample_start_] 
          $T[R_nextTempData0_780_sample_completed_] 
          $T[R_nextTempData0_780_update_start_] 
          $T[R_nextTempData0_780_update_completed_] 
          ;;[R_nextTempData0_780_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempData0_780_sample_start_ &-> (R_nextTempData0_780_Sample)
          R_nextTempData0_780_sample_completed_ <-& (R_nextTempData0_780_Sample)
          ;;[R_nextTempData0_780_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempData0_780_update_start_ &-> (R_nextTempData0_780_Update)
          R_nextTempData0_780_update_completed_ <-& (R_nextTempData0_780_Update)
          // RAW reenables for nextTempData0
          // Phi start dependency for implicit/constant alternative.
          R_nextTempData0_780_sample_start_ <-& (R_nextTempData0_780_sample_start__ps)
          R_nextTempData0_780_update_start_ <-& (R_nextTempData0_780_update_start__ps)
          // Phi complete dependency.
          R_nextTempData0_780_sample_completed__ps <-& (R_nextTempData0_780_sample_completed_)
          R_nextTempData0_780_update_completed__ps <-& (R_nextTempData0_780_update_completed_)
          $phisequencer [ phi_stmt_777_phi_seq] : 
          phi_stmt_777_entry_trigger R_dat0_779_sample_start__ps R_dat0_779_sample_completed__ps R_dat0_779_update_start__ps R_dat0_779_update_completed__ps phi_stmt_777_loopback_trigger R_nextTempData0_780_sample_start__ps R_nextTempData0_780_sample_completed__ps R_nextTempData0_780_update_start__ps R_nextTempData0_780_update_completed__ps :
          phi_stmt_777_sample_start__ps phi_stmt_777_sample_completed__ps phi_stmt_777_update_start__ps phi_stmt_777_update_completed__ps :
          phi_stmt_777_entry_sample_req_ps phi_stmt_777_loopback_sample_req_ps : 
          phi_stmt_777_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_777
          // start: WAR dependencies for inv0
          // done: WAR dependencies for inv0
          // start:  			$volatile inv0 := ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 353
          // volatile! 
          // Source expression
          // ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 ))
          // (tempData0 [] 1023 )
          // tempData0
          // (CRC_16_0 [] 15 )
          // CRC_16_0
          // Target expression
          // (as target) inv0
          // start: WAR dependencies for inv0
          // done: WAR dependencies for inv0
          // end:  			$volatile inv0 := ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_0
          // WAR dependency: Read: nextCRC16_0 before Write: 			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_0
          // start:  			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 354
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0))
          // ((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) )
          // (( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0))
          // ( $slice CRC_16_0 14 12 ) 
          // CRC_16_0
          // ((CRC_16_0 [] 11 ) ^ inv0)
          // (CRC_16_0 [] 11 )
          // CRC_16_0
          // inv0
          // ( $slice CRC_16_0 10 5 ) 
          // CRC_16_0
          // ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)
          // (((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) )
          // ((CRC_16_0 [] 4 ) ^ inv0)
          // (CRC_16_0 [] 4 )
          // CRC_16_0
          // inv0
          // ( $slice CRC_16_0 3 0 ) 
          // CRC_16_0
          // inv0
          // Target expression
          // (as target) nextCRC16_0
          // start: WAR dependencies for nextCRC16_0
          // WAR dependency: Read: nextCRC16_0 before Write: 			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_0
          // end:  			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
          // start: WAR dependencies for nextTempData0
          // WAR dependency: Read: nextTempData0 before Write: 			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData0
          // start:  			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 355
          // volatile! 
          // Source expression
          // (tempData0 << 1 )
          // tempData0
          // Target expression
          // (as target) nextTempData0
          // start: WAR dependencies for nextTempData0
          // WAR dependency: Read: nextTempData0 before Write: 			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData0
          // end:  			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
          // start: WAR dependencies for next_J_0
          // WAR dependency: Read: next_J_0 before Write: 			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_0
          // start:  			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 356
          // volatile! 
          // Source expression
          // (J_0 + 1 )
          // J_0
          // Target expression
          // (as target) next_J_0
          // start: WAR dependencies for next_J_0
          // WAR dependency: Read: next_J_0 before Write: 			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_0
          // end:  			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
          // (next_J_0 < 1024 )
          // next_J_0
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_J_0 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_766_update_completed_)
          // done: Forward dependencies from (next_J_0 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_764__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_764_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_764__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_764_loop_body : condition_evaluated
        $bind do_while_stmt_764__entry__  => do_while_stmt_764_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_764_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_764__exit__)
      }
      do_while_stmt_764__entry__ |-> (do_while_stmt_764)
      do_while_stmt_764__exit__ <-| (do_while_stmt_764)
      ::[assign_stmt_835_to_assign_stmt_840] 
      {
        // start: WAR dependencies for crcError0
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError0
        // start:  			$volatile crcError0 := (nextCRC_0 != nextCRC16_0) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 358
        // volatile! 
        // Source expression
        // (nextCRC_0 != nextCRC16_0)
        // nextCRC_0
        // nextCRC16_0
        // Target expression
        // (as target) crcError0
        // start: WAR dependencies for crcError0
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError0
        // end:  			$volatile crcError0 := (nextCRC_0 != nextCRC16_0) $buffering 1
        // start: WAR dependencies for stopBitError1
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // done: WAR dependencies for stopBitError1
        // start:  			$volatile stopBitError1 := (stopBit1 == 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 359
        // volatile! 
        // Source expression
        // (stopBit1 == 0 )
        // stopBit1
        // Target expression
        // (as target) stopBitError1
        // start: WAR dependencies for stopBitError1
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // done: WAR dependencies for stopBitError1
        // end:  			$volatile stopBitError1 := (stopBit1 == 0 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_835_to_assign_stmt_840__entry__ |-> (assign_stmt_835_to_assign_stmt_840)
      assign_stmt_835_to_assign_stmt_840__exit__ <-| (assign_stmt_835_to_assign_stmt_840)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 360
      <o> [do_while_stmt_841]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_841__entry__] 
        $P[do_while_stmt_841__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_841_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_843
          // 			$phi J_1 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_1 $on   $loopback 
          // type of target is $uint<13>
          $T[phi_stmt_843_sample_start_] 
          $T[phi_stmt_843_sample_completed_] 
          $T[phi_stmt_843_update_start_] 
          $T[phi_stmt_843_update_completed_] 
          $T[phi_stmt_843_sample_start__ps] 
          phi_stmt_843_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_843_sample_completed__ps] 
          phi_stmt_843_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_843_update_start__ps] 
          phi_stmt_843_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_843_update_completed__ps] 
          phi_stmt_843_update_completed_ <-& (phi_stmt_843_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_843_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_843_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_843_update_start_)
          $T[phi_stmt_843_loopback_trigger] 
          phi_stmt_843_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_843_loopback_sample_req] 
          $T[phi_stmt_843_loopback_sample_req_ps] 
          phi_stmt_843_loopback_sample_req <-& (phi_stmt_843_loopback_sample_req_ps)
          phi_stmt_843_loopback_sample_req &-> ($null)
          $T[phi_stmt_843_entry_trigger] 
          phi_stmt_843_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_843_entry_sample_req] 
          $T[phi_stmt_843_entry_sample_req_ps] 
          phi_stmt_843_entry_sample_req <-& (phi_stmt_843_entry_sample_req_ps)
          phi_stmt_843_entry_sample_req &-> ($null)
          phi_stmt_843_update_start_ o<-& (phi_stmt_843_update_completed_ 0)
          phi_stmt_843_sample_start_ o<-& (phi_stmt_843_sample_completed_ 1)
          $T[phi_stmt_843_merged_reqs] 
          $T[phi_stmt_843_phi_mux_ack] 
          $T[phi_stmt_843_phi_mux_ack_ps] 
          phi_stmt_843_phi_mux_ack_ps <-& (phi_stmt_843_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_843_update_completed_)
          $T[type_cast_846_sample_start__ps] 
          $T[type_cast_846_sample_completed__ps] 
          $T[type_cast_846_update_start__ps] 
          $T[type_cast_846_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_846_sample_start_] 
          $T[type_cast_846_sample_completed_] 
          type_cast_846_sample_completed_ <-& (type_cast_846_sample_start_)
          $T[type_cast_846_update_start_] 
          $T [type_cast_846_update_completed_] $delay 
          type_cast_846_update_completed_ <-& (type_cast_846_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_846_sample_start_ <-& (type_cast_846_sample_start__ps)
          type_cast_846_update_start_ <-& (type_cast_846_update_start__ps)
          // Phi complete dependency.
          type_cast_846_sample_completed__ps <-& (type_cast_846_sample_completed_)
          type_cast_846_update_completed__ps <-& (type_cast_846_update_completed_)
          $T[R_next_J_1_847_sample_start__ps] 
          $T[R_next_J_1_847_sample_completed__ps] 
          $T[R_next_J_1_847_update_start__ps] 
          $T[R_next_J_1_847_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_J_1_847_sample_start_] 
          $T[R_next_J_1_847_sample_completed_] 
          $T[R_next_J_1_847_update_start_] 
          $T[R_next_J_1_847_update_completed_] 
          ;;[R_next_J_1_847_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_J_1_847_sample_start_ &-> (R_next_J_1_847_Sample)
          R_next_J_1_847_sample_completed_ <-& (R_next_J_1_847_Sample)
          ;;[R_next_J_1_847_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_J_1_847_update_start_ &-> (R_next_J_1_847_Update)
          R_next_J_1_847_update_completed_ <-& (R_next_J_1_847_Update)
          // RAW reenables for next_J_1
          // Phi start dependency for implicit/constant alternative.
          R_next_J_1_847_sample_start_ <-& (R_next_J_1_847_sample_start__ps)
          R_next_J_1_847_update_start_ <-& (R_next_J_1_847_update_start__ps)
          // Phi complete dependency.
          R_next_J_1_847_sample_completed__ps <-& (R_next_J_1_847_sample_completed_)
          R_next_J_1_847_update_completed__ps <-& (R_next_J_1_847_update_completed_)
          $phisequencer [ phi_stmt_843_phi_seq] : 
          phi_stmt_843_entry_trigger type_cast_846_sample_start__ps type_cast_846_sample_completed__ps type_cast_846_update_start__ps type_cast_846_update_completed__ps phi_stmt_843_loopback_trigger R_next_J_1_847_sample_start__ps R_next_J_1_847_sample_completed__ps R_next_J_1_847_update_start__ps R_next_J_1_847_update_completed__ps :
          phi_stmt_843_sample_start__ps phi_stmt_843_sample_completed__ps phi_stmt_843_update_start__ps phi_stmt_843_update_completed__ps :
          phi_stmt_843_entry_sample_req_ps phi_stmt_843_loopback_sample_req_ps : 
          phi_stmt_843_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_843
          // start:  PHI statement phi_stmt_848
          // 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_848_sample_start_] 
          $T[phi_stmt_848_sample_completed_] 
          $T[phi_stmt_848_update_start_] 
          $T[phi_stmt_848_update_completed_] 
          $T[phi_stmt_848_sample_start__ps] 
          phi_stmt_848_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_848_sample_completed__ps] 
          phi_stmt_848_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_848_update_start__ps] 
          phi_stmt_848_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_848_update_completed__ps] 
          phi_stmt_848_update_completed_ <-& (phi_stmt_848_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_848_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_848_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_848_update_start_)
          $T[phi_stmt_848_loopback_trigger] 
          phi_stmt_848_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_848_loopback_sample_req] 
          $T[phi_stmt_848_loopback_sample_req_ps] 
          phi_stmt_848_loopback_sample_req <-& (phi_stmt_848_loopback_sample_req_ps)
          phi_stmt_848_loopback_sample_req &-> ($null)
          $T[phi_stmt_848_entry_trigger] 
          phi_stmt_848_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_848_entry_sample_req] 
          $T[phi_stmt_848_entry_sample_req_ps] 
          phi_stmt_848_entry_sample_req <-& (phi_stmt_848_entry_sample_req_ps)
          phi_stmt_848_entry_sample_req &-> ($null)
          phi_stmt_848_update_start_ o<-& (phi_stmt_848_update_completed_ 0)
          phi_stmt_848_sample_start_ o<-& (phi_stmt_848_sample_completed_ 1)
          $T[phi_stmt_848_merged_reqs] 
          $T[phi_stmt_848_phi_mux_ack] 
          $T[phi_stmt_848_phi_mux_ack_ps] 
          phi_stmt_848_phi_mux_ack_ps <-& (phi_stmt_848_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_848_update_completed_)
          $T[type_cast_851_sample_start__ps] 
          $T[type_cast_851_sample_completed__ps] 
          $T[type_cast_851_update_start__ps] 
          $T[type_cast_851_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_851_sample_start_] 
          $T[type_cast_851_sample_completed_] 
          type_cast_851_sample_completed_ <-& (type_cast_851_sample_start_)
          $T[type_cast_851_update_start_] 
          $T [type_cast_851_update_completed_] $delay 
          type_cast_851_update_completed_ <-& (type_cast_851_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_851_sample_start_ <-& (type_cast_851_sample_start__ps)
          type_cast_851_update_start_ <-& (type_cast_851_update_start__ps)
          // Phi complete dependency.
          type_cast_851_sample_completed__ps <-& (type_cast_851_sample_completed_)
          type_cast_851_update_completed__ps <-& (type_cast_851_update_completed_)
          $T[R_nextCRC16_1_852_sample_start__ps] 
          $T[R_nextCRC16_1_852_sample_completed__ps] 
          $T[R_nextCRC16_1_852_update_start__ps] 
          $T[R_nextCRC16_1_852_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_1_852_sample_start_] 
          $T[R_nextCRC16_1_852_sample_completed_] 
          $T[R_nextCRC16_1_852_update_start_] 
          $T[R_nextCRC16_1_852_update_completed_] 
          ;;[R_nextCRC16_1_852_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_1_852_sample_start_ &-> (R_nextCRC16_1_852_Sample)
          R_nextCRC16_1_852_sample_completed_ <-& (R_nextCRC16_1_852_Sample)
          ;;[R_nextCRC16_1_852_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_1_852_update_start_ &-> (R_nextCRC16_1_852_Update)
          R_nextCRC16_1_852_update_completed_ <-& (R_nextCRC16_1_852_Update)
          // RAW reenables for nextCRC16_1
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_1_852_sample_start_ <-& (R_nextCRC16_1_852_sample_start__ps)
          R_nextCRC16_1_852_update_start_ <-& (R_nextCRC16_1_852_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_1_852_sample_completed__ps <-& (R_nextCRC16_1_852_sample_completed_)
          R_nextCRC16_1_852_update_completed__ps <-& (R_nextCRC16_1_852_update_completed_)
          $phisequencer [ phi_stmt_848_phi_seq] : 
          phi_stmt_848_entry_trigger type_cast_851_sample_start__ps type_cast_851_sample_completed__ps type_cast_851_update_start__ps type_cast_851_update_completed__ps phi_stmt_848_loopback_trigger R_nextCRC16_1_852_sample_start__ps R_nextCRC16_1_852_sample_completed__ps R_nextCRC16_1_852_update_start__ps R_nextCRC16_1_852_update_completed__ps :
          phi_stmt_848_sample_start__ps phi_stmt_848_sample_completed__ps phi_stmt_848_update_start__ps phi_stmt_848_update_completed__ps :
          phi_stmt_848_entry_sample_req_ps phi_stmt_848_loopback_sample_req_ps : 
          phi_stmt_848_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_848
          // start:  PHI statement phi_stmt_853
          // 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_853_sample_start_] 
          $T[phi_stmt_853_sample_completed_] 
          $T[phi_stmt_853_update_start_] 
          $T[phi_stmt_853_update_completed_] 
          $T[phi_stmt_853_sample_start__ps] 
          phi_stmt_853_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_853_sample_completed__ps] 
          phi_stmt_853_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_853_update_start__ps] 
          phi_stmt_853_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_853_update_completed__ps] 
          phi_stmt_853_update_completed_ <-& (phi_stmt_853_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_853_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_853_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_853_update_start_)
          $T[phi_stmt_853_loopback_trigger] 
          phi_stmt_853_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_853_loopback_sample_req] 
          $T[phi_stmt_853_loopback_sample_req_ps] 
          phi_stmt_853_loopback_sample_req <-& (phi_stmt_853_loopback_sample_req_ps)
          phi_stmt_853_loopback_sample_req &-> ($null)
          $T[phi_stmt_853_entry_trigger] 
          phi_stmt_853_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_853_entry_sample_req] 
          $T[phi_stmt_853_entry_sample_req_ps] 
          phi_stmt_853_entry_sample_req <-& (phi_stmt_853_entry_sample_req_ps)
          phi_stmt_853_entry_sample_req &-> ($null)
          phi_stmt_853_update_start_ o<-& (phi_stmt_853_update_completed_ 0)
          phi_stmt_853_sample_start_ o<-& (phi_stmt_853_sample_completed_ 1)
          $T[phi_stmt_853_merged_reqs] 
          $T[phi_stmt_853_phi_mux_ack] 
          $T[phi_stmt_853_phi_mux_ack_ps] 
          phi_stmt_853_phi_mux_ack_ps <-& (phi_stmt_853_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_853_update_completed_)
          $T[R_dat1_855_sample_start__ps] 
          $T[R_dat1_855_sample_completed__ps] 
          $T[R_dat1_855_update_start__ps] 
          $T[R_dat1_855_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat1_855_sample_start_] 
          $T[R_dat1_855_sample_completed_] 
          $T[R_dat1_855_update_start_] 
          $T[R_dat1_855_update_completed_] 
          ;;[R_dat1_855_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat1_855_sample_start_ &-> (R_dat1_855_Sample)
          R_dat1_855_sample_completed_ <-& (R_dat1_855_Sample)
          ;;[R_dat1_855_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat1_855_update_start_ &-> (R_dat1_855_Update)
          R_dat1_855_update_completed_ <-& (R_dat1_855_Update)
          // RAW reenables for dat1
          // Phi start dependency for implicit/constant alternative.
          R_dat1_855_sample_start_ <-& (R_dat1_855_sample_start__ps)
          R_dat1_855_update_start_ <-& (R_dat1_855_update_start__ps)
          // Phi complete dependency.
          R_dat1_855_sample_completed__ps <-& (R_dat1_855_sample_completed_)
          R_dat1_855_update_completed__ps <-& (R_dat1_855_update_completed_)
          $T[R_nextTempData1_856_sample_start__ps] 
          $T[R_nextTempData1_856_sample_completed__ps] 
          $T[R_nextTempData1_856_update_start__ps] 
          $T[R_nextTempData1_856_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempData1_856_sample_start_] 
          $T[R_nextTempData1_856_sample_completed_] 
          $T[R_nextTempData1_856_update_start_] 
          $T[R_nextTempData1_856_update_completed_] 
          ;;[R_nextTempData1_856_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempData1_856_sample_start_ &-> (R_nextTempData1_856_Sample)
          R_nextTempData1_856_sample_completed_ <-& (R_nextTempData1_856_Sample)
          ;;[R_nextTempData1_856_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempData1_856_update_start_ &-> (R_nextTempData1_856_Update)
          R_nextTempData1_856_update_completed_ <-& (R_nextTempData1_856_Update)
          // RAW reenables for nextTempData1
          // Phi start dependency for implicit/constant alternative.
          R_nextTempData1_856_sample_start_ <-& (R_nextTempData1_856_sample_start__ps)
          R_nextTempData1_856_update_start_ <-& (R_nextTempData1_856_update_start__ps)
          // Phi complete dependency.
          R_nextTempData1_856_sample_completed__ps <-& (R_nextTempData1_856_sample_completed_)
          R_nextTempData1_856_update_completed__ps <-& (R_nextTempData1_856_update_completed_)
          $phisequencer [ phi_stmt_853_phi_seq] : 
          phi_stmt_853_entry_trigger R_dat1_855_sample_start__ps R_dat1_855_sample_completed__ps R_dat1_855_update_start__ps R_dat1_855_update_completed__ps phi_stmt_853_loopback_trigger R_nextTempData1_856_sample_start__ps R_nextTempData1_856_sample_completed__ps R_nextTempData1_856_update_start__ps R_nextTempData1_856_update_completed__ps :
          phi_stmt_853_sample_start__ps phi_stmt_853_sample_completed__ps phi_stmt_853_update_start__ps phi_stmt_853_update_completed__ps :
          phi_stmt_853_entry_sample_req_ps phi_stmt_853_loopback_sample_req_ps : 
          phi_stmt_853_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_853
          // start: WAR dependencies for inv1
          // done: WAR dependencies for inv1
          // start:  			$volatile inv1 := ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 370
          // volatile! 
          // Source expression
          // ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 ))
          // (tempData1 [] 1023 )
          // tempData1
          // (CRC_16_1 [] 15 )
          // CRC_16_1
          // Target expression
          // (as target) inv1
          // start: WAR dependencies for inv1
          // done: WAR dependencies for inv1
          // end:  			$volatile inv1 := ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_1
          // WAR dependency: Read: nextCRC16_1 before Write: 			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_1
          // start:  			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 371
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1))
          // ((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) )
          // (( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1))
          // ( $slice CRC_16_1 14 12 ) 
          // CRC_16_1
          // ((CRC_16_1 [] 11 ) ^ inv1)
          // (CRC_16_1 [] 11 )
          // CRC_16_1
          // inv1
          // ( $slice CRC_16_1 10 5 ) 
          // CRC_16_1
          // ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)
          // (((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) )
          // ((CRC_16_1 [] 4 ) ^ inv1)
          // (CRC_16_1 [] 4 )
          // CRC_16_1
          // inv1
          // ( $slice CRC_16_1 3 0 ) 
          // CRC_16_1
          // inv1
          // Target expression
          // (as target) nextCRC16_1
          // start: WAR dependencies for nextCRC16_1
          // WAR dependency: Read: nextCRC16_1 before Write: 			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_1
          // end:  			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
          // start: WAR dependencies for nextTempData1
          // WAR dependency: Read: nextTempData1 before Write: 			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData1
          // start:  			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 372
          // volatile! 
          // Source expression
          // (tempData1 << 1 )
          // tempData1
          // Target expression
          // (as target) nextTempData1
          // start: WAR dependencies for nextTempData1
          // WAR dependency: Read: nextTempData1 before Write: 			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData1
          // end:  			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
          // start: WAR dependencies for next_J_1
          // WAR dependency: Read: next_J_1 before Write: 			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_1
          // start:  			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 373
          // volatile! 
          // Source expression
          // (J_1 + 1 )
          // J_1
          // Target expression
          // (as target) next_J_1
          // start: WAR dependencies for next_J_1
          // WAR dependency: Read: next_J_1 before Write: 			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_1
          // end:  			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
          // (next_J_1 < 1024 )
          // next_J_1
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_J_1 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_843_update_completed_)
          // done: Forward dependencies from (next_J_1 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_841__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_841_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_841__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_841_loop_body : condition_evaluated
        $bind do_while_stmt_841__entry__  => do_while_stmt_841_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_841_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_841__exit__)
      }
      do_while_stmt_841__entry__ |-> (do_while_stmt_841)
      do_while_stmt_841__exit__ <-| (do_while_stmt_841)
      ::[assign_stmt_909_to_assign_stmt_914] 
      {
        // start: WAR dependencies for crcError1
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError1
        // start:  			$volatile crcError1 := (nextCRC_1 != nextCRC16_1) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 375
        // volatile! 
        // Source expression
        // (nextCRC_1 != nextCRC16_1)
        // nextCRC_1
        // nextCRC16_1
        // Target expression
        // (as target) crcError1
        // start: WAR dependencies for crcError1
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError1
        // end:  			$volatile crcError1 := (nextCRC_1 != nextCRC16_1) $buffering 1
        // start: WAR dependencies for stopBitError2
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // done: WAR dependencies for stopBitError2
        // start:  			$volatile stopBitError2 := (stopBit2 == 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 376
        // volatile! 
        // Source expression
        // (stopBit2 == 0 )
        // stopBit2
        // Target expression
        // (as target) stopBitError2
        // start: WAR dependencies for stopBitError2
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // done: WAR dependencies for stopBitError2
        // end:  			$volatile stopBitError2 := (stopBit2 == 0 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_909_to_assign_stmt_914__entry__ |-> (assign_stmt_909_to_assign_stmt_914)
      assign_stmt_909_to_assign_stmt_914__exit__ <-| (assign_stmt_909_to_assign_stmt_914)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 377
      <o> [do_while_stmt_915]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_915__entry__] 
        $P[do_while_stmt_915__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_915_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_917
          // 			$phi J_2 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_2 $on   $loopback 
          // type of target is $uint<13>
          $T[phi_stmt_917_sample_start_] 
          $T[phi_stmt_917_sample_completed_] 
          $T[phi_stmt_917_update_start_] 
          $T[phi_stmt_917_update_completed_] 
          $T[phi_stmt_917_sample_start__ps] 
          phi_stmt_917_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_917_sample_completed__ps] 
          phi_stmt_917_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_917_update_start__ps] 
          phi_stmt_917_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_917_update_completed__ps] 
          phi_stmt_917_update_completed_ <-& (phi_stmt_917_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_917_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_917_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_917_update_start_)
          $T[phi_stmt_917_loopback_trigger] 
          phi_stmt_917_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_917_loopback_sample_req] 
          $T[phi_stmt_917_loopback_sample_req_ps] 
          phi_stmt_917_loopback_sample_req <-& (phi_stmt_917_loopback_sample_req_ps)
          phi_stmt_917_loopback_sample_req &-> ($null)
          $T[phi_stmt_917_entry_trigger] 
          phi_stmt_917_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_917_entry_sample_req] 
          $T[phi_stmt_917_entry_sample_req_ps] 
          phi_stmt_917_entry_sample_req <-& (phi_stmt_917_entry_sample_req_ps)
          phi_stmt_917_entry_sample_req &-> ($null)
          phi_stmt_917_update_start_ o<-& (phi_stmt_917_update_completed_ 0)
          phi_stmt_917_sample_start_ o<-& (phi_stmt_917_sample_completed_ 1)
          $T[phi_stmt_917_merged_reqs] 
          $T[phi_stmt_917_phi_mux_ack] 
          $T[phi_stmt_917_phi_mux_ack_ps] 
          phi_stmt_917_phi_mux_ack_ps <-& (phi_stmt_917_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_917_update_completed_)
          $T[type_cast_920_sample_start__ps] 
          $T[type_cast_920_sample_completed__ps] 
          $T[type_cast_920_update_start__ps] 
          $T[type_cast_920_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_920_sample_start_] 
          $T[type_cast_920_sample_completed_] 
          type_cast_920_sample_completed_ <-& (type_cast_920_sample_start_)
          $T[type_cast_920_update_start_] 
          $T [type_cast_920_update_completed_] $delay 
          type_cast_920_update_completed_ <-& (type_cast_920_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_920_sample_start_ <-& (type_cast_920_sample_start__ps)
          type_cast_920_update_start_ <-& (type_cast_920_update_start__ps)
          // Phi complete dependency.
          type_cast_920_sample_completed__ps <-& (type_cast_920_sample_completed_)
          type_cast_920_update_completed__ps <-& (type_cast_920_update_completed_)
          $T[R_next_J_2_921_sample_start__ps] 
          $T[R_next_J_2_921_sample_completed__ps] 
          $T[R_next_J_2_921_update_start__ps] 
          $T[R_next_J_2_921_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_J_2_921_sample_start_] 
          $T[R_next_J_2_921_sample_completed_] 
          $T[R_next_J_2_921_update_start_] 
          $T[R_next_J_2_921_update_completed_] 
          ;;[R_next_J_2_921_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_J_2_921_sample_start_ &-> (R_next_J_2_921_Sample)
          R_next_J_2_921_sample_completed_ <-& (R_next_J_2_921_Sample)
          ;;[R_next_J_2_921_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_J_2_921_update_start_ &-> (R_next_J_2_921_Update)
          R_next_J_2_921_update_completed_ <-& (R_next_J_2_921_Update)
          // RAW reenables for next_J_2
          // Phi start dependency for implicit/constant alternative.
          R_next_J_2_921_sample_start_ <-& (R_next_J_2_921_sample_start__ps)
          R_next_J_2_921_update_start_ <-& (R_next_J_2_921_update_start__ps)
          // Phi complete dependency.
          R_next_J_2_921_sample_completed__ps <-& (R_next_J_2_921_sample_completed_)
          R_next_J_2_921_update_completed__ps <-& (R_next_J_2_921_update_completed_)
          $phisequencer [ phi_stmt_917_phi_seq] : 
          phi_stmt_917_entry_trigger type_cast_920_sample_start__ps type_cast_920_sample_completed__ps type_cast_920_update_start__ps type_cast_920_update_completed__ps phi_stmt_917_loopback_trigger R_next_J_2_921_sample_start__ps R_next_J_2_921_sample_completed__ps R_next_J_2_921_update_start__ps R_next_J_2_921_update_completed__ps :
          phi_stmt_917_sample_start__ps phi_stmt_917_sample_completed__ps phi_stmt_917_update_start__ps phi_stmt_917_update_completed__ps :
          phi_stmt_917_entry_sample_req_ps phi_stmt_917_loopback_sample_req_ps : 
          phi_stmt_917_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_917
          // start:  PHI statement phi_stmt_922
          // 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_922_sample_start_] 
          $T[phi_stmt_922_sample_completed_] 
          $T[phi_stmt_922_update_start_] 
          $T[phi_stmt_922_update_completed_] 
          $T[phi_stmt_922_sample_start__ps] 
          phi_stmt_922_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_922_sample_completed__ps] 
          phi_stmt_922_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_922_update_start__ps] 
          phi_stmt_922_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_922_update_completed__ps] 
          phi_stmt_922_update_completed_ <-& (phi_stmt_922_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_922_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_922_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_922_update_start_)
          $T[phi_stmt_922_loopback_trigger] 
          phi_stmt_922_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_922_loopback_sample_req] 
          $T[phi_stmt_922_loopback_sample_req_ps] 
          phi_stmt_922_loopback_sample_req <-& (phi_stmt_922_loopback_sample_req_ps)
          phi_stmt_922_loopback_sample_req &-> ($null)
          $T[phi_stmt_922_entry_trigger] 
          phi_stmt_922_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_922_entry_sample_req] 
          $T[phi_stmt_922_entry_sample_req_ps] 
          phi_stmt_922_entry_sample_req <-& (phi_stmt_922_entry_sample_req_ps)
          phi_stmt_922_entry_sample_req &-> ($null)
          phi_stmt_922_update_start_ o<-& (phi_stmt_922_update_completed_ 0)
          phi_stmt_922_sample_start_ o<-& (phi_stmt_922_sample_completed_ 1)
          $T[phi_stmt_922_merged_reqs] 
          $T[phi_stmt_922_phi_mux_ack] 
          $T[phi_stmt_922_phi_mux_ack_ps] 
          phi_stmt_922_phi_mux_ack_ps <-& (phi_stmt_922_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_922_update_completed_)
          $T[type_cast_925_sample_start__ps] 
          $T[type_cast_925_sample_completed__ps] 
          $T[type_cast_925_update_start__ps] 
          $T[type_cast_925_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_925_sample_start_] 
          $T[type_cast_925_sample_completed_] 
          type_cast_925_sample_completed_ <-& (type_cast_925_sample_start_)
          $T[type_cast_925_update_start_] 
          $T [type_cast_925_update_completed_] $delay 
          type_cast_925_update_completed_ <-& (type_cast_925_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_925_sample_start_ <-& (type_cast_925_sample_start__ps)
          type_cast_925_update_start_ <-& (type_cast_925_update_start__ps)
          // Phi complete dependency.
          type_cast_925_sample_completed__ps <-& (type_cast_925_sample_completed_)
          type_cast_925_update_completed__ps <-& (type_cast_925_update_completed_)
          $T[R_nextCRC16_2_926_sample_start__ps] 
          $T[R_nextCRC16_2_926_sample_completed__ps] 
          $T[R_nextCRC16_2_926_update_start__ps] 
          $T[R_nextCRC16_2_926_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_2_926_sample_start_] 
          $T[R_nextCRC16_2_926_sample_completed_] 
          $T[R_nextCRC16_2_926_update_start_] 
          $T[R_nextCRC16_2_926_update_completed_] 
          ;;[R_nextCRC16_2_926_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_2_926_sample_start_ &-> (R_nextCRC16_2_926_Sample)
          R_nextCRC16_2_926_sample_completed_ <-& (R_nextCRC16_2_926_Sample)
          ;;[R_nextCRC16_2_926_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_2_926_update_start_ &-> (R_nextCRC16_2_926_Update)
          R_nextCRC16_2_926_update_completed_ <-& (R_nextCRC16_2_926_Update)
          // RAW reenables for nextCRC16_2
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_2_926_sample_start_ <-& (R_nextCRC16_2_926_sample_start__ps)
          R_nextCRC16_2_926_update_start_ <-& (R_nextCRC16_2_926_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_2_926_sample_completed__ps <-& (R_nextCRC16_2_926_sample_completed_)
          R_nextCRC16_2_926_update_completed__ps <-& (R_nextCRC16_2_926_update_completed_)
          $phisequencer [ phi_stmt_922_phi_seq] : 
          phi_stmt_922_entry_trigger type_cast_925_sample_start__ps type_cast_925_sample_completed__ps type_cast_925_update_start__ps type_cast_925_update_completed__ps phi_stmt_922_loopback_trigger R_nextCRC16_2_926_sample_start__ps R_nextCRC16_2_926_sample_completed__ps R_nextCRC16_2_926_update_start__ps R_nextCRC16_2_926_update_completed__ps :
          phi_stmt_922_sample_start__ps phi_stmt_922_sample_completed__ps phi_stmt_922_update_start__ps phi_stmt_922_update_completed__ps :
          phi_stmt_922_entry_sample_req_ps phi_stmt_922_loopback_sample_req_ps : 
          phi_stmt_922_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_922
          // start:  PHI statement phi_stmt_927
          // 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_927_sample_start_] 
          $T[phi_stmt_927_sample_completed_] 
          $T[phi_stmt_927_update_start_] 
          $T[phi_stmt_927_update_completed_] 
          $T[phi_stmt_927_sample_start__ps] 
          phi_stmt_927_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_927_sample_completed__ps] 
          phi_stmt_927_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_927_update_start__ps] 
          phi_stmt_927_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_927_update_completed__ps] 
          phi_stmt_927_update_completed_ <-& (phi_stmt_927_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_927_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_927_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_927_update_start_)
          $T[phi_stmt_927_loopback_trigger] 
          phi_stmt_927_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_927_loopback_sample_req] 
          $T[phi_stmt_927_loopback_sample_req_ps] 
          phi_stmt_927_loopback_sample_req <-& (phi_stmt_927_loopback_sample_req_ps)
          phi_stmt_927_loopback_sample_req &-> ($null)
          $T[phi_stmt_927_entry_trigger] 
          phi_stmt_927_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_927_entry_sample_req] 
          $T[phi_stmt_927_entry_sample_req_ps] 
          phi_stmt_927_entry_sample_req <-& (phi_stmt_927_entry_sample_req_ps)
          phi_stmt_927_entry_sample_req &-> ($null)
          phi_stmt_927_update_start_ o<-& (phi_stmt_927_update_completed_ 0)
          phi_stmt_927_sample_start_ o<-& (phi_stmt_927_sample_completed_ 1)
          $T[phi_stmt_927_merged_reqs] 
          $T[phi_stmt_927_phi_mux_ack] 
          $T[phi_stmt_927_phi_mux_ack_ps] 
          phi_stmt_927_phi_mux_ack_ps <-& (phi_stmt_927_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_927_update_completed_)
          $T[R_dat2_929_sample_start__ps] 
          $T[R_dat2_929_sample_completed__ps] 
          $T[R_dat2_929_update_start__ps] 
          $T[R_dat2_929_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat2_929_sample_start_] 
          $T[R_dat2_929_sample_completed_] 
          $T[R_dat2_929_update_start_] 
          $T[R_dat2_929_update_completed_] 
          ;;[R_dat2_929_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat2_929_sample_start_ &-> (R_dat2_929_Sample)
          R_dat2_929_sample_completed_ <-& (R_dat2_929_Sample)
          ;;[R_dat2_929_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat2_929_update_start_ &-> (R_dat2_929_Update)
          R_dat2_929_update_completed_ <-& (R_dat2_929_Update)
          // RAW reenables for dat2
          // Phi start dependency for implicit/constant alternative.
          R_dat2_929_sample_start_ <-& (R_dat2_929_sample_start__ps)
          R_dat2_929_update_start_ <-& (R_dat2_929_update_start__ps)
          // Phi complete dependency.
          R_dat2_929_sample_completed__ps <-& (R_dat2_929_sample_completed_)
          R_dat2_929_update_completed__ps <-& (R_dat2_929_update_completed_)
          $T[R_nextTempData2_930_sample_start__ps] 
          $T[R_nextTempData2_930_sample_completed__ps] 
          $T[R_nextTempData2_930_update_start__ps] 
          $T[R_nextTempData2_930_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempData2_930_sample_start_] 
          $T[R_nextTempData2_930_sample_completed_] 
          $T[R_nextTempData2_930_update_start_] 
          $T[R_nextTempData2_930_update_completed_] 
          ;;[R_nextTempData2_930_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempData2_930_sample_start_ &-> (R_nextTempData2_930_Sample)
          R_nextTempData2_930_sample_completed_ <-& (R_nextTempData2_930_Sample)
          ;;[R_nextTempData2_930_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempData2_930_update_start_ &-> (R_nextTempData2_930_Update)
          R_nextTempData2_930_update_completed_ <-& (R_nextTempData2_930_Update)
          // RAW reenables for nextTempData2
          // Phi start dependency for implicit/constant alternative.
          R_nextTempData2_930_sample_start_ <-& (R_nextTempData2_930_sample_start__ps)
          R_nextTempData2_930_update_start_ <-& (R_nextTempData2_930_update_start__ps)
          // Phi complete dependency.
          R_nextTempData2_930_sample_completed__ps <-& (R_nextTempData2_930_sample_completed_)
          R_nextTempData2_930_update_completed__ps <-& (R_nextTempData2_930_update_completed_)
          $phisequencer [ phi_stmt_927_phi_seq] : 
          phi_stmt_927_entry_trigger R_dat2_929_sample_start__ps R_dat2_929_sample_completed__ps R_dat2_929_update_start__ps R_dat2_929_update_completed__ps phi_stmt_927_loopback_trigger R_nextTempData2_930_sample_start__ps R_nextTempData2_930_sample_completed__ps R_nextTempData2_930_update_start__ps R_nextTempData2_930_update_completed__ps :
          phi_stmt_927_sample_start__ps phi_stmt_927_sample_completed__ps phi_stmt_927_update_start__ps phi_stmt_927_update_completed__ps :
          phi_stmt_927_entry_sample_req_ps phi_stmt_927_loopback_sample_req_ps : 
          phi_stmt_927_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_927
          // start: WAR dependencies for inv2
          // done: WAR dependencies for inv2
          // start:  			$volatile inv2 := ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 387
          // volatile! 
          // Source expression
          // ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 ))
          // (tempData2 [] 1023 )
          // tempData2
          // (CRC_16_2 [] 15 )
          // CRC_16_2
          // Target expression
          // (as target) inv2
          // start: WAR dependencies for inv2
          // done: WAR dependencies for inv2
          // end:  			$volatile inv2 := ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_2
          // WAR dependency: Read: nextCRC16_2 before Write: 			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_2
          // start:  			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 388
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2))
          // ((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) )
          // (( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2))
          // ( $slice CRC_16_2 14 12 ) 
          // CRC_16_2
          // ((CRC_16_2 [] 11 ) ^ inv2)
          // (CRC_16_2 [] 11 )
          // CRC_16_2
          // inv2
          // ( $slice CRC_16_2 10 5 ) 
          // CRC_16_2
          // ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)
          // (((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) )
          // ((CRC_16_2 [] 4 ) ^ inv2)
          // (CRC_16_2 [] 4 )
          // CRC_16_2
          // inv2
          // ( $slice CRC_16_2 3 0 ) 
          // CRC_16_2
          // inv2
          // Target expression
          // (as target) nextCRC16_2
          // start: WAR dependencies for nextCRC16_2
          // WAR dependency: Read: nextCRC16_2 before Write: 			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_2
          // end:  			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
          // start: WAR dependencies for nextTempData2
          // WAR dependency: Read: nextTempData2 before Write: 			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData2
          // start:  			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 389
          // volatile! 
          // Source expression
          // (tempData2 << 1 )
          // tempData2
          // Target expression
          // (as target) nextTempData2
          // start: WAR dependencies for nextTempData2
          // WAR dependency: Read: nextTempData2 before Write: 			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData2
          // end:  			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
          // start: WAR dependencies for next_J_2
          // WAR dependency: Read: next_J_2 before Write: 			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_2
          // start:  			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 390
          // volatile! 
          // Source expression
          // (J_2 + 1 )
          // J_2
          // Target expression
          // (as target) next_J_2
          // start: WAR dependencies for next_J_2
          // WAR dependency: Read: next_J_2 before Write: 			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_2
          // end:  			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
          // (next_J_2 < 1024 )
          // next_J_2
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_J_2 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_917_update_completed_)
          // done: Forward dependencies from (next_J_2 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_915__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_915_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_915__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_915_loop_body : condition_evaluated
        $bind do_while_stmt_915__entry__  => do_while_stmt_915_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_915_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_915__exit__)
      }
      do_while_stmt_915__entry__ |-> (do_while_stmt_915)
      do_while_stmt_915__exit__ <-| (do_while_stmt_915)
      ::[assign_stmt_983_to_assign_stmt_988] 
      {
        // start: WAR dependencies for crcError2
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError2
        // start:  			$volatile crcError2 := (nextCRC_2 != nextCRC16_2) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 392
        // volatile! 
        // Source expression
        // (nextCRC_2 != nextCRC16_2)
        // nextCRC_2
        // nextCRC16_2
        // Target expression
        // (as target) crcError2
        // start: WAR dependencies for crcError2
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError2
        // end:  			$volatile crcError2 := (nextCRC_2 != nextCRC16_2) $buffering 1
        // start: WAR dependencies for stopBitError3
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // done: WAR dependencies for stopBitError3
        // start:  			$volatile stopBitError3 := (stopBit3 == 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 393
        // volatile! 
        // Source expression
        // (stopBit3 == 0 )
        // stopBit3
        // Target expression
        // (as target) stopBitError3
        // start: WAR dependencies for stopBitError3
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // done: WAR dependencies for stopBitError3
        // end:  			$volatile stopBitError3 := (stopBit3 == 0 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_983_to_assign_stmt_988__entry__ |-> (assign_stmt_983_to_assign_stmt_988)
      assign_stmt_983_to_assign_stmt_988__exit__ <-| (assign_stmt_983_to_assign_stmt_988)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 394
      <o> [do_while_stmt_989]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_989__entry__] 
        $P[do_while_stmt_989__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_989_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_991
          // 			$phi J_3 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_3 $on   $loopback 
          // type of target is $uint<13>
          $T[phi_stmt_991_sample_start_] 
          $T[phi_stmt_991_sample_completed_] 
          $T[phi_stmt_991_update_start_] 
          $T[phi_stmt_991_update_completed_] 
          $T[phi_stmt_991_sample_start__ps] 
          phi_stmt_991_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_991_sample_completed__ps] 
          phi_stmt_991_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_991_update_start__ps] 
          phi_stmt_991_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_991_update_completed__ps] 
          phi_stmt_991_update_completed_ <-& (phi_stmt_991_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_991_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_991_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_991_update_start_)
          $T[phi_stmt_991_loopback_trigger] 
          phi_stmt_991_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_991_loopback_sample_req] 
          $T[phi_stmt_991_loopback_sample_req_ps] 
          phi_stmt_991_loopback_sample_req <-& (phi_stmt_991_loopback_sample_req_ps)
          phi_stmt_991_loopback_sample_req &-> ($null)
          $T[phi_stmt_991_entry_trigger] 
          phi_stmt_991_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_991_entry_sample_req] 
          $T[phi_stmt_991_entry_sample_req_ps] 
          phi_stmt_991_entry_sample_req <-& (phi_stmt_991_entry_sample_req_ps)
          phi_stmt_991_entry_sample_req &-> ($null)
          phi_stmt_991_update_start_ o<-& (phi_stmt_991_update_completed_ 0)
          phi_stmt_991_sample_start_ o<-& (phi_stmt_991_sample_completed_ 1)
          $T[phi_stmt_991_merged_reqs] 
          $T[phi_stmt_991_phi_mux_ack] 
          $T[phi_stmt_991_phi_mux_ack_ps] 
          phi_stmt_991_phi_mux_ack_ps <-& (phi_stmt_991_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_991_update_completed_)
          $T[type_cast_994_sample_start__ps] 
          $T[type_cast_994_sample_completed__ps] 
          $T[type_cast_994_update_start__ps] 
          $T[type_cast_994_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_994_sample_start_] 
          $T[type_cast_994_sample_completed_] 
          type_cast_994_sample_completed_ <-& (type_cast_994_sample_start_)
          $T[type_cast_994_update_start_] 
          $T [type_cast_994_update_completed_] $delay 
          type_cast_994_update_completed_ <-& (type_cast_994_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_994_sample_start_ <-& (type_cast_994_sample_start__ps)
          type_cast_994_update_start_ <-& (type_cast_994_update_start__ps)
          // Phi complete dependency.
          type_cast_994_sample_completed__ps <-& (type_cast_994_sample_completed_)
          type_cast_994_update_completed__ps <-& (type_cast_994_update_completed_)
          $T[R_next_J_3_995_sample_start__ps] 
          $T[R_next_J_3_995_sample_completed__ps] 
          $T[R_next_J_3_995_update_start__ps] 
          $T[R_next_J_3_995_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_J_3_995_sample_start_] 
          $T[R_next_J_3_995_sample_completed_] 
          $T[R_next_J_3_995_update_start_] 
          $T[R_next_J_3_995_update_completed_] 
          ;;[R_next_J_3_995_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_J_3_995_sample_start_ &-> (R_next_J_3_995_Sample)
          R_next_J_3_995_sample_completed_ <-& (R_next_J_3_995_Sample)
          ;;[R_next_J_3_995_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_J_3_995_update_start_ &-> (R_next_J_3_995_Update)
          R_next_J_3_995_update_completed_ <-& (R_next_J_3_995_Update)
          // RAW reenables for next_J_3
          // Phi start dependency for implicit/constant alternative.
          R_next_J_3_995_sample_start_ <-& (R_next_J_3_995_sample_start__ps)
          R_next_J_3_995_update_start_ <-& (R_next_J_3_995_update_start__ps)
          // Phi complete dependency.
          R_next_J_3_995_sample_completed__ps <-& (R_next_J_3_995_sample_completed_)
          R_next_J_3_995_update_completed__ps <-& (R_next_J_3_995_update_completed_)
          $phisequencer [ phi_stmt_991_phi_seq] : 
          phi_stmt_991_entry_trigger type_cast_994_sample_start__ps type_cast_994_sample_completed__ps type_cast_994_update_start__ps type_cast_994_update_completed__ps phi_stmt_991_loopback_trigger R_next_J_3_995_sample_start__ps R_next_J_3_995_sample_completed__ps R_next_J_3_995_update_start__ps R_next_J_3_995_update_completed__ps :
          phi_stmt_991_sample_start__ps phi_stmt_991_sample_completed__ps phi_stmt_991_update_start__ps phi_stmt_991_update_completed__ps :
          phi_stmt_991_entry_sample_req_ps phi_stmt_991_loopback_sample_req_ps : 
          phi_stmt_991_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_991
          // start:  PHI statement phi_stmt_996
          // 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_996_sample_start_] 
          $T[phi_stmt_996_sample_completed_] 
          $T[phi_stmt_996_update_start_] 
          $T[phi_stmt_996_update_completed_] 
          $T[phi_stmt_996_sample_start__ps] 
          phi_stmt_996_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_996_sample_completed__ps] 
          phi_stmt_996_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_996_update_start__ps] 
          phi_stmt_996_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_996_update_completed__ps] 
          phi_stmt_996_update_completed_ <-& (phi_stmt_996_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_996_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_996_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_996_update_start_)
          $T[phi_stmt_996_loopback_trigger] 
          phi_stmt_996_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_996_loopback_sample_req] 
          $T[phi_stmt_996_loopback_sample_req_ps] 
          phi_stmt_996_loopback_sample_req <-& (phi_stmt_996_loopback_sample_req_ps)
          phi_stmt_996_loopback_sample_req &-> ($null)
          $T[phi_stmt_996_entry_trigger] 
          phi_stmt_996_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_996_entry_sample_req] 
          $T[phi_stmt_996_entry_sample_req_ps] 
          phi_stmt_996_entry_sample_req <-& (phi_stmt_996_entry_sample_req_ps)
          phi_stmt_996_entry_sample_req &-> ($null)
          phi_stmt_996_update_start_ o<-& (phi_stmt_996_update_completed_ 0)
          phi_stmt_996_sample_start_ o<-& (phi_stmt_996_sample_completed_ 1)
          $T[phi_stmt_996_merged_reqs] 
          $T[phi_stmt_996_phi_mux_ack] 
          $T[phi_stmt_996_phi_mux_ack_ps] 
          phi_stmt_996_phi_mux_ack_ps <-& (phi_stmt_996_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_996_update_completed_)
          $T[type_cast_999_sample_start__ps] 
          $T[type_cast_999_sample_completed__ps] 
          $T[type_cast_999_update_start__ps] 
          $T[type_cast_999_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_999_sample_start_] 
          $T[type_cast_999_sample_completed_] 
          type_cast_999_sample_completed_ <-& (type_cast_999_sample_start_)
          $T[type_cast_999_update_start_] 
          $T [type_cast_999_update_completed_] $delay 
          type_cast_999_update_completed_ <-& (type_cast_999_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_999_sample_start_ <-& (type_cast_999_sample_start__ps)
          type_cast_999_update_start_ <-& (type_cast_999_update_start__ps)
          // Phi complete dependency.
          type_cast_999_sample_completed__ps <-& (type_cast_999_sample_completed_)
          type_cast_999_update_completed__ps <-& (type_cast_999_update_completed_)
          $T[R_nextCRC16_3_1000_sample_start__ps] 
          $T[R_nextCRC16_3_1000_sample_completed__ps] 
          $T[R_nextCRC16_3_1000_update_start__ps] 
          $T[R_nextCRC16_3_1000_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_3_1000_sample_start_] 
          $T[R_nextCRC16_3_1000_sample_completed_] 
          $T[R_nextCRC16_3_1000_update_start_] 
          $T[R_nextCRC16_3_1000_update_completed_] 
          ;;[R_nextCRC16_3_1000_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_3_1000_sample_start_ &-> (R_nextCRC16_3_1000_Sample)
          R_nextCRC16_3_1000_sample_completed_ <-& (R_nextCRC16_3_1000_Sample)
          ;;[R_nextCRC16_3_1000_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_3_1000_update_start_ &-> (R_nextCRC16_3_1000_Update)
          R_nextCRC16_3_1000_update_completed_ <-& (R_nextCRC16_3_1000_Update)
          // RAW reenables for nextCRC16_3
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_3_1000_sample_start_ <-& (R_nextCRC16_3_1000_sample_start__ps)
          R_nextCRC16_3_1000_update_start_ <-& (R_nextCRC16_3_1000_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_3_1000_sample_completed__ps <-& (R_nextCRC16_3_1000_sample_completed_)
          R_nextCRC16_3_1000_update_completed__ps <-& (R_nextCRC16_3_1000_update_completed_)
          $phisequencer [ phi_stmt_996_phi_seq] : 
          phi_stmt_996_entry_trigger type_cast_999_sample_start__ps type_cast_999_sample_completed__ps type_cast_999_update_start__ps type_cast_999_update_completed__ps phi_stmt_996_loopback_trigger R_nextCRC16_3_1000_sample_start__ps R_nextCRC16_3_1000_sample_completed__ps R_nextCRC16_3_1000_update_start__ps R_nextCRC16_3_1000_update_completed__ps :
          phi_stmt_996_sample_start__ps phi_stmt_996_sample_completed__ps phi_stmt_996_update_start__ps phi_stmt_996_update_completed__ps :
          phi_stmt_996_entry_sample_req_ps phi_stmt_996_loopback_sample_req_ps : 
          phi_stmt_996_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_996
          // start:  PHI statement phi_stmt_1001
          // 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_1001_sample_start_] 
          $T[phi_stmt_1001_sample_completed_] 
          $T[phi_stmt_1001_update_start_] 
          $T[phi_stmt_1001_update_completed_] 
          $T[phi_stmt_1001_sample_start__ps] 
          phi_stmt_1001_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1001_sample_completed__ps] 
          phi_stmt_1001_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1001_update_start__ps] 
          phi_stmt_1001_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1001_update_completed__ps] 
          phi_stmt_1001_update_completed_ <-& (phi_stmt_1001_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1001_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1001_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1001_update_start_)
          $T[phi_stmt_1001_loopback_trigger] 
          phi_stmt_1001_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1001_loopback_sample_req] 
          $T[phi_stmt_1001_loopback_sample_req_ps] 
          phi_stmt_1001_loopback_sample_req <-& (phi_stmt_1001_loopback_sample_req_ps)
          phi_stmt_1001_loopback_sample_req &-> ($null)
          $T[phi_stmt_1001_entry_trigger] 
          phi_stmt_1001_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1001_entry_sample_req] 
          $T[phi_stmt_1001_entry_sample_req_ps] 
          phi_stmt_1001_entry_sample_req <-& (phi_stmt_1001_entry_sample_req_ps)
          phi_stmt_1001_entry_sample_req &-> ($null)
          phi_stmt_1001_update_start_ o<-& (phi_stmt_1001_update_completed_ 0)
          phi_stmt_1001_sample_start_ o<-& (phi_stmt_1001_sample_completed_ 1)
          $T[phi_stmt_1001_merged_reqs] 
          $T[phi_stmt_1001_phi_mux_ack] 
          $T[phi_stmt_1001_phi_mux_ack_ps] 
          phi_stmt_1001_phi_mux_ack_ps <-& (phi_stmt_1001_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1001_update_completed_)
          $T[R_dat3_1003_sample_start__ps] 
          $T[R_dat3_1003_sample_completed__ps] 
          $T[R_dat3_1003_update_start__ps] 
          $T[R_dat3_1003_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat3_1003_sample_start_] 
          $T[R_dat3_1003_sample_completed_] 
          $T[R_dat3_1003_update_start_] 
          $T[R_dat3_1003_update_completed_] 
          ;;[R_dat3_1003_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat3_1003_sample_start_ &-> (R_dat3_1003_Sample)
          R_dat3_1003_sample_completed_ <-& (R_dat3_1003_Sample)
          ;;[R_dat3_1003_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat3_1003_update_start_ &-> (R_dat3_1003_Update)
          R_dat3_1003_update_completed_ <-& (R_dat3_1003_Update)
          // RAW reenables for dat3
          // Phi start dependency for implicit/constant alternative.
          R_dat3_1003_sample_start_ <-& (R_dat3_1003_sample_start__ps)
          R_dat3_1003_update_start_ <-& (R_dat3_1003_update_start__ps)
          // Phi complete dependency.
          R_dat3_1003_sample_completed__ps <-& (R_dat3_1003_sample_completed_)
          R_dat3_1003_update_completed__ps <-& (R_dat3_1003_update_completed_)
          $T[R_nextTempData3_1004_sample_start__ps] 
          $T[R_nextTempData3_1004_sample_completed__ps] 
          $T[R_nextTempData3_1004_update_start__ps] 
          $T[R_nextTempData3_1004_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempData3_1004_sample_start_] 
          $T[R_nextTempData3_1004_sample_completed_] 
          $T[R_nextTempData3_1004_update_start_] 
          $T[R_nextTempData3_1004_update_completed_] 
          ;;[R_nextTempData3_1004_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempData3_1004_sample_start_ &-> (R_nextTempData3_1004_Sample)
          R_nextTempData3_1004_sample_completed_ <-& (R_nextTempData3_1004_Sample)
          ;;[R_nextTempData3_1004_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempData3_1004_update_start_ &-> (R_nextTempData3_1004_Update)
          R_nextTempData3_1004_update_completed_ <-& (R_nextTempData3_1004_Update)
          // RAW reenables for nextTempData3
          // Phi start dependency for implicit/constant alternative.
          R_nextTempData3_1004_sample_start_ <-& (R_nextTempData3_1004_sample_start__ps)
          R_nextTempData3_1004_update_start_ <-& (R_nextTempData3_1004_update_start__ps)
          // Phi complete dependency.
          R_nextTempData3_1004_sample_completed__ps <-& (R_nextTempData3_1004_sample_completed_)
          R_nextTempData3_1004_update_completed__ps <-& (R_nextTempData3_1004_update_completed_)
          $phisequencer [ phi_stmt_1001_phi_seq] : 
          phi_stmt_1001_entry_trigger R_dat3_1003_sample_start__ps R_dat3_1003_sample_completed__ps R_dat3_1003_update_start__ps R_dat3_1003_update_completed__ps phi_stmt_1001_loopback_trigger R_nextTempData3_1004_sample_start__ps R_nextTempData3_1004_sample_completed__ps R_nextTempData3_1004_update_start__ps R_nextTempData3_1004_update_completed__ps :
          phi_stmt_1001_sample_start__ps phi_stmt_1001_sample_completed__ps phi_stmt_1001_update_start__ps phi_stmt_1001_update_completed__ps :
          phi_stmt_1001_entry_sample_req_ps phi_stmt_1001_loopback_sample_req_ps : 
          phi_stmt_1001_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1001
          // start: WAR dependencies for inv3
          // done: WAR dependencies for inv3
          // start:  			$volatile inv3 := ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 404
          // volatile! 
          // Source expression
          // ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 ))
          // (tempData3 [] 1023 )
          // tempData3
          // (CRC_16_3 [] 15 )
          // CRC_16_3
          // Target expression
          // (as target) inv3
          // start: WAR dependencies for inv3
          // done: WAR dependencies for inv3
          // end:  			$volatile inv3 := ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_3
          // WAR dependency: Read: nextCRC16_3 before Write: 			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_3
          // start:  			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 405
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3))
          // ((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) )
          // (( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3))
          // ( $slice CRC_16_3 14 12 ) 
          // CRC_16_3
          // ((CRC_16_3 [] 11 ) ^ inv3)
          // (CRC_16_3 [] 11 )
          // CRC_16_3
          // inv3
          // ( $slice CRC_16_3 10 5 ) 
          // CRC_16_3
          // ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)
          // (((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) )
          // ((CRC_16_3 [] 4 ) ^ inv3)
          // (CRC_16_3 [] 4 )
          // CRC_16_3
          // inv3
          // ( $slice CRC_16_3 3 0 ) 
          // CRC_16_3
          // inv3
          // Target expression
          // (as target) nextCRC16_3
          // start: WAR dependencies for nextCRC16_3
          // WAR dependency: Read: nextCRC16_3 before Write: 			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_3
          // end:  			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
          // start: WAR dependencies for nextTempData3
          // WAR dependency: Read: nextTempData3 before Write: 			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData3
          // start:  			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 406
          // volatile! 
          // Source expression
          // (tempData3 << 1 )
          // tempData3
          // Target expression
          // (as target) nextTempData3
          // start: WAR dependencies for nextTempData3
          // WAR dependency: Read: nextTempData3 before Write: 			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempData3
          // end:  			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
          // start: WAR dependencies for next_J_3
          // WAR dependency: Read: next_J_3 before Write: 			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_3
          // start:  			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 407
          // volatile! 
          // Source expression
          // (J_3 + 1 )
          // J_3
          // Target expression
          // (as target) next_J_3
          // start: WAR dependencies for next_J_3
          // WAR dependency: Read: next_J_3 before Write: 			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_J_3
          // end:  			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
          // (next_J_3 < 1024 )
          // next_J_3
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_J_3 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_991_update_completed_)
          // done: Forward dependencies from (next_J_3 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_989__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_989_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_989__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_989_loop_body : condition_evaluated
        $bind do_while_stmt_989__entry__  => do_while_stmt_989_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_989_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_989__exit__)
      }
      do_while_stmt_989__entry__ |-> (do_while_stmt_989)
      do_while_stmt_989__exit__ <-| (do_while_stmt_989)
      ::[assign_stmt_1057_to_assign_stmt_1061] 
      {
        // start: WAR dependencies for crcError3
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError3
        // start:  			$volatile crcError3 := (nextCRC_3 != nextCRC16_3) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 409
        // volatile! 
        // Source expression
        // (nextCRC_3 != nextCRC16_3)
        // nextCRC_3
        // nextCRC16_3
        // Target expression
        // (as target) crcError3
        // start: WAR dependencies for crcError3
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError3
        // end:  			$volatile crcError3 := (nextCRC_3 != nextCRC16_3) $buffering 1
        // start:  			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 410
        // Target expression
        // (as target) rxBufferPointer
        $T[STORE_rxBufferPointer_1058_sample_start_] 
        $T[STORE_rxBufferPointer_1058_sample_completed_] 
        $T[STORE_rxBufferPointer_1058_update_start_] 
        $T[STORE_rxBufferPointer_1058_update_completed_] 
        // rxBufferPointer
        $T[STORE_rxBufferPointer_1058_word_address_calculated] 
        $T[STORE_rxBufferPointer_1058_root_address_calculated] 
        STORE_rxBufferPointer_1058_word_address_calculated <-& (STORE_rxBufferPointer_1058_root_address_calculated)
        ;;[STORE_rxBufferPointer_1058_Sample] 
        {
          ;;[STORE_rxBufferPointer_1058_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_rxBufferPointer_1058_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_rxBufferPointer_1058_sample_start_ <-& (STORE_rxBufferPointer_1058_word_address_calculated)
        STORE_rxBufferPointer_1058_sample_start_ &-> (STORE_rxBufferPointer_1058_Sample)
        STORE_rxBufferPointer_1058_sample_completed_ <-& (STORE_rxBufferPointer_1058_Sample)
        STORE_rxBufferPointer_1058_sample_completed_ &-> ($null)
        STORE_rxBufferPointer_1058_update_start_ &-> (STORE_rxBufferPointer_1058_Update)
        STORE_rxBufferPointer_1058_update_completed_ <-& (STORE_rxBufferPointer_1058_Update)
        // end:  			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
        // load-store dependencies..
        // memory-space  memory_space_7
        //  STORE_rxBufferPointer_1058 store
      }
      assign_stmt_1057_to_assign_stmt_1061__entry__ |-> (assign_stmt_1057_to_assign_stmt_1061)
      assign_stmt_1057_to_assign_stmt_1061__exit__ <-| (assign_stmt_1057_to_assign_stmt_1061)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1062_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1062__entry__ |-> (if_stmt_1062_dead_link)
      if_stmt_1062__exit__ <-| (if_stmt_1062_dead_link)
      ;;[if_stmt_1062_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (singleMultipleReadBlock == 0 )
        ;;[EQ_u1_u1_1065] 
        {
          // binary expression 
          ||[EQ_u1_u1_1065_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1062__entry__ |-> (if_stmt_1062_eval_test)
      $P [EQ_u1_u1_1065_place]
      EQ_u1_u1_1065_place <-| (if_stmt_1062_eval_test)
      ;;[if_stmt_1062_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1062_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1065_place |-> (if_stmt_1062_if_link if_stmt_1062_else_link)
      $P [assign_stmt_1071__entry__] 
      $P [assign_stmt_1071__exit__] 
      ::[assign_stmt_1071] 
      {
        // start:  			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 412
        // Source expression
        // (presentState0Var & _hfb )
        $T[AND_u8_u8_1070_sample_start_] 
        $T[AND_u8_u8_1070_sample_completed_] 
        $T[AND_u8_u8_1070_update_start_] 
        $T[AND_u8_u8_1070_update_completed_] 
        // presentState0Var
        // start: Forward dependencies from presentState0Var to transition AND_u8_u8_1070_sample_start_
        // done: Forward dependencies from presentState0Var to transition AND_u8_u8_1070_sample_start_
        ;;[AND_u8_u8_1070_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_1070_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_1070_sample_start_ &-> (AND_u8_u8_1070_Sample)
        AND_u8_u8_1070_sample_completed_ <-& (AND_u8_u8_1070_Sample)
        AND_u8_u8_1070_sample_completed_ &-> ($null)
        AND_u8_u8_1070_update_start_ &-> (AND_u8_u8_1070_Update)
        AND_u8_u8_1070_update_completed_ <-& (AND_u8_u8_1070_Update)
        // Target expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_1067_sample_start_] 
        $T[array_obj_ref_1067_sample_completed_] 
        $T[array_obj_ref_1067_update_start_] 
        $T[array_obj_ref_1067_update_completed_] 
        $T[array_obj_ref_1067_word_address_calculated] 
        $T[array_obj_ref_1067_root_address_calculated] 
        array_obj_ref_1067_word_address_calculated <-& (array_obj_ref_1067_root_address_calculated)
        ;;[array_obj_ref_1067_Sample] 
        {
          ;;[array_obj_ref_1067_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_1067_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_1067_sample_start_ <-& (array_obj_ref_1067_word_address_calculated)
        array_obj_ref_1067_sample_start_ &-> (array_obj_ref_1067_Sample)
        array_obj_ref_1067_sample_completed_ <-& (array_obj_ref_1067_Sample)
        array_obj_ref_1067_sample_completed_ &-> ($null)
        array_obj_ref_1067_update_start_ &-> (array_obj_ref_1067_Update)
        array_obj_ref_1067_update_completed_ <-& (array_obj_ref_1067_Update)
        // start: Forward dependencies from (presentState0Var & _hfb ) to transition array_obj_ref_1067_sample_start_
        array_obj_ref_1067_sample_start_ <-& (AND_u8_u8_1070_update_completed_)
        // done: Forward dependencies from (presentState0Var & _hfb ) to transition array_obj_ref_1067_sample_start_
        // end:  			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_1067 store
      }
      assign_stmt_1071__entry__ |-> (assign_stmt_1071)
      assign_stmt_1071__exit__ <-| (assign_stmt_1071)
      assign_stmt_1071__entry__ <-| (if_stmt_1062_if_link)
      assign_stmt_1071__exit__ |-> (if_stmt_1062__exit__)
      if_stmt_1062__exit__ <-| (if_stmt_1062_else_link)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 414
      <o> [do_while_stmt_1073]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_1073__entry__] 
        $P[do_while_stmt_1073__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1073_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1075
          // 			$phi B := 			  ($bitcast ($uint<10>) 0  ) $on   $entry 			  next_B $on   $loopback 
          // type of target is $uint<10>
          $T[phi_stmt_1075_sample_start_] 
          $T[phi_stmt_1075_sample_completed_] 
          $T[phi_stmt_1075_update_start_] 
          $T[phi_stmt_1075_update_completed_] 
          $T[phi_stmt_1075_sample_start__ps] 
          phi_stmt_1075_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1075_sample_completed__ps] 
          phi_stmt_1075_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1075_update_start__ps] 
          phi_stmt_1075_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1075_update_completed__ps] 
          phi_stmt_1075_update_completed_ <-& (phi_stmt_1075_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1075_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1075_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1075_update_start_)
          $T[phi_stmt_1075_loopback_trigger] 
          phi_stmt_1075_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1075_loopback_sample_req] 
          $T[phi_stmt_1075_loopback_sample_req_ps] 
          phi_stmt_1075_loopback_sample_req <-& (phi_stmt_1075_loopback_sample_req_ps)
          phi_stmt_1075_loopback_sample_req &-> ($null)
          $T[phi_stmt_1075_entry_trigger] 
          phi_stmt_1075_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1075_entry_sample_req] 
          $T[phi_stmt_1075_entry_sample_req_ps] 
          phi_stmt_1075_entry_sample_req <-& (phi_stmt_1075_entry_sample_req_ps)
          phi_stmt_1075_entry_sample_req &-> ($null)
          phi_stmt_1075_update_start_ o<-& (phi_stmt_1075_update_completed_ 0)
          phi_stmt_1075_sample_start_ o<-& (phi_stmt_1075_sample_completed_ 1)
          $T[phi_stmt_1075_merged_reqs] 
          $T[phi_stmt_1075_phi_mux_ack] 
          $T[phi_stmt_1075_phi_mux_ack_ps] 
          phi_stmt_1075_phi_mux_ack_ps <-& (phi_stmt_1075_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1075_update_completed_)
          $T[type_cast_1078_sample_start__ps] 
          $T[type_cast_1078_sample_completed__ps] 
          $T[type_cast_1078_update_start__ps] 
          $T[type_cast_1078_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1078_sample_start_] 
          $T[type_cast_1078_sample_completed_] 
          type_cast_1078_sample_completed_ <-& (type_cast_1078_sample_start_)
          $T[type_cast_1078_update_start_] 
          $T [type_cast_1078_update_completed_] $delay 
          type_cast_1078_update_completed_ <-& (type_cast_1078_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1078_sample_start_ <-& (type_cast_1078_sample_start__ps)
          type_cast_1078_update_start_ <-& (type_cast_1078_update_start__ps)
          // Phi complete dependency.
          type_cast_1078_sample_completed__ps <-& (type_cast_1078_sample_completed_)
          type_cast_1078_update_completed__ps <-& (type_cast_1078_update_completed_)
          $T[R_next_B_1079_sample_start__ps] 
          $T[R_next_B_1079_sample_completed__ps] 
          $T[R_next_B_1079_update_start__ps] 
          $T[R_next_B_1079_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_B_1079_sample_start_] 
          $T[R_next_B_1079_sample_completed_] 
          $T[R_next_B_1079_update_start_] 
          $T[R_next_B_1079_update_completed_] 
          ;;[R_next_B_1079_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_B_1079_sample_start_ &-> (R_next_B_1079_Sample)
          R_next_B_1079_sample_completed_ <-& (R_next_B_1079_Sample)
          ;;[R_next_B_1079_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_B_1079_update_start_ &-> (R_next_B_1079_Update)
          R_next_B_1079_update_completed_ <-& (R_next_B_1079_Update)
          // RAW reenables for next_B
          // Phi start dependency for implicit/constant alternative.
          R_next_B_1079_sample_start_ <-& (R_next_B_1079_sample_start__ps)
          R_next_B_1079_update_start_ <-& (R_next_B_1079_update_start__ps)
          // Phi complete dependency.
          R_next_B_1079_sample_completed__ps <-& (R_next_B_1079_sample_completed_)
          R_next_B_1079_update_completed__ps <-& (R_next_B_1079_update_completed_)
          $phisequencer [ phi_stmt_1075_phi_seq] : 
          phi_stmt_1075_entry_trigger type_cast_1078_sample_start__ps type_cast_1078_sample_completed__ps type_cast_1078_update_start__ps type_cast_1078_update_completed__ps phi_stmt_1075_loopback_trigger R_next_B_1079_sample_start__ps R_next_B_1079_sample_completed__ps R_next_B_1079_update_start__ps R_next_B_1079_update_completed__ps :
          phi_stmt_1075_sample_start__ps phi_stmt_1075_sample_completed__ps phi_stmt_1075_update_start__ps phi_stmt_1075_update_completed__ps :
          phi_stmt_1075_entry_sample_req_ps phi_stmt_1075_loopback_sample_req_ps : 
          phi_stmt_1075_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1075
          // start:  PHI statement phi_stmt_1080
          // 			$phi dataForBuffer0 := 			  dat0 $on   $entry 			  nextDataForBuffer0 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_1080_sample_start_] 
          $T[phi_stmt_1080_sample_completed_] 
          $T[phi_stmt_1080_update_start_] 
          $T[phi_stmt_1080_update_completed_] 
          $T[phi_stmt_1080_sample_start__ps] 
          phi_stmt_1080_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1080_sample_completed__ps] 
          phi_stmt_1080_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1080_update_start__ps] 
          phi_stmt_1080_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1080_update_completed__ps] 
          phi_stmt_1080_update_completed_ <-& (phi_stmt_1080_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1080_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1080_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1080_update_start_)
          $T[phi_stmt_1080_loopback_trigger] 
          phi_stmt_1080_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1080_loopback_sample_req] 
          $T[phi_stmt_1080_loopback_sample_req_ps] 
          phi_stmt_1080_loopback_sample_req <-& (phi_stmt_1080_loopback_sample_req_ps)
          phi_stmt_1080_loopback_sample_req &-> ($null)
          $T[phi_stmt_1080_entry_trigger] 
          phi_stmt_1080_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1080_entry_sample_req] 
          $T[phi_stmt_1080_entry_sample_req_ps] 
          phi_stmt_1080_entry_sample_req <-& (phi_stmt_1080_entry_sample_req_ps)
          phi_stmt_1080_entry_sample_req &-> ($null)
          phi_stmt_1080_update_start_ o<-& (phi_stmt_1080_update_completed_ 0)
          phi_stmt_1080_sample_start_ o<-& (phi_stmt_1080_sample_completed_ 1)
          $T[phi_stmt_1080_merged_reqs] 
          $T[phi_stmt_1080_phi_mux_ack] 
          $T[phi_stmt_1080_phi_mux_ack_ps] 
          phi_stmt_1080_phi_mux_ack_ps <-& (phi_stmt_1080_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1080_update_completed_)
          $T[R_dat0_1082_sample_start__ps] 
          $T[R_dat0_1082_sample_completed__ps] 
          $T[R_dat0_1082_update_start__ps] 
          $T[R_dat0_1082_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat0_1082_sample_start_] 
          $T[R_dat0_1082_sample_completed_] 
          $T[R_dat0_1082_update_start_] 
          $T[R_dat0_1082_update_completed_] 
          ;;[R_dat0_1082_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat0_1082_sample_start_ &-> (R_dat0_1082_Sample)
          R_dat0_1082_sample_completed_ <-& (R_dat0_1082_Sample)
          ;;[R_dat0_1082_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat0_1082_update_start_ &-> (R_dat0_1082_Update)
          R_dat0_1082_update_completed_ <-& (R_dat0_1082_Update)
          // RAW reenables for dat0
          // Phi start dependency for implicit/constant alternative.
          R_dat0_1082_sample_start_ <-& (R_dat0_1082_sample_start__ps)
          R_dat0_1082_update_start_ <-& (R_dat0_1082_update_start__ps)
          // Phi complete dependency.
          R_dat0_1082_sample_completed__ps <-& (R_dat0_1082_sample_completed_)
          R_dat0_1082_update_completed__ps <-& (R_dat0_1082_update_completed_)
          $T[R_nextDataForBuffer0_1083_sample_start__ps] 
          $T[R_nextDataForBuffer0_1083_sample_completed__ps] 
          $T[R_nextDataForBuffer0_1083_update_start__ps] 
          $T[R_nextDataForBuffer0_1083_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextDataForBuffer0_1083_sample_start_] 
          $T[R_nextDataForBuffer0_1083_sample_completed_] 
          $T[R_nextDataForBuffer0_1083_update_start_] 
          $T[R_nextDataForBuffer0_1083_update_completed_] 
          ;;[R_nextDataForBuffer0_1083_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextDataForBuffer0_1083_sample_start_ &-> (R_nextDataForBuffer0_1083_Sample)
          R_nextDataForBuffer0_1083_sample_completed_ <-& (R_nextDataForBuffer0_1083_Sample)
          ;;[R_nextDataForBuffer0_1083_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextDataForBuffer0_1083_update_start_ &-> (R_nextDataForBuffer0_1083_Update)
          R_nextDataForBuffer0_1083_update_completed_ <-& (R_nextDataForBuffer0_1083_Update)
          // RAW reenables for nextDataForBuffer0
          // Phi start dependency for implicit/constant alternative.
          R_nextDataForBuffer0_1083_sample_start_ <-& (R_nextDataForBuffer0_1083_sample_start__ps)
          R_nextDataForBuffer0_1083_update_start_ <-& (R_nextDataForBuffer0_1083_update_start__ps)
          // Phi complete dependency.
          R_nextDataForBuffer0_1083_sample_completed__ps <-& (R_nextDataForBuffer0_1083_sample_completed_)
          R_nextDataForBuffer0_1083_update_completed__ps <-& (R_nextDataForBuffer0_1083_update_completed_)
          $phisequencer [ phi_stmt_1080_phi_seq] : 
          phi_stmt_1080_entry_trigger R_dat0_1082_sample_start__ps R_dat0_1082_sample_completed__ps R_dat0_1082_update_start__ps R_dat0_1082_update_completed__ps phi_stmt_1080_loopback_trigger R_nextDataForBuffer0_1083_sample_start__ps R_nextDataForBuffer0_1083_sample_completed__ps R_nextDataForBuffer0_1083_update_start__ps R_nextDataForBuffer0_1083_update_completed__ps :
          phi_stmt_1080_sample_start__ps phi_stmt_1080_sample_completed__ps phi_stmt_1080_update_start__ps phi_stmt_1080_update_completed__ps :
          phi_stmt_1080_entry_sample_req_ps phi_stmt_1080_loopback_sample_req_ps : 
          phi_stmt_1080_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1080
          // start:  PHI statement phi_stmt_1084
          // 			$phi dataForBuffer1 := 			  dat1 $on   $entry 			  nextDataForBuffer1 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_1084_sample_start_] 
          $T[phi_stmt_1084_sample_completed_] 
          $T[phi_stmt_1084_update_start_] 
          $T[phi_stmt_1084_update_completed_] 
          $T[phi_stmt_1084_sample_start__ps] 
          phi_stmt_1084_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1084_sample_completed__ps] 
          phi_stmt_1084_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1084_update_start__ps] 
          phi_stmt_1084_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1084_update_completed__ps] 
          phi_stmt_1084_update_completed_ <-& (phi_stmt_1084_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1084_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1084_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1084_update_start_)
          $T[phi_stmt_1084_loopback_trigger] 
          phi_stmt_1084_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1084_loopback_sample_req] 
          $T[phi_stmt_1084_loopback_sample_req_ps] 
          phi_stmt_1084_loopback_sample_req <-& (phi_stmt_1084_loopback_sample_req_ps)
          phi_stmt_1084_loopback_sample_req &-> ($null)
          $T[phi_stmt_1084_entry_trigger] 
          phi_stmt_1084_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1084_entry_sample_req] 
          $T[phi_stmt_1084_entry_sample_req_ps] 
          phi_stmt_1084_entry_sample_req <-& (phi_stmt_1084_entry_sample_req_ps)
          phi_stmt_1084_entry_sample_req &-> ($null)
          phi_stmt_1084_update_start_ o<-& (phi_stmt_1084_update_completed_ 0)
          phi_stmt_1084_sample_start_ o<-& (phi_stmt_1084_sample_completed_ 1)
          $T[phi_stmt_1084_merged_reqs] 
          $T[phi_stmt_1084_phi_mux_ack] 
          $T[phi_stmt_1084_phi_mux_ack_ps] 
          phi_stmt_1084_phi_mux_ack_ps <-& (phi_stmt_1084_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1084_update_completed_)
          $T[R_dat1_1086_sample_start__ps] 
          $T[R_dat1_1086_sample_completed__ps] 
          $T[R_dat1_1086_update_start__ps] 
          $T[R_dat1_1086_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat1_1086_sample_start_] 
          $T[R_dat1_1086_sample_completed_] 
          $T[R_dat1_1086_update_start_] 
          $T[R_dat1_1086_update_completed_] 
          ;;[R_dat1_1086_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat1_1086_sample_start_ &-> (R_dat1_1086_Sample)
          R_dat1_1086_sample_completed_ <-& (R_dat1_1086_Sample)
          ;;[R_dat1_1086_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat1_1086_update_start_ &-> (R_dat1_1086_Update)
          R_dat1_1086_update_completed_ <-& (R_dat1_1086_Update)
          // RAW reenables for dat1
          // Phi start dependency for implicit/constant alternative.
          R_dat1_1086_sample_start_ <-& (R_dat1_1086_sample_start__ps)
          R_dat1_1086_update_start_ <-& (R_dat1_1086_update_start__ps)
          // Phi complete dependency.
          R_dat1_1086_sample_completed__ps <-& (R_dat1_1086_sample_completed_)
          R_dat1_1086_update_completed__ps <-& (R_dat1_1086_update_completed_)
          $T[R_nextDataForBuffer1_1087_sample_start__ps] 
          $T[R_nextDataForBuffer1_1087_sample_completed__ps] 
          $T[R_nextDataForBuffer1_1087_update_start__ps] 
          $T[R_nextDataForBuffer1_1087_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextDataForBuffer1_1087_sample_start_] 
          $T[R_nextDataForBuffer1_1087_sample_completed_] 
          $T[R_nextDataForBuffer1_1087_update_start_] 
          $T[R_nextDataForBuffer1_1087_update_completed_] 
          ;;[R_nextDataForBuffer1_1087_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextDataForBuffer1_1087_sample_start_ &-> (R_nextDataForBuffer1_1087_Sample)
          R_nextDataForBuffer1_1087_sample_completed_ <-& (R_nextDataForBuffer1_1087_Sample)
          ;;[R_nextDataForBuffer1_1087_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextDataForBuffer1_1087_update_start_ &-> (R_nextDataForBuffer1_1087_Update)
          R_nextDataForBuffer1_1087_update_completed_ <-& (R_nextDataForBuffer1_1087_Update)
          // RAW reenables for nextDataForBuffer1
          // Phi start dependency for implicit/constant alternative.
          R_nextDataForBuffer1_1087_sample_start_ <-& (R_nextDataForBuffer1_1087_sample_start__ps)
          R_nextDataForBuffer1_1087_update_start_ <-& (R_nextDataForBuffer1_1087_update_start__ps)
          // Phi complete dependency.
          R_nextDataForBuffer1_1087_sample_completed__ps <-& (R_nextDataForBuffer1_1087_sample_completed_)
          R_nextDataForBuffer1_1087_update_completed__ps <-& (R_nextDataForBuffer1_1087_update_completed_)
          $phisequencer [ phi_stmt_1084_phi_seq] : 
          phi_stmt_1084_entry_trigger R_dat1_1086_sample_start__ps R_dat1_1086_sample_completed__ps R_dat1_1086_update_start__ps R_dat1_1086_update_completed__ps phi_stmt_1084_loopback_trigger R_nextDataForBuffer1_1087_sample_start__ps R_nextDataForBuffer1_1087_sample_completed__ps R_nextDataForBuffer1_1087_update_start__ps R_nextDataForBuffer1_1087_update_completed__ps :
          phi_stmt_1084_sample_start__ps phi_stmt_1084_sample_completed__ps phi_stmt_1084_update_start__ps phi_stmt_1084_update_completed__ps :
          phi_stmt_1084_entry_sample_req_ps phi_stmt_1084_loopback_sample_req_ps : 
          phi_stmt_1084_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1084
          // start:  PHI statement phi_stmt_1088
          // 			$phi dataForBuffer2 := 			  dat2 $on   $entry 			  nextDataForBuffer2 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_1088_sample_start_] 
          $T[phi_stmt_1088_sample_completed_] 
          $T[phi_stmt_1088_update_start_] 
          $T[phi_stmt_1088_update_completed_] 
          $T[phi_stmt_1088_sample_start__ps] 
          phi_stmt_1088_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1088_sample_completed__ps] 
          phi_stmt_1088_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1088_update_start__ps] 
          phi_stmt_1088_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1088_update_completed__ps] 
          phi_stmt_1088_update_completed_ <-& (phi_stmt_1088_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1088_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1088_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1088_update_start_)
          $T[phi_stmt_1088_loopback_trigger] 
          phi_stmt_1088_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1088_loopback_sample_req] 
          $T[phi_stmt_1088_loopback_sample_req_ps] 
          phi_stmt_1088_loopback_sample_req <-& (phi_stmt_1088_loopback_sample_req_ps)
          phi_stmt_1088_loopback_sample_req &-> ($null)
          $T[phi_stmt_1088_entry_trigger] 
          phi_stmt_1088_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1088_entry_sample_req] 
          $T[phi_stmt_1088_entry_sample_req_ps] 
          phi_stmt_1088_entry_sample_req <-& (phi_stmt_1088_entry_sample_req_ps)
          phi_stmt_1088_entry_sample_req &-> ($null)
          phi_stmt_1088_update_start_ o<-& (phi_stmt_1088_update_completed_ 0)
          phi_stmt_1088_sample_start_ o<-& (phi_stmt_1088_sample_completed_ 1)
          $T[phi_stmt_1088_merged_reqs] 
          $T[phi_stmt_1088_phi_mux_ack] 
          $T[phi_stmt_1088_phi_mux_ack_ps] 
          phi_stmt_1088_phi_mux_ack_ps <-& (phi_stmt_1088_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1088_update_completed_)
          $T[R_dat2_1090_sample_start__ps] 
          $T[R_dat2_1090_sample_completed__ps] 
          $T[R_dat2_1090_update_start__ps] 
          $T[R_dat2_1090_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat2_1090_sample_start_] 
          $T[R_dat2_1090_sample_completed_] 
          $T[R_dat2_1090_update_start_] 
          $T[R_dat2_1090_update_completed_] 
          ;;[R_dat2_1090_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat2_1090_sample_start_ &-> (R_dat2_1090_Sample)
          R_dat2_1090_sample_completed_ <-& (R_dat2_1090_Sample)
          ;;[R_dat2_1090_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat2_1090_update_start_ &-> (R_dat2_1090_Update)
          R_dat2_1090_update_completed_ <-& (R_dat2_1090_Update)
          // RAW reenables for dat2
          // Phi start dependency for implicit/constant alternative.
          R_dat2_1090_sample_start_ <-& (R_dat2_1090_sample_start__ps)
          R_dat2_1090_update_start_ <-& (R_dat2_1090_update_start__ps)
          // Phi complete dependency.
          R_dat2_1090_sample_completed__ps <-& (R_dat2_1090_sample_completed_)
          R_dat2_1090_update_completed__ps <-& (R_dat2_1090_update_completed_)
          $T[R_nextDataForBuffer2_1091_sample_start__ps] 
          $T[R_nextDataForBuffer2_1091_sample_completed__ps] 
          $T[R_nextDataForBuffer2_1091_update_start__ps] 
          $T[R_nextDataForBuffer2_1091_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextDataForBuffer2_1091_sample_start_] 
          $T[R_nextDataForBuffer2_1091_sample_completed_] 
          $T[R_nextDataForBuffer2_1091_update_start_] 
          $T[R_nextDataForBuffer2_1091_update_completed_] 
          ;;[R_nextDataForBuffer2_1091_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextDataForBuffer2_1091_sample_start_ &-> (R_nextDataForBuffer2_1091_Sample)
          R_nextDataForBuffer2_1091_sample_completed_ <-& (R_nextDataForBuffer2_1091_Sample)
          ;;[R_nextDataForBuffer2_1091_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextDataForBuffer2_1091_update_start_ &-> (R_nextDataForBuffer2_1091_Update)
          R_nextDataForBuffer2_1091_update_completed_ <-& (R_nextDataForBuffer2_1091_Update)
          // RAW reenables for nextDataForBuffer2
          // Phi start dependency for implicit/constant alternative.
          R_nextDataForBuffer2_1091_sample_start_ <-& (R_nextDataForBuffer2_1091_sample_start__ps)
          R_nextDataForBuffer2_1091_update_start_ <-& (R_nextDataForBuffer2_1091_update_start__ps)
          // Phi complete dependency.
          R_nextDataForBuffer2_1091_sample_completed__ps <-& (R_nextDataForBuffer2_1091_sample_completed_)
          R_nextDataForBuffer2_1091_update_completed__ps <-& (R_nextDataForBuffer2_1091_update_completed_)
          $phisequencer [ phi_stmt_1088_phi_seq] : 
          phi_stmt_1088_entry_trigger R_dat2_1090_sample_start__ps R_dat2_1090_sample_completed__ps R_dat2_1090_update_start__ps R_dat2_1090_update_completed__ps phi_stmt_1088_loopback_trigger R_nextDataForBuffer2_1091_sample_start__ps R_nextDataForBuffer2_1091_sample_completed__ps R_nextDataForBuffer2_1091_update_start__ps R_nextDataForBuffer2_1091_update_completed__ps :
          phi_stmt_1088_sample_start__ps phi_stmt_1088_sample_completed__ps phi_stmt_1088_update_start__ps phi_stmt_1088_update_completed__ps :
          phi_stmt_1088_entry_sample_req_ps phi_stmt_1088_loopback_sample_req_ps : 
          phi_stmt_1088_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1088
          // start:  PHI statement phi_stmt_1092
          // 			$phi dataForBuffer3 := 			  dat3 $on   $entry 			  nextDataForBuffer3 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_1092_sample_start_] 
          $T[phi_stmt_1092_sample_completed_] 
          $T[phi_stmt_1092_update_start_] 
          $T[phi_stmt_1092_update_completed_] 
          $T[phi_stmt_1092_sample_start__ps] 
          phi_stmt_1092_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1092_sample_completed__ps] 
          phi_stmt_1092_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1092_update_start__ps] 
          phi_stmt_1092_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1092_update_completed__ps] 
          phi_stmt_1092_update_completed_ <-& (phi_stmt_1092_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1092_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1092_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1092_update_start_)
          $T[phi_stmt_1092_loopback_trigger] 
          phi_stmt_1092_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1092_loopback_sample_req] 
          $T[phi_stmt_1092_loopback_sample_req_ps] 
          phi_stmt_1092_loopback_sample_req <-& (phi_stmt_1092_loopback_sample_req_ps)
          phi_stmt_1092_loopback_sample_req &-> ($null)
          $T[phi_stmt_1092_entry_trigger] 
          phi_stmt_1092_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1092_entry_sample_req] 
          $T[phi_stmt_1092_entry_sample_req_ps] 
          phi_stmt_1092_entry_sample_req <-& (phi_stmt_1092_entry_sample_req_ps)
          phi_stmt_1092_entry_sample_req &-> ($null)
          phi_stmt_1092_update_start_ o<-& (phi_stmt_1092_update_completed_ 0)
          phi_stmt_1092_sample_start_ o<-& (phi_stmt_1092_sample_completed_ 1)
          $T[phi_stmt_1092_merged_reqs] 
          $T[phi_stmt_1092_phi_mux_ack] 
          $T[phi_stmt_1092_phi_mux_ack_ps] 
          phi_stmt_1092_phi_mux_ack_ps <-& (phi_stmt_1092_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1092_update_completed_)
          $T[R_dat3_1094_sample_start__ps] 
          $T[R_dat3_1094_sample_completed__ps] 
          $T[R_dat3_1094_update_start__ps] 
          $T[R_dat3_1094_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat3_1094_sample_start_] 
          $T[R_dat3_1094_sample_completed_] 
          $T[R_dat3_1094_update_start_] 
          $T[R_dat3_1094_update_completed_] 
          ;;[R_dat3_1094_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat3_1094_sample_start_ &-> (R_dat3_1094_Sample)
          R_dat3_1094_sample_completed_ <-& (R_dat3_1094_Sample)
          ;;[R_dat3_1094_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat3_1094_update_start_ &-> (R_dat3_1094_Update)
          R_dat3_1094_update_completed_ <-& (R_dat3_1094_Update)
          // RAW reenables for dat3
          // Phi start dependency for implicit/constant alternative.
          R_dat3_1094_sample_start_ <-& (R_dat3_1094_sample_start__ps)
          R_dat3_1094_update_start_ <-& (R_dat3_1094_update_start__ps)
          // Phi complete dependency.
          R_dat3_1094_sample_completed__ps <-& (R_dat3_1094_sample_completed_)
          R_dat3_1094_update_completed__ps <-& (R_dat3_1094_update_completed_)
          $T[R_nextDataForBuffer3_1095_sample_start__ps] 
          $T[R_nextDataForBuffer3_1095_sample_completed__ps] 
          $T[R_nextDataForBuffer3_1095_update_start__ps] 
          $T[R_nextDataForBuffer3_1095_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextDataForBuffer3_1095_sample_start_] 
          $T[R_nextDataForBuffer3_1095_sample_completed_] 
          $T[R_nextDataForBuffer3_1095_update_start_] 
          $T[R_nextDataForBuffer3_1095_update_completed_] 
          ;;[R_nextDataForBuffer3_1095_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextDataForBuffer3_1095_sample_start_ &-> (R_nextDataForBuffer3_1095_Sample)
          R_nextDataForBuffer3_1095_sample_completed_ <-& (R_nextDataForBuffer3_1095_Sample)
          ;;[R_nextDataForBuffer3_1095_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextDataForBuffer3_1095_update_start_ &-> (R_nextDataForBuffer3_1095_Update)
          R_nextDataForBuffer3_1095_update_completed_ <-& (R_nextDataForBuffer3_1095_Update)
          // RAW reenables for nextDataForBuffer3
          // Phi start dependency for implicit/constant alternative.
          R_nextDataForBuffer3_1095_sample_start_ <-& (R_nextDataForBuffer3_1095_sample_start__ps)
          R_nextDataForBuffer3_1095_update_start_ <-& (R_nextDataForBuffer3_1095_update_start__ps)
          // Phi complete dependency.
          R_nextDataForBuffer3_1095_sample_completed__ps <-& (R_nextDataForBuffer3_1095_sample_completed_)
          R_nextDataForBuffer3_1095_update_completed__ps <-& (R_nextDataForBuffer3_1095_update_completed_)
          $phisequencer [ phi_stmt_1092_phi_seq] : 
          phi_stmt_1092_entry_trigger R_dat3_1094_sample_start__ps R_dat3_1094_sample_completed__ps R_dat3_1094_update_start__ps R_dat3_1094_update_completed__ps phi_stmt_1092_loopback_trigger R_nextDataForBuffer3_1095_sample_start__ps R_nextDataForBuffer3_1095_sample_completed__ps R_nextDataForBuffer3_1095_update_start__ps R_nextDataForBuffer3_1095_update_completed__ps :
          phi_stmt_1092_sample_start__ps phi_stmt_1092_sample_completed__ps phi_stmt_1092_update_start__ps phi_stmt_1092_update_completed__ps :
          phi_stmt_1092_entry_sample_req_ps phi_stmt_1092_loopback_sample_req_ps : 
          phi_stmt_1092_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1092
          // start:  			dataBufferRx := ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) $buffering 1// bits of buffering = 8. 
          //  file .Aa/sdhc.opt.aa, line 428
          // Source expression
          // ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))))
          $T[CONCAT_u4_u8_1128_sample_start_] 
          $T[CONCAT_u4_u8_1128_sample_completed_] 
          $T[CONCAT_u4_u8_1128_update_start_] 
          $T[CONCAT_u4_u8_1128_update_completed_] 
          // (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 )))
          // ((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 ))
          // (dataForBuffer3 [] 1023 )
          // dataForBuffer3
          // (dataForBuffer2 [] 1023 )
          // dataForBuffer2
          // ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))
          // (dataForBuffer1 [] 1023 )
          // dataForBuffer1
          // (dataForBuffer0 [] 1023 )
          // dataForBuffer0
          // (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))
          // ((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 ))
          // (dataForBuffer3 [] 1022 )
          // dataForBuffer3
          // (dataForBuffer2 [] 1022 )
          // dataForBuffer2
          // ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))
          // (dataForBuffer1 [] 1022 )
          // dataForBuffer1
          // (dataForBuffer0 [] 1022 )
          // dataForBuffer0
          // start: Forward dependencies from (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) to transition CONCAT_u4_u8_1128_sample_start_
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1080_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1084_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1088_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1092_update_completed_)
          // done: Forward dependencies from (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) to transition CONCAT_u4_u8_1128_sample_start_
          // start: Forward dependencies from (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))) to transition CONCAT_u4_u8_1128_sample_start_
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1080_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1084_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1088_update_completed_)
          CONCAT_u4_u8_1128_sample_start_ <-& (phi_stmt_1092_update_completed_)
          // done: Forward dependencies from (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))) to transition CONCAT_u4_u8_1128_sample_start_
          ;;[CONCAT_u4_u8_1128_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u4_u8_1128_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u4_u8_1128_sample_start_ &-> (CONCAT_u4_u8_1128_Sample)
          CONCAT_u4_u8_1128_sample_completed_ <-& (CONCAT_u4_u8_1128_Sample)
          CONCAT_u4_u8_1128_sample_completed_ &-> ($null)
          CONCAT_u4_u8_1128_update_start_ &-> (CONCAT_u4_u8_1128_Update)
          CONCAT_u4_u8_1128_update_completed_ <-& (CONCAT_u4_u8_1128_Update)
          // RAW reenables for (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 )))
          phi_stmt_1080_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1084_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1088_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1092_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          // RAW reenables for (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))
          phi_stmt_1080_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1084_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1088_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          phi_stmt_1092_update_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 0)
          // self-release: 
          CONCAT_u4_u8_1128_sample_start_ o<-& (CONCAT_u4_u8_1128_sample_completed_ 1)
          $null &-> (CONCAT_u4_u8_1128_update_start_)
          CONCAT_u4_u8_1128_update_start_ o<-& (CONCAT_u4_u8_1128_update_completed_ 0)
          // Target expression
          // (as target) dataBufferRx
          $T[WPIPE_dataBufferRx_1097_sample_start_] 
          $T[WPIPE_dataBufferRx_1097_sample_completed_] 
          $T[WPIPE_dataBufferRx_1097_update_start_] 
          $T[WPIPE_dataBufferRx_1097_update_completed_] 
          ;;[WPIPE_dataBufferRx_1097_Sample] 
          {
            // pipe write sample-start dataBufferRx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_dataBufferRx_1097_Update] 
          {
            // pipe write update (complete) dataBufferRx
            $T [req] $T [ack] 
          }
          WPIPE_dataBufferRx_1097_sample_start_ &-> (WPIPE_dataBufferRx_1097_Sample)
          WPIPE_dataBufferRx_1097_sample_completed_ <-& (WPIPE_dataBufferRx_1097_Sample)
          WPIPE_dataBufferRx_1097_update_start_ <-& (WPIPE_dataBufferRx_1097_sample_completed_)
          WPIPE_dataBufferRx_1097_update_start_ &-> (WPIPE_dataBufferRx_1097_Update)
          WPIPE_dataBufferRx_1097_update_completed_ <-& (WPIPE_dataBufferRx_1097_Update)
          WPIPE_dataBufferRx_1097_sample_start_ o<-& (WPIPE_dataBufferRx_1097_update_completed_ 0)
          // start: Forward dependencies from ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) to transition WPIPE_dataBufferRx_1097_sample_start_
          WPIPE_dataBufferRx_1097_sample_start_ <-& (CONCAT_u4_u8_1128_update_completed_)
          // done: Forward dependencies from ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) to transition WPIPE_dataBufferRx_1097_sample_start_
          // RAW reenables for ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))))
          CONCAT_u4_u8_1128_update_start_ o<-& (WPIPE_dataBufferRx_1097_sample_completed_ 0)
          // end:  			dataBufferRx := ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) $buffering 1// bits of buffering = 8. 
          // start: WAR dependencies for nextDataForBuffer0
          // WAR dependency: Read: nextDataForBuffer0 before Write: 			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer0
          // start:  			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 429
          // volatile! 
          // Source expression
          // (dataForBuffer0 << 2 )
          // dataForBuffer0
          // Target expression
          // (as target) nextDataForBuffer0
          // start: WAR dependencies for nextDataForBuffer0
          // WAR dependency: Read: nextDataForBuffer0 before Write: 			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer0
          // end:  			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
          // start: WAR dependencies for nextDataForBuffer1
          // WAR dependency: Read: nextDataForBuffer1 before Write: 			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer1
          // start:  			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 430
          // volatile! 
          // Source expression
          // (dataForBuffer1 << 2 )
          // dataForBuffer1
          // Target expression
          // (as target) nextDataForBuffer1
          // start: WAR dependencies for nextDataForBuffer1
          // WAR dependency: Read: nextDataForBuffer1 before Write: 			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer1
          // end:  			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
          // start: WAR dependencies for nextDataForBuffer2
          // WAR dependency: Read: nextDataForBuffer2 before Write: 			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer2
          // start:  			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 431
          // volatile! 
          // Source expression
          // (dataForBuffer2 << 2 )
          // dataForBuffer2
          // Target expression
          // (as target) nextDataForBuffer2
          // start: WAR dependencies for nextDataForBuffer2
          // WAR dependency: Read: nextDataForBuffer2 before Write: 			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer2
          // end:  			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
          // start: WAR dependencies for nextDataForBuffer3
          // WAR dependency: Read: nextDataForBuffer3 before Write: 			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer3
          // start:  			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 432
          // volatile! 
          // Source expression
          // (dataForBuffer3 << 2 )
          // dataForBuffer3
          // Target expression
          // (as target) nextDataForBuffer3
          // start: WAR dependencies for nextDataForBuffer3
          // WAR dependency: Read: nextDataForBuffer3 before Write: 			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextDataForBuffer3
          // end:  			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
          // start: WAR dependencies for next_B
          // WAR dependency: Read: next_B before Write: 			$volatile next_B := (B + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_B
          // start:  			$volatile next_B := (B + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 433
          // volatile! 
          // Source expression
          // (B + 1 )
          // B
          // Target expression
          // (as target) next_B
          // start: WAR dependencies for next_B
          // WAR dependency: Read: next_B before Write: 			$volatile next_B := (B + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_B
          // end:  			$volatile next_B := (B + 1 ) $buffering 1
          // (next_B < 512 )
          // next_B
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_B < 512 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_1075_update_completed_)
          // done: Forward dependencies from (next_B < 512 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe dataBufferRx
          // read-dependencies for pipe dataBufferRx
          // write-dependencies for pipe dataBufferRx
          // signal write dependencies for dataBufferRx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1073__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1073_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1073__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1073_loop_body : condition_evaluated
        $bind do_while_stmt_1073__entry__  => do_while_stmt_1073_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1073_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1073__exit__)
      }
      do_while_stmt_1073__entry__ |-> (do_while_stmt_1073)
      do_while_stmt_1073__exit__ <-| (do_while_stmt_1073)
      ::[assign_stmt_1167_to_assign_stmt_1189] 
      {
        // start: WAR dependencies for stopBitError_Final
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // done: WAR dependencies for stopBitError_Final
        // start:  			$volatile stopBitError_Final := ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3)) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 435
        // volatile! 
        // Source expression
        // ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3))
        // (stopBitError0 | stopBitError1)
        // stopBitError0
        // stopBitError1
        // (stopBitError2 | stopBitError3)
        // stopBitError2
        // stopBitError3
        // Target expression
        // (as target) stopBitError_Final
        // start: WAR dependencies for stopBitError_Final
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // done: WAR dependencies for stopBitError_Final
        // end:  			$volatile stopBitError_Final := ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3)) $buffering 1
        // start: WAR dependencies for crcError_Final
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError_Final
        // start:  			$volatile crcError_Final := ((crcError0 | crcError1) | (crcError2 | crcError3)) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 436
        // volatile! 
        // Source expression
        // ((crcError0 | crcError1) | (crcError2 | crcError3))
        // (crcError0 | crcError1)
        // crcError0
        // crcError1
        // (crcError2 | crcError3)
        // crcError2
        // crcError3
        // Target expression
        // (as target) crcError_Final
        // start: WAR dependencies for crcError_Final
        // ignored out-of-scope w_root 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
        // ignored out-of-scope w_root 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
        // ignored out-of-scope w_root 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
        // ignored out-of-scope w_root 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
        // ignored out-of-scope w_root 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
        // type of target is $uint<1024>
        // ignored out-of-scope w_root 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
        // type of target is $uint<1024>
        // done: WAR dependencies for crcError_Final
        // end:  			$volatile crcError_Final := ((crcError0 | crcError1) | (crcError2 | crcError3)) $buffering 1
        // start:  			dataErrorInterruptStatusVar1_4 := (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 437
        // Source expression
        // (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2))
        $T[CONCAT_u3_u8_1188_sample_start_] 
        $T[CONCAT_u3_u8_1188_sample_completed_] 
        $T[CONCAT_u3_u8_1188_update_start_] 
        $T[CONCAT_u3_u8_1188_update_completed_] 
        // ((ZERO_1 && stopBitError_Final) && crcError_Final)
        // (ZERO_1 && stopBitError_Final)
        // stopBitError_Final
        // crcError_Final
        // start: Forward dependencies from ((ZERO_1 && stopBitError_Final) && crcError_Final) to transition CONCAT_u3_u8_1188_sample_start_
        // done: Forward dependencies from ((ZERO_1 && stopBitError_Final) && crcError_Final) to transition CONCAT_u3_u8_1188_sample_start_
        ;;[CONCAT_u3_u8_1188_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u3_u8_1188_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u3_u8_1188_sample_start_ &-> (CONCAT_u3_u8_1188_Sample)
        CONCAT_u3_u8_1188_sample_completed_ <-& (CONCAT_u3_u8_1188_Sample)
        CONCAT_u3_u8_1188_sample_completed_ &-> ($null)
        CONCAT_u3_u8_1188_update_start_ &-> (CONCAT_u3_u8_1188_Update)
        CONCAT_u3_u8_1188_update_completed_ <-& (CONCAT_u3_u8_1188_Update)
        // Target expression
        // (as target) dataErrorInterruptStatusVar1_4
        // start: WAR dependencies for dataErrorInterruptStatusVar1_4
        // done: WAR dependencies for dataErrorInterruptStatusVar1_4
        // end:  			dataErrorInterruptStatusVar1_4 := (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_1167_to_assign_stmt_1189__entry__ |-> (assign_stmt_1167_to_assign_stmt_1189)
      assign_stmt_1167_to_assign_stmt_1189__exit__ <-| (assign_stmt_1167_to_assign_stmt_1189)
      parallel_block_stmt_741__entry__ <-| (if_stmt_736_if_link)
      assign_stmt_763__entry__ <-| (parallel_block_stmt_741__exit__)
      do_while_stmt_764__entry__ <-| (assign_stmt_763__exit__)
      assign_stmt_835_to_assign_stmt_840__entry__ <-| (do_while_stmt_764__exit__)
      do_while_stmt_841__entry__ <-| (assign_stmt_835_to_assign_stmt_840__exit__)
      assign_stmt_909_to_assign_stmt_914__entry__ <-| (do_while_stmt_841__exit__)
      do_while_stmt_915__entry__ <-| (assign_stmt_909_to_assign_stmt_914__exit__)
      assign_stmt_983_to_assign_stmt_988__entry__ <-| (do_while_stmt_915__exit__)
      do_while_stmt_989__entry__ <-| (assign_stmt_983_to_assign_stmt_988__exit__)
      assign_stmt_1057_to_assign_stmt_1061__entry__ <-| (do_while_stmt_989__exit__)
      if_stmt_1062__entry__ <-| (assign_stmt_1057_to_assign_stmt_1061__exit__)
      do_while_stmt_1073__entry__ <-| (if_stmt_1062__exit__)
      assign_stmt_1167_to_assign_stmt_1189__entry__ <-| (do_while_stmt_1073__exit__)
      assign_stmt_1167_to_assign_stmt_1189__exit__ |-> (if_stmt_736__exit__)
      $P [assign_stmt_1193__entry__] 
      $P [assign_stmt_1193__exit__] 
      $P [branch_block_stmt_1194__entry__] 
      $P [branch_block_stmt_1194__exit__] 
      $P [assign_stmt_1289__entry__] 
      $P [assign_stmt_1289__exit__] 
      $P [merge_stmt_1290__entry__] 
      $P [merge_stmt_1290__exit__] 
      $P [assign_stmt_1313_to_assign_stmt_1318__entry__] 
      $P [assign_stmt_1313_to_assign_stmt_1318__exit__] 
      $P [if_stmt_1319__entry__] 
      $P [if_stmt_1319__exit__] 
      $P [assign_stmt_1327__entry__] 
      $P [assign_stmt_1327__exit__] 
      $P [if_stmt_1328__entry__] 
      $P [if_stmt_1328__exit__] 
      $P [assign_stmt_1343__entry__] 
      $P [assign_stmt_1343__exit__] 
      $P [merge_stmt_1344__entry__] 
      $P [merge_stmt_1344__exit__] 
      $P [assign_stmt_1368_to_assign_stmt_1402__entry__] 
      $P [assign_stmt_1368_to_assign_stmt_1402__exit__] 
      $P [if_stmt_1403__entry__] 
      $P [if_stmt_1403__exit__] 
      $P [assign_stmt_1413_to_assign_stmt_1426__entry__] 
      $P [assign_stmt_1413_to_assign_stmt_1426__exit__] 
      ::[assign_stmt_1193] 
      {
        // start:  			startBit := DAT0Rx $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 439
        // Source expression
        // DAT0Rx
        $T[RPIPE_DAT0Rx_1192_sample_start_] 
        $T[RPIPE_DAT0Rx_1192_sample_completed_] 
        $T[RPIPE_DAT0Rx_1192_update_start_] 
        $T[RPIPE_DAT0Rx_1192_update_completed_] 
        ;;[RPIPE_DAT0Rx_1192_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_DAT0Rx_1192_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_DAT0Rx_1192_sample_start_ &-> (RPIPE_DAT0Rx_1192_Sample)
        RPIPE_DAT0Rx_1192_sample_completed_ <-& (RPIPE_DAT0Rx_1192_Sample)
        RPIPE_DAT0Rx_1192_update_start_ <-& (RPIPE_DAT0Rx_1192_sample_completed_)
        RPIPE_DAT0Rx_1192_update_start_ &-> (RPIPE_DAT0Rx_1192_Update)
        RPIPE_DAT0Rx_1192_update_completed_ <-& (RPIPE_DAT0Rx_1192_Update)
        // Target expression
        // (as target) startBit
        // start: WAR dependencies for startBit
        // done: WAR dependencies for startBit
        // end:  			startBit := DAT0Rx $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
      }
      assign_stmt_1193__entry__ |-> (assign_stmt_1193)
      assign_stmt_1193__exit__ <-| (assign_stmt_1193)
      <>[branch_block_stmt_1194] // Branch Block  file .Aa/sdhc.opt.aa, line 440
      {
        $P [branch_block_stmt_1194__entry__]
        branch_block_stmt_1194__entry__ <-| ($entry)
        $P [branch_block_stmt_1194__exit__]
        branch_block_stmt_1194__exit__ |-> ($exit)
        $P [merge_stmt_1195__entry__] 
        $P [merge_stmt_1195__exit__] 
        $P [assign_stmt_1210_to_assign_stmt_1278__entry__] 
        $P [assign_stmt_1210_to_assign_stmt_1278__exit__] 
        $P [if_stmt_1279__entry__] 
        $P [if_stmt_1279__exit__] 
        ::[assign_stmt_1210_to_assign_stmt_1278] 
        {
          // start:  				bit7 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 448
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1209_sample_start_] 
          $T[RPIPE_DAT0Rx_1209_sample_completed_] 
          $T[RPIPE_DAT0Rx_1209_update_start_] 
          $T[RPIPE_DAT0Rx_1209_update_completed_] 
          ;;[RPIPE_DAT0Rx_1209_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1209_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1209_sample_start_ &-> (RPIPE_DAT0Rx_1209_Sample)
          RPIPE_DAT0Rx_1209_sample_completed_ <-& (RPIPE_DAT0Rx_1209_Sample)
          RPIPE_DAT0Rx_1209_update_start_ <-& (RPIPE_DAT0Rx_1209_sample_completed_)
          RPIPE_DAT0Rx_1209_update_start_ &-> (RPIPE_DAT0Rx_1209_Update)
          RPIPE_DAT0Rx_1209_update_completed_ <-& (RPIPE_DAT0Rx_1209_Update)
          // Target expression
          // (as target) bit7
          // start: WAR dependencies for bit7
          // done: WAR dependencies for bit7
          // end:  				bit7 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit6 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 449
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1212_sample_start_] 
          $T[RPIPE_DAT0Rx_1212_sample_completed_] 
          $T[RPIPE_DAT0Rx_1212_update_start_] 
          $T[RPIPE_DAT0Rx_1212_update_completed_] 
          ;;[RPIPE_DAT0Rx_1212_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1212_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1212_sample_start_ &-> (RPIPE_DAT0Rx_1212_Sample)
          RPIPE_DAT0Rx_1212_sample_completed_ <-& (RPIPE_DAT0Rx_1212_Sample)
          RPIPE_DAT0Rx_1212_update_start_ <-& (RPIPE_DAT0Rx_1212_sample_completed_)
          RPIPE_DAT0Rx_1212_update_start_ &-> (RPIPE_DAT0Rx_1212_Update)
          RPIPE_DAT0Rx_1212_update_completed_ <-& (RPIPE_DAT0Rx_1212_Update)
          // Target expression
          // (as target) bit6
          // start: WAR dependencies for bit6
          // done: WAR dependencies for bit6
          // end:  				bit6 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit5 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 450
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1215_sample_start_] 
          $T[RPIPE_DAT0Rx_1215_sample_completed_] 
          $T[RPIPE_DAT0Rx_1215_update_start_] 
          $T[RPIPE_DAT0Rx_1215_update_completed_] 
          ;;[RPIPE_DAT0Rx_1215_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1215_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1215_sample_start_ &-> (RPIPE_DAT0Rx_1215_Sample)
          RPIPE_DAT0Rx_1215_sample_completed_ <-& (RPIPE_DAT0Rx_1215_Sample)
          RPIPE_DAT0Rx_1215_update_start_ <-& (RPIPE_DAT0Rx_1215_sample_completed_)
          RPIPE_DAT0Rx_1215_update_start_ &-> (RPIPE_DAT0Rx_1215_Update)
          RPIPE_DAT0Rx_1215_update_completed_ <-& (RPIPE_DAT0Rx_1215_Update)
          // Target expression
          // (as target) bit5
          // start: WAR dependencies for bit5
          // done: WAR dependencies for bit5
          // end:  				bit5 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit4 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 451
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1218_sample_start_] 
          $T[RPIPE_DAT0Rx_1218_sample_completed_] 
          $T[RPIPE_DAT0Rx_1218_update_start_] 
          $T[RPIPE_DAT0Rx_1218_update_completed_] 
          ;;[RPIPE_DAT0Rx_1218_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1218_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1218_sample_start_ &-> (RPIPE_DAT0Rx_1218_Sample)
          RPIPE_DAT0Rx_1218_sample_completed_ <-& (RPIPE_DAT0Rx_1218_Sample)
          RPIPE_DAT0Rx_1218_update_start_ <-& (RPIPE_DAT0Rx_1218_sample_completed_)
          RPIPE_DAT0Rx_1218_update_start_ &-> (RPIPE_DAT0Rx_1218_Update)
          RPIPE_DAT0Rx_1218_update_completed_ <-& (RPIPE_DAT0Rx_1218_Update)
          // Target expression
          // (as target) bit4
          // start: WAR dependencies for bit4
          // done: WAR dependencies for bit4
          // end:  				bit4 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit3 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 452
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1221_sample_start_] 
          $T[RPIPE_DAT0Rx_1221_sample_completed_] 
          $T[RPIPE_DAT0Rx_1221_update_start_] 
          $T[RPIPE_DAT0Rx_1221_update_completed_] 
          ;;[RPIPE_DAT0Rx_1221_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1221_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1221_sample_start_ &-> (RPIPE_DAT0Rx_1221_Sample)
          RPIPE_DAT0Rx_1221_sample_completed_ <-& (RPIPE_DAT0Rx_1221_Sample)
          RPIPE_DAT0Rx_1221_update_start_ <-& (RPIPE_DAT0Rx_1221_sample_completed_)
          RPIPE_DAT0Rx_1221_update_start_ &-> (RPIPE_DAT0Rx_1221_Update)
          RPIPE_DAT0Rx_1221_update_completed_ <-& (RPIPE_DAT0Rx_1221_Update)
          // Target expression
          // (as target) bit3
          // start: WAR dependencies for bit3
          // done: WAR dependencies for bit3
          // end:  				bit3 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit2 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 453
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1224_sample_start_] 
          $T[RPIPE_DAT0Rx_1224_sample_completed_] 
          $T[RPIPE_DAT0Rx_1224_update_start_] 
          $T[RPIPE_DAT0Rx_1224_update_completed_] 
          ;;[RPIPE_DAT0Rx_1224_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1224_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1224_sample_start_ &-> (RPIPE_DAT0Rx_1224_Sample)
          RPIPE_DAT0Rx_1224_sample_completed_ <-& (RPIPE_DAT0Rx_1224_Sample)
          RPIPE_DAT0Rx_1224_update_start_ <-& (RPIPE_DAT0Rx_1224_sample_completed_)
          RPIPE_DAT0Rx_1224_update_start_ &-> (RPIPE_DAT0Rx_1224_Update)
          RPIPE_DAT0Rx_1224_update_completed_ <-& (RPIPE_DAT0Rx_1224_Update)
          // Target expression
          // (as target) bit2
          // start: WAR dependencies for bit2
          // done: WAR dependencies for bit2
          // end:  				bit2 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit1 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 454
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1227_sample_start_] 
          $T[RPIPE_DAT0Rx_1227_sample_completed_] 
          $T[RPIPE_DAT0Rx_1227_update_start_] 
          $T[RPIPE_DAT0Rx_1227_update_completed_] 
          ;;[RPIPE_DAT0Rx_1227_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1227_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1227_sample_start_ &-> (RPIPE_DAT0Rx_1227_Sample)
          RPIPE_DAT0Rx_1227_sample_completed_ <-& (RPIPE_DAT0Rx_1227_Sample)
          RPIPE_DAT0Rx_1227_update_start_ <-& (RPIPE_DAT0Rx_1227_sample_completed_)
          RPIPE_DAT0Rx_1227_update_start_ &-> (RPIPE_DAT0Rx_1227_Update)
          RPIPE_DAT0Rx_1227_update_completed_ <-& (RPIPE_DAT0Rx_1227_Update)
          // Target expression
          // (as target) bit1
          // start: WAR dependencies for bit1
          // done: WAR dependencies for bit1
          // end:  				bit1 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				bit0 := DAT0Rx $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 455
          // Source expression
          // DAT0Rx
          $T[RPIPE_DAT0Rx_1230_sample_start_] 
          $T[RPIPE_DAT0Rx_1230_sample_completed_] 
          $T[RPIPE_DAT0Rx_1230_update_start_] 
          $T[RPIPE_DAT0Rx_1230_update_completed_] 
          ;;[RPIPE_DAT0Rx_1230_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_DAT0Rx_1230_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_DAT0Rx_1230_sample_start_ &-> (RPIPE_DAT0Rx_1230_Sample)
          RPIPE_DAT0Rx_1230_sample_completed_ <-& (RPIPE_DAT0Rx_1230_Sample)
          RPIPE_DAT0Rx_1230_update_start_ <-& (RPIPE_DAT0Rx_1230_sample_completed_)
          RPIPE_DAT0Rx_1230_update_start_ &-> (RPIPE_DAT0Rx_1230_Update)
          RPIPE_DAT0Rx_1230_update_completed_ <-& (RPIPE_DAT0Rx_1230_Update)
          // Target expression
          // (as target) bit0
          // start: WAR dependencies for bit0
          // done: WAR dependencies for bit0
          // end:  				bit0 := DAT0Rx $buffering 1// bits of buffering = 1. 
          // start:  				dataBufferRx := (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) $buffering 1// bits of buffering = 8. 
          //  file .Aa/sdhc.opt.aa, line 456
          // Source expression
          // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
          $T[CONCAT_u4_u8_1247_sample_start_] 
          $T[CONCAT_u4_u8_1247_sample_completed_] 
          $T[CONCAT_u4_u8_1247_update_start_] 
          $T[CONCAT_u4_u8_1247_update_completed_] 
          // ((bit7 && bit6) && (bit5 && bit4))
          // (bit7 && bit6)
          // bit7
          // bit6
          // (bit5 && bit4)
          // bit5
          // bit4
          // ((bit3 && bit2) && (bit1 && bit0))
          // (bit3 && bit2)
          // bit3
          // bit2
          // (bit1 && bit0)
          // bit1
          // bit0
          // start: Forward dependencies from ((bit7 && bit6) && (bit5 && bit4)) to transition CONCAT_u4_u8_1247_sample_start_
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1209_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1212_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1215_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1218_update_completed_)
          // done: Forward dependencies from ((bit7 && bit6) && (bit5 && bit4)) to transition CONCAT_u4_u8_1247_sample_start_
          // start: Forward dependencies from ((bit3 && bit2) && (bit1 && bit0)) to transition CONCAT_u4_u8_1247_sample_start_
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1221_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1224_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1227_update_completed_)
          CONCAT_u4_u8_1247_sample_start_ <-& (RPIPE_DAT0Rx_1230_update_completed_)
          // done: Forward dependencies from ((bit3 && bit2) && (bit1 && bit0)) to transition CONCAT_u4_u8_1247_sample_start_
          ;;[CONCAT_u4_u8_1247_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u4_u8_1247_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u4_u8_1247_sample_start_ &-> (CONCAT_u4_u8_1247_Sample)
          CONCAT_u4_u8_1247_sample_completed_ <-& (CONCAT_u4_u8_1247_Sample)
          CONCAT_u4_u8_1247_sample_completed_ &-> ($null)
          CONCAT_u4_u8_1247_update_start_ &-> (CONCAT_u4_u8_1247_Update)
          CONCAT_u4_u8_1247_update_completed_ <-& (CONCAT_u4_u8_1247_Update)
          // Target expression
          // (as target) dataBufferRx
          $T[WPIPE_dataBufferRx_1232_sample_start_] 
          $T[WPIPE_dataBufferRx_1232_sample_completed_] 
          $T[WPIPE_dataBufferRx_1232_update_start_] 
          $T[WPIPE_dataBufferRx_1232_update_completed_] 
          ;;[WPIPE_dataBufferRx_1232_Sample] 
          {
            // pipe write sample-start dataBufferRx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_dataBufferRx_1232_Update] 
          {
            // pipe write update (complete) dataBufferRx
            $T [req] $T [ack] 
          }
          WPIPE_dataBufferRx_1232_sample_start_ &-> (WPIPE_dataBufferRx_1232_Sample)
          WPIPE_dataBufferRx_1232_sample_completed_ <-& (WPIPE_dataBufferRx_1232_Sample)
          WPIPE_dataBufferRx_1232_update_start_ <-& (WPIPE_dataBufferRx_1232_sample_completed_)
          WPIPE_dataBufferRx_1232_update_start_ &-> (WPIPE_dataBufferRx_1232_Update)
          WPIPE_dataBufferRx_1232_update_completed_ <-& (WPIPE_dataBufferRx_1232_Update)
          // start: Forward dependencies from (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) to transition WPIPE_dataBufferRx_1232_sample_start_
          WPIPE_dataBufferRx_1232_sample_start_ <-& (CONCAT_u4_u8_1247_update_completed_)
          // done: Forward dependencies from (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) to transition WPIPE_dataBufferRx_1232_sample_start_
          // end:  				dataBufferRx := (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) $buffering 1// bits of buffering = 8. 
          // start:  				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))) $buffering 1// bits of buffering = 4096. 
          //  file .Aa/sdhc.opt.aa, line 457
          // Source expression
          // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))))
          $T[OR_u4096_u4096_1272_sample_start_] 
          $T[OR_u4096_u4096_1272_sample_completed_] 
          $T[OR_u4096_u4096_1272_update_start_] 
          $T[OR_u4096_u4096_1272_update_completed_] 
          // (dat << 8 )
          // dat
          // (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))
          // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
          // ((bit7 && bit6) && (bit5 && bit4))
          // (bit7 && bit6)
          // bit7
          // bit6
          // (bit5 && bit4)
          // bit5
          // bit4
          // ((bit3 && bit2) && (bit1 && bit0))
          // (bit3 && bit2)
          // bit3
          // bit2
          // (bit1 && bit0)
          // bit1
          // bit0
          // start: Forward dependencies from (dat << 8 ) to transition OR_u4096_u4096_1272_sample_start_
          // done: Forward dependencies from (dat << 8 ) to transition OR_u4096_u4096_1272_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))) to transition OR_u4096_u4096_1272_sample_start_
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1209_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1212_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1215_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1218_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1221_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1224_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1227_update_completed_)
          OR_u4096_u4096_1272_sample_start_ <-& (RPIPE_DAT0Rx_1230_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))) to transition OR_u4096_u4096_1272_sample_start_
          ;;[OR_u4096_u4096_1272_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u4096_u4096_1272_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u4096_u4096_1272_sample_start_ &-> (OR_u4096_u4096_1272_Sample)
          OR_u4096_u4096_1272_sample_completed_ <-& (OR_u4096_u4096_1272_Sample)
          OR_u4096_u4096_1272_sample_completed_ &-> ($null)
          OR_u4096_u4096_1272_update_start_ &-> (OR_u4096_u4096_1272_Update)
          OR_u4096_u4096_1272_update_completed_ <-& (OR_u4096_u4096_1272_Update)
          // Target expression
          // (as target) next_data
          // start: WAR dependencies for next_data
          // done: WAR dependencies for next_data
          // end:  				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))) $buffering 1// bits of buffering = 4096. 
          // start:  				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
          //  file .Aa/sdhc.opt.aa, line 458
          // Source expression
          // (I + 1 )
          $T[ADD_u10_u10_1277_sample_start_] 
          $T[ADD_u10_u10_1277_sample_completed_] 
          $T[ADD_u10_u10_1277_update_start_] 
          $T[ADD_u10_u10_1277_update_completed_] 
          // I
          // start: Forward dependencies from I to transition ADD_u10_u10_1277_sample_start_
          // done: Forward dependencies from I to transition ADD_u10_u10_1277_sample_start_
          ;;[ADD_u10_u10_1277_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u10_u10_1277_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u10_u10_1277_sample_start_ &-> (ADD_u10_u10_1277_Sample)
          ADD_u10_u10_1277_sample_completed_ <-& (ADD_u10_u10_1277_Sample)
          ADD_u10_u10_1277_sample_completed_ &-> ($null)
          ADD_u10_u10_1277_update_start_ &-> (ADD_u10_u10_1277_Update)
          ADD_u10_u10_1277_update_completed_ <-& (ADD_u10_u10_1277_Update)
          // Target expression
          // (as target) next_I
          // start: WAR dependencies for next_I
          // done: WAR dependencies for next_I
          // end:  				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT0Rx
          // read-dependencies for pipe DAT0Rx
          RPIPE_DAT0Rx_1212_sample_start_ <-& (RPIPE_DAT0Rx_1209_update_completed_)
          RPIPE_DAT0Rx_1215_sample_start_ <-& (RPIPE_DAT0Rx_1212_update_completed_)
          RPIPE_DAT0Rx_1218_sample_start_ <-& (RPIPE_DAT0Rx_1215_update_completed_)
          RPIPE_DAT0Rx_1221_sample_start_ <-& (RPIPE_DAT0Rx_1218_update_completed_)
          RPIPE_DAT0Rx_1224_sample_start_ <-& (RPIPE_DAT0Rx_1221_update_completed_)
          RPIPE_DAT0Rx_1227_sample_start_ <-& (RPIPE_DAT0Rx_1224_update_completed_)
          RPIPE_DAT0Rx_1230_sample_start_ <-& (RPIPE_DAT0Rx_1227_update_completed_)
          // write-dependencies for pipe DAT0Rx
          // signal write dependencies for DAT0Rx
          // pipe read/write dependencies for pipe dataBufferRx
          // read-dependencies for pipe dataBufferRx
          // write-dependencies for pipe dataBufferRx
          // signal write dependencies for dataBufferRx
        }
        assign_stmt_1210_to_assign_stmt_1278__entry__ |-> (assign_stmt_1210_to_assign_stmt_1278)
        assign_stmt_1210_to_assign_stmt_1278__exit__ <-| (assign_stmt_1210_to_assign_stmt_1278)
        // if-statement  
        //  file .Aa/sdhc.opt.aa, line 0
        ;;[if_stmt_1279_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        if_stmt_1279__entry__ |-> (if_stmt_1279_dead_link)
        if_stmt_1279__exit__ <-| (if_stmt_1279_dead_link)
        ;;[if_stmt_1279_eval_test] 
        {
          // test expression evaluate and trigger branch 
          // (next_I < 512 )
          ;;[ULT_u10_u1_1282] 
          {
            // binary expression 
            ||[ULT_u10_u1_1282_inputs] 
            {
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          $T [branch_req] 
        }
        if_stmt_1279__entry__ |-> (if_stmt_1279_eval_test)
        $P [ULT_u10_u1_1282_place]
        ULT_u10_u1_1282_place <-| (if_stmt_1279_eval_test)
        ;;[if_stmt_1279_if_link] 
        {
          $T [if_choice_transition] 
        }
        ;;[if_stmt_1279_else_link] 
        {
          $T [else_choice_transition] 
        }
        ULT_u10_u1_1282_place |-> (if_stmt_1279_if_link if_stmt_1279_else_link)
        $P [loopback1]
        loopback1 <-| (if_stmt_1279_if_link)
        if_stmt_1279__exit__ <-| (if_stmt_1279_else_link)
        // control-path for merge  
        //  file .Aa/sdhc.opt.aa, line 442
        ;;[merge_stmt_1195_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        merge_stmt_1195__entry__ |-> (merge_stmt_1195_dead_link)
        merge_stmt_1195__exit__ <-| (merge_stmt_1195_dead_link)
        //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 442  --------------------------
        ||[merge_stmt_1195__entry___PhiReq] 
        {
          ;;[phi_stmt_1196] 
          {
            ||[phi_stmt_1196_sources] 
            {
              // sources for 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
              // type of target is $uint<10>
              // constant source .... delay transition 
              $T [type_cast_1199_konst_delay_trans] $delay
            }
            $T [phi_stmt_1196_req] 
          }
          ;;[phi_stmt_1201] 
          {
            ||[phi_stmt_1201_sources] 
            {
              // sources for 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
              // type of target is $uint<4096>
              // constant source .... delay transition 
              $T [type_cast_1205_konst_delay_trans] $delay
            }
            $T [phi_stmt_1201_req] 
          }
        }
        merge_stmt_1195__entry__ |-> (merge_stmt_1195__entry___PhiReq)
        ||[loopback1_PhiReq] 
        {
          ;;[phi_stmt_1196] 
          {
            ||[phi_stmt_1196_sources] 
            {
              // sources for 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
              // type of target is $uint<10>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_1196_req] 
          }
          ;;[phi_stmt_1201] 
          {
            ||[phi_stmt_1201_sources] 
            {
              // sources for 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
              // type of target is $uint<4096>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_1201_req] 
          }
        }
        loopback1 |-> (loopback1_PhiReq)
        $P [merge_stmt_1195_PhiReqMerge] 
        merge_stmt_1195_PhiReqMerge <-| ( merge_stmt_1195__entry___PhiReq  loopback1_PhiReq )
        ||[merge_stmt_1195_PhiAck] 
        {
          $T [phi_stmt_1196_ack] 
          $T [phi_stmt_1201_ack] 
        }
        merge_stmt_1195_PhiReqMerge |-> (merge_stmt_1195_PhiAck)
        merge_stmt_1195__exit__  <-| (merge_stmt_1195_PhiAck)
        //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 442  --------------------------
        merge_stmt_1195__entry__ <-| (branch_block_stmt_1194__entry__)
        assign_stmt_1210_to_assign_stmt_1278__entry__ <-| (merge_stmt_1195__exit__)
        if_stmt_1279__entry__ <-| (assign_stmt_1210_to_assign_stmt_1278__exit__)
        if_stmt_1279__exit__ |-> (branch_block_stmt_1194__exit__)
      }
      branch_block_stmt_1194__entry__ |-> (branch_block_stmt_1194)
      branch_block_stmt_1194__exit__ <-| (branch_block_stmt_1194)
      ::[assign_stmt_1289] 
      {
        // start:  			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 464
        // Target expression
        // (as target) rxBufferPointer
        $T[STORE_rxBufferPointer_1286_sample_start_] 
        $T[STORE_rxBufferPointer_1286_sample_completed_] 
        $T[STORE_rxBufferPointer_1286_update_start_] 
        $T[STORE_rxBufferPointer_1286_update_completed_] 
        // rxBufferPointer
        $T[STORE_rxBufferPointer_1286_word_address_calculated] 
        $T[STORE_rxBufferPointer_1286_root_address_calculated] 
        STORE_rxBufferPointer_1286_word_address_calculated <-& (STORE_rxBufferPointer_1286_root_address_calculated)
        ;;[STORE_rxBufferPointer_1286_Sample] 
        {
          ;;[STORE_rxBufferPointer_1286_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_rxBufferPointer_1286_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_rxBufferPointer_1286_sample_start_ <-& (STORE_rxBufferPointer_1286_word_address_calculated)
        STORE_rxBufferPointer_1286_sample_start_ &-> (STORE_rxBufferPointer_1286_Sample)
        STORE_rxBufferPointer_1286_sample_completed_ <-& (STORE_rxBufferPointer_1286_Sample)
        STORE_rxBufferPointer_1286_sample_completed_ &-> ($null)
        STORE_rxBufferPointer_1286_update_start_ &-> (STORE_rxBufferPointer_1286_Update)
        STORE_rxBufferPointer_1286_update_completed_ <-& (STORE_rxBufferPointer_1286_Update)
        // end:  			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
        // load-store dependencies..
        // memory-space  memory_space_7
        //  STORE_rxBufferPointer_1286 store
      }
      assign_stmt_1289__entry__ |-> (assign_stmt_1289)
      assign_stmt_1289__exit__ <-| (assign_stmt_1289)
      ::[assign_stmt_1313_to_assign_stmt_1318] 
      {
        // start:  			nextCRC := ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 471
        // Source expression
        // ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx))
        $T[OR_u16_u16_1312_sample_start_] 
        $T[OR_u16_u16_1312_sample_completed_] 
        $T[OR_u16_u16_1312_update_start_] 
        $T[OR_u16_u16_1312_update_completed_] 
        // (currentCRC << 1 )
        // currentCRC
        // (($bitcast ($uint<15>) 0  ) && DAT0Rx)
        // DAT0Rx
        $T[RPIPE_DAT0Rx_1310_sample_start_] 
        $T[RPIPE_DAT0Rx_1310_sample_completed_] 
        $T[RPIPE_DAT0Rx_1310_update_start_] 
        $T[RPIPE_DAT0Rx_1310_update_completed_] 
        ;;[RPIPE_DAT0Rx_1310_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_DAT0Rx_1310_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_DAT0Rx_1310_sample_start_ &-> (RPIPE_DAT0Rx_1310_Sample)
        RPIPE_DAT0Rx_1310_sample_completed_ <-& (RPIPE_DAT0Rx_1310_Sample)
        RPIPE_DAT0Rx_1310_update_start_ <-& (RPIPE_DAT0Rx_1310_sample_completed_)
        RPIPE_DAT0Rx_1310_update_start_ &-> (RPIPE_DAT0Rx_1310_Update)
        RPIPE_DAT0Rx_1310_update_completed_ <-& (RPIPE_DAT0Rx_1310_Update)
        // start: Forward dependencies from (currentCRC << 1 ) to transition OR_u16_u16_1312_sample_start_
        // done: Forward dependencies from (currentCRC << 1 ) to transition OR_u16_u16_1312_sample_start_
        // start: Forward dependencies from (($bitcast ($uint<15>) 0  ) && DAT0Rx) to transition OR_u16_u16_1312_sample_start_
        OR_u16_u16_1312_sample_start_ <-& (RPIPE_DAT0Rx_1310_update_completed_)
        // done: Forward dependencies from (($bitcast ($uint<15>) 0  ) && DAT0Rx) to transition OR_u16_u16_1312_sample_start_
        ;;[OR_u16_u16_1312_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u16_u16_1312_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u16_u16_1312_sample_start_ &-> (OR_u16_u16_1312_Sample)
        OR_u16_u16_1312_sample_completed_ <-& (OR_u16_u16_1312_Sample)
        OR_u16_u16_1312_sample_completed_ &-> ($null)
        OR_u16_u16_1312_update_start_ &-> (OR_u16_u16_1312_Update)
        OR_u16_u16_1312_update_completed_ <-& (OR_u16_u16_1312_Update)
        // Target expression
        // (as target) nextCRC
        // start: WAR dependencies for nextCRC
        // done: WAR dependencies for nextCRC
        // end:  			nextCRC := ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 16. 
        // start:  			next_K := (K + 1 ) $buffering 1// bits of buffering = 5. 
        //  file .Aa/sdhc.opt.aa, line 472
        // Source expression
        // (K + 1 )
        $T[ADD_u5_u5_1317_sample_start_] 
        $T[ADD_u5_u5_1317_sample_completed_] 
        $T[ADD_u5_u5_1317_update_start_] 
        $T[ADD_u5_u5_1317_update_completed_] 
        // K
        // start: Forward dependencies from K to transition ADD_u5_u5_1317_sample_start_
        // done: Forward dependencies from K to transition ADD_u5_u5_1317_sample_start_
        ;;[ADD_u5_u5_1317_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u5_u5_1317_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u5_u5_1317_sample_start_ &-> (ADD_u5_u5_1317_Sample)
        ADD_u5_u5_1317_sample_completed_ <-& (ADD_u5_u5_1317_Sample)
        ADD_u5_u5_1317_sample_completed_ &-> ($null)
        ADD_u5_u5_1317_update_start_ &-> (ADD_u5_u5_1317_Update)
        ADD_u5_u5_1317_update_completed_ <-& (ADD_u5_u5_1317_Update)
        // Target expression
        // (as target) next_K
        // start: WAR dependencies for next_K
        // done: WAR dependencies for next_K
        // end:  			next_K := (K + 1 ) $buffering 1// bits of buffering = 5. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
      }
      assign_stmt_1313_to_assign_stmt_1318__entry__ |-> (assign_stmt_1313_to_assign_stmt_1318)
      assign_stmt_1313_to_assign_stmt_1318__exit__ <-| (assign_stmt_1313_to_assign_stmt_1318)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1349233824
      ;;[if_stmt_1319_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1319__entry__ |-> (if_stmt_1319_dead_link)
      if_stmt_1319__exit__ <-| (if_stmt_1319_dead_link)
      ;;[if_stmt_1319_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_K < 16 )
        ;;[ULT_u5_u1_1322] 
        {
          // binary expression 
          ||[ULT_u5_u1_1322_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1319__entry__ |-> (if_stmt_1319_eval_test)
      $P [ULT_u5_u1_1322_place]
      ULT_u5_u1_1322_place <-| (if_stmt_1319_eval_test)
      ;;[if_stmt_1319_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1319_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u5_u1_1322_place |-> (if_stmt_1319_if_link if_stmt_1319_else_link)
      $P [crcloopback]
      crcloopback <-| (if_stmt_1319_if_link)
      if_stmt_1319__exit__ <-| (if_stmt_1319_else_link)
      ::[assign_stmt_1327] 
      {
        // start:  			stopBit := DAT0Rx $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 476
        // Source expression
        // DAT0Rx
        $T[RPIPE_DAT0Rx_1326_sample_start_] 
        $T[RPIPE_DAT0Rx_1326_sample_completed_] 
        $T[RPIPE_DAT0Rx_1326_update_start_] 
        $T[RPIPE_DAT0Rx_1326_update_completed_] 
        ;;[RPIPE_DAT0Rx_1326_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_DAT0Rx_1326_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_DAT0Rx_1326_sample_start_ &-> (RPIPE_DAT0Rx_1326_Sample)
        RPIPE_DAT0Rx_1326_sample_completed_ <-& (RPIPE_DAT0Rx_1326_Sample)
        RPIPE_DAT0Rx_1326_update_start_ <-& (RPIPE_DAT0Rx_1326_sample_completed_)
        RPIPE_DAT0Rx_1326_update_start_ &-> (RPIPE_DAT0Rx_1326_Update)
        RPIPE_DAT0Rx_1326_update_completed_ <-& (RPIPE_DAT0Rx_1326_Update)
        // Target expression
        // (as target) stopBit
        // start: WAR dependencies for stopBit
        // done: WAR dependencies for stopBit
        // end:  			stopBit := DAT0Rx $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
      }
      assign_stmt_1327__entry__ |-> (assign_stmt_1327)
      assign_stmt_1327__exit__ <-| (assign_stmt_1327)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1349233824
      ;;[if_stmt_1328_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1328__entry__ |-> (if_stmt_1328_dead_link)
      if_stmt_1328__exit__ <-| (if_stmt_1328_dead_link)
      ;;[if_stmt_1328_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (singleMultipleReadBlock == 0 )
        ;;[EQ_u1_u1_1331] 
        {
          // binary expression 
          ||[EQ_u1_u1_1331_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1328__entry__ |-> (if_stmt_1328_eval_test)
      $P [EQ_u1_u1_1331_place]
      EQ_u1_u1_1331_place <-| (if_stmt_1328_eval_test)
      ;;[if_stmt_1328_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1328_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1331_place |-> (if_stmt_1328_if_link if_stmt_1328_else_link)
      $P [assign_stmt_1337__entry__] 
      $P [assign_stmt_1337__exit__] 
      ::[assign_stmt_1337] 
      {
        // start:  			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 478
        // Source expression
        // (presentState0Var & _hfb )
        $T[AND_u8_u8_1336_sample_start_] 
        $T[AND_u8_u8_1336_sample_completed_] 
        $T[AND_u8_u8_1336_update_start_] 
        $T[AND_u8_u8_1336_update_completed_] 
        // presentState0Var
        // start: Forward dependencies from presentState0Var to transition AND_u8_u8_1336_sample_start_
        // done: Forward dependencies from presentState0Var to transition AND_u8_u8_1336_sample_start_
        ;;[AND_u8_u8_1336_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_1336_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_1336_sample_start_ &-> (AND_u8_u8_1336_Sample)
        AND_u8_u8_1336_sample_completed_ <-& (AND_u8_u8_1336_Sample)
        AND_u8_u8_1336_sample_completed_ &-> ($null)
        AND_u8_u8_1336_update_start_ &-> (AND_u8_u8_1336_Update)
        AND_u8_u8_1336_update_completed_ <-& (AND_u8_u8_1336_Update)
        // Target expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_1333_sample_start_] 
        $T[array_obj_ref_1333_sample_completed_] 
        $T[array_obj_ref_1333_update_start_] 
        $T[array_obj_ref_1333_update_completed_] 
        $T[array_obj_ref_1333_word_address_calculated] 
        $T[array_obj_ref_1333_root_address_calculated] 
        array_obj_ref_1333_word_address_calculated <-& (array_obj_ref_1333_root_address_calculated)
        ;;[array_obj_ref_1333_Sample] 
        {
          ;;[array_obj_ref_1333_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_1333_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_1333_sample_start_ <-& (array_obj_ref_1333_word_address_calculated)
        array_obj_ref_1333_sample_start_ &-> (array_obj_ref_1333_Sample)
        array_obj_ref_1333_sample_completed_ <-& (array_obj_ref_1333_Sample)
        array_obj_ref_1333_sample_completed_ &-> ($null)
        array_obj_ref_1333_update_start_ &-> (array_obj_ref_1333_Update)
        array_obj_ref_1333_update_completed_ <-& (array_obj_ref_1333_Update)
        // start: Forward dependencies from (presentState0Var & _hfb ) to transition array_obj_ref_1333_sample_start_
        array_obj_ref_1333_sample_start_ <-& (AND_u8_u8_1336_update_completed_)
        // done: Forward dependencies from (presentState0Var & _hfb ) to transition array_obj_ref_1333_sample_start_
        // end:  			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_1333 store
      }
      assign_stmt_1337__entry__ |-> (assign_stmt_1337)
      assign_stmt_1337__exit__ <-| (assign_stmt_1337)
      assign_stmt_1337__entry__ <-| (if_stmt_1328_if_link)
      assign_stmt_1337__exit__ |-> (if_stmt_1328__exit__)
      if_stmt_1328__exit__ <-| (if_stmt_1328_else_link)
      ::[assign_stmt_1343] 
      {
        // start:  			stopBitError := (stopBit == 0 ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 480
        // Source expression
        // (stopBit == 0 )
        $T[EQ_u1_u1_1342_sample_start_] 
        $T[EQ_u1_u1_1342_sample_completed_] 
        $T[EQ_u1_u1_1342_update_start_] 
        $T[EQ_u1_u1_1342_update_completed_] 
        // stopBit
        // start: Forward dependencies from stopBit to transition EQ_u1_u1_1342_sample_start_
        // done: Forward dependencies from stopBit to transition EQ_u1_u1_1342_sample_start_
        ;;[EQ_u1_u1_1342_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u1_u1_1342_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u1_u1_1342_sample_start_ &-> (EQ_u1_u1_1342_Sample)
        EQ_u1_u1_1342_sample_completed_ <-& (EQ_u1_u1_1342_Sample)
        EQ_u1_u1_1342_sample_completed_ &-> ($null)
        EQ_u1_u1_1342_update_start_ &-> (EQ_u1_u1_1342_Update)
        EQ_u1_u1_1342_update_completed_ <-& (EQ_u1_u1_1342_Update)
        // Target expression
        // (as target) stopBitError
        // start: WAR dependencies for stopBitError
        // done: WAR dependencies for stopBitError
        // end:  			stopBitError := (stopBit == 0 ) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
      }
      assign_stmt_1343__entry__ |-> (assign_stmt_1343)
      assign_stmt_1343__exit__ <-| (assign_stmt_1343)
      ::[assign_stmt_1368_to_assign_stmt_1402] 
      {
        // start:  			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 489
        // Source expression
        // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
        $T[XOR_u1_u1_1367_sample_start_] 
        $T[XOR_u1_u1_1367_sample_completed_] 
        $T[XOR_u1_u1_1367_update_start_] 
        $T[XOR_u1_u1_1367_update_completed_] 
        // (tempData [] 4095 )
        // tempData
        // (CRC_16 [] 15 )
        // CRC_16
        // start: Forward dependencies from (tempData [] 4095 ) to transition XOR_u1_u1_1367_sample_start_
        // done: Forward dependencies from (tempData [] 4095 ) to transition XOR_u1_u1_1367_sample_start_
        // start: Forward dependencies from (CRC_16 [] 15 ) to transition XOR_u1_u1_1367_sample_start_
        // done: Forward dependencies from (CRC_16 [] 15 ) to transition XOR_u1_u1_1367_sample_start_
        ;;[XOR_u1_u1_1367_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[XOR_u1_u1_1367_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        XOR_u1_u1_1367_sample_start_ &-> (XOR_u1_u1_1367_Sample)
        XOR_u1_u1_1367_sample_completed_ <-& (XOR_u1_u1_1367_Sample)
        XOR_u1_u1_1367_sample_completed_ &-> ($null)
        XOR_u1_u1_1367_update_start_ &-> (XOR_u1_u1_1367_Update)
        XOR_u1_u1_1367_update_completed_ <-& (XOR_u1_u1_1367_Update)
        // Target expression
        // (as target) inv
        // start: WAR dependencies for inv
        // done: WAR dependencies for inv
        // end:  			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
        // start:  			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 490
        // Source expression
        // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
        $T[CONCAT_u10_u16_1391_sample_start_] 
        $T[CONCAT_u10_u16_1391_sample_completed_] 
        $T[CONCAT_u10_u16_1391_update_start_] 
        $T[CONCAT_u10_u16_1391_update_completed_] 
        // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
        // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
        // ( $slice CRC_16 14 12 ) 
        // CRC_16
        // ((CRC_16 [] 11 ) ^ inv)
        // (CRC_16 [] 11 )
        // CRC_16
        // inv
        // ( $slice CRC_16 10 5 ) 
        // CRC_16
        // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
        // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
        // ((CRC_16 [] 4 ) ^ inv)
        // (CRC_16 [] 4 )
        // CRC_16
        // inv
        // ( $slice CRC_16 3 0 ) 
        // CRC_16
        // inv
        // start: Forward dependencies from ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) to transition CONCAT_u10_u16_1391_sample_start_
        CONCAT_u10_u16_1391_sample_start_ <-& (XOR_u1_u1_1367_update_completed_)
        // done: Forward dependencies from ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) to transition CONCAT_u10_u16_1391_sample_start_
        // start: Forward dependencies from ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv) to transition CONCAT_u10_u16_1391_sample_start_
        CONCAT_u10_u16_1391_sample_start_ <-& (XOR_u1_u1_1367_update_completed_)
        // done: Forward dependencies from ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv) to transition CONCAT_u10_u16_1391_sample_start_
        ;;[CONCAT_u10_u16_1391_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u10_u16_1391_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u10_u16_1391_sample_start_ &-> (CONCAT_u10_u16_1391_Sample)
        CONCAT_u10_u16_1391_sample_completed_ <-& (CONCAT_u10_u16_1391_Sample)
        CONCAT_u10_u16_1391_sample_completed_ &-> ($null)
        CONCAT_u10_u16_1391_update_start_ &-> (CONCAT_u10_u16_1391_Update)
        CONCAT_u10_u16_1391_update_completed_ <-& (CONCAT_u10_u16_1391_Update)
        // Target expression
        // (as target) nextCRC16
        // start: WAR dependencies for nextCRC16
        // done: WAR dependencies for nextCRC16
        // end:  			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
        // start:  			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
        //  file .Aa/sdhc.opt.aa, line 491
        // Source expression
        // (tempData << 1 )
        $T[SHL_u4096_u4096_1396_sample_start_] 
        $T[SHL_u4096_u4096_1396_sample_completed_] 
        $T[SHL_u4096_u4096_1396_update_start_] 
        $T[SHL_u4096_u4096_1396_update_completed_] 
        // tempData
        // start: Forward dependencies from tempData to transition SHL_u4096_u4096_1396_sample_start_
        // done: Forward dependencies from tempData to transition SHL_u4096_u4096_1396_sample_start_
        ;;[SHL_u4096_u4096_1396_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u4096_u4096_1396_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u4096_u4096_1396_sample_start_ &-> (SHL_u4096_u4096_1396_Sample)
        SHL_u4096_u4096_1396_sample_completed_ <-& (SHL_u4096_u4096_1396_Sample)
        SHL_u4096_u4096_1396_sample_completed_ &-> ($null)
        SHL_u4096_u4096_1396_update_start_ &-> (SHL_u4096_u4096_1396_Update)
        SHL_u4096_u4096_1396_update_completed_ <-& (SHL_u4096_u4096_1396_Update)
        // Target expression
        // (as target) nextTempData
        // start: WAR dependencies for nextTempData
        // done: WAR dependencies for nextTempData
        // end:  			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
        // start: WAR dependencies for next_J
        // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
        // type of target is $uint<13>
        // done: WAR dependencies for next_J
        // start:  			$volatile next_J := (J + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 492
        // volatile! 
        // Source expression
        // (J + 1 )
        // J
        // Target expression
        // (as target) next_J
        // start: WAR dependencies for next_J
        // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
        // type of target is $uint<13>
        // done: WAR dependencies for next_J
        // end:  			$volatile next_J := (J + 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_1368_to_assign_stmt_1402__entry__ |-> (assign_stmt_1368_to_assign_stmt_1402)
      assign_stmt_1368_to_assign_stmt_1402__exit__ <-| (assign_stmt_1368_to_assign_stmt_1402)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1403_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1403__entry__ |-> (if_stmt_1403_dead_link)
      if_stmt_1403__exit__ <-| (if_stmt_1403_dead_link)
      ;;[if_stmt_1403_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_J < 4096 )
        ;;[ULT_u13_u1_1406] 
        {
          // binary expression 
          ||[ULT_u13_u1_1406_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1403__entry__ |-> (if_stmt_1403_eval_test)
      $P [ULT_u13_u1_1406_place]
      ULT_u13_u1_1406_place <-| (if_stmt_1403_eval_test)
      ;;[if_stmt_1403_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1403_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u13_u1_1406_place |-> (if_stmt_1403_if_link if_stmt_1403_else_link)
      $P [loopback]
      loopback <-| (if_stmt_1403_if_link)
      if_stmt_1403__exit__ <-| (if_stmt_1403_else_link)
      ::[assign_stmt_1413_to_assign_stmt_1426] 
      {
        // start:  			crcError := (nextCRC != nextCRC16) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 496
        // Source expression
        // (nextCRC != nextCRC16)
        $T[NEQ_u16_u1_1412_sample_start_] 
        $T[NEQ_u16_u1_1412_sample_completed_] 
        $T[NEQ_u16_u1_1412_update_start_] 
        $T[NEQ_u16_u1_1412_update_completed_] 
        // nextCRC
        // nextCRC16
        // start: Forward dependencies from nextCRC to transition NEQ_u16_u1_1412_sample_start_
        // done: Forward dependencies from nextCRC to transition NEQ_u16_u1_1412_sample_start_
        // start: Forward dependencies from nextCRC16 to transition NEQ_u16_u1_1412_sample_start_
        // done: Forward dependencies from nextCRC16 to transition NEQ_u16_u1_1412_sample_start_
        ;;[NEQ_u16_u1_1412_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[NEQ_u16_u1_1412_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        NEQ_u16_u1_1412_sample_start_ &-> (NEQ_u16_u1_1412_Sample)
        NEQ_u16_u1_1412_sample_completed_ <-& (NEQ_u16_u1_1412_Sample)
        NEQ_u16_u1_1412_sample_completed_ &-> ($null)
        NEQ_u16_u1_1412_update_start_ &-> (NEQ_u16_u1_1412_Update)
        NEQ_u16_u1_1412_update_completed_ <-& (NEQ_u16_u1_1412_Update)
        // Target expression
        // (as target) crcError
        // start: WAR dependencies for crcError
        // done: WAR dependencies for crcError
        // end:  			crcError := (nextCRC != nextCRC16) $buffering 1// bits of buffering = 1. 
        // start:  			dataErrorInterruptStatusVar1_0 := (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 497
        // Source expression
        // (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2))
        $T[CONCAT_u3_u8_1425_sample_start_] 
        $T[CONCAT_u3_u8_1425_sample_completed_] 
        $T[CONCAT_u3_u8_1425_update_start_] 
        $T[CONCAT_u3_u8_1425_update_completed_] 
        // ((ZERO_1 && stopBitError) && crcError)
        // (ZERO_1 && stopBitError)
        // stopBitError
        // crcError
        // start: Forward dependencies from ((ZERO_1 && stopBitError) && crcError) to transition CONCAT_u3_u8_1425_sample_start_
        CONCAT_u3_u8_1425_sample_start_ <-& (NEQ_u16_u1_1412_update_completed_)
        // done: Forward dependencies from ((ZERO_1 && stopBitError) && crcError) to transition CONCAT_u3_u8_1425_sample_start_
        ;;[CONCAT_u3_u8_1425_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u3_u8_1425_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u3_u8_1425_sample_start_ &-> (CONCAT_u3_u8_1425_Sample)
        CONCAT_u3_u8_1425_sample_completed_ <-& (CONCAT_u3_u8_1425_Sample)
        CONCAT_u3_u8_1425_sample_completed_ &-> ($null)
        CONCAT_u3_u8_1425_update_start_ &-> (CONCAT_u3_u8_1425_Update)
        CONCAT_u3_u8_1425_update_completed_ <-& (CONCAT_u3_u8_1425_Update)
        // Target expression
        // (as target) dataErrorInterruptStatusVar1_0
        // start: WAR dependencies for dataErrorInterruptStatusVar1_0
        // done: WAR dependencies for dataErrorInterruptStatusVar1_0
        // end:  			dataErrorInterruptStatusVar1_0 := (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_1413_to_assign_stmt_1426__entry__ |-> (assign_stmt_1413_to_assign_stmt_1426)
      assign_stmt_1413_to_assign_stmt_1426__exit__ <-| (assign_stmt_1413_to_assign_stmt_1426)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 465
      ;;[merge_stmt_1290_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1290__entry__ |-> (merge_stmt_1290_dead_link)
      merge_stmt_1290__exit__ <-| (merge_stmt_1290_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 465  --------------------------
      ||[merge_stmt_1290__entry___PhiReq] 
      {
        ;;[phi_stmt_1291] 
        {
          ||[phi_stmt_1291_sources] 
          {
            // sources for 				$phi K := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_K $on   crcloopback 
            // type of target is $uint<5>
            // constant source .... delay transition 
            $T [type_cast_1295_konst_delay_trans] $delay
          }
          $T [phi_stmt_1291_req] 
        }
        ;;[phi_stmt_1297] 
        {
          ||[phi_stmt_1297_sources] 
          {
            // sources for 				$phi currentCRC := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC $on   crcloopback 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_1300_konst_delay_trans] $delay
          }
          $T [phi_stmt_1297_req] 
        }
      }
      merge_stmt_1290__entry__ |-> (merge_stmt_1290__entry___PhiReq)
      ||[crcloopback_PhiReq] 
      {
        ;;[phi_stmt_1291] 
        {
          ||[phi_stmt_1291_sources] 
          {
            // sources for 				$phi K := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_K $on   crcloopback 
            // type of target is $uint<5>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1291_req] 
        }
        ;;[phi_stmt_1297] 
        {
          ||[phi_stmt_1297_sources] 
          {
            // sources for 				$phi currentCRC := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC $on   crcloopback 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1297_req] 
        }
      }
      crcloopback |-> (crcloopback_PhiReq)
      $P [merge_stmt_1290_PhiReqMerge] 
      merge_stmt_1290_PhiReqMerge <-| ( merge_stmt_1290__entry___PhiReq  crcloopback_PhiReq )
      ||[merge_stmt_1290_PhiAck] 
      {
        $T [phi_stmt_1291_ack] 
        $T [phi_stmt_1297_ack] 
      }
      merge_stmt_1290_PhiReqMerge |-> (merge_stmt_1290_PhiAck)
      merge_stmt_1290__exit__  <-| (merge_stmt_1290_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 465  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 481
      ;;[merge_stmt_1344_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1344__entry__ |-> (merge_stmt_1344_dead_link)
      merge_stmt_1344__exit__ <-| (merge_stmt_1344_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 481  --------------------------
      ||[merge_stmt_1344__entry___PhiReq] 
      {
        ;;[phi_stmt_1345] 
        {
          ||[phi_stmt_1345_sources] 
          {
            // sources for 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
            // type of target is $uint<13>
            // constant source .... delay transition 
            $T [type_cast_1348_konst_delay_trans] $delay
          }
          $T [phi_stmt_1345_req] 
        }
        ;;[phi_stmt_1350] 
        {
          ||[phi_stmt_1350_sources] 
          {
            // sources for 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_1353_konst_delay_trans] $delay
          }
          $T [phi_stmt_1350_req] 
        }
        ;;[phi_stmt_1355] 
        {
          ||[phi_stmt_1355_sources] 
          {
            // sources for 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1355_req] 
        }
      }
      merge_stmt_1344__entry__ |-> (merge_stmt_1344__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_1345] 
        {
          ||[phi_stmt_1345_sources] 
          {
            // sources for 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
            // type of target is $uint<13>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1345_req] 
        }
        ;;[phi_stmt_1350] 
        {
          ||[phi_stmt_1350_sources] 
          {
            // sources for 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1350_req] 
        }
        ;;[phi_stmt_1355] 
        {
          ||[phi_stmt_1355_sources] 
          {
            // sources for 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1355_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_1344_PhiReqMerge] 
      merge_stmt_1344_PhiReqMerge <-| ( merge_stmt_1344__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_1344_PhiAck] 
      {
        $T [phi_stmt_1345_ack] 
        $T [phi_stmt_1350_ack] 
        $T [phi_stmt_1355_ack] 
      }
      merge_stmt_1344_PhiReqMerge |-> (merge_stmt_1344_PhiAck)
      merge_stmt_1344__exit__  <-| (merge_stmt_1344_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 481  --------------------------
      assign_stmt_1193__entry__ <-| (if_stmt_736_else_link)
      branch_block_stmt_1194__entry__ <-| (assign_stmt_1193__exit__)
      assign_stmt_1289__entry__ <-| (branch_block_stmt_1194__exit__)
      merge_stmt_1290__entry__ <-| (assign_stmt_1289__exit__)
      assign_stmt_1313_to_assign_stmt_1318__entry__ <-| (merge_stmt_1290__exit__)
      if_stmt_1319__entry__ <-| (assign_stmt_1313_to_assign_stmt_1318__exit__)
      assign_stmt_1327__entry__ <-| (if_stmt_1319__exit__)
      if_stmt_1328__entry__ <-| (assign_stmt_1327__exit__)
      assign_stmt_1343__entry__ <-| (if_stmt_1328__exit__)
      merge_stmt_1344__entry__ <-| (assign_stmt_1343__exit__)
      assign_stmt_1368_to_assign_stmt_1402__entry__ <-| (merge_stmt_1344__exit__)
      if_stmt_1403__entry__ <-| (assign_stmt_1368_to_assign_stmt_1402__exit__)
      assign_stmt_1413_to_assign_stmt_1426__entry__ <-| (if_stmt_1403__exit__)
      assign_stmt_1413_to_assign_stmt_1426__exit__ |-> (if_stmt_736__exit__)
      ::[assign_stmt_1436] 
      {
        // start:  		dataErrorInterruptStatusVar1 := ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 499
        // Source expression
        // ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 ) 
        $T[MUX_1435_sample_start_] 
        $T[MUX_1435_sample_completed_] 
        $T[MUX_1435_update_start_] 
        $T[MUX_1435_update_completed_] 
        // (sdhcRegisters[40 ] [] 1 )
        // sdhcRegisters[40 ]
        $T[array_obj_ref_1430_base_address_calculated] 
        $T[array_obj_ref_1430_sample_start_] 
        $T[array_obj_ref_1430_sample_completed_] 
        $T[array_obj_ref_1430_update_start_] 
        $T[array_obj_ref_1430_update_completed_] 
        $T[array_obj_ref_1430_word_address_calculated] 
        $T[array_obj_ref_1430_root_address_calculated] 
        array_obj_ref_1430_word_address_calculated <-& (array_obj_ref_1430_root_address_calculated)
        ;;[array_obj_ref_1430_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_1430_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_1430_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_1430_sample_start_ <-& (array_obj_ref_1430_word_address_calculated)
        array_obj_ref_1430_sample_start_ &-> (array_obj_ref_1430_Sample)
        array_obj_ref_1430_sample_completed_ <-& (array_obj_ref_1430_Sample)
        array_obj_ref_1430_sample_completed_ &-> ($null)
        array_obj_ref_1430_update_start_ &-> (array_obj_ref_1430_Update)
        array_obj_ref_1430_update_completed_ <-& (array_obj_ref_1430_Update)
        // dataErrorInterruptStatusVar1_4
        // dataErrorInterruptStatusVar1_0
        // start: Forward dependencies from (sdhcRegisters[40 ] [] 1 ) to transition MUX_1435_sample_start_
        MUX_1435_sample_start_ <-& (array_obj_ref_1430_update_completed_)
        // done: Forward dependencies from (sdhcRegisters[40 ] [] 1 ) to transition MUX_1435_sample_start_
        // start: Forward dependencies from dataErrorInterruptStatusVar1_4 to transition MUX_1435_sample_start_
        // done: Forward dependencies from dataErrorInterruptStatusVar1_4 to transition MUX_1435_sample_start_
        // start: Forward dependencies from dataErrorInterruptStatusVar1_0 to transition MUX_1435_sample_start_
        // done: Forward dependencies from dataErrorInterruptStatusVar1_0 to transition MUX_1435_sample_start_
        ;;[MUX_1435_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1435_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1435_sample_start_ &-> (MUX_1435_start)
        MUX_1435_sample_completed_ <-& (MUX_1435_start)
        MUX_1435_sample_completed_ &-> ($null)
        MUX_1435_update_start_ &-> (MUX_1435_complete)
        MUX_1435_update_completed_ <-& (MUX_1435_complete)
        // Target expression
        // (as target) dataErrorInterruptStatusVar1
        // dataErrorInterruptStatusVar1
        // write to interface object
        // start: WAR dependencies for dataErrorInterruptStatusVar1
        // done: WAR dependencies for dataErrorInterruptStatusVar1
        // dataErrorInterruptStatusVar1
        // write to interface object
        // end:  		dataErrorInterruptStatusVar1 := ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_1430 load
      }
      assign_stmt_1436__entry__ |-> (assign_stmt_1436)
      assign_stmt_1436__exit__ <-| (assign_stmt_1436)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1437_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1437__entry__ |-> (if_stmt_1437_dead_link)
      if_stmt_1437__exit__ <-| (if_stmt_1437_dead_link)
      ;;[if_stmt_1437_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (singleMultipleReadBlock == 0 )
        ;;[EQ_u1_u1_1440] 
        {
          // binary expression 
          ||[EQ_u1_u1_1440_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1437__entry__ |-> (if_stmt_1437_eval_test)
      $P [EQ_u1_u1_1440_place]
      EQ_u1_u1_1440_place <-| (if_stmt_1437_eval_test)
      ;;[if_stmt_1437_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1437_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1440_place |-> (if_stmt_1437_if_link if_stmt_1437_else_link)
      $P [assign_stmt_1446_to_assign_stmt_1452__entry__] 
      $P [assign_stmt_1446_to_assign_stmt_1452__exit__] 
      ::[assign_stmt_1446_to_assign_stmt_1452] 
      {
        // start:  			sdhcRegisters[37 ] := (presentState1Var & _hfd ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 501
        // Source expression
        // (presentState1Var & _hfd )
        $T[AND_u8_u8_1445_sample_start_] 
        $T[AND_u8_u8_1445_sample_completed_] 
        $T[AND_u8_u8_1445_update_start_] 
        $T[AND_u8_u8_1445_update_completed_] 
        // presentState1Var
        // start: Forward dependencies from presentState1Var to transition AND_u8_u8_1445_sample_start_
        // done: Forward dependencies from presentState1Var to transition AND_u8_u8_1445_sample_start_
        ;;[AND_u8_u8_1445_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_1445_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_1445_sample_start_ &-> (AND_u8_u8_1445_Sample)
        AND_u8_u8_1445_sample_completed_ <-& (AND_u8_u8_1445_Sample)
        AND_u8_u8_1445_sample_completed_ &-> ($null)
        AND_u8_u8_1445_update_start_ &-> (AND_u8_u8_1445_Update)
        AND_u8_u8_1445_update_completed_ <-& (AND_u8_u8_1445_Update)
        // Target expression
        // sdhcRegisters[37 ]
        $T[array_obj_ref_1442_sample_start_] 
        $T[array_obj_ref_1442_sample_completed_] 
        $T[array_obj_ref_1442_update_start_] 
        $T[array_obj_ref_1442_update_completed_] 
        $T[array_obj_ref_1442_word_address_calculated] 
        $T[array_obj_ref_1442_root_address_calculated] 
        array_obj_ref_1442_word_address_calculated <-& (array_obj_ref_1442_root_address_calculated)
        ;;[array_obj_ref_1442_Sample] 
        {
          ;;[array_obj_ref_1442_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_1442_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_1442_sample_start_ <-& (array_obj_ref_1442_word_address_calculated)
        array_obj_ref_1442_sample_start_ &-> (array_obj_ref_1442_Sample)
        array_obj_ref_1442_sample_completed_ <-& (array_obj_ref_1442_Sample)
        array_obj_ref_1442_sample_completed_ &-> ($null)
        array_obj_ref_1442_update_start_ &-> (array_obj_ref_1442_Update)
        array_obj_ref_1442_update_completed_ <-& (array_obj_ref_1442_Update)
        // start: Forward dependencies from (presentState1Var & _hfd ) to transition array_obj_ref_1442_sample_start_
        array_obj_ref_1442_sample_start_ <-& (AND_u8_u8_1445_update_completed_)
        // done: Forward dependencies from (presentState1Var & _hfd ) to transition array_obj_ref_1442_sample_start_
        // end:  			sdhcRegisters[37 ] := (presentState1Var & _hfd ) $buffering 1// bits of buffering = 8. 
        // start:  			sdhcRegisters[36 ] := (presentState0Var & _hfd ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 502
        // Source expression
        // (presentState0Var & _hfd )
        $T[AND_u8_u8_1451_sample_start_] 
        $T[AND_u8_u8_1451_sample_completed_] 
        $T[AND_u8_u8_1451_update_start_] 
        $T[AND_u8_u8_1451_update_completed_] 
        // presentState0Var
        // start: Forward dependencies from presentState0Var to transition AND_u8_u8_1451_sample_start_
        // done: Forward dependencies from presentState0Var to transition AND_u8_u8_1451_sample_start_
        ;;[AND_u8_u8_1451_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_1451_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_1451_sample_start_ &-> (AND_u8_u8_1451_Sample)
        AND_u8_u8_1451_sample_completed_ <-& (AND_u8_u8_1451_Sample)
        AND_u8_u8_1451_sample_completed_ &-> ($null)
        AND_u8_u8_1451_update_start_ &-> (AND_u8_u8_1451_Update)
        AND_u8_u8_1451_update_completed_ <-& (AND_u8_u8_1451_Update)
        // Target expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_1448_sample_start_] 
        $T[array_obj_ref_1448_sample_completed_] 
        $T[array_obj_ref_1448_update_start_] 
        $T[array_obj_ref_1448_update_completed_] 
        $T[array_obj_ref_1448_word_address_calculated] 
        $T[array_obj_ref_1448_root_address_calculated] 
        array_obj_ref_1448_word_address_calculated <-& (array_obj_ref_1448_root_address_calculated)
        ;;[array_obj_ref_1448_Sample] 
        {
          ;;[array_obj_ref_1448_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_1448_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_1448_sample_start_ <-& (array_obj_ref_1448_word_address_calculated)
        array_obj_ref_1448_sample_start_ &-> (array_obj_ref_1448_Sample)
        array_obj_ref_1448_sample_completed_ <-& (array_obj_ref_1448_Sample)
        array_obj_ref_1448_sample_completed_ &-> ($null)
        array_obj_ref_1448_update_start_ &-> (array_obj_ref_1448_Update)
        array_obj_ref_1448_update_completed_ <-& (array_obj_ref_1448_Update)
        // start: Forward dependencies from (presentState0Var & _hfd ) to transition array_obj_ref_1448_sample_start_
        array_obj_ref_1448_sample_start_ <-& (AND_u8_u8_1451_update_completed_)
        // done: Forward dependencies from (presentState0Var & _hfd ) to transition array_obj_ref_1448_sample_start_
        // end:  			sdhcRegisters[36 ] := (presentState0Var & _hfd ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_1442 store
        //  array_obj_ref_1448 store
        $T [array_obj_ref_1442_array_obj_ref_1448_delay] $delay
        // array_obj_ref_1442(store) -> array_obj_ref_1448(store)
        array_obj_ref_1448_sample_start_ <-& (array_obj_ref_1442_array_obj_ref_1448_delay)
        array_obj_ref_1442_array_obj_ref_1448_delay <-& (array_obj_ref_1442_sample_completed_)
      }
      assign_stmt_1446_to_assign_stmt_1452__entry__ |-> (assign_stmt_1446_to_assign_stmt_1452)
      assign_stmt_1446_to_assign_stmt_1452__exit__ <-| (assign_stmt_1446_to_assign_stmt_1452)
      assign_stmt_1446_to_assign_stmt_1452__entry__ <-| (if_stmt_1437_if_link)
      assign_stmt_1446_to_assign_stmt_1452__exit__ |-> (if_stmt_1437__exit__)
      if_stmt_1437__exit__ <-| (if_stmt_1437_else_link)
      assign_stmt_731_to_assign_stmt_735__entry__ <-| (branch_block_stmt_727__entry__)
      if_stmt_736__entry__ <-| (assign_stmt_731_to_assign_stmt_735__exit__)
      assign_stmt_1436__entry__ <-| (if_stmt_736__exit__)
      if_stmt_1437__entry__ <-| (assign_stmt_1436__exit__)
      if_stmt_1437__exit__ |-> (branch_block_stmt_727__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dataRx%data_rx%rcv
    //  file .Aa/sdhc.opt.aa, line 334
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 345
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 362
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 379
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 396
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 416
    // constant-object-declarations for block %dataRx%data_rx%dat_receive%
    //  file .Aa/sdhc.opt.aa, line 442
    // constant-object-declarations for block %dataRx%data_rx%dat_receive
    //  file .Aa/sdhc.opt.aa, line 440
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 465
    // constant-object-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 481
    // constant-object-declarations for block %dataRx%data_rx
    //  file .Aa/sdhc.opt.aa, line 329
    // constant-object-declarations for block %dataRx
    //  file .Aa/sdhc.opt.aa, line 324
    // constant-declarations for block %dataRx%data_rx
    //  file .Aa/sdhc.opt.aa, line 329
    // sdhcRegisters[37 ]
    $constant $W[array_obj_ref_730_word_address_0] : $pointer<memory_space_8> := _b0100101
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_734_word_address_0] : $pointer<memory_space_8> := _b0100100
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 333
    // sdhcRegisters[40 ]
    $constant $W[array_obj_ref_738_word_address_0] : $pointer<memory_space_8> := _b0101000
    // 1 
    $constant $W[konst_739_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %dataRx%data_rx%rcv
    //  file .Aa/sdhc.opt.aa, line 334
    // 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
    //  file .Aa/sdhc.opt.aa, line 336
    // 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
    //  file .Aa/sdhc.opt.aa, line 337
    // 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
    //  file .Aa/sdhc.opt.aa, line 338
    // 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
    //  file .Aa/sdhc.opt.aa, line 339
    // 0 
    $constant $W[konst_761_wire_constant] : $int<1> := _b0// 0
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 343
    // 1024 
    $constant $W[konst_829_wire_constant] : $int<13> := _b0010000000000// 1024
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 345
    // constant-declarations for phi:  			$phi J_0 := 			  next_J_0 $on   $loopback 			  ($bitcast ($uint<13>) 0  ) $on   $entry 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 346
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_771_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 348
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_775_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 350
    // 1023 
    $constant $W[konst_784_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_787_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_796_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_805_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_819_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_824_wire_constant] : $int<13> := _b0000000000001// 1
    // 0 
    $constant $W[konst_838_wire_constant] : $int<1> := _b0// 0
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 360
    // 1024 
    $constant $W[konst_903_wire_constant] : $int<13> := _b0010000000000// 1024
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 362
    // constant-declarations for phi:  			$phi J_1 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_1 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 363
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_846_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 365
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_851_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 367
    // 1023 
    $constant $W[konst_860_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_863_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_871_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_880_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_893_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_898_wire_constant] : $int<13> := _b0000000000001// 1
    // 0 
    $constant $W[konst_912_wire_constant] : $int<1> := _b0// 0
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 377
    // 1024 
    $constant $W[konst_977_wire_constant] : $int<13> := _b0010000000000// 1024
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 379
    // constant-declarations for phi:  			$phi J_2 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_2 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 380
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_920_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 382
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_925_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 384
    // 1023 
    $constant $W[konst_934_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_937_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_945_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_954_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_967_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_972_wire_constant] : $int<13> := _b0000000000001// 1
    // 0 
    $constant $W[konst_986_wire_constant] : $int<1> := _b0// 0
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 394
    // 1024 
    $constant $W[konst_1051_wire_constant] : $int<13> := _b0010000000000// 1024
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 396
    // constant-declarations for phi:  			$phi J_3 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_3 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 397
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_994_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 399
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_999_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 401
    // 1023 
    $constant $W[konst_1008_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_1011_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_1019_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_1028_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_1041_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_1046_wire_constant] : $int<13> := _b0000000000001// 1
    // ($bitcast ($uint<10>) 512  )
    $constant $W[type_cast_1060_wire_constant] : $int<10> := _b1000000000// 512
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_1058_word_address_0] : $pointer<memory_space_7> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_1064_wire_constant] : $int<1> := _b0// 0
    // _hfb 
    $constant $W[konst_1069_wire_constant] : $int<8> := _b11111011// 251
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_1067_word_address_0] : $pointer<memory_space_8> := _b0100100
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 414
    // 512 
    $constant $W[konst_1157_wire_constant] : $int<10> := _b1000000000// 512
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 416
    // constant-declarations for phi:  			$phi B := 			  ($bitcast ($uint<10>) 0  ) $on   $entry 			  next_B $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 417
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_1078_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  			$phi dataForBuffer0 := 			  dat0 $on   $entry 			  nextDataForBuffer0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 419
    // constant-declarations for phi:  			$phi dataForBuffer1 := 			  dat1 $on   $entry 			  nextDataForBuffer1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 421
    // constant-declarations for phi:  			$phi dataForBuffer2 := 			  dat2 $on   $entry 			  nextDataForBuffer2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 423
    // constant-declarations for phi:  			$phi dataForBuffer3 := 			  dat3 $on   $entry 			  nextDataForBuffer3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 425
    // 1023 
    $constant $W[konst_1099_wire_constant] : $int<1024> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111// 1023
    // 1023 
    $constant $W[konst_1102_wire_constant] : $int<1024> := _b
    // 1023 
    $constant $W[konst_1106_wire_constant] : $int<1024> := _b
    // 1023 
    $constant $W[konst_1109_wire_constant] : $int<1024> := _b
    // 1022 
    $constant $W[konst_1114_wire_constant] : $int<1024> := _b
    // 1022 
    $constant $W[konst_1117_wire_constant] : $int<1024> := _b
    // 1022 
    $constant $W[konst_1121_wire_constant] : $int<1024> := _b
    // 1022 
    $constant $W[konst_1124_wire_constant] : $int<1024> := _b
    // 2 
    $constant $W[konst_1132_wire_constant] : $int<1024> := _b
    // 2 
    $constant $W[konst_1137_wire_constant] : $int<1024> := _b
    // 2 
    $constant $W[konst_1142_wire_constant] : $int<1024> := _b
    // 2 
    $constant $W[konst_1147_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_1152_wire_constant] : $int<10> := _b0000000001// 1
    // ZERO_1
    $constant $W[R_ZERO_1_1178_wire_constant] : $int<1> := _b0// 0
    // ((ZERO_1 && ZERO_2) && ZERO_2)
    $constant $W[CONCAT_u3_u5_1187_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for block %dataRx%data_rx%dat_receive
    //  file .Aa/sdhc.opt.aa, line 440
    // constant-declarations for block %dataRx%data_rx%dat_receive%
    //  file .Aa/sdhc.opt.aa, line 442
    // constant-declarations for phi:  					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 443
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_1199_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 445
    // ($bitcast ($uint<4096>) 0  )
    $constant $W[type_cast_1205_wire_constant] : $int<4096> := _b
    // 8 
    $constant $W[konst_1251_wire_constant] : $int<4096> := _b
    // ($bitcast ($uint<4088>) 0  )
    $constant $W[type_cast_1255_wire_constant] : $int<4088> := _b
    // 1 
    $constant $W[konst_1276_wire_constant] : $int<10> := _b0000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 512 
    $constant $W[konst_1281_wire_constant] : $int<10> := _b1000000000// 512
    // ($bitcast ($uint<10>) 512  )
    $constant $W[type_cast_1288_wire_constant] : $int<10> := _b1000000000// 512
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_1286_word_address_0] : $pointer<memory_space_7> := _b0
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 465
    // constant-declarations for phi:  				$phi K := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_K $on   crcloopback 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 466
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_1295_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for phi:  				$phi currentCRC := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC $on   crcloopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 468
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_1300_wire_constant] : $int<16> := _b0000000000000000// 0
    // 1 
    $constant $W[konst_1305_wire_constant] : $int<16> := _b0000000000000001// 1
    // ($bitcast ($uint<15>) 0  )
    $constant $W[type_cast_1309_wire_constant] : $int<15> := _b000000000000000// 0
    // 1 
    $constant $W[konst_1316_wire_constant] : $int<5> := _b00001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // 16 
    $constant $W[konst_1321_wire_constant] : $int<5> := _b10000// 16
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // 0 
    $constant $W[konst_1330_wire_constant] : $int<1> := _b0// 0
    // _hfb 
    $constant $W[konst_1335_wire_constant] : $int<8> := _b11111011// 251
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_1333_word_address_0] : $pointer<memory_space_8> := _b0100100
    // 0 
    $constant $W[konst_1341_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %dataRx%data_rx%
    //  file .Aa/sdhc.opt.aa, line 481
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 482
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_1348_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 484
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_1353_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 486
    // 4095 
    $constant $W[konst_1362_wire_constant] : $int<4096> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111// 4095
    // 15 
    $constant $W[konst_1365_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_1373_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_1382_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_1395_wire_constant] : $int<4096> := _b
    // 1 
    $constant $W[konst_1400_wire_constant] : $int<13> := _b0000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4096 
    $constant $W[konst_1405_wire_constant] : $int<13> := _b1000000000000// 4096
    // ZERO_1
    $constant $W[R_ZERO_1_1415_wire_constant] : $int<1> := _b0// 0
    // ((ZERO_1 && ZERO_2) && ZERO_2)
    $constant $W[CONCAT_u3_u5_1424_wire_constant] : $int<5> := _b00000// 0
    // ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 ) 
    // sdhcRegisters[40 ]
    $constant $W[array_obj_ref_1430_word_address_0] : $pointer<memory_space_8> := _b0101000
    // 1 
    $constant $W[konst_1431_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_1439_wire_constant] : $int<1> := _b0// 0
    // _hfd 
    $constant $W[konst_1444_wire_constant] : $int<8> := _b11111101// 253
    // sdhcRegisters[37 ]
    $constant $W[array_obj_ref_1442_word_address_0] : $pointer<memory_space_8> := _b0100101
    // _hfd 
    $constant $W[konst_1450_wire_constant] : $int<8> := _b11111101// 253
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_1448_word_address_0] : $pointer<memory_space_8> := _b0100100
    // block %dataRx%data_rx
    //  file .Aa/sdhc.opt.aa, line 329
    // 		presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 331
    // sdhcRegisters[37 ]
    $W[array_obj_ref_730_data_0] : $int<8>
    // presentState1Var
    $W[presentState1Var_731] : $int<8>
    // 		presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 332
    // sdhcRegisters[36 ]
    $W[array_obj_ref_734_data_0] : $int<8>
    // presentState0Var
    $W[presentState0Var_735] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 333
    // sdhcRegisters[40 ]
    $W[array_obj_ref_738_data_0] : $int<8>
    $W[array_obj_ref_738_wire] : $int<8>
    // (sdhcRegisters[40 ] [] 1 )
    $intermediate $W[BITSEL_u8_u1_740_wire] : $int<1>
    // block %dataRx%data_rx%rcv
    //  file .Aa/sdhc.opt.aa, line 334
    // 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
    //  file .Aa/sdhc.opt.aa, line 336
    // dat0
    $W[dat0_745] : $int<1024>
    // nextCRC_0
    $W[nextCRC_0_745] : $int<16>
    // stopBit0
    $W[stopBit0_745] : $int<1>
    // 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
    //  file .Aa/sdhc.opt.aa, line 337
    // dat1
    $W[dat1_749] : $int<1024>
    // nextCRC_1
    $W[nextCRC_1_749] : $int<16>
    // stopBit1
    $W[stopBit1_749] : $int<1>
    // 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
    //  file .Aa/sdhc.opt.aa, line 338
    // dat2
    $W[dat2_753] : $int<1024>
    // nextCRC_2
    $W[nextCRC_2_753] : $int<16>
    // stopBit2
    $W[stopBit2_753] : $int<1>
    // 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
    //  file .Aa/sdhc.opt.aa, line 339
    // dat3
    $W[dat3_757] : $int<1024>
    // nextCRC_3
    $W[nextCRC_3_757] : $int<16>
    // stopBit3
    $W[stopBit3_757] : $int<1>
    // 			$volatile stopBitError0 := (stopBit0 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 342
    // stopBitError0
    $W[stopBitError0_763] : $int<1>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 343
    // (next_J_0 < 1024 )
    $intermediate $W[ULT_u13_u1_830_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 345
    // 			$phi J_0 := 			  next_J_0 $on   $loopback 			  ($bitcast ($uint<13>) 0  ) $on   $entry 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 346
    $W[next_J_0_826_768_buffered] : $int<13>
    // J_0
    $W[J_0_766] : $int<13>
    // 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 348
    $W[nextCRC16_0_816_776_buffered] : $int<16>
    // CRC_16_0
    $W[CRC_16_0_772] : $int<16>
    // 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 350
    $W[dat0_745_779_buffered] : $int<1024>
    $W[nextTempData0_821_780_buffered] : $int<1024>
    // tempData0
    $W[tempData0_777] : $int<1024>
    // 			$volatile inv0 := ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 353
    // (tempData0 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_785_wire] : $int<1>
    // (CRC_16_0 [] 15 )
    $intermediate $W[BITSEL_u16_u1_788_wire] : $int<1>
    // inv0
    $W[inv0_790] : $int<1>
    // 			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 354
    // ( $slice CRC_16_0 14 12 ) 
    $intermediate $W[slice_794_wire] : $int<3>
    // (CRC_16_0 [] 11 )
    $intermediate $W[BITSEL_u16_u1_797_wire] : $int<1>
    // ((CRC_16_0 [] 11 ) ^ inv0)
    $intermediate $W[XOR_u1_u1_799_wire] : $int<1>
    // (( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0))
    $intermediate $W[CONCAT_u3_u4_800_wire] : $int<4>
    // ( $slice CRC_16_0 10 5 ) 
    $intermediate $W[slice_802_wire] : $int<6>
    // ((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_803_wire] : $int<10>
    // (CRC_16_0 [] 4 )
    $intermediate $W[BITSEL_u16_u1_806_wire] : $int<1>
    // ((CRC_16_0 [] 4 ) ^ inv0)
    $intermediate $W[XOR_u1_u1_808_wire] : $int<1>
    // ( $slice CRC_16_0 3 0 ) 
    $intermediate $W[slice_811_wire] : $int<4>
    // (((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_812_wire] : $int<5>
    // ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)
    $intermediate $W[CONCAT_u5_u6_814_wire] : $int<6>
    // nextCRC16_0
    $W[nextCRC16_0_816] : $int<16>
    // 			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 355
    // nextTempData0
    $W[nextTempData0_821] : $int<1024>
    // 			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 356
    // next_J_0
    $W[next_J_0_826] : $int<13>
    // 			$volatile crcError0 := (nextCRC_0 != nextCRC16_0) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 358
    // crcError0
    $W[crcError0_835] : $int<1>
    // 			$volatile stopBitError1 := (stopBit1 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 359
    // stopBitError1
    $W[stopBitError1_840] : $int<1>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 360
    // (next_J_1 < 1024 )
    $intermediate $W[ULT_u13_u1_904_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 362
    // 			$phi J_1 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_1 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 363
    $W[next_J_1_900_847_buffered] : $int<13>
    // J_1
    $W[J_1_843] : $int<13>
    // 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 365
    $W[nextCRC16_1_890_852_buffered] : $int<16>
    // CRC_16_1
    $W[CRC_16_1_848] : $int<16>
    // 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 367
    $W[dat1_749_855_buffered] : $int<1024>
    $W[nextTempData1_895_856_buffered] : $int<1024>
    // tempData1
    $W[tempData1_853] : $int<1024>
    // 			$volatile inv1 := ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 370
    // (tempData1 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_861_wire] : $int<1>
    // (CRC_16_1 [] 15 )
    $intermediate $W[BITSEL_u16_u1_864_wire] : $int<1>
    // inv1
    $W[inv1_866] : $int<1>
    // 			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 371
    // ( $slice CRC_16_1 14 12 ) 
    $intermediate $W[slice_869_wire] : $int<3>
    // (CRC_16_1 [] 11 )
    $intermediate $W[BITSEL_u16_u1_872_wire] : $int<1>
    // ((CRC_16_1 [] 11 ) ^ inv1)
    $intermediate $W[XOR_u1_u1_874_wire] : $int<1>
    // (( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1))
    $intermediate $W[CONCAT_u3_u4_875_wire] : $int<4>
    // ( $slice CRC_16_1 10 5 ) 
    $intermediate $W[slice_877_wire] : $int<6>
    // ((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_878_wire] : $int<10>
    // (CRC_16_1 [] 4 )
    $intermediate $W[BITSEL_u16_u1_881_wire] : $int<1>
    // ((CRC_16_1 [] 4 ) ^ inv1)
    $intermediate $W[XOR_u1_u1_883_wire] : $int<1>
    // ( $slice CRC_16_1 3 0 ) 
    $intermediate $W[slice_885_wire] : $int<4>
    // (((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_886_wire] : $int<5>
    // ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)
    $intermediate $W[CONCAT_u5_u6_888_wire] : $int<6>
    // nextCRC16_1
    $W[nextCRC16_1_890] : $int<16>
    // 			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 372
    // nextTempData1
    $W[nextTempData1_895] : $int<1024>
    // 			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 373
    // next_J_1
    $W[next_J_1_900] : $int<13>
    // 			$volatile crcError1 := (nextCRC_1 != nextCRC16_1) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 375
    // crcError1
    $W[crcError1_909] : $int<1>
    // 			$volatile stopBitError2 := (stopBit2 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 376
    // stopBitError2
    $W[stopBitError2_914] : $int<1>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 377
    // (next_J_2 < 1024 )
    $intermediate $W[ULT_u13_u1_978_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 379
    // 			$phi J_2 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_2 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 380
    $W[next_J_2_974_921_buffered] : $int<13>
    // J_2
    $W[J_2_917] : $int<13>
    // 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 382
    $W[nextCRC16_2_964_926_buffered] : $int<16>
    // CRC_16_2
    $W[CRC_16_2_922] : $int<16>
    // 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 384
    $W[dat2_753_929_buffered] : $int<1024>
    $W[nextTempData2_969_930_buffered] : $int<1024>
    // tempData2
    $W[tempData2_927] : $int<1024>
    // 			$volatile inv2 := ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 387
    // (tempData2 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_935_wire] : $int<1>
    // (CRC_16_2 [] 15 )
    $intermediate $W[BITSEL_u16_u1_938_wire] : $int<1>
    // inv2
    $W[inv2_940] : $int<1>
    // 			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 388
    // ( $slice CRC_16_2 14 12 ) 
    $intermediate $W[slice_943_wire] : $int<3>
    // (CRC_16_2 [] 11 )
    $intermediate $W[BITSEL_u16_u1_946_wire] : $int<1>
    // ((CRC_16_2 [] 11 ) ^ inv2)
    $intermediate $W[XOR_u1_u1_948_wire] : $int<1>
    // (( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2))
    $intermediate $W[CONCAT_u3_u4_949_wire] : $int<4>
    // ( $slice CRC_16_2 10 5 ) 
    $intermediate $W[slice_951_wire] : $int<6>
    // ((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_952_wire] : $int<10>
    // (CRC_16_2 [] 4 )
    $intermediate $W[BITSEL_u16_u1_955_wire] : $int<1>
    // ((CRC_16_2 [] 4 ) ^ inv2)
    $intermediate $W[XOR_u1_u1_957_wire] : $int<1>
    // ( $slice CRC_16_2 3 0 ) 
    $intermediate $W[slice_959_wire] : $int<4>
    // (((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_960_wire] : $int<5>
    // ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)
    $intermediate $W[CONCAT_u5_u6_962_wire] : $int<6>
    // nextCRC16_2
    $W[nextCRC16_2_964] : $int<16>
    // 			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 389
    // nextTempData2
    $W[nextTempData2_969] : $int<1024>
    // 			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 390
    // next_J_2
    $W[next_J_2_974] : $int<13>
    // 			$volatile crcError2 := (nextCRC_2 != nextCRC16_2) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 392
    // crcError2
    $W[crcError2_983] : $int<1>
    // 			$volatile stopBitError3 := (stopBit3 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 393
    // stopBitError3
    $W[stopBitError3_988] : $int<1>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 394
    // (next_J_3 < 1024 )
    $intermediate $W[ULT_u13_u1_1052_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 396
    // 			$phi J_3 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_3 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 397
    $W[next_J_3_1048_995_buffered] : $int<13>
    // J_3
    $W[J_3_991] : $int<13>
    // 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 399
    $W[nextCRC16_3_1038_1000_buffered] : $int<16>
    // CRC_16_3
    $W[CRC_16_3_996] : $int<16>
    // 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 401
    $W[dat3_757_1003_buffered] : $int<1024>
    $W[nextTempData3_1043_1004_buffered] : $int<1024>
    // tempData3
    $W[tempData3_1001] : $int<1024>
    // 			$volatile inv3 := ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 404
    // (tempData3 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_1009_wire] : $int<1>
    // (CRC_16_3 [] 15 )
    $intermediate $W[BITSEL_u16_u1_1012_wire] : $int<1>
    // inv3
    $W[inv3_1014] : $int<1>
    // 			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 405
    // ( $slice CRC_16_3 14 12 ) 
    $intermediate $W[slice_1017_wire] : $int<3>
    // (CRC_16_3 [] 11 )
    $intermediate $W[BITSEL_u16_u1_1020_wire] : $int<1>
    // ((CRC_16_3 [] 11 ) ^ inv3)
    $intermediate $W[XOR_u1_u1_1022_wire] : $int<1>
    // (( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3))
    $intermediate $W[CONCAT_u3_u4_1023_wire] : $int<4>
    // ( $slice CRC_16_3 10 5 ) 
    $intermediate $W[slice_1025_wire] : $int<6>
    // ((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_1026_wire] : $int<10>
    // (CRC_16_3 [] 4 )
    $intermediate $W[BITSEL_u16_u1_1029_wire] : $int<1>
    // ((CRC_16_3 [] 4 ) ^ inv3)
    $intermediate $W[XOR_u1_u1_1031_wire] : $int<1>
    // ( $slice CRC_16_3 3 0 ) 
    $intermediate $W[slice_1033_wire] : $int<4>
    // (((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_1034_wire] : $int<5>
    // ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)
    $intermediate $W[CONCAT_u5_u6_1036_wire] : $int<6>
    // nextCRC16_3
    $W[nextCRC16_3_1038] : $int<16>
    // 			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 406
    // nextTempData3
    $W[nextTempData3_1043] : $int<1024>
    // 			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 407
    // next_J_3
    $W[next_J_3_1048] : $int<13>
    // 			$volatile crcError3 := (nextCRC_3 != nextCRC16_3) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 409
    // crcError3
    $W[crcError3_1057] : $int<1>
    // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 410
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_1058_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_rxBufferPointer_1058_data_0] : $int<10>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 0 )
    $intermediate $W[EQ_u1_u1_1065_wire] : $int<1>
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 412
    // (presentState0Var & _hfb )
    $intermediate $W[AND_u8_u8_1070_wire] : $int<8>
    // sdhcRegisters[36 ]
    $W[array_obj_ref_1067_data_0] : $int<8>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 414
    // (next_B < 512 )
    $intermediate $W[ULT_u10_u1_1158_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 416
    // 			$phi B := 			  ($bitcast ($uint<10>) 0  ) $on   $entry 			  next_B $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 417
    $W[next_B_1154_1079_buffered] : $int<10>
    // B
    $W[B_1075] : $int<10>
    // 			$phi dataForBuffer0 := 			  dat0 $on   $entry 			  nextDataForBuffer0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 419
    $W[dat0_745_1082_buffered] : $int<1024>
    $W[nextDataForBuffer0_1134_1083_buffered] : $int<1024>
    // dataForBuffer0
    $W[dataForBuffer0_1080] : $int<1024>
    // 			$phi dataForBuffer1 := 			  dat1 $on   $entry 			  nextDataForBuffer1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 421
    $W[dat1_749_1086_buffered] : $int<1024>
    $W[nextDataForBuffer1_1139_1087_buffered] : $int<1024>
    // dataForBuffer1
    $W[dataForBuffer1_1084] : $int<1024>
    // 			$phi dataForBuffer2 := 			  dat2 $on   $entry 			  nextDataForBuffer2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 423
    $W[dat2_753_1090_buffered] : $int<1024>
    $W[nextDataForBuffer2_1144_1091_buffered] : $int<1024>
    // dataForBuffer2
    $W[dataForBuffer2_1088] : $int<1024>
    // 			$phi dataForBuffer3 := 			  dat3 $on   $entry 			  nextDataForBuffer3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 425
    $W[dat3_757_1094_buffered] : $int<1024>
    $W[nextDataForBuffer3_1149_1095_buffered] : $int<1024>
    // dataForBuffer3
    $W[dataForBuffer3_1092] : $int<1024>
    // 			dataBufferRx := ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 428
    // (dataForBuffer3 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_1100_wire] : $int<1>
    // (dataForBuffer2 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_1103_wire] : $int<1>
    // ((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 ))
    $intermediate $W[CONCAT_u1_u2_1104_wire] : $int<2>
    // (dataForBuffer1 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_1107_wire] : $int<1>
    // (dataForBuffer0 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_1110_wire] : $int<1>
    // ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))
    $intermediate $W[CONCAT_u1_u2_1111_wire] : $int<2>
    // (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 )))
    $intermediate $W[CONCAT_u2_u4_1112_wire] : $int<4>
    // (dataForBuffer3 [] 1022 )
    $intermediate $W[BITSEL_u1024_u1_1115_wire] : $int<1>
    // (dataForBuffer2 [] 1022 )
    $intermediate $W[BITSEL_u1024_u1_1118_wire] : $int<1>
    // ((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 ))
    $intermediate $W[CONCAT_u1_u2_1119_wire] : $int<2>
    // (dataForBuffer1 [] 1022 )
    $intermediate $W[BITSEL_u1024_u1_1122_wire] : $int<1>
    // (dataForBuffer0 [] 1022 )
    $intermediate $W[BITSEL_u1024_u1_1125_wire] : $int<1>
    // ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))
    $intermediate $W[CONCAT_u1_u2_1126_wire] : $int<2>
    // (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))
    $intermediate $W[CONCAT_u2_u4_1127_wire] : $int<4>
    // ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))))
    $intermediate $W[CONCAT_u4_u8_1128_wire] : $int<8>
    // dataBufferRx
    // 			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 429
    // nextDataForBuffer0
    $W[nextDataForBuffer0_1134] : $int<1024>
    // 			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 430
    // nextDataForBuffer1
    $W[nextDataForBuffer1_1139] : $int<1024>
    // 			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 431
    // nextDataForBuffer2
    $W[nextDataForBuffer2_1144] : $int<1024>
    // 			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 432
    // nextDataForBuffer3
    $W[nextDataForBuffer3_1149] : $int<1024>
    // 			$volatile next_B := (B + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 433
    // next_B
    $W[next_B_1154] : $int<10>
    // 			$volatile stopBitError_Final := ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 435
    // (stopBitError0 | stopBitError1)
    $intermediate $W[OR_u1_u1_1162_wire] : $int<1>
    // (stopBitError2 | stopBitError3)
    $intermediate $W[OR_u1_u1_1165_wire] : $int<1>
    // stopBitError_Final
    $W[stopBitError_Final_1167] : $int<1>
    // 			$volatile crcError_Final := ((crcError0 | crcError1) | (crcError2 | crcError3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 436
    // (crcError0 | crcError1)
    $intermediate $W[OR_u1_u1_1171_wire] : $int<1>
    // (crcError2 | crcError3)
    $intermediate $W[OR_u1_u1_1174_wire] : $int<1>
    // crcError_Final
    $W[crcError_Final_1176] : $int<1>
    // 			dataErrorInterruptStatusVar1_4 := (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 437
    // (ZERO_1 && stopBitError_Final)
    $intermediate $W[CONCAT_u1_u2_1180_wire] : $int<2>
    // ((ZERO_1 && stopBitError_Final) && crcError_Final)
    $intermediate $W[CONCAT_u2_u3_1182_wire] : $int<3>
    // dataErrorInterruptStatusVar1_4
    $W[dataErrorInterruptStatusVar1_4_1189] : $int<8>
    // 			startBit := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 439
    // startBit
    $W[startBit_1193] : $int<1>
    // block %dataRx%data_rx%dat_receive
    //  file .Aa/sdhc.opt.aa, line 440
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 442
    // 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 443
    $W[next_I_1278_1200_buffered] : $int<10>
    // I
    $W[I_1196] : $int<10>
    // 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 445
    $W[next_data_1273_1206_buffered] : $int<4096>
    // dat
    $W[dat_1201] : $int<4096>
    // 				bit7 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 448
    // bit7
    $W[bit7_1210] : $int<1>
    // 				bit6 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 449
    // bit6
    $W[bit6_1213] : $int<1>
    // 				bit5 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 450
    // bit5
    $W[bit5_1216] : $int<1>
    // 				bit4 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 451
    // bit4
    $W[bit4_1219] : $int<1>
    // 				bit3 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 452
    // bit3
    $W[bit3_1222] : $int<1>
    // 				bit2 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 453
    // bit2
    $W[bit2_1225] : $int<1>
    // 				bit1 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 454
    // bit1
    $W[bit1_1228] : $int<1>
    // 				bit0 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 455
    // bit0
    $W[bit0_1231] : $int<1>
    // 				dataBufferRx := (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 456
    // (bit7 && bit6)
    $intermediate $W[CONCAT_u1_u2_1235_wire] : $int<2>
    // (bit5 && bit4)
    $intermediate $W[CONCAT_u1_u2_1238_wire] : $int<2>
    // ((bit7 && bit6) && (bit5 && bit4))
    $intermediate $W[CONCAT_u2_u4_1239_wire] : $int<4>
    // (bit3 && bit2)
    $intermediate $W[CONCAT_u1_u2_1242_wire] : $int<2>
    // (bit1 && bit0)
    $intermediate $W[CONCAT_u1_u2_1245_wire] : $int<2>
    // ((bit3 && bit2) && (bit1 && bit0))
    $intermediate $W[CONCAT_u2_u4_1246_wire] : $int<4>
    // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
    $intermediate $W[CONCAT_u4_u8_1247_wire] : $int<8>
    // dataBufferRx
    // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 457
    // (dat << 8 )
    $intermediate $W[SHL_u4096_u4096_1252_wire] : $int<4096>
    // (bit7 && bit6)
    $intermediate $W[CONCAT_u1_u2_1258_wire] : $int<2>
    // (bit5 && bit4)
    $intermediate $W[CONCAT_u1_u2_1261_wire] : $int<2>
    // ((bit7 && bit6) && (bit5 && bit4))
    $intermediate $W[CONCAT_u2_u4_1262_wire] : $int<4>
    // (bit3 && bit2)
    $intermediate $W[CONCAT_u1_u2_1265_wire] : $int<2>
    // (bit1 && bit0)
    $intermediate $W[CONCAT_u1_u2_1268_wire] : $int<2>
    // ((bit3 && bit2) && (bit1 && bit0))
    $intermediate $W[CONCAT_u2_u4_1269_wire] : $int<4>
    // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
    $intermediate $W[CONCAT_u4_u8_1270_wire] : $int<8>
    // (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))
    $intermediate $W[CONCAT_u4088_u4096_1271_wire] : $int<4096>
    // next_data
    $W[next_data_1273] : $int<4096>
    // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 458
    // next_I
    $W[next_I_1278] : $int<10>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 512 )
    $intermediate $W[ULT_u10_u1_1282_wire] : $int<1>
    // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 464
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_1286_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_rxBufferPointer_1286_data_0] : $int<10>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 465
    // 				$phi K := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_K $on   crcloopback 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 466
    $W[next_K_1318_1296_buffered] : $int<5>
    // K
    $W[K_1291] : $int<5>
    // 				$phi currentCRC := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC $on   crcloopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 468
    $W[nextCRC_1313_1301_buffered] : $int<16>
    // currentCRC
    $W[currentCRC_1297] : $int<16>
    // 			nextCRC := ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 471
    // (currentCRC << 1 )
    $intermediate $W[SHL_u16_u16_1306_wire] : $int<16>
    // DAT0Rx
    $W[RPIPE_DAT0Rx_1310_wire] : $int<1>
    // (($bitcast ($uint<15>) 0  ) && DAT0Rx)
    $intermediate $W[CONCAT_u15_u16_1311_wire] : $int<16>
    // nextCRC
    $W[nextCRC_1313] : $int<16>
    // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 5. 
    //  file .Aa/sdhc.opt.aa, line 472
    // next_K
    $W[next_K_1318] : $int<5>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (next_K < 16 )
    $intermediate $W[ULT_u5_u1_1322_wire] : $int<1>
    // 			stopBit := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 476
    // stopBit
    $W[stopBit_1327] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (singleMultipleReadBlock == 0 )
    $intermediate $W[EQ_u1_u1_1331_wire] : $int<1>
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 478
    // (presentState0Var & _hfb )
    $intermediate $W[AND_u8_u8_1336_wire] : $int<8>
    // sdhcRegisters[36 ]
    $W[array_obj_ref_1333_data_0] : $int<8>
    // 			stopBitError := (stopBit == 0 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 480
    // stopBitError
    $W[stopBitError_1343] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 481
    // 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 482
    $W[next_J_1402_1349_buffered] : $int<13>
    // J
    $W[J_1345] : $int<13>
    // 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 484
    $W[nextCRC16_1392_1354_buffered] : $int<16>
    // CRC_16
    $W[CRC_16_1350] : $int<16>
    // 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 486
    $W[next_data_1273_1357_buffered] : $int<4096>
    $W[nextTempData_1397_1358_buffered] : $int<4096>
    // tempData
    $W[tempData_1355] : $int<4096>
    // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 489
    // (tempData [] 4095 )
    $intermediate $W[BITSEL_u4096_u1_1363_wire] : $int<1>
    // (CRC_16 [] 15 )
    $intermediate $W[BITSEL_u16_u1_1366_wire] : $int<1>
    // inv
    $W[inv_1368] : $int<1>
    // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 490
    // ( $slice CRC_16 14 12 ) 
    $intermediate $W[slice_1371_wire] : $int<3>
    // (CRC_16 [] 11 )
    $intermediate $W[BITSEL_u16_u1_1374_wire] : $int<1>
    // ((CRC_16 [] 11 ) ^ inv)
    $intermediate $W[XOR_u1_u1_1376_wire] : $int<1>
    // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
    $intermediate $W[CONCAT_u3_u4_1377_wire] : $int<4>
    // ( $slice CRC_16 10 5 ) 
    $intermediate $W[slice_1379_wire] : $int<6>
    // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_1380_wire] : $int<10>
    // (CRC_16 [] 4 )
    $intermediate $W[BITSEL_u16_u1_1383_wire] : $int<1>
    // ((CRC_16 [] 4 ) ^ inv)
    $intermediate $W[XOR_u1_u1_1385_wire] : $int<1>
    // ( $slice CRC_16 3 0 ) 
    $intermediate $W[slice_1387_wire] : $int<4>
    // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_1388_wire] : $int<5>
    // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
    $intermediate $W[CONCAT_u5_u6_1390_wire] : $int<6>
    // nextCRC16
    $W[nextCRC16_1392] : $int<16>
    // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 491
    // nextTempData
    $W[nextTempData_1397] : $int<4096>
    // 			$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 492
    // next_J
    $W[next_J_1402] : $int<13>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_J < 4096 )
    $intermediate $W[ULT_u13_u1_1406_wire] : $int<1>
    // 			crcError := (nextCRC != nextCRC16) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 496
    // crcError
    $W[crcError_1413] : $int<1>
    // 			dataErrorInterruptStatusVar1_0 := (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 497
    // (ZERO_1 && stopBitError)
    $intermediate $W[CONCAT_u1_u2_1417_wire] : $int<2>
    // ((ZERO_1 && stopBitError) && crcError)
    $intermediate $W[CONCAT_u2_u3_1419_wire] : $int<3>
    // dataErrorInterruptStatusVar1_0
    $W[dataErrorInterruptStatusVar1_0_1426] : $int<8>
    // 		dataErrorInterruptStatusVar1 := ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 499
    // sdhcRegisters[40 ]
    $W[array_obj_ref_1430_data_0] : $int<8>
    $W[array_obj_ref_1430_wire] : $int<8>
    // (sdhcRegisters[40 ] [] 1 )
    $intermediate $W[BITSEL_u8_u1_1432_wire] : $int<1>
    // dataErrorInterruptStatusVar1
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 0 )
    $intermediate $W[EQ_u1_u1_1440_wire] : $int<1>
    // 			sdhcRegisters[37 ] := (presentState1Var & _hfd ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 501
    // (presentState1Var & _hfd )
    $intermediate $W[AND_u8_u8_1445_wire] : $int<8>
    // sdhcRegisters[37 ]
    $W[array_obj_ref_1442_data_0] : $int<8>
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfd ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 502
    // (presentState0Var & _hfd )
    $intermediate $W[AND_u8_u8_1451_wire] : $int<8>
    // sdhcRegisters[36 ]
    $W[array_obj_ref_1448_data_0] : $int<8>
    // datapath-instances for block %dataRx%data_rx
    //  file .Aa/sdhc.opt.aa, line 329
    // 		presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 331
    // sdhcRegisters[37 ]
    $load [array_obj_ref_730_load_0] $from memory_space_8 (array_obj_ref_730_word_address_0) (array_obj_ref_730_data_0) 
    $delay array_obj_ref_730_load_0 5
    &/ [array_obj_ref_730_gather_scatter] (array_obj_ref_730_data_0) (presentState1Var_731) 
    $flowthrough 
    // 		presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 332
    // sdhcRegisters[36 ]
    $load [array_obj_ref_734_load_0] $from memory_space_8 (array_obj_ref_734_word_address_0) (array_obj_ref_734_data_0) 
    $delay array_obj_ref_734_load_0 5
    &/ [array_obj_ref_734_gather_scatter] (array_obj_ref_734_data_0) (presentState0Var_735) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 333
    // sdhcRegisters[40 ]
    $load [array_obj_ref_738_load_0] $from memory_space_8 (array_obj_ref_738_word_address_0) (array_obj_ref_738_data_0) 
    $delay array_obj_ref_738_load_0 5
    &/ [array_obj_ref_738_gather_scatter] (array_obj_ref_738_data_0) (array_obj_ref_738_wire) 
    $flowthrough 
    // (sdhcRegisters[40 ] [] 1 )
    [][BITSEL_u8_u1_740_inst] (array_obj_ref_738_wire konst_739_wire_constant) (BITSEL_u8_u1_740_wire)   $flowthrough 
    $delay BITSEL_u8_u1_740_inst 0
    ==0? [if_stmt_736_branch] (BITSEL_u8_u1_740_wire)
    // datapath-instances for block %dataRx%data_rx%rcv
    //  file .Aa/sdhc.opt.aa, line 334
    // 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
    //  file .Aa/sdhc.opt.aa, line 336
    $call [call_stmt_745_call] $module recvdat0() (dat0_745 nextCRC_0_745 stopBit0_745)  
    $delay call_stmt_745_call 4
    $buffering  $out call_stmt_745_call dat0_745 1
    $buffering  $out call_stmt_745_call nextCRC_0_745 1
    $buffering  $out call_stmt_745_call stopBit0_745 1
    // 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
    //  file .Aa/sdhc.opt.aa, line 337
    $call [call_stmt_749_call] $module recvdat1() (dat1_749 nextCRC_1_749 stopBit1_749)  
    $delay call_stmt_749_call 4
    $buffering  $out call_stmt_749_call dat1_749 1
    $buffering  $out call_stmt_749_call nextCRC_1_749 1
    $buffering  $out call_stmt_749_call stopBit1_749 1
    // 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
    //  file .Aa/sdhc.opt.aa, line 338
    $call [call_stmt_753_call] $module recvdat2() (dat2_753 nextCRC_2_753 stopBit2_753)  
    $delay call_stmt_753_call 4
    $buffering  $out call_stmt_753_call dat2_753 1
    $buffering  $out call_stmt_753_call nextCRC_2_753 1
    $buffering  $out call_stmt_753_call stopBit2_753 1
    // 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
    //  file .Aa/sdhc.opt.aa, line 339
    $call [call_stmt_757_call] $module recvdat3() (dat3_757 nextCRC_3_757 stopBit3_757)  
    $delay call_stmt_757_call 4
    $buffering  $out call_stmt_757_call dat3_757 1
    $buffering  $out call_stmt_757_call nextCRC_3_757 1
    $buffering  $out call_stmt_757_call stopBit3_757 1
    // 			$volatile stopBitError0 := (stopBit0 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 342
    // (stopBit0 == 0 )
    ==[EQ_u1_u1_762_inst] (stopBit0_745 konst_761_wire_constant) (stopBitError0_763)   $flowthrough 
    $delay EQ_u1_u1_762_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 343
    // (next_J_0 < 1024 )
    <[ULT_u13_u1_830_inst] (next_J_0_826 konst_829_wire_constant) (ULT_u13_u1_830_wire)   $flowthrough 
    $delay ULT_u13_u1_830_inst 0
    ==0? [do_while_stmt_764_branch] (ULT_u13_u1_830_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 345
    // 			$phi J_0 := 			  next_J_0 $on   $loopback 			  ($bitcast ($uint<13>) 0  ) $on   $entry 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 346
    # := [next_J_0_826_768_buf] (next_J_0_826) (next_J_0_826_768_buffered)     $fullrate
    $buffering $out next_J_0_826_768_buf next_J_0_826_768_buffered  1
    # $phi [phi_stmt_766] (next_J_0_826_768_buffered type_cast_771_wire_constant) ( J_0_766 ) $fullrate
    // $buffering  $out phi_stmt_766 J_0_766 2
    // 			$phi CRC_16_0 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_0 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 348
    # := [nextCRC16_0_816_776_buf] (nextCRC16_0_816) (nextCRC16_0_816_776_buffered)     $fullrate
    $buffering $out nextCRC16_0_816_776_buf nextCRC16_0_816_776_buffered  1
    # $phi [phi_stmt_772] (type_cast_775_wire_constant nextCRC16_0_816_776_buffered) ( CRC_16_0_772 ) $fullrate
    // $buffering  $out phi_stmt_772 CRC_16_0_772 2
    // 			$phi tempData0 := 			  dat0 $on   $entry 			  nextTempData0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 350
    # := [dat0_745_779_buf] (dat0_745) (dat0_745_779_buffered)     $fullrate
    $buffering $out dat0_745_779_buf dat0_745_779_buffered  1
    # := [nextTempData0_821_780_buf] (nextTempData0_821) (nextTempData0_821_780_buffered)     $fullrate
    $buffering $out nextTempData0_821_780_buf nextTempData0_821_780_buffered  1
    # $phi [phi_stmt_777] (dat0_745_779_buffered nextTempData0_821_780_buffered) ( tempData0_777 ) $fullrate
    // $buffering  $out phi_stmt_777 tempData0_777 2
    // 			$volatile inv0 := ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 353
    // (tempData0 [] 1023 )
    [][BITSEL_u1024_u1_785_inst] (tempData0_777 konst_784_wire_constant) (BITSEL_u1024_u1_785_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_785_inst 0
    // (CRC_16_0 [] 15 )
    [][BITSEL_u16_u1_788_inst] (CRC_16_0_772 konst_787_wire_constant) (BITSEL_u16_u1_788_wire)   $flowthrough 
    $delay BITSEL_u16_u1_788_inst 0
    // ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 ))
    ^[XOR_u1_u1_789_inst] (BITSEL_u1024_u1_785_wire BITSEL_u16_u1_788_wire) (inv0_790)   $flowthrough 
    $delay XOR_u1_u1_789_inst 0
    // 			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 354
    // ( $slice CRC_16_0 14 12 ) 
    [:] [slice_794_inst] (CRC_16_0_772 14 12) (slice_794_wire)  $flowthrough
    $delay slice_794_inst 0
    // (CRC_16_0 [] 11 )
    [][BITSEL_u16_u1_797_inst] (CRC_16_0_772 konst_796_wire_constant) (BITSEL_u16_u1_797_wire)   $flowthrough 
    $delay BITSEL_u16_u1_797_inst 0
    // ((CRC_16_0 [] 11 ) ^ inv0)
    ^[XOR_u1_u1_799_inst] (BITSEL_u16_u1_797_wire inv0_790) (XOR_u1_u1_799_wire)   $flowthrough 
    $delay XOR_u1_u1_799_inst 0
    // (( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0))
    &&[CONCAT_u3_u4_800_inst] (slice_794_wire XOR_u1_u1_799_wire) (CONCAT_u3_u4_800_wire)   $flowthrough 
    $delay CONCAT_u3_u4_800_inst 0
    // ( $slice CRC_16_0 10 5 ) 
    [:] [slice_802_inst] (CRC_16_0_772 10 5) (slice_802_wire)  $flowthrough
    $delay slice_802_inst 0
    // ((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) )
    &&[CONCAT_u4_u10_803_inst] (CONCAT_u3_u4_800_wire slice_802_wire) (CONCAT_u4_u10_803_wire)   $flowthrough 
    $delay CONCAT_u4_u10_803_inst 0
    // (CRC_16_0 [] 4 )
    [][BITSEL_u16_u1_806_inst] (CRC_16_0_772 konst_805_wire_constant) (BITSEL_u16_u1_806_wire)   $flowthrough 
    $delay BITSEL_u16_u1_806_inst 0
    // ((CRC_16_0 [] 4 ) ^ inv0)
    ^[XOR_u1_u1_808_inst] (BITSEL_u16_u1_806_wire inv0_790) (XOR_u1_u1_808_wire)   $flowthrough 
    $delay XOR_u1_u1_808_inst 0
    // ( $slice CRC_16_0 3 0 ) 
    [:] [slice_811_inst] (CRC_16_0_772 3 0) (slice_811_wire)  $flowthrough
    $delay slice_811_inst 0
    // (((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) )
    &&[CONCAT_u1_u5_812_inst] (XOR_u1_u1_808_wire slice_811_wire) (CONCAT_u1_u5_812_wire)   $flowthrough 
    $delay CONCAT_u1_u5_812_inst 0
    // ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)
    &&[CONCAT_u5_u6_814_inst] (CONCAT_u1_u5_812_wire inv0_790) (CONCAT_u5_u6_814_wire)   $flowthrough 
    $delay CONCAT_u5_u6_814_inst 0
    // (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0))
    &&[CONCAT_u10_u16_815_inst] (CONCAT_u4_u10_803_wire CONCAT_u5_u6_814_wire) (nextCRC16_0_816)   $flowthrough 
    $delay CONCAT_u10_u16_815_inst 0
    // 			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 355
    // (tempData0 << 1 )
    <<[SHL_u1024_u1024_820_inst] (tempData0_777 konst_819_wire_constant) (nextTempData0_821)   $flowthrough 
    $delay SHL_u1024_u1024_820_inst 0
    // 			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 356
    // (J_0 + 1 )
    +[ADD_u13_u13_825_inst] (J_0_766 konst_824_wire_constant) (next_J_0_826)   $flowthrough 
    $delay ADD_u13_u13_825_inst 0
    // 			$volatile crcError0 := (nextCRC_0 != nextCRC16_0) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 358
    // (nextCRC_0 != nextCRC16_0)
    !=[NEQ_u16_u1_834_inst] (nextCRC_0_745 nextCRC16_0_816) (crcError0_835)   $flowthrough 
    $delay NEQ_u16_u1_834_inst 0
    // 			$volatile stopBitError1 := (stopBit1 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 359
    // (stopBit1 == 0 )
    ==[EQ_u1_u1_839_inst] (stopBit1_749 konst_838_wire_constant) (stopBitError1_840)   $flowthrough 
    $delay EQ_u1_u1_839_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 360
    // (next_J_1 < 1024 )
    <[ULT_u13_u1_904_inst] (next_J_1_900 konst_903_wire_constant) (ULT_u13_u1_904_wire)   $flowthrough 
    $delay ULT_u13_u1_904_inst 0
    ==0? [do_while_stmt_841_branch] (ULT_u13_u1_904_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 362
    // 			$phi J_1 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_1 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 363
    # := [next_J_1_900_847_buf] (next_J_1_900) (next_J_1_900_847_buffered)     $fullrate
    $buffering $out next_J_1_900_847_buf next_J_1_900_847_buffered  1
    # $phi [phi_stmt_843] (type_cast_846_wire_constant next_J_1_900_847_buffered) ( J_1_843 ) $fullrate
    // $buffering  $out phi_stmt_843 J_1_843 2
    // 			$phi CRC_16_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 365
    # := [nextCRC16_1_890_852_buf] (nextCRC16_1_890) (nextCRC16_1_890_852_buffered)     $fullrate
    $buffering $out nextCRC16_1_890_852_buf nextCRC16_1_890_852_buffered  1
    # $phi [phi_stmt_848] (type_cast_851_wire_constant nextCRC16_1_890_852_buffered) ( CRC_16_1_848 ) $fullrate
    // $buffering  $out phi_stmt_848 CRC_16_1_848 2
    // 			$phi tempData1 := 			  dat1 $on   $entry 			  nextTempData1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 367
    # := [dat1_749_855_buf] (dat1_749) (dat1_749_855_buffered)     $fullrate
    $buffering $out dat1_749_855_buf dat1_749_855_buffered  1
    # := [nextTempData1_895_856_buf] (nextTempData1_895) (nextTempData1_895_856_buffered)     $fullrate
    $buffering $out nextTempData1_895_856_buf nextTempData1_895_856_buffered  1
    # $phi [phi_stmt_853] (dat1_749_855_buffered nextTempData1_895_856_buffered) ( tempData1_853 ) $fullrate
    // $buffering  $out phi_stmt_853 tempData1_853 2
    // 			$volatile inv1 := ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 370
    // (tempData1 [] 1023 )
    [][BITSEL_u1024_u1_861_inst] (tempData1_853 konst_860_wire_constant) (BITSEL_u1024_u1_861_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_861_inst 0
    // (CRC_16_1 [] 15 )
    [][BITSEL_u16_u1_864_inst] (CRC_16_1_848 konst_863_wire_constant) (BITSEL_u16_u1_864_wire)   $flowthrough 
    $delay BITSEL_u16_u1_864_inst 0
    // ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 ))
    ^[XOR_u1_u1_865_inst] (BITSEL_u1024_u1_861_wire BITSEL_u16_u1_864_wire) (inv1_866)   $flowthrough 
    $delay XOR_u1_u1_865_inst 0
    // 			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 371
    // ( $slice CRC_16_1 14 12 ) 
    [:] [slice_869_inst] (CRC_16_1_848 14 12) (slice_869_wire)  $flowthrough
    $delay slice_869_inst 0
    // (CRC_16_1 [] 11 )
    [][BITSEL_u16_u1_872_inst] (CRC_16_1_848 konst_871_wire_constant) (BITSEL_u16_u1_872_wire)   $flowthrough 
    $delay BITSEL_u16_u1_872_inst 0
    // ((CRC_16_1 [] 11 ) ^ inv1)
    ^[XOR_u1_u1_874_inst] (BITSEL_u16_u1_872_wire inv1_866) (XOR_u1_u1_874_wire)   $flowthrough 
    $delay XOR_u1_u1_874_inst 0
    // (( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1))
    &&[CONCAT_u3_u4_875_inst] (slice_869_wire XOR_u1_u1_874_wire) (CONCAT_u3_u4_875_wire)   $flowthrough 
    $delay CONCAT_u3_u4_875_inst 0
    // ( $slice CRC_16_1 10 5 ) 
    [:] [slice_877_inst] (CRC_16_1_848 10 5) (slice_877_wire)  $flowthrough
    $delay slice_877_inst 0
    // ((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) )
    &&[CONCAT_u4_u10_878_inst] (CONCAT_u3_u4_875_wire slice_877_wire) (CONCAT_u4_u10_878_wire)   $flowthrough 
    $delay CONCAT_u4_u10_878_inst 0
    // (CRC_16_1 [] 4 )
    [][BITSEL_u16_u1_881_inst] (CRC_16_1_848 konst_880_wire_constant) (BITSEL_u16_u1_881_wire)   $flowthrough 
    $delay BITSEL_u16_u1_881_inst 0
    // ((CRC_16_1 [] 4 ) ^ inv1)
    ^[XOR_u1_u1_883_inst] (BITSEL_u16_u1_881_wire inv1_866) (XOR_u1_u1_883_wire)   $flowthrough 
    $delay XOR_u1_u1_883_inst 0
    // ( $slice CRC_16_1 3 0 ) 
    [:] [slice_885_inst] (CRC_16_1_848 3 0) (slice_885_wire)  $flowthrough
    $delay slice_885_inst 0
    // (((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) )
    &&[CONCAT_u1_u5_886_inst] (XOR_u1_u1_883_wire slice_885_wire) (CONCAT_u1_u5_886_wire)   $flowthrough 
    $delay CONCAT_u1_u5_886_inst 0
    // ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)
    &&[CONCAT_u5_u6_888_inst] (CONCAT_u1_u5_886_wire inv1_866) (CONCAT_u5_u6_888_wire)   $flowthrough 
    $delay CONCAT_u5_u6_888_inst 0
    // (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1))
    &&[CONCAT_u10_u16_889_inst] (CONCAT_u4_u10_878_wire CONCAT_u5_u6_888_wire) (nextCRC16_1_890)   $flowthrough 
    $delay CONCAT_u10_u16_889_inst 0
    // 			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 372
    // (tempData1 << 1 )
    <<[SHL_u1024_u1024_894_inst] (tempData1_853 konst_893_wire_constant) (nextTempData1_895)   $flowthrough 
    $delay SHL_u1024_u1024_894_inst 0
    // 			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 373
    // (J_1 + 1 )
    +[ADD_u13_u13_899_inst] (J_1_843 konst_898_wire_constant) (next_J_1_900)   $flowthrough 
    $delay ADD_u13_u13_899_inst 0
    // 			$volatile crcError1 := (nextCRC_1 != nextCRC16_1) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 375
    // (nextCRC_1 != nextCRC16_1)
    !=[NEQ_u16_u1_908_inst] (nextCRC_1_749 nextCRC16_1_890) (crcError1_909)   $flowthrough 
    $delay NEQ_u16_u1_908_inst 0
    // 			$volatile stopBitError2 := (stopBit2 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 376
    // (stopBit2 == 0 )
    ==[EQ_u1_u1_913_inst] (stopBit2_753 konst_912_wire_constant) (stopBitError2_914)   $flowthrough 
    $delay EQ_u1_u1_913_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 377
    // (next_J_2 < 1024 )
    <[ULT_u13_u1_978_inst] (next_J_2_974 konst_977_wire_constant) (ULT_u13_u1_978_wire)   $flowthrough 
    $delay ULT_u13_u1_978_inst 0
    ==0? [do_while_stmt_915_branch] (ULT_u13_u1_978_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 379
    // 			$phi J_2 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_2 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 380
    # := [next_J_2_974_921_buf] (next_J_2_974) (next_J_2_974_921_buffered)     $fullrate
    $buffering $out next_J_2_974_921_buf next_J_2_974_921_buffered  1
    # $phi [phi_stmt_917] (type_cast_920_wire_constant next_J_2_974_921_buffered) ( J_2_917 ) $fullrate
    // $buffering  $out phi_stmt_917 J_2_917 2
    // 			$phi CRC_16_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 382
    # := [nextCRC16_2_964_926_buf] (nextCRC16_2_964) (nextCRC16_2_964_926_buffered)     $fullrate
    $buffering $out nextCRC16_2_964_926_buf nextCRC16_2_964_926_buffered  1
    # $phi [phi_stmt_922] (type_cast_925_wire_constant nextCRC16_2_964_926_buffered) ( CRC_16_2_922 ) $fullrate
    // $buffering  $out phi_stmt_922 CRC_16_2_922 2
    // 			$phi tempData2 := 			  dat2 $on   $entry 			  nextTempData2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 384
    # := [dat2_753_929_buf] (dat2_753) (dat2_753_929_buffered)     $fullrate
    $buffering $out dat2_753_929_buf dat2_753_929_buffered  1
    # := [nextTempData2_969_930_buf] (nextTempData2_969) (nextTempData2_969_930_buffered)     $fullrate
    $buffering $out nextTempData2_969_930_buf nextTempData2_969_930_buffered  1
    # $phi [phi_stmt_927] (dat2_753_929_buffered nextTempData2_969_930_buffered) ( tempData2_927 ) $fullrate
    // $buffering  $out phi_stmt_927 tempData2_927 2
    // 			$volatile inv2 := ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 387
    // (tempData2 [] 1023 )
    [][BITSEL_u1024_u1_935_inst] (tempData2_927 konst_934_wire_constant) (BITSEL_u1024_u1_935_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_935_inst 0
    // (CRC_16_2 [] 15 )
    [][BITSEL_u16_u1_938_inst] (CRC_16_2_922 konst_937_wire_constant) (BITSEL_u16_u1_938_wire)   $flowthrough 
    $delay BITSEL_u16_u1_938_inst 0
    // ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 ))
    ^[XOR_u1_u1_939_inst] (BITSEL_u1024_u1_935_wire BITSEL_u16_u1_938_wire) (inv2_940)   $flowthrough 
    $delay XOR_u1_u1_939_inst 0
    // 			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 388
    // ( $slice CRC_16_2 14 12 ) 
    [:] [slice_943_inst] (CRC_16_2_922 14 12) (slice_943_wire)  $flowthrough
    $delay slice_943_inst 0
    // (CRC_16_2 [] 11 )
    [][BITSEL_u16_u1_946_inst] (CRC_16_2_922 konst_945_wire_constant) (BITSEL_u16_u1_946_wire)   $flowthrough 
    $delay BITSEL_u16_u1_946_inst 0
    // ((CRC_16_2 [] 11 ) ^ inv2)
    ^[XOR_u1_u1_948_inst] (BITSEL_u16_u1_946_wire inv2_940) (XOR_u1_u1_948_wire)   $flowthrough 
    $delay XOR_u1_u1_948_inst 0
    // (( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2))
    &&[CONCAT_u3_u4_949_inst] (slice_943_wire XOR_u1_u1_948_wire) (CONCAT_u3_u4_949_wire)   $flowthrough 
    $delay CONCAT_u3_u4_949_inst 0
    // ( $slice CRC_16_2 10 5 ) 
    [:] [slice_951_inst] (CRC_16_2_922 10 5) (slice_951_wire)  $flowthrough
    $delay slice_951_inst 0
    // ((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) )
    &&[CONCAT_u4_u10_952_inst] (CONCAT_u3_u4_949_wire slice_951_wire) (CONCAT_u4_u10_952_wire)   $flowthrough 
    $delay CONCAT_u4_u10_952_inst 0
    // (CRC_16_2 [] 4 )
    [][BITSEL_u16_u1_955_inst] (CRC_16_2_922 konst_954_wire_constant) (BITSEL_u16_u1_955_wire)   $flowthrough 
    $delay BITSEL_u16_u1_955_inst 0
    // ((CRC_16_2 [] 4 ) ^ inv2)
    ^[XOR_u1_u1_957_inst] (BITSEL_u16_u1_955_wire inv2_940) (XOR_u1_u1_957_wire)   $flowthrough 
    $delay XOR_u1_u1_957_inst 0
    // ( $slice CRC_16_2 3 0 ) 
    [:] [slice_959_inst] (CRC_16_2_922 3 0) (slice_959_wire)  $flowthrough
    $delay slice_959_inst 0
    // (((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) )
    &&[CONCAT_u1_u5_960_inst] (XOR_u1_u1_957_wire slice_959_wire) (CONCAT_u1_u5_960_wire)   $flowthrough 
    $delay CONCAT_u1_u5_960_inst 0
    // ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)
    &&[CONCAT_u5_u6_962_inst] (CONCAT_u1_u5_960_wire inv2_940) (CONCAT_u5_u6_962_wire)   $flowthrough 
    $delay CONCAT_u5_u6_962_inst 0
    // (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2))
    &&[CONCAT_u10_u16_963_inst] (CONCAT_u4_u10_952_wire CONCAT_u5_u6_962_wire) (nextCRC16_2_964)   $flowthrough 
    $delay CONCAT_u10_u16_963_inst 0
    // 			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 389
    // (tempData2 << 1 )
    <<[SHL_u1024_u1024_968_inst] (tempData2_927 konst_967_wire_constant) (nextTempData2_969)   $flowthrough 
    $delay SHL_u1024_u1024_968_inst 0
    // 			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 390
    // (J_2 + 1 )
    +[ADD_u13_u13_973_inst] (J_2_917 konst_972_wire_constant) (next_J_2_974)   $flowthrough 
    $delay ADD_u13_u13_973_inst 0
    // 			$volatile crcError2 := (nextCRC_2 != nextCRC16_2) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 392
    // (nextCRC_2 != nextCRC16_2)
    !=[NEQ_u16_u1_982_inst] (nextCRC_2_753 nextCRC16_2_964) (crcError2_983)   $flowthrough 
    $delay NEQ_u16_u1_982_inst 0
    // 			$volatile stopBitError3 := (stopBit3 == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 393
    // (stopBit3 == 0 )
    ==[EQ_u1_u1_987_inst] (stopBit3_757 konst_986_wire_constant) (stopBitError3_988)   $flowthrough 
    $delay EQ_u1_u1_987_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 394
    // (next_J_3 < 1024 )
    <[ULT_u13_u1_1052_inst] (next_J_3_1048 konst_1051_wire_constant) (ULT_u13_u1_1052_wire)   $flowthrough 
    $delay ULT_u13_u1_1052_inst 0
    ==0? [do_while_stmt_989_branch] (ULT_u13_u1_1052_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 396
    // 			$phi J_3 := 			  ($bitcast ($uint<13>) 0  ) $on   $entry 			  next_J_3 $on   $loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 397
    # := [next_J_3_1048_995_buf] (next_J_3_1048) (next_J_3_1048_995_buffered)     $fullrate
    $buffering $out next_J_3_1048_995_buf next_J_3_1048_995_buffered  1
    # $phi [phi_stmt_991] (type_cast_994_wire_constant next_J_3_1048_995_buffered) ( J_3_991 ) $fullrate
    // $buffering  $out phi_stmt_991 J_3_991 2
    // 			$phi CRC_16_3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 399
    # := [nextCRC16_3_1038_1000_buf] (nextCRC16_3_1038) (nextCRC16_3_1038_1000_buffered)     $fullrate
    $buffering $out nextCRC16_3_1038_1000_buf nextCRC16_3_1038_1000_buffered  1
    # $phi [phi_stmt_996] (type_cast_999_wire_constant nextCRC16_3_1038_1000_buffered) ( CRC_16_3_996 ) $fullrate
    // $buffering  $out phi_stmt_996 CRC_16_3_996 2
    // 			$phi tempData3 := 			  dat3 $on   $entry 			  nextTempData3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 401
    # := [dat3_757_1003_buf] (dat3_757) (dat3_757_1003_buffered)     $fullrate
    $buffering $out dat3_757_1003_buf dat3_757_1003_buffered  1
    # := [nextTempData3_1043_1004_buf] (nextTempData3_1043) (nextTempData3_1043_1004_buffered)     $fullrate
    $buffering $out nextTempData3_1043_1004_buf nextTempData3_1043_1004_buffered  1
    # $phi [phi_stmt_1001] (dat3_757_1003_buffered nextTempData3_1043_1004_buffered) ( tempData3_1001 ) $fullrate
    // $buffering  $out phi_stmt_1001 tempData3_1001 2
    // 			$volatile inv3 := ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 404
    // (tempData3 [] 1023 )
    [][BITSEL_u1024_u1_1009_inst] (tempData3_1001 konst_1008_wire_constant) (BITSEL_u1024_u1_1009_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1009_inst 0
    // (CRC_16_3 [] 15 )
    [][BITSEL_u16_u1_1012_inst] (CRC_16_3_996 konst_1011_wire_constant) (BITSEL_u16_u1_1012_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1012_inst 0
    // ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 ))
    ^[XOR_u1_u1_1013_inst] (BITSEL_u1024_u1_1009_wire BITSEL_u16_u1_1012_wire) (inv3_1014)   $flowthrough 
    $delay XOR_u1_u1_1013_inst 0
    // 			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 405
    // ( $slice CRC_16_3 14 12 ) 
    [:] [slice_1017_inst] (CRC_16_3_996 14 12) (slice_1017_wire)  $flowthrough
    $delay slice_1017_inst 0
    // (CRC_16_3 [] 11 )
    [][BITSEL_u16_u1_1020_inst] (CRC_16_3_996 konst_1019_wire_constant) (BITSEL_u16_u1_1020_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1020_inst 0
    // ((CRC_16_3 [] 11 ) ^ inv3)
    ^[XOR_u1_u1_1022_inst] (BITSEL_u16_u1_1020_wire inv3_1014) (XOR_u1_u1_1022_wire)   $flowthrough 
    $delay XOR_u1_u1_1022_inst 0
    // (( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3))
    &&[CONCAT_u3_u4_1023_inst] (slice_1017_wire XOR_u1_u1_1022_wire) (CONCAT_u3_u4_1023_wire)   $flowthrough 
    $delay CONCAT_u3_u4_1023_inst 0
    // ( $slice CRC_16_3 10 5 ) 
    [:] [slice_1025_inst] (CRC_16_3_996 10 5) (slice_1025_wire)  $flowthrough
    $delay slice_1025_inst 0
    // ((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) )
    &&[CONCAT_u4_u10_1026_inst] (CONCAT_u3_u4_1023_wire slice_1025_wire) (CONCAT_u4_u10_1026_wire)   $flowthrough 
    $delay CONCAT_u4_u10_1026_inst 0
    // (CRC_16_3 [] 4 )
    [][BITSEL_u16_u1_1029_inst] (CRC_16_3_996 konst_1028_wire_constant) (BITSEL_u16_u1_1029_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1029_inst 0
    // ((CRC_16_3 [] 4 ) ^ inv3)
    ^[XOR_u1_u1_1031_inst] (BITSEL_u16_u1_1029_wire inv3_1014) (XOR_u1_u1_1031_wire)   $flowthrough 
    $delay XOR_u1_u1_1031_inst 0
    // ( $slice CRC_16_3 3 0 ) 
    [:] [slice_1033_inst] (CRC_16_3_996 3 0) (slice_1033_wire)  $flowthrough
    $delay slice_1033_inst 0
    // (((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) )
    &&[CONCAT_u1_u5_1034_inst] (XOR_u1_u1_1031_wire slice_1033_wire) (CONCAT_u1_u5_1034_wire)   $flowthrough 
    $delay CONCAT_u1_u5_1034_inst 0
    // ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)
    &&[CONCAT_u5_u6_1036_inst] (CONCAT_u1_u5_1034_wire inv3_1014) (CONCAT_u5_u6_1036_wire)   $flowthrough 
    $delay CONCAT_u5_u6_1036_inst 0
    // (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3))
    &&[CONCAT_u10_u16_1037_inst] (CONCAT_u4_u10_1026_wire CONCAT_u5_u6_1036_wire) (nextCRC16_3_1038)   $flowthrough 
    $delay CONCAT_u10_u16_1037_inst 0
    // 			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 406
    // (tempData3 << 1 )
    <<[SHL_u1024_u1024_1042_inst] (tempData3_1001 konst_1041_wire_constant) (nextTempData3_1043)   $flowthrough 
    $delay SHL_u1024_u1024_1042_inst 0
    // 			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 407
    // (J_3 + 1 )
    +[ADD_u13_u13_1047_inst] (J_3_991 konst_1046_wire_constant) (next_J_3_1048)   $flowthrough 
    $delay ADD_u13_u13_1047_inst 0
    // 			$volatile crcError3 := (nextCRC_3 != nextCRC16_3) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 409
    // (nextCRC_3 != nextCRC16_3)
    !=[NEQ_u16_u1_1056_inst] (nextCRC_3_757 nextCRC16_3_1038) (crcError3_1057)   $flowthrough 
    $delay NEQ_u16_u1_1056_inst 0
    // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 410
    // rxBufferPointer
    $store [STORE_rxBufferPointer_1058_store_0] $to memory_space_7 (STORE_rxBufferPointer_1058_word_address_0 STORE_rxBufferPointer_1058_data_0) 
    $delay STORE_rxBufferPointer_1058_store_0 5
    &/ [STORE_rxBufferPointer_1058_gather_scatter] (type_cast_1060_wire_constant) (STORE_rxBufferPointer_1058_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 0 )
    ==[EQ_u1_u1_1065_inst] (singleMultipleReadBlock konst_1064_wire_constant) (EQ_u1_u1_1065_wire)   $flowthrough 
    $delay EQ_u1_u1_1065_inst 0
    ==0? [if_stmt_1062_branch] (EQ_u1_u1_1065_wire)
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 412
    // (presentState0Var & _hfb )
    &[AND_u8_u8_1070_inst] (presentState0Var_735 konst_1069_wire_constant) (AND_u8_u8_1070_wire)   
    $buffering  $out AND_u8_u8_1070_inst AND_u8_u8_1070_wire 1
    $delay AND_u8_u8_1070_inst 1
    // sdhcRegisters[36 ]
    $store [array_obj_ref_1067_store_0] $to memory_space_8 (array_obj_ref_1067_word_address_0 array_obj_ref_1067_data_0) 
    $delay array_obj_ref_1067_store_0 5
    &/ [array_obj_ref_1067_gather_scatter] (AND_u8_u8_1070_wire) (array_obj_ref_1067_data_0) 
    $flowthrough 
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 414
    // (next_B < 512 )
    <[ULT_u10_u1_1158_inst] (next_B_1154 konst_1157_wire_constant) (ULT_u10_u1_1158_wire)   $flowthrough 
    $delay ULT_u10_u1_1158_inst 0
    ==0? [do_while_stmt_1073_branch] (ULT_u10_u1_1158_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 416
    // 			$phi B := 			  ($bitcast ($uint<10>) 0  ) $on   $entry 			  next_B $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 417
    # := [next_B_1154_1079_buf] (next_B_1154) (next_B_1154_1079_buffered)     $fullrate
    $buffering $out next_B_1154_1079_buf next_B_1154_1079_buffered  1
    # $phi [phi_stmt_1075] (type_cast_1078_wire_constant next_B_1154_1079_buffered) ( B_1075 ) $fullrate
    // $buffering  $out phi_stmt_1075 B_1075 2
    // 			$phi dataForBuffer0 := 			  dat0 $on   $entry 			  nextDataForBuffer0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 419
    # := [dat0_745_1082_buf] (dat0_745) (dat0_745_1082_buffered)     $fullrate
    $buffering $out dat0_745_1082_buf dat0_745_1082_buffered  1
    # := [nextDataForBuffer0_1134_1083_buf] (nextDataForBuffer0_1134) (nextDataForBuffer0_1134_1083_buffered)     $fullrate
    $buffering $out nextDataForBuffer0_1134_1083_buf nextDataForBuffer0_1134_1083_buffered  1
    # $phi [phi_stmt_1080] (dat0_745_1082_buffered nextDataForBuffer0_1134_1083_buffered) ( dataForBuffer0_1080 ) $fullrate
    // $buffering  $out phi_stmt_1080 dataForBuffer0_1080 2
    // 			$phi dataForBuffer1 := 			  dat1 $on   $entry 			  nextDataForBuffer1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 421
    # := [dat1_749_1086_buf] (dat1_749) (dat1_749_1086_buffered)     $fullrate
    $buffering $out dat1_749_1086_buf dat1_749_1086_buffered  1
    # := [nextDataForBuffer1_1139_1087_buf] (nextDataForBuffer1_1139) (nextDataForBuffer1_1139_1087_buffered)     $fullrate
    $buffering $out nextDataForBuffer1_1139_1087_buf nextDataForBuffer1_1139_1087_buffered  1
    # $phi [phi_stmt_1084] (dat1_749_1086_buffered nextDataForBuffer1_1139_1087_buffered) ( dataForBuffer1_1084 ) $fullrate
    // $buffering  $out phi_stmt_1084 dataForBuffer1_1084 2
    // 			$phi dataForBuffer2 := 			  dat2 $on   $entry 			  nextDataForBuffer2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 423
    # := [dat2_753_1090_buf] (dat2_753) (dat2_753_1090_buffered)     $fullrate
    $buffering $out dat2_753_1090_buf dat2_753_1090_buffered  1
    # := [nextDataForBuffer2_1144_1091_buf] (nextDataForBuffer2_1144) (nextDataForBuffer2_1144_1091_buffered)     $fullrate
    $buffering $out nextDataForBuffer2_1144_1091_buf nextDataForBuffer2_1144_1091_buffered  1
    # $phi [phi_stmt_1088] (dat2_753_1090_buffered nextDataForBuffer2_1144_1091_buffered) ( dataForBuffer2_1088 ) $fullrate
    // $buffering  $out phi_stmt_1088 dataForBuffer2_1088 2
    // 			$phi dataForBuffer3 := 			  dat3 $on   $entry 			  nextDataForBuffer3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 425
    # := [dat3_757_1094_buf] (dat3_757) (dat3_757_1094_buffered)     $fullrate
    $buffering $out dat3_757_1094_buf dat3_757_1094_buffered  1
    # := [nextDataForBuffer3_1149_1095_buf] (nextDataForBuffer3_1149) (nextDataForBuffer3_1149_1095_buffered)     $fullrate
    $buffering $out nextDataForBuffer3_1149_1095_buf nextDataForBuffer3_1149_1095_buffered  1
    # $phi [phi_stmt_1092] (dat3_757_1094_buffered nextDataForBuffer3_1149_1095_buffered) ( dataForBuffer3_1092 ) $fullrate
    // $buffering  $out phi_stmt_1092 dataForBuffer3_1092 2
    // 			dataBufferRx := ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 428
    // (dataForBuffer3 [] 1023 )
    [][BITSEL_u1024_u1_1100_inst] (dataForBuffer3_1092 konst_1099_wire_constant) (BITSEL_u1024_u1_1100_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1100_inst 0
    // (dataForBuffer2 [] 1023 )
    [][BITSEL_u1024_u1_1103_inst] (dataForBuffer2_1088 konst_1102_wire_constant) (BITSEL_u1024_u1_1103_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1103_inst 0
    // ((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 ))
    &&[CONCAT_u1_u2_1104_inst] (BITSEL_u1024_u1_1100_wire BITSEL_u1024_u1_1103_wire) (CONCAT_u1_u2_1104_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1104_inst 0
    // (dataForBuffer1 [] 1023 )
    [][BITSEL_u1024_u1_1107_inst] (dataForBuffer1_1084 konst_1106_wire_constant) (BITSEL_u1024_u1_1107_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1107_inst 0
    // (dataForBuffer0 [] 1023 )
    [][BITSEL_u1024_u1_1110_inst] (dataForBuffer0_1080 konst_1109_wire_constant) (BITSEL_u1024_u1_1110_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1110_inst 0
    // ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))
    &&[CONCAT_u1_u2_1111_inst] (BITSEL_u1024_u1_1107_wire BITSEL_u1024_u1_1110_wire) (CONCAT_u1_u2_1111_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1111_inst 0
    // (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 )))
    &&[CONCAT_u2_u4_1112_inst] (CONCAT_u1_u2_1104_wire CONCAT_u1_u2_1111_wire) (CONCAT_u2_u4_1112_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1112_inst 0
    // (dataForBuffer3 [] 1022 )
    [][BITSEL_u1024_u1_1115_inst] (dataForBuffer3_1092 konst_1114_wire_constant) (BITSEL_u1024_u1_1115_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1115_inst 0
    // (dataForBuffer2 [] 1022 )
    [][BITSEL_u1024_u1_1118_inst] (dataForBuffer2_1088 konst_1117_wire_constant) (BITSEL_u1024_u1_1118_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1118_inst 0
    // ((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 ))
    &&[CONCAT_u1_u2_1119_inst] (BITSEL_u1024_u1_1115_wire BITSEL_u1024_u1_1118_wire) (CONCAT_u1_u2_1119_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1119_inst 0
    // (dataForBuffer1 [] 1022 )
    [][BITSEL_u1024_u1_1122_inst] (dataForBuffer1_1084 konst_1121_wire_constant) (BITSEL_u1024_u1_1122_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1122_inst 0
    // (dataForBuffer0 [] 1022 )
    [][BITSEL_u1024_u1_1125_inst] (dataForBuffer0_1080 konst_1124_wire_constant) (BITSEL_u1024_u1_1125_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_1125_inst 0
    // ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))
    &&[CONCAT_u1_u2_1126_inst] (BITSEL_u1024_u1_1122_wire BITSEL_u1024_u1_1125_wire) (CONCAT_u1_u2_1126_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1126_inst 0
    // (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))
    &&[CONCAT_u2_u4_1127_inst] (CONCAT_u1_u2_1119_wire CONCAT_u1_u2_1126_wire) (CONCAT_u2_u4_1127_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1127_inst 0
    // ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))))
    &&[CONCAT_u4_u8_1128_inst] (CONCAT_u2_u4_1112_wire CONCAT_u2_u4_1127_wire) (CONCAT_u4_u8_1128_wire)    $fullrate
    $buffering  $out CONCAT_u4_u8_1128_inst CONCAT_u4_u8_1128_wire 1
    $delay CONCAT_u4_u8_1128_inst 1
    // dataBufferRx
    $ioport $out [WPIPE_dataBufferRx_1097_inst]  (CONCAT_u4_u8_1128_wire) (dataBufferRx)  $fullrate 
    // 			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 429
    // (dataForBuffer0 << 2 )
    <<[SHL_u1024_u1024_1133_inst] (dataForBuffer0_1080 konst_1132_wire_constant) (nextDataForBuffer0_1134)   $flowthrough 
    $delay SHL_u1024_u1024_1133_inst 0
    // 			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 430
    // (dataForBuffer1 << 2 )
    <<[SHL_u1024_u1024_1138_inst] (dataForBuffer1_1084 konst_1137_wire_constant) (nextDataForBuffer1_1139)   $flowthrough 
    $delay SHL_u1024_u1024_1138_inst 0
    // 			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 431
    // (dataForBuffer2 << 2 )
    <<[SHL_u1024_u1024_1143_inst] (dataForBuffer2_1088 konst_1142_wire_constant) (nextDataForBuffer2_1144)   $flowthrough 
    $delay SHL_u1024_u1024_1143_inst 0
    // 			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 432
    // (dataForBuffer3 << 2 )
    <<[SHL_u1024_u1024_1148_inst] (dataForBuffer3_1092 konst_1147_wire_constant) (nextDataForBuffer3_1149)   $flowthrough 
    $delay SHL_u1024_u1024_1148_inst 0
    // 			$volatile next_B := (B + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 433
    // (B + 1 )
    +[ADD_u10_u10_1153_inst] (B_1075 konst_1152_wire_constant) (next_B_1154)   $flowthrough 
    $delay ADD_u10_u10_1153_inst 0
    // 			$volatile stopBitError_Final := ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 435
    // (stopBitError0 | stopBitError1)
    |[OR_u1_u1_1162_inst] (stopBitError0_763 stopBitError1_840) (OR_u1_u1_1162_wire)   $flowthrough 
    $delay OR_u1_u1_1162_inst 0
    // (stopBitError2 | stopBitError3)
    |[OR_u1_u1_1165_inst] (stopBitError2_914 stopBitError3_988) (OR_u1_u1_1165_wire)   $flowthrough 
    $delay OR_u1_u1_1165_inst 0
    // ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3))
    |[OR_u1_u1_1166_inst] (OR_u1_u1_1162_wire OR_u1_u1_1165_wire) (stopBitError_Final_1167)   $flowthrough 
    $delay OR_u1_u1_1166_inst 0
    // 			$volatile crcError_Final := ((crcError0 | crcError1) | (crcError2 | crcError3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 436
    // (crcError0 | crcError1)
    |[OR_u1_u1_1171_inst] (crcError0_835 crcError1_909) (OR_u1_u1_1171_wire)   $flowthrough 
    $delay OR_u1_u1_1171_inst 0
    // (crcError2 | crcError3)
    |[OR_u1_u1_1174_inst] (crcError2_983 crcError3_1057) (OR_u1_u1_1174_wire)   $flowthrough 
    $delay OR_u1_u1_1174_inst 0
    // ((crcError0 | crcError1) | (crcError2 | crcError3))
    |[OR_u1_u1_1175_inst] (OR_u1_u1_1171_wire OR_u1_u1_1174_wire) (crcError_Final_1176)   $flowthrough 
    $delay OR_u1_u1_1175_inst 0
    // 			dataErrorInterruptStatusVar1_4 := (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 437
    // (ZERO_1 && stopBitError_Final)
    &&[CONCAT_u1_u2_1180_inst] (R_ZERO_1_1178_wire_constant stopBitError_Final_1167) (CONCAT_u1_u2_1180_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1180_inst 0
    // ((ZERO_1 && stopBitError_Final) && crcError_Final)
    &&[CONCAT_u2_u3_1182_inst] (CONCAT_u1_u2_1180_wire crcError_Final_1176) (CONCAT_u2_u3_1182_wire)   $flowthrough 
    $delay CONCAT_u2_u3_1182_inst 0
    // (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2))
    &&[CONCAT_u3_u8_1188_inst] (CONCAT_u2_u3_1182_wire CONCAT_u3_u5_1187_wire_constant) (dataErrorInterruptStatusVar1_4_1189)   
    $buffering  $out CONCAT_u3_u8_1188_inst dataErrorInterruptStatusVar1_4_1189 1
    $delay CONCAT_u3_u8_1188_inst 1
    // 			startBit := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 439
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1192_inst] (DAT0Rx) (startBit_1193) 
    $buffering $out RPIPE_DAT0Rx_1192_inst startBit_1193 1
    // datapath-instances for block %dataRx%data_rx%dat_receive
    //  file .Aa/sdhc.opt.aa, line 440
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 442
    // 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 443
    # := [next_I_1278_1200_buf] (next_I_1278) (next_I_1278_1200_buffered)    
    $phi [phi_stmt_1196] (type_cast_1199_wire_constant next_I_1278_1200_buffered) ( I_1196 ) 
    // 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 445
    # := [next_data_1273_1206_buf] (next_data_1273) (next_data_1273_1206_buffered)    
    $phi [phi_stmt_1201] (type_cast_1205_wire_constant next_data_1273_1206_buffered) ( dat_1201 ) 
    // 				bit7 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 448
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1209_inst] (DAT0Rx) (bit7_1210) 
    $buffering $out RPIPE_DAT0Rx_1209_inst bit7_1210 1
    // 				bit6 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 449
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1212_inst] (DAT0Rx) (bit6_1213) 
    $buffering $out RPIPE_DAT0Rx_1212_inst bit6_1213 1
    // 				bit5 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 450
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1215_inst] (DAT0Rx) (bit5_1216) 
    $buffering $out RPIPE_DAT0Rx_1215_inst bit5_1216 1
    // 				bit4 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 451
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1218_inst] (DAT0Rx) (bit4_1219) 
    $buffering $out RPIPE_DAT0Rx_1218_inst bit4_1219 1
    // 				bit3 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 452
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1221_inst] (DAT0Rx) (bit3_1222) 
    $buffering $out RPIPE_DAT0Rx_1221_inst bit3_1222 1
    // 				bit2 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 453
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1224_inst] (DAT0Rx) (bit2_1225) 
    $buffering $out RPIPE_DAT0Rx_1224_inst bit2_1225 1
    // 				bit1 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 454
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1227_inst] (DAT0Rx) (bit1_1228) 
    $buffering $out RPIPE_DAT0Rx_1227_inst bit1_1228 1
    // 				bit0 := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 455
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1230_inst] (DAT0Rx) (bit0_1231) 
    $buffering $out RPIPE_DAT0Rx_1230_inst bit0_1231 1
    // 				dataBufferRx := (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 456
    // (bit7 && bit6)
    &&[CONCAT_u1_u2_1235_inst] (bit7_1210 bit6_1213) (CONCAT_u1_u2_1235_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1235_inst 0
    // (bit5 && bit4)
    &&[CONCAT_u1_u2_1238_inst] (bit5_1216 bit4_1219) (CONCAT_u1_u2_1238_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1238_inst 0
    // ((bit7 && bit6) && (bit5 && bit4))
    &&[CONCAT_u2_u4_1239_inst] (CONCAT_u1_u2_1235_wire CONCAT_u1_u2_1238_wire) (CONCAT_u2_u4_1239_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1239_inst 0
    // (bit3 && bit2)
    &&[CONCAT_u1_u2_1242_inst] (bit3_1222 bit2_1225) (CONCAT_u1_u2_1242_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1242_inst 0
    // (bit1 && bit0)
    &&[CONCAT_u1_u2_1245_inst] (bit1_1228 bit0_1231) (CONCAT_u1_u2_1245_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1245_inst 0
    // ((bit3 && bit2) && (bit1 && bit0))
    &&[CONCAT_u2_u4_1246_inst] (CONCAT_u1_u2_1242_wire CONCAT_u1_u2_1245_wire) (CONCAT_u2_u4_1246_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1246_inst 0
    // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
    &&[CONCAT_u4_u8_1247_inst] (CONCAT_u2_u4_1239_wire CONCAT_u2_u4_1246_wire) (CONCAT_u4_u8_1247_wire)   
    $buffering  $out CONCAT_u4_u8_1247_inst CONCAT_u4_u8_1247_wire 1
    $delay CONCAT_u4_u8_1247_inst 1
    // dataBufferRx
    $ioport $out [WPIPE_dataBufferRx_1232_inst]  (CONCAT_u4_u8_1247_wire) (dataBufferRx) 
    // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 457
    // (dat << 8 )
    <<[SHL_u4096_u4096_1252_inst] (dat_1201 konst_1251_wire_constant) (SHL_u4096_u4096_1252_wire)   $flowthrough 
    $delay SHL_u4096_u4096_1252_inst 0
    // (bit7 && bit6)
    &&[CONCAT_u1_u2_1258_inst] (bit7_1210 bit6_1213) (CONCAT_u1_u2_1258_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1258_inst 0
    // (bit5 && bit4)
    &&[CONCAT_u1_u2_1261_inst] (bit5_1216 bit4_1219) (CONCAT_u1_u2_1261_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1261_inst 0
    // ((bit7 && bit6) && (bit5 && bit4))
    &&[CONCAT_u2_u4_1262_inst] (CONCAT_u1_u2_1258_wire CONCAT_u1_u2_1261_wire) (CONCAT_u2_u4_1262_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1262_inst 0
    // (bit3 && bit2)
    &&[CONCAT_u1_u2_1265_inst] (bit3_1222 bit2_1225) (CONCAT_u1_u2_1265_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1265_inst 0
    // (bit1 && bit0)
    &&[CONCAT_u1_u2_1268_inst] (bit1_1228 bit0_1231) (CONCAT_u1_u2_1268_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1268_inst 0
    // ((bit3 && bit2) && (bit1 && bit0))
    &&[CONCAT_u2_u4_1269_inst] (CONCAT_u1_u2_1265_wire CONCAT_u1_u2_1268_wire) (CONCAT_u2_u4_1269_wire)   $flowthrough 
    $delay CONCAT_u2_u4_1269_inst 0
    // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
    &&[CONCAT_u4_u8_1270_inst] (CONCAT_u2_u4_1262_wire CONCAT_u2_u4_1269_wire) (CONCAT_u4_u8_1270_wire)   $flowthrough 
    $delay CONCAT_u4_u8_1270_inst 0
    // (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))
    &&[CONCAT_u4088_u4096_1271_inst] (type_cast_1255_wire_constant CONCAT_u4_u8_1270_wire) (CONCAT_u4088_u4096_1271_wire)   $flowthrough 
    $delay CONCAT_u4088_u4096_1271_inst 0
    // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))))
    |[OR_u4096_u4096_1272_inst] (SHL_u4096_u4096_1252_wire CONCAT_u4088_u4096_1271_wire) (next_data_1273)   
    $buffering  $out OR_u4096_u4096_1272_inst next_data_1273 1
    $delay OR_u4096_u4096_1272_inst 1
    // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 458
    // (I + 1 )
    +[ADD_u10_u10_1277_inst] (I_1196 konst_1276_wire_constant) (next_I_1278)   
    $buffering  $out ADD_u10_u10_1277_inst next_I_1278 1
    $delay ADD_u10_u10_1277_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 512 )
    <[ULT_u10_u1_1282_inst] (next_I_1278 konst_1281_wire_constant) (ULT_u10_u1_1282_wire)   $flowthrough 
    $delay ULT_u10_u1_1282_inst 0
    ==0? [if_stmt_1279_branch] (ULT_u10_u1_1282_wire)
    // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 464
    // rxBufferPointer
    $store [STORE_rxBufferPointer_1286_store_0] $to memory_space_7 (STORE_rxBufferPointer_1286_word_address_0 STORE_rxBufferPointer_1286_data_0) 
    $delay STORE_rxBufferPointer_1286_store_0 5
    &/ [STORE_rxBufferPointer_1286_gather_scatter] (type_cast_1288_wire_constant) (STORE_rxBufferPointer_1286_data_0) 
    $flowthrough 
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 465
    // 				$phi K := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_K $on   crcloopback 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 466
    # := [next_K_1318_1296_buf] (next_K_1318) (next_K_1318_1296_buffered)    
    $phi [phi_stmt_1291] (type_cast_1295_wire_constant next_K_1318_1296_buffered) ( K_1291 ) 
    // 				$phi currentCRC := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC $on   crcloopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 468
    # := [nextCRC_1313_1301_buf] (nextCRC_1313) (nextCRC_1313_1301_buffered)    
    $phi [phi_stmt_1297] (type_cast_1300_wire_constant nextCRC_1313_1301_buffered) ( currentCRC_1297 ) 
    // 			nextCRC := ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 471
    // (currentCRC << 1 )
    <<[SHL_u16_u16_1306_inst] (currentCRC_1297 konst_1305_wire_constant) (SHL_u16_u16_1306_wire)   $flowthrough 
    $delay SHL_u16_u16_1306_inst 0
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1310_inst] (DAT0Rx) (RPIPE_DAT0Rx_1310_wire) 
    $buffering $out RPIPE_DAT0Rx_1310_inst RPIPE_DAT0Rx_1310_wire 1
    // (($bitcast ($uint<15>) 0  ) && DAT0Rx)
    &&[CONCAT_u15_u16_1311_inst] (type_cast_1309_wire_constant RPIPE_DAT0Rx_1310_wire) (CONCAT_u15_u16_1311_wire)   $flowthrough 
    $delay CONCAT_u15_u16_1311_inst 0
    // ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx))
    |[OR_u16_u16_1312_inst] (SHL_u16_u16_1306_wire CONCAT_u15_u16_1311_wire) (nextCRC_1313)   
    $buffering  $out OR_u16_u16_1312_inst nextCRC_1313 1
    $delay OR_u16_u16_1312_inst 1
    // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 5. 
    //  file .Aa/sdhc.opt.aa, line 472
    // (K + 1 )
    +[ADD_u5_u5_1317_inst] (K_1291 konst_1316_wire_constant) (next_K_1318)   
    $buffering  $out ADD_u5_u5_1317_inst next_K_1318 1
    $delay ADD_u5_u5_1317_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (next_K < 16 )
    <[ULT_u5_u1_1322_inst] (next_K_1318 konst_1321_wire_constant) (ULT_u5_u1_1322_wire)   $flowthrough 
    $delay ULT_u5_u1_1322_inst 0
    ==0? [if_stmt_1319_branch] (ULT_u5_u1_1322_wire)
    // 			stopBit := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 476
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1326_inst] (DAT0Rx) (stopBit_1327) 
    $buffering $out RPIPE_DAT0Rx_1326_inst stopBit_1327 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (singleMultipleReadBlock == 0 )
    ==[EQ_u1_u1_1331_inst] (singleMultipleReadBlock konst_1330_wire_constant) (EQ_u1_u1_1331_wire)   $flowthrough 
    $delay EQ_u1_u1_1331_inst 0
    ==0? [if_stmt_1328_branch] (EQ_u1_u1_1331_wire)
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 478
    // (presentState0Var & _hfb )
    &[AND_u8_u8_1336_inst] (presentState0Var_735 konst_1335_wire_constant) (AND_u8_u8_1336_wire)   
    $buffering  $out AND_u8_u8_1336_inst AND_u8_u8_1336_wire 1
    $delay AND_u8_u8_1336_inst 1
    // sdhcRegisters[36 ]
    $store [array_obj_ref_1333_store_0] $to memory_space_8 (array_obj_ref_1333_word_address_0 array_obj_ref_1333_data_0) 
    $delay array_obj_ref_1333_store_0 5
    &/ [array_obj_ref_1333_gather_scatter] (AND_u8_u8_1336_wire) (array_obj_ref_1333_data_0) 
    $flowthrough 
    // 			stopBitError := (stopBit == 0 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 480
    // (stopBit == 0 )
    ==[EQ_u1_u1_1342_inst] (stopBit_1327 konst_1341_wire_constant) (stopBitError_1343)   
    $buffering  $out EQ_u1_u1_1342_inst stopBitError_1343 1
    $delay EQ_u1_u1_1342_inst 1
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 481
    // 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 482
    # := [next_J_1402_1349_buf] (next_J_1402) (next_J_1402_1349_buffered)    
    $phi [phi_stmt_1345] (type_cast_1348_wire_constant next_J_1402_1349_buffered) ( J_1345 ) 
    // 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 484
    # := [nextCRC16_1392_1354_buf] (nextCRC16_1392) (nextCRC16_1392_1354_buffered)    
    $phi [phi_stmt_1350] (type_cast_1353_wire_constant nextCRC16_1392_1354_buffered) ( CRC_16_1350 ) 
    // 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 486
    # := [next_data_1273_1357_buf] (next_data_1273) (next_data_1273_1357_buffered)    
    # := [nextTempData_1397_1358_buf] (nextTempData_1397) (nextTempData_1397_1358_buffered)    
    $phi [phi_stmt_1355] (next_data_1273_1357_buffered nextTempData_1397_1358_buffered) ( tempData_1355 ) 
    // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 489
    // (tempData [] 4095 )
    [][BITSEL_u4096_u1_1363_inst] (tempData_1355 konst_1362_wire_constant) (BITSEL_u4096_u1_1363_wire)   $flowthrough 
    $delay BITSEL_u4096_u1_1363_inst 0
    // (CRC_16 [] 15 )
    [][BITSEL_u16_u1_1366_inst] (CRC_16_1350 konst_1365_wire_constant) (BITSEL_u16_u1_1366_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1366_inst 0
    // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
    ^[XOR_u1_u1_1367_inst] (BITSEL_u4096_u1_1363_wire BITSEL_u16_u1_1366_wire) (inv_1368)   
    $buffering  $out XOR_u1_u1_1367_inst inv_1368 1
    $delay XOR_u1_u1_1367_inst 1
    // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 490
    // ( $slice CRC_16 14 12 ) 
    [:] [slice_1371_inst] (CRC_16_1350 14 12) (slice_1371_wire)  $flowthrough
    $delay slice_1371_inst 0
    // (CRC_16 [] 11 )
    [][BITSEL_u16_u1_1374_inst] (CRC_16_1350 konst_1373_wire_constant) (BITSEL_u16_u1_1374_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1374_inst 0
    // ((CRC_16 [] 11 ) ^ inv)
    ^[XOR_u1_u1_1376_inst] (BITSEL_u16_u1_1374_wire inv_1368) (XOR_u1_u1_1376_wire)   $flowthrough 
    $delay XOR_u1_u1_1376_inst 0
    // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
    &&[CONCAT_u3_u4_1377_inst] (slice_1371_wire XOR_u1_u1_1376_wire) (CONCAT_u3_u4_1377_wire)   $flowthrough 
    $delay CONCAT_u3_u4_1377_inst 0
    // ( $slice CRC_16 10 5 ) 
    [:] [slice_1379_inst] (CRC_16_1350 10 5) (slice_1379_wire)  $flowthrough
    $delay slice_1379_inst 0
    // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
    &&[CONCAT_u4_u10_1380_inst] (CONCAT_u3_u4_1377_wire slice_1379_wire) (CONCAT_u4_u10_1380_wire)   $flowthrough 
    $delay CONCAT_u4_u10_1380_inst 0
    // (CRC_16 [] 4 )
    [][BITSEL_u16_u1_1383_inst] (CRC_16_1350 konst_1382_wire_constant) (BITSEL_u16_u1_1383_wire)   $flowthrough 
    $delay BITSEL_u16_u1_1383_inst 0
    // ((CRC_16 [] 4 ) ^ inv)
    ^[XOR_u1_u1_1385_inst] (BITSEL_u16_u1_1383_wire inv_1368) (XOR_u1_u1_1385_wire)   $flowthrough 
    $delay XOR_u1_u1_1385_inst 0
    // ( $slice CRC_16 3 0 ) 
    [:] [slice_1387_inst] (CRC_16_1350 3 0) (slice_1387_wire)  $flowthrough
    $delay slice_1387_inst 0
    // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
    &&[CONCAT_u1_u5_1388_inst] (XOR_u1_u1_1385_wire slice_1387_wire) (CONCAT_u1_u5_1388_wire)   $flowthrough 
    $delay CONCAT_u1_u5_1388_inst 0
    // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
    &&[CONCAT_u5_u6_1390_inst] (CONCAT_u1_u5_1388_wire inv_1368) (CONCAT_u5_u6_1390_wire)   $flowthrough 
    $delay CONCAT_u5_u6_1390_inst 0
    // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
    &&[CONCAT_u10_u16_1391_inst] (CONCAT_u4_u10_1380_wire CONCAT_u5_u6_1390_wire) (nextCRC16_1392)   
    $buffering  $out CONCAT_u10_u16_1391_inst nextCRC16_1392 1
    $delay CONCAT_u10_u16_1391_inst 1
    // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 491
    // (tempData << 1 )
    <<[SHL_u4096_u4096_1396_inst] (tempData_1355 konst_1395_wire_constant) (nextTempData_1397)   
    $buffering  $out SHL_u4096_u4096_1396_inst nextTempData_1397 1
    $delay SHL_u4096_u4096_1396_inst 1
    // 			$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 492
    // (J + 1 )
    +[ADD_u13_u13_1401_inst] (J_1345 konst_1400_wire_constant) (next_J_1402)   $flowthrough 
    $delay ADD_u13_u13_1401_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_J < 4096 )
    <[ULT_u13_u1_1406_inst] (next_J_1402 konst_1405_wire_constant) (ULT_u13_u1_1406_wire)   $flowthrough 
    $delay ULT_u13_u1_1406_inst 0
    ==0? [if_stmt_1403_branch] (ULT_u13_u1_1406_wire)
    // 			crcError := (nextCRC != nextCRC16) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 496
    // (nextCRC != nextCRC16)
    !=[NEQ_u16_u1_1412_inst] (nextCRC_1313 nextCRC16_1392) (crcError_1413)   
    $buffering  $out NEQ_u16_u1_1412_inst crcError_1413 1
    $delay NEQ_u16_u1_1412_inst 1
    // 			dataErrorInterruptStatusVar1_0 := (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 497
    // (ZERO_1 && stopBitError)
    &&[CONCAT_u1_u2_1417_inst] (R_ZERO_1_1415_wire_constant stopBitError_1343) (CONCAT_u1_u2_1417_wire)   $flowthrough 
    $delay CONCAT_u1_u2_1417_inst 0
    // ((ZERO_1 && stopBitError) && crcError)
    &&[CONCAT_u2_u3_1419_inst] (CONCAT_u1_u2_1417_wire crcError_1413) (CONCAT_u2_u3_1419_wire)   $flowthrough 
    $delay CONCAT_u2_u3_1419_inst 0
    // (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2))
    &&[CONCAT_u3_u8_1425_inst] (CONCAT_u2_u3_1419_wire CONCAT_u3_u5_1424_wire_constant) (dataErrorInterruptStatusVar1_0_1426)   
    $buffering  $out CONCAT_u3_u8_1425_inst dataErrorInterruptStatusVar1_0_1426 1
    $delay CONCAT_u3_u8_1425_inst 1
    // 		dataErrorInterruptStatusVar1 := ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 499
    // sdhcRegisters[40 ]
    $load [array_obj_ref_1430_load_0] $from memory_space_8 (array_obj_ref_1430_word_address_0) (array_obj_ref_1430_data_0) 
    $delay array_obj_ref_1430_load_0 5
    &/ [array_obj_ref_1430_gather_scatter] (array_obj_ref_1430_data_0) (array_obj_ref_1430_wire) 
    $flowthrough 
    // (sdhcRegisters[40 ] [] 1 )
    [][BITSEL_u8_u1_1432_inst] (array_obj_ref_1430_wire konst_1431_wire_constant) (BITSEL_u8_u1_1432_wire)   $flowthrough 
    $delay BITSEL_u8_u1_1432_inst 0
    // ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 ) 
    ? [MUX_1435_inst] (BITSEL_u8_u1_1432_wire dataErrorInterruptStatusVar1_4_1189 dataErrorInterruptStatusVar1_0_1426) (dataErrorInterruptStatusVar1) 
    $buffering  $out MUX_1435_inst dataErrorInterruptStatusVar1 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 0 )
    ==[EQ_u1_u1_1440_inst] (singleMultipleReadBlock konst_1439_wire_constant) (EQ_u1_u1_1440_wire)   $flowthrough 
    $delay EQ_u1_u1_1440_inst 0
    ==0? [if_stmt_1437_branch] (EQ_u1_u1_1440_wire)
    // 			sdhcRegisters[37 ] := (presentState1Var & _hfd ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 501
    // (presentState1Var & _hfd )
    &[AND_u8_u8_1445_inst] (presentState1Var_731 konst_1444_wire_constant) (AND_u8_u8_1445_wire)   
    $buffering  $out AND_u8_u8_1445_inst AND_u8_u8_1445_wire 1
    $delay AND_u8_u8_1445_inst 1
    // sdhcRegisters[37 ]
    $store [array_obj_ref_1442_store_0] $to memory_space_8 (array_obj_ref_1442_word_address_0 array_obj_ref_1442_data_0) 
    $delay array_obj_ref_1442_store_0 5
    &/ [array_obj_ref_1442_gather_scatter] (AND_u8_u8_1445_wire) (array_obj_ref_1442_data_0) 
    $flowthrough 
    // 			sdhcRegisters[36 ] := (presentState0Var & _hfd ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 502
    // (presentState0Var & _hfd )
    &[AND_u8_u8_1451_inst] (presentState0Var_735 konst_1450_wire_constant) (AND_u8_u8_1451_wire)   
    $buffering  $out AND_u8_u8_1451_inst AND_u8_u8_1451_wire 1
    $delay AND_u8_u8_1451_inst 1
    // sdhcRegisters[36 ]
    $store [array_obj_ref_1448_store_0] $to memory_space_8 (array_obj_ref_1448_word_address_0 array_obj_ref_1448_data_0) 
    $delay array_obj_ref_1448_store_0 5
    &/ [array_obj_ref_1448_gather_scatter] (AND_u8_u8_1451_wire) (array_obj_ref_1448_data_0) 
    $flowthrough 
  }
  // end data-path
  // 		presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 331
  // sdhcRegisters[37 ]
  array_obj_ref_730_gather_scatter <=> (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Update/array_obj_ref_730_Merge/merge_req) (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Update/array_obj_ref_730_Merge/merge_ack)
  array_obj_ref_730_load_0 <=> (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_730_Update/word_access_complete/word_0/ca)
  // 		presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 332
  // sdhcRegisters[36 ]
  array_obj_ref_734_gather_scatter <=> (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Update/array_obj_ref_734_Merge/merge_req) (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Update/array_obj_ref_734_Merge/merge_ack)
  array_obj_ref_734_load_0 <=> (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_731_to_assign_stmt_735/array_obj_ref_734_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 333
  // sdhcRegisters[40 ]
  array_obj_ref_738_gather_scatter <=> (branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/merge_req) (branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/merge_ack)
  array_obj_ref_738_load_0 <=> (branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/word_access/word_access_0_sample/rr branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/word_access/word_access_0_update/cr) (branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/word_access/word_access_0_sample/ra branch_block_stmt_727/if_stmt_736_eval_test/BITSEL_u8_u1_740/BITSEL_u8_u1_740_inputs/array_obj_ref_738/array_obj_ref_738_read/word_access/word_access_0_update/ca)
  // (sdhcRegisters[40 ] [] 1 )
  if_stmt_736_branch <=> (branch_block_stmt_727/if_stmt_736_eval_test/branch_req) (branch_block_stmt_727/if_stmt_736_else_link/else_choice_transition branch_block_stmt_727/if_stmt_736_if_link/if_choice_transition)
  // 				$call recvdat0 () (dat0 nextCRC_0 stopBit0 ) 
  //  file .Aa/sdhc.opt.aa, line 336
  call_stmt_745_call <=> (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_745/call_stmt_745_Sample/crr branch_block_stmt_727/parallel_block_stmt_741/call_stmt_745/call_stmt_745_Update/ccr) (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_745/call_stmt_745_Sample/cra branch_block_stmt_727/parallel_block_stmt_741/call_stmt_745/call_stmt_745_Update/cca)
  // 				$call recvdat1 () (dat1 nextCRC_1 stopBit1 ) 
  //  file .Aa/sdhc.opt.aa, line 337
  call_stmt_749_call <=> (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_749/call_stmt_749_Sample/crr branch_block_stmt_727/parallel_block_stmt_741/call_stmt_749/call_stmt_749_Update/ccr) (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_749/call_stmt_749_Sample/cra branch_block_stmt_727/parallel_block_stmt_741/call_stmt_749/call_stmt_749_Update/cca)
  // 				$call recvdat2 () (dat2 nextCRC_2 stopBit2 ) 
  //  file .Aa/sdhc.opt.aa, line 338
  call_stmt_753_call <=> (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_753/call_stmt_753_Sample/crr branch_block_stmt_727/parallel_block_stmt_741/call_stmt_753/call_stmt_753_Update/ccr) (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_753/call_stmt_753_Sample/cra branch_block_stmt_727/parallel_block_stmt_741/call_stmt_753/call_stmt_753_Update/cca)
  // 				$call recvdat3 () (dat3 nextCRC_3 stopBit3 ) 
  //  file .Aa/sdhc.opt.aa, line 339
  call_stmt_757_call <=> (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_757/call_stmt_757_Sample/crr branch_block_stmt_727/parallel_block_stmt_741/call_stmt_757/call_stmt_757_Update/ccr) (branch_block_stmt_727/parallel_block_stmt_741/call_stmt_757/call_stmt_757_Sample/cra branch_block_stmt_727/parallel_block_stmt_741/call_stmt_757/call_stmt_757_Update/cca)
  // 			$volatile stopBitError0 := (stopBit0 == 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 342
  // (stopBit0 == 0 )
  // stopBit0
  // CP-DP links for do-while  do_while_stmt_764
  //  file .Aa/sdhc.opt.aa, line 343
  phi_stmt_766 <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_766_loopback_sample_req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_766_entry_sample_req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_766_phi_mux_ack)
  next_J_0_826_768_buf <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_next_J_0_768_Sample/req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_next_J_0_768_Update/req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_next_J_0_768_Sample/ack branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_next_J_0_768_Update/ack)
  phi_stmt_772 <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_772_entry_sample_req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_772_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_772_phi_mux_ack)
  nextCRC16_0_816_776_buf <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextCRC16_0_776_Sample/req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextCRC16_0_776_Update/req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextCRC16_0_776_Sample/ack branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextCRC16_0_776_Update/ack)
  phi_stmt_777 <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_777_entry_sample_req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_777_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/phi_stmt_777_phi_mux_ack)
  dat0_745_779_buf <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_dat0_779_Sample/req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_dat0_779_Update/req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_dat0_779_Sample/ack branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_dat0_779_Update/ack)
  nextTempData0_821_780_buf <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextTempData0_780_Sample/req branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextTempData0_780_Update/req) (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextTempData0_780_Sample/ack branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/R_nextTempData0_780_Update/ack)
  // 			$volatile inv0 := ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 353
  // ((tempData0 [] 1023 ) ^ (CRC_16_0 [] 15 ))
  // (tempData0 [] 1023 )
  // tempData0
  // (CRC_16_0 [] 15 )
  // CRC_16_0
  // 			$volatile nextCRC16_0 := (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 354
  // (((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) ) && ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0))
  // ((( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0)) && ( $slice CRC_16_0 10 5 ) )
  // (( $slice CRC_16_0 14 12 )  && ((CRC_16_0 [] 11 ) ^ inv0))
  // CRC_16_0
  // ((CRC_16_0 [] 11 ) ^ inv0)
  // (CRC_16_0 [] 11 )
  // CRC_16_0
  // inv0
  // CRC_16_0
  // ((((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) ) && inv0)
  // (((CRC_16_0 [] 4 ) ^ inv0) && ( $slice CRC_16_0 3 0 ) )
  // ((CRC_16_0 [] 4 ) ^ inv0)
  // (CRC_16_0 [] 4 )
  // CRC_16_0
  // inv0
  // CRC_16_0
  // inv0
  // 			$volatile nextTempData0 := (tempData0 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 355
  // (tempData0 << 1 )
  // tempData0
  // 			$volatile next_J_0 := (J_0 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 356
  // (J_0 + 1 )
  // J_0
  // (next_J_0 < 1024 )
  // next_J_0
  do_while_stmt_764_branch <=> (branch_block_stmt_727/do_while_stmt_764/do_while_stmt_764_loop_body/condition_evaluated) (branch_block_stmt_727/do_while_stmt_764/loop_exit/ack branch_block_stmt_727/do_while_stmt_764/loop_taken/ack)
  // 			$volatile crcError0 := (nextCRC_0 != nextCRC16_0) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 358
  // (nextCRC_0 != nextCRC16_0)
  // nextCRC_0
  // nextCRC16_0
  // 			$volatile stopBitError1 := (stopBit1 == 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 359
  // (stopBit1 == 0 )
  // stopBit1
  // CP-DP links for do-while  do_while_stmt_841
  //  file .Aa/sdhc.opt.aa, line 360
  phi_stmt_843 <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_843_entry_sample_req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_843_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_843_phi_mux_ack)
  next_J_1_900_847_buf <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_next_J_1_847_Sample/req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_next_J_1_847_Update/req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_next_J_1_847_Sample/ack branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_next_J_1_847_Update/ack)
  phi_stmt_848 <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_848_entry_sample_req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_848_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_848_phi_mux_ack)
  nextCRC16_1_890_852_buf <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextCRC16_1_852_Sample/req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextCRC16_1_852_Update/req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextCRC16_1_852_Sample/ack branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextCRC16_1_852_Update/ack)
  phi_stmt_853 <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_853_entry_sample_req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_853_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/phi_stmt_853_phi_mux_ack)
  dat1_749_855_buf <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_dat1_855_Sample/req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_dat1_855_Update/req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_dat1_855_Sample/ack branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_dat1_855_Update/ack)
  nextTempData1_895_856_buf <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextTempData1_856_Sample/req branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextTempData1_856_Update/req) (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextTempData1_856_Sample/ack branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/R_nextTempData1_856_Update/ack)
  // 			$volatile inv1 := ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 370
  // ((tempData1 [] 1023 ) ^ (CRC_16_1 [] 15 ))
  // (tempData1 [] 1023 )
  // tempData1
  // (CRC_16_1 [] 15 )
  // CRC_16_1
  // 			$volatile nextCRC16_1 := (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 371
  // (((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) ) && ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1))
  // ((( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1)) && ( $slice CRC_16_1 10 5 ) )
  // (( $slice CRC_16_1 14 12 )  && ((CRC_16_1 [] 11 ) ^ inv1))
  // CRC_16_1
  // ((CRC_16_1 [] 11 ) ^ inv1)
  // (CRC_16_1 [] 11 )
  // CRC_16_1
  // inv1
  // CRC_16_1
  // ((((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) ) && inv1)
  // (((CRC_16_1 [] 4 ) ^ inv1) && ( $slice CRC_16_1 3 0 ) )
  // ((CRC_16_1 [] 4 ) ^ inv1)
  // (CRC_16_1 [] 4 )
  // CRC_16_1
  // inv1
  // CRC_16_1
  // inv1
  // 			$volatile nextTempData1 := (tempData1 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 372
  // (tempData1 << 1 )
  // tempData1
  // 			$volatile next_J_1 := (J_1 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 373
  // (J_1 + 1 )
  // J_1
  // (next_J_1 < 1024 )
  // next_J_1
  do_while_stmt_841_branch <=> (branch_block_stmt_727/do_while_stmt_841/do_while_stmt_841_loop_body/condition_evaluated) (branch_block_stmt_727/do_while_stmt_841/loop_exit/ack branch_block_stmt_727/do_while_stmt_841/loop_taken/ack)
  // 			$volatile crcError1 := (nextCRC_1 != nextCRC16_1) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 375
  // (nextCRC_1 != nextCRC16_1)
  // nextCRC_1
  // nextCRC16_1
  // 			$volatile stopBitError2 := (stopBit2 == 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 376
  // (stopBit2 == 0 )
  // stopBit2
  // CP-DP links for do-while  do_while_stmt_915
  //  file .Aa/sdhc.opt.aa, line 377
  phi_stmt_917 <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_917_entry_sample_req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_917_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_917_phi_mux_ack)
  next_J_2_974_921_buf <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_next_J_2_921_Sample/req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_next_J_2_921_Update/req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_next_J_2_921_Sample/ack branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_next_J_2_921_Update/ack)
  phi_stmt_922 <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_922_entry_sample_req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_922_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_922_phi_mux_ack)
  nextCRC16_2_964_926_buf <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextCRC16_2_926_Sample/req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextCRC16_2_926_Update/req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextCRC16_2_926_Sample/ack branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextCRC16_2_926_Update/ack)
  phi_stmt_927 <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_927_entry_sample_req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_927_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/phi_stmt_927_phi_mux_ack)
  dat2_753_929_buf <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_dat2_929_Sample/req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_dat2_929_Update/req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_dat2_929_Sample/ack branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_dat2_929_Update/ack)
  nextTempData2_969_930_buf <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextTempData2_930_Sample/req branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextTempData2_930_Update/req) (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextTempData2_930_Sample/ack branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/R_nextTempData2_930_Update/ack)
  // 			$volatile inv2 := ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 387
  // ((tempData2 [] 1023 ) ^ (CRC_16_2 [] 15 ))
  // (tempData2 [] 1023 )
  // tempData2
  // (CRC_16_2 [] 15 )
  // CRC_16_2
  // 			$volatile nextCRC16_2 := (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 388
  // (((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) ) && ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2))
  // ((( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2)) && ( $slice CRC_16_2 10 5 ) )
  // (( $slice CRC_16_2 14 12 )  && ((CRC_16_2 [] 11 ) ^ inv2))
  // CRC_16_2
  // ((CRC_16_2 [] 11 ) ^ inv2)
  // (CRC_16_2 [] 11 )
  // CRC_16_2
  // inv2
  // CRC_16_2
  // ((((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) ) && inv2)
  // (((CRC_16_2 [] 4 ) ^ inv2) && ( $slice CRC_16_2 3 0 ) )
  // ((CRC_16_2 [] 4 ) ^ inv2)
  // (CRC_16_2 [] 4 )
  // CRC_16_2
  // inv2
  // CRC_16_2
  // inv2
  // 			$volatile nextTempData2 := (tempData2 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 389
  // (tempData2 << 1 )
  // tempData2
  // 			$volatile next_J_2 := (J_2 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 390
  // (J_2 + 1 )
  // J_2
  // (next_J_2 < 1024 )
  // next_J_2
  do_while_stmt_915_branch <=> (branch_block_stmt_727/do_while_stmt_915/do_while_stmt_915_loop_body/condition_evaluated) (branch_block_stmt_727/do_while_stmt_915/loop_exit/ack branch_block_stmt_727/do_while_stmt_915/loop_taken/ack)
  // 			$volatile crcError2 := (nextCRC_2 != nextCRC16_2) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 392
  // (nextCRC_2 != nextCRC16_2)
  // nextCRC_2
  // nextCRC16_2
  // 			$volatile stopBitError3 := (stopBit3 == 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 393
  // (stopBit3 == 0 )
  // stopBit3
  // CP-DP links for do-while  do_while_stmt_989
  //  file .Aa/sdhc.opt.aa, line 394
  phi_stmt_991 <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_991_entry_sample_req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_991_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_991_phi_mux_ack)
  next_J_3_1048_995_buf <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_next_J_3_995_Sample/req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_next_J_3_995_Update/req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_next_J_3_995_Sample/ack branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_next_J_3_995_Update/ack)
  phi_stmt_996 <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_996_entry_sample_req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_996_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_996_phi_mux_ack)
  nextCRC16_3_1038_1000_buf <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextCRC16_3_1000_Sample/req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextCRC16_3_1000_Update/req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextCRC16_3_1000_Sample/ack branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextCRC16_3_1000_Update/ack)
  phi_stmt_1001 <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_1001_entry_sample_req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_1001_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/phi_stmt_1001_phi_mux_ack)
  dat3_757_1003_buf <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_dat3_1003_Sample/req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_dat3_1003_Update/req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_dat3_1003_Sample/ack branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_dat3_1003_Update/ack)
  nextTempData3_1043_1004_buf <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextTempData3_1004_Sample/req branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextTempData3_1004_Update/req) (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextTempData3_1004_Sample/ack branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/R_nextTempData3_1004_Update/ack)
  // 			$volatile inv3 := ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 404
  // ((tempData3 [] 1023 ) ^ (CRC_16_3 [] 15 ))
  // (tempData3 [] 1023 )
  // tempData3
  // (CRC_16_3 [] 15 )
  // CRC_16_3
  // 			$volatile nextCRC16_3 := (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 405
  // (((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) ) && ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3))
  // ((( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3)) && ( $slice CRC_16_3 10 5 ) )
  // (( $slice CRC_16_3 14 12 )  && ((CRC_16_3 [] 11 ) ^ inv3))
  // CRC_16_3
  // ((CRC_16_3 [] 11 ) ^ inv3)
  // (CRC_16_3 [] 11 )
  // CRC_16_3
  // inv3
  // CRC_16_3
  // ((((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) ) && inv3)
  // (((CRC_16_3 [] 4 ) ^ inv3) && ( $slice CRC_16_3 3 0 ) )
  // ((CRC_16_3 [] 4 ) ^ inv3)
  // (CRC_16_3 [] 4 )
  // CRC_16_3
  // inv3
  // CRC_16_3
  // inv3
  // 			$volatile nextTempData3 := (tempData3 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 406
  // (tempData3 << 1 )
  // tempData3
  // 			$volatile next_J_3 := (J_3 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 407
  // (J_3 + 1 )
  // J_3
  // (next_J_3 < 1024 )
  // next_J_3
  do_while_stmt_989_branch <=> (branch_block_stmt_727/do_while_stmt_989/do_while_stmt_989_loop_body/condition_evaluated) (branch_block_stmt_727/do_while_stmt_989/loop_exit/ack branch_block_stmt_727/do_while_stmt_989/loop_taken/ack)
  // 			$volatile crcError3 := (nextCRC_3 != nextCRC16_3) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 409
  // (nextCRC_3 != nextCRC16_3)
  // nextCRC_3
  // nextCRC16_3
  // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 410
  // rxBufferPointer
  STORE_rxBufferPointer_1058_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Sample/STORE_rxBufferPointer_1058_Split/split_req) (branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Sample/STORE_rxBufferPointer_1058_Split/split_ack)
  STORE_rxBufferPointer_1058_store_0 <=> (branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1057_to_assign_stmt_1061/STORE_rxBufferPointer_1058_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (singleMultipleReadBlock == 0 )
  if_stmt_1062_branch <=> (branch_block_stmt_727/if_stmt_1062_eval_test/branch_req) (branch_block_stmt_727/if_stmt_1062_else_link/else_choice_transition branch_block_stmt_727/if_stmt_1062_if_link/if_choice_transition)
  // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 412
  // (presentState0Var & _hfb )
  // presentState0Var
  AND_u8_u8_1070_inst <=> (branch_block_stmt_727/assign_stmt_1071/AND_u8_u8_1070_Sample/rr branch_block_stmt_727/assign_stmt_1071/AND_u8_u8_1070_Update/cr) (branch_block_stmt_727/assign_stmt_1071/AND_u8_u8_1070_Sample/ra branch_block_stmt_727/assign_stmt_1071/AND_u8_u8_1070_Update/ca)
  array_obj_ref_1067_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Sample/array_obj_ref_1067_Split/split_req) (branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Sample/array_obj_ref_1067_Split/split_ack)
  array_obj_ref_1067_store_0 <=> (branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1071/array_obj_ref_1067_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_1073
  //  file .Aa/sdhc.opt.aa, line 414
  phi_stmt_1075 <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1075_entry_sample_req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1075_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1075_phi_mux_ack)
  next_B_1154_1079_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_next_B_1079_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_next_B_1079_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_next_B_1079_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_next_B_1079_Update/ack)
  phi_stmt_1080 <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1080_entry_sample_req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1080_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1080_phi_mux_ack)
  dat0_745_1082_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat0_1082_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat0_1082_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat0_1082_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat0_1082_Update/ack)
  nextDataForBuffer0_1134_1083_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer0_1083_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer0_1083_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer0_1083_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer0_1083_Update/ack)
  phi_stmt_1084 <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1084_entry_sample_req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1084_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1084_phi_mux_ack)
  dat1_749_1086_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat1_1086_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat1_1086_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat1_1086_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat1_1086_Update/ack)
  nextDataForBuffer1_1139_1087_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer1_1087_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer1_1087_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer1_1087_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer1_1087_Update/ack)
  phi_stmt_1088 <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1088_entry_sample_req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1088_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1088_phi_mux_ack)
  dat2_753_1090_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat2_1090_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat2_1090_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat2_1090_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat2_1090_Update/ack)
  nextDataForBuffer2_1144_1091_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer2_1091_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer2_1091_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer2_1091_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer2_1091_Update/ack)
  phi_stmt_1092 <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1092_entry_sample_req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1092_loopback_sample_req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/phi_stmt_1092_phi_mux_ack)
  dat3_757_1094_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat3_1094_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat3_1094_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat3_1094_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_dat3_1094_Update/ack)
  nextDataForBuffer3_1149_1095_buf <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer3_1095_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer3_1095_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer3_1095_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/R_nextDataForBuffer3_1095_Update/ack)
  // 			dataBufferRx := ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 428
  // ((((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))) && (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))))
  // (((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 )) && ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 )))
  // ((dataForBuffer3 [] 1023 ) && (dataForBuffer2 [] 1023 ))
  // (dataForBuffer3 [] 1023 )
  // dataForBuffer3
  // (dataForBuffer2 [] 1023 )
  // dataForBuffer2
  // ((dataForBuffer1 [] 1023 ) && (dataForBuffer0 [] 1023 ))
  // (dataForBuffer1 [] 1023 )
  // dataForBuffer1
  // (dataForBuffer0 [] 1023 )
  // dataForBuffer0
  // (((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 )) && ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 )))
  // ((dataForBuffer3 [] 1022 ) && (dataForBuffer2 [] 1022 ))
  // (dataForBuffer3 [] 1022 )
  // dataForBuffer3
  // (dataForBuffer2 [] 1022 )
  // dataForBuffer2
  // ((dataForBuffer1 [] 1022 ) && (dataForBuffer0 [] 1022 ))
  // (dataForBuffer1 [] 1022 )
  // dataForBuffer1
  // (dataForBuffer0 [] 1022 )
  // dataForBuffer0
  CONCAT_u4_u8_1128_inst <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/CONCAT_u4_u8_1128_Sample/rr branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/CONCAT_u4_u8_1128_Update/cr) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/CONCAT_u4_u8_1128_Sample/ra branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/CONCAT_u4_u8_1128_Update/ca)
  // dataBufferRx
  WPIPE_dataBufferRx_1097_inst <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/WPIPE_dataBufferRx_1097_Sample/req branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/WPIPE_dataBufferRx_1097_Update/req) (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/WPIPE_dataBufferRx_1097_Sample/ack branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/WPIPE_dataBufferRx_1097_Update/ack)
  // 			$volatile nextDataForBuffer0 := (dataForBuffer0 << 2 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 429
  // (dataForBuffer0 << 2 )
  // dataForBuffer0
  // 			$volatile nextDataForBuffer1 := (dataForBuffer1 << 2 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 430
  // (dataForBuffer1 << 2 )
  // dataForBuffer1
  // 			$volatile nextDataForBuffer2 := (dataForBuffer2 << 2 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 431
  // (dataForBuffer2 << 2 )
  // dataForBuffer2
  // 			$volatile nextDataForBuffer3 := (dataForBuffer3 << 2 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 432
  // (dataForBuffer3 << 2 )
  // dataForBuffer3
  // 			$volatile next_B := (B + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 433
  // (B + 1 )
  // B
  // (next_B < 512 )
  // next_B
  do_while_stmt_1073_branch <=> (branch_block_stmt_727/do_while_stmt_1073/do_while_stmt_1073_loop_body/condition_evaluated) (branch_block_stmt_727/do_while_stmt_1073/loop_exit/ack branch_block_stmt_727/do_while_stmt_1073/loop_taken/ack)
  // 			$volatile stopBitError_Final := ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 435
  // ((stopBitError0 | stopBitError1) | (stopBitError2 | stopBitError3))
  // (stopBitError0 | stopBitError1)
  // stopBitError0
  // stopBitError1
  // (stopBitError2 | stopBitError3)
  // stopBitError2
  // stopBitError3
  // 			$volatile crcError_Final := ((crcError0 | crcError1) | (crcError2 | crcError3)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 436
  // ((crcError0 | crcError1) | (crcError2 | crcError3))
  // (crcError0 | crcError1)
  // crcError0
  // crcError1
  // (crcError2 | crcError3)
  // crcError2
  // crcError3
  // 			dataErrorInterruptStatusVar1_4 := (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 437
  // (((ZERO_1 && stopBitError_Final) && crcError_Final) && ((ZERO_1 && ZERO_2) && ZERO_2))
  // ((ZERO_1 && stopBitError_Final) && crcError_Final)
  // (ZERO_1 && stopBitError_Final)
  // stopBitError_Final
  // crcError_Final
  CONCAT_u3_u8_1188_inst <=> (branch_block_stmt_727/assign_stmt_1167_to_assign_stmt_1189/CONCAT_u3_u8_1188_Sample/rr branch_block_stmt_727/assign_stmt_1167_to_assign_stmt_1189/CONCAT_u3_u8_1188_Update/cr) (branch_block_stmt_727/assign_stmt_1167_to_assign_stmt_1189/CONCAT_u3_u8_1188_Sample/ra branch_block_stmt_727/assign_stmt_1167_to_assign_stmt_1189/CONCAT_u3_u8_1188_Update/ca)
  // 			startBit := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 439
  // DAT0Rx
  RPIPE_DAT0Rx_1192_inst <=> (branch_block_stmt_727/assign_stmt_1193/RPIPE_DAT0Rx_1192_Sample/rr branch_block_stmt_727/assign_stmt_1193/RPIPE_DAT0Rx_1192_Update/cr) (branch_block_stmt_727/assign_stmt_1193/RPIPE_DAT0Rx_1192_Sample/ra branch_block_stmt_727/assign_stmt_1193/RPIPE_DAT0Rx_1192_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 442
  next_I_1278_1200_buf <=> (branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1196/phi_stmt_1196_sources/Interlock/Sample/req branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1196/phi_stmt_1196_sources/Interlock/Update/req) (branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1196/phi_stmt_1196_sources/Interlock/Sample/ack branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1196/phi_stmt_1196_sources/Interlock/Update/ack)
  phi_stmt_1196 <=> (branch_block_stmt_727/branch_block_stmt_1194/merge_stmt_1195__entry___PhiReq/phi_stmt_1196/phi_stmt_1196_req branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1196/phi_stmt_1196_req) (branch_block_stmt_727/branch_block_stmt_1194/merge_stmt_1195_PhiAck/phi_stmt_1196_ack)
  next_data_1273_1206_buf <=> (branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1201/phi_stmt_1201_sources/Interlock/Sample/req branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1201/phi_stmt_1201_sources/Interlock/Update/req) (branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1201/phi_stmt_1201_sources/Interlock/Sample/ack branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1201/phi_stmt_1201_sources/Interlock/Update/ack)
  phi_stmt_1201 <=> (branch_block_stmt_727/branch_block_stmt_1194/merge_stmt_1195__entry___PhiReq/phi_stmt_1201/phi_stmt_1201_req branch_block_stmt_727/branch_block_stmt_1194/loopback1_PhiReq/phi_stmt_1201/phi_stmt_1201_req) (branch_block_stmt_727/branch_block_stmt_1194/merge_stmt_1195_PhiAck/phi_stmt_1201_ack)
  // 				bit7 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 448
  // DAT0Rx
  RPIPE_DAT0Rx_1209_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1209_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1209_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1209_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1209_Update/ca)
  // 				bit6 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 449
  // DAT0Rx
  RPIPE_DAT0Rx_1212_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1212_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1212_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1212_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1212_Update/ca)
  // 				bit5 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 450
  // DAT0Rx
  RPIPE_DAT0Rx_1215_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1215_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1215_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1215_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1215_Update/ca)
  // 				bit4 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 451
  // DAT0Rx
  RPIPE_DAT0Rx_1218_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1218_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1218_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1218_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1218_Update/ca)
  // 				bit3 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 452
  // DAT0Rx
  RPIPE_DAT0Rx_1221_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1221_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1221_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1221_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1221_Update/ca)
  // 				bit2 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 453
  // DAT0Rx
  RPIPE_DAT0Rx_1224_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1224_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1224_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1224_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1224_Update/ca)
  // 				bit1 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 454
  // DAT0Rx
  RPIPE_DAT0Rx_1227_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1227_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1227_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1227_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1227_Update/ca)
  // 				bit0 := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 455
  // DAT0Rx
  RPIPE_DAT0Rx_1230_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1230_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1230_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1230_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/RPIPE_DAT0Rx_1230_Update/ca)
  // 				dataBufferRx := (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 456
  // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
  // ((bit7 && bit6) && (bit5 && bit4))
  // (bit7 && bit6)
  // bit7
  // bit6
  // (bit5 && bit4)
  // bit5
  // bit4
  // ((bit3 && bit2) && (bit1 && bit0))
  // (bit3 && bit2)
  // bit3
  // bit2
  // (bit1 && bit0)
  // bit1
  // bit0
  CONCAT_u4_u8_1247_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/CONCAT_u4_u8_1247_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/CONCAT_u4_u8_1247_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/CONCAT_u4_u8_1247_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/CONCAT_u4_u8_1247_Update/ca)
  // dataBufferRx
  WPIPE_dataBufferRx_1232_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/WPIPE_dataBufferRx_1232_Sample/req branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/WPIPE_dataBufferRx_1232_Update/req) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/WPIPE_dataBufferRx_1232_Sample/ack branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/WPIPE_dataBufferRx_1232_Update/ack)
  // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))) $buffering 1// bits of buffering = 4096. 
  //  file .Aa/sdhc.opt.aa, line 457
  // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))))
  // (dat << 8 )
  // dat
  // (($bitcast ($uint<4088>) 0  ) && (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0))))
  // (((bit7 && bit6) && (bit5 && bit4)) && ((bit3 && bit2) && (bit1 && bit0)))
  // ((bit7 && bit6) && (bit5 && bit4))
  // (bit7 && bit6)
  // bit7
  // bit6
  // (bit5 && bit4)
  // bit5
  // bit4
  // ((bit3 && bit2) && (bit1 && bit0))
  // (bit3 && bit2)
  // bit3
  // bit2
  // (bit1 && bit0)
  // bit1
  // bit0
  OR_u4096_u4096_1272_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/OR_u4096_u4096_1272_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/OR_u4096_u4096_1272_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/OR_u4096_u4096_1272_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/OR_u4096_u4096_1272_Update/ca)
  // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 458
  // (I + 1 )
  // I
  ADD_u10_u10_1277_inst <=> (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/ADD_u10_u10_1277_Sample/rr branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/ADD_u10_u10_1277_Update/cr) (branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/ADD_u10_u10_1277_Sample/ra branch_block_stmt_727/branch_block_stmt_1194/assign_stmt_1210_to_assign_stmt_1278/ADD_u10_u10_1277_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_I < 512 )
  if_stmt_1279_branch <=> (branch_block_stmt_727/branch_block_stmt_1194/if_stmt_1279_eval_test/branch_req) (branch_block_stmt_727/branch_block_stmt_1194/if_stmt_1279_else_link/else_choice_transition branch_block_stmt_727/branch_block_stmt_1194/if_stmt_1279_if_link/if_choice_transition)
  // 			rxBufferPointer := ($bitcast ($uint<10>) 512  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 464
  // rxBufferPointer
  STORE_rxBufferPointer_1286_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Sample/STORE_rxBufferPointer_1286_Split/split_req) (branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Sample/STORE_rxBufferPointer_1286_Split/split_ack)
  STORE_rxBufferPointer_1286_store_0 <=> (branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1289/STORE_rxBufferPointer_1286_Update/word_access_complete/word_0/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 465
  next_K_1318_1296_buf <=> (branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1291/phi_stmt_1291_sources/Interlock/Sample/req branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1291/phi_stmt_1291_sources/Interlock/Update/req) (branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1291/phi_stmt_1291_sources/Interlock/Sample/ack branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1291/phi_stmt_1291_sources/Interlock/Update/ack)
  phi_stmt_1291 <=> (branch_block_stmt_727/merge_stmt_1290__entry___PhiReq/phi_stmt_1291/phi_stmt_1291_req branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1291/phi_stmt_1291_req) (branch_block_stmt_727/merge_stmt_1290_PhiAck/phi_stmt_1291_ack)
  nextCRC_1313_1301_buf <=> (branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1297/phi_stmt_1297_sources/Interlock/Sample/req branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1297/phi_stmt_1297_sources/Interlock/Update/req) (branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1297/phi_stmt_1297_sources/Interlock/Sample/ack branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1297/phi_stmt_1297_sources/Interlock/Update/ack)
  phi_stmt_1297 <=> (branch_block_stmt_727/merge_stmt_1290__entry___PhiReq/phi_stmt_1297/phi_stmt_1297_req branch_block_stmt_727/crcloopback_PhiReq/phi_stmt_1297/phi_stmt_1297_req) (branch_block_stmt_727/merge_stmt_1290_PhiAck/phi_stmt_1297_ack)
  // 			nextCRC := ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx)) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 471
  // ((currentCRC << 1 ) | (($bitcast ($uint<15>) 0  ) && DAT0Rx))
  // (currentCRC << 1 )
  // currentCRC
  // (($bitcast ($uint<15>) 0  ) && DAT0Rx)
  // DAT0Rx
  RPIPE_DAT0Rx_1310_inst <=> (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/RPIPE_DAT0Rx_1310_Sample/rr branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/RPIPE_DAT0Rx_1310_Update/cr) (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/RPIPE_DAT0Rx_1310_Sample/ra branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/RPIPE_DAT0Rx_1310_Update/ca)
  OR_u16_u16_1312_inst <=> (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/OR_u16_u16_1312_Sample/rr branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/OR_u16_u16_1312_Update/cr) (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/OR_u16_u16_1312_Sample/ra branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/OR_u16_u16_1312_Update/ca)
  // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 5. 
  //  file .Aa/sdhc.opt.aa, line 472
  // (K + 1 )
  // K
  ADD_u5_u5_1317_inst <=> (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/ADD_u5_u5_1317_Sample/rr branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/ADD_u5_u5_1317_Update/cr) (branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/ADD_u5_u5_1317_Sample/ra branch_block_stmt_727/assign_stmt_1313_to_assign_stmt_1318/ADD_u5_u5_1317_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1349233824
  // (next_K < 16 )
  if_stmt_1319_branch <=> (branch_block_stmt_727/if_stmt_1319_eval_test/branch_req) (branch_block_stmt_727/if_stmt_1319_else_link/else_choice_transition branch_block_stmt_727/if_stmt_1319_if_link/if_choice_transition)
  // 			stopBit := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 476
  // DAT0Rx
  RPIPE_DAT0Rx_1326_inst <=> (branch_block_stmt_727/assign_stmt_1327/RPIPE_DAT0Rx_1326_Sample/rr branch_block_stmt_727/assign_stmt_1327/RPIPE_DAT0Rx_1326_Update/cr) (branch_block_stmt_727/assign_stmt_1327/RPIPE_DAT0Rx_1326_Sample/ra branch_block_stmt_727/assign_stmt_1327/RPIPE_DAT0Rx_1326_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1349233824
  // (singleMultipleReadBlock == 0 )
  if_stmt_1328_branch <=> (branch_block_stmt_727/if_stmt_1328_eval_test/branch_req) (branch_block_stmt_727/if_stmt_1328_else_link/else_choice_transition branch_block_stmt_727/if_stmt_1328_if_link/if_choice_transition)
  // 			sdhcRegisters[36 ] := (presentState0Var & _hfb ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 478
  // (presentState0Var & _hfb )
  // presentState0Var
  AND_u8_u8_1336_inst <=> (branch_block_stmt_727/assign_stmt_1337/AND_u8_u8_1336_Sample/rr branch_block_stmt_727/assign_stmt_1337/AND_u8_u8_1336_Update/cr) (branch_block_stmt_727/assign_stmt_1337/AND_u8_u8_1336_Sample/ra branch_block_stmt_727/assign_stmt_1337/AND_u8_u8_1336_Update/ca)
  array_obj_ref_1333_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Sample/array_obj_ref_1333_Split/split_req) (branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Sample/array_obj_ref_1333_Split/split_ack)
  array_obj_ref_1333_store_0 <=> (branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1337/array_obj_ref_1333_Update/word_access_complete/word_0/ca)
  // 			stopBitError := (stopBit == 0 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 480
  // (stopBit == 0 )
  // stopBit
  EQ_u1_u1_1342_inst <=> (branch_block_stmt_727/assign_stmt_1343/EQ_u1_u1_1342_Sample/rr branch_block_stmt_727/assign_stmt_1343/EQ_u1_u1_1342_Update/cr) (branch_block_stmt_727/assign_stmt_1343/EQ_u1_u1_1342_Sample/ra branch_block_stmt_727/assign_stmt_1343/EQ_u1_u1_1342_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 481
  next_J_1402_1349_buf <=> (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1345/phi_stmt_1345_sources/Interlock/Sample/req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1345/phi_stmt_1345_sources/Interlock/Update/req) (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1345/phi_stmt_1345_sources/Interlock/Sample/ack branch_block_stmt_727/loopback_PhiReq/phi_stmt_1345/phi_stmt_1345_sources/Interlock/Update/ack)
  phi_stmt_1345 <=> (branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1345/phi_stmt_1345_req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1345/phi_stmt_1345_req) (branch_block_stmt_727/merge_stmt_1344_PhiAck/phi_stmt_1345_ack)
  nextCRC16_1392_1354_buf <=> (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1350/phi_stmt_1350_sources/Interlock/Sample/req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1350/phi_stmt_1350_sources/Interlock/Update/req) (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1350/phi_stmt_1350_sources/Interlock/Sample/ack branch_block_stmt_727/loopback_PhiReq/phi_stmt_1350/phi_stmt_1350_sources/Interlock/Update/ack)
  phi_stmt_1350 <=> (branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1350/phi_stmt_1350_req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1350/phi_stmt_1350_req) (branch_block_stmt_727/merge_stmt_1344_PhiAck/phi_stmt_1350_ack)
  next_data_1273_1357_buf <=> (branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Sample/req branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Update/req) (branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Sample/ack branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Update/ack)
  nextTempData_1397_1358_buf <=> (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Sample/req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Update/req) (branch_block_stmt_727/loopback_PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Sample/ack branch_block_stmt_727/loopback_PhiReq/phi_stmt_1355/phi_stmt_1355_sources/Interlock/Update/ack)
  phi_stmt_1355 <=> (branch_block_stmt_727/merge_stmt_1344__entry___PhiReq/phi_stmt_1355/phi_stmt_1355_req branch_block_stmt_727/loopback_PhiReq/phi_stmt_1355/phi_stmt_1355_req) (branch_block_stmt_727/merge_stmt_1344_PhiAck/phi_stmt_1355_ack)
  // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 489
  // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
  // (tempData [] 4095 )
  // tempData
  // (CRC_16 [] 15 )
  // CRC_16
  XOR_u1_u1_1367_inst <=> (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/XOR_u1_u1_1367_Sample/rr branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/XOR_u1_u1_1367_Update/cr) (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/XOR_u1_u1_1367_Sample/ra branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/XOR_u1_u1_1367_Update/ca)
  // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 490
  // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
  // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
  // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
  // CRC_16
  // ((CRC_16 [] 11 ) ^ inv)
  // (CRC_16 [] 11 )
  // CRC_16
  // inv
  // CRC_16
  // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
  // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
  // ((CRC_16 [] 4 ) ^ inv)
  // (CRC_16 [] 4 )
  // CRC_16
  // inv
  // CRC_16
  // inv
  CONCAT_u10_u16_1391_inst <=> (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/CONCAT_u10_u16_1391_Sample/rr branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/CONCAT_u10_u16_1391_Update/cr) (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/CONCAT_u10_u16_1391_Sample/ra branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/CONCAT_u10_u16_1391_Update/ca)
  // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
  //  file .Aa/sdhc.opt.aa, line 491
  // (tempData << 1 )
  // tempData
  SHL_u4096_u4096_1396_inst <=> (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/SHL_u4096_u4096_1396_Sample/rr branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/SHL_u4096_u4096_1396_Update/cr) (branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/SHL_u4096_u4096_1396_Sample/ra branch_block_stmt_727/assign_stmt_1368_to_assign_stmt_1402/SHL_u4096_u4096_1396_Update/ca)
  // 			$volatile next_J := (J + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 492
  // (J + 1 )
  // J
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_J < 4096 )
  if_stmt_1403_branch <=> (branch_block_stmt_727/if_stmt_1403_eval_test/branch_req) (branch_block_stmt_727/if_stmt_1403_else_link/else_choice_transition branch_block_stmt_727/if_stmt_1403_if_link/if_choice_transition)
  // 			crcError := (nextCRC != nextCRC16) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 496
  // (nextCRC != nextCRC16)
  // nextCRC
  // nextCRC16
  NEQ_u16_u1_1412_inst <=> (branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/NEQ_u16_u1_1412_Sample/rr branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/NEQ_u16_u1_1412_Update/cr) (branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/NEQ_u16_u1_1412_Sample/ra branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/NEQ_u16_u1_1412_Update/ca)
  // 			dataErrorInterruptStatusVar1_0 := (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2)) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 497
  // (((ZERO_1 && stopBitError) && crcError) && ((ZERO_1 && ZERO_2) && ZERO_2))
  // ((ZERO_1 && stopBitError) && crcError)
  // (ZERO_1 && stopBitError)
  // stopBitError
  // crcError
  CONCAT_u3_u8_1425_inst <=> (branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/CONCAT_u3_u8_1425_Sample/rr branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/CONCAT_u3_u8_1425_Update/cr) (branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/CONCAT_u3_u8_1425_Sample/ra branch_block_stmt_727/assign_stmt_1413_to_assign_stmt_1426/CONCAT_u3_u8_1425_Update/ca)
  // 		dataErrorInterruptStatusVar1 := ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 499
  // (sdhcRegisters[40 ] [] 1 )
  // sdhcRegisters[40 ]
  array_obj_ref_1430_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Update/array_obj_ref_1430_Merge/merge_req) (branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Update/array_obj_ref_1430_Merge/merge_ack)
  array_obj_ref_1430_load_0 <=> (branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1436/array_obj_ref_1430_Update/word_access_complete/word_0/ca)
  // dataErrorInterruptStatusVar1_4
  // dataErrorInterruptStatusVar1_0
  // ( $mux (sdhcRegisters[40 ] [] 1 ) dataErrorInterruptStatusVar1_4  dataErrorInterruptStatusVar1_0 ) 
  MUX_1435_inst <=> (branch_block_stmt_727/assign_stmt_1436/MUX_1435_start/req branch_block_stmt_727/assign_stmt_1436/MUX_1435_complete/req) (branch_block_stmt_727/assign_stmt_1436/MUX_1435_start/ack branch_block_stmt_727/assign_stmt_1436/MUX_1435_complete/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (singleMultipleReadBlock == 0 )
  if_stmt_1437_branch <=> (branch_block_stmt_727/if_stmt_1437_eval_test/branch_req) (branch_block_stmt_727/if_stmt_1437_else_link/else_choice_transition branch_block_stmt_727/if_stmt_1437_if_link/if_choice_transition)
  // 			sdhcRegisters[37 ] := (presentState1Var & _hfd ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 501
  // (presentState1Var & _hfd )
  // presentState1Var
  AND_u8_u8_1445_inst <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1445_Sample/rr branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1445_Update/cr) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1445_Sample/ra branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1445_Update/ca)
  array_obj_ref_1442_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Sample/array_obj_ref_1442_Split/split_req) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Sample/array_obj_ref_1442_Split/split_ack)
  array_obj_ref_1442_store_0 <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1442_Update/word_access_complete/word_0/ca)
  // 			sdhcRegisters[36 ] := (presentState0Var & _hfd ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 502
  // (presentState0Var & _hfd )
  // presentState0Var
  AND_u8_u8_1451_inst <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1451_Sample/rr branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1451_Update/cr) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1451_Sample/ra branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/AND_u8_u8_1451_Update/ca)
  array_obj_ref_1448_gather_scatter <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Sample/array_obj_ref_1448_Split/split_req) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Sample/array_obj_ref_1448_Split/split_ack)
  array_obj_ref_1448_store_0 <=> (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Sample/word_access_start/word_0/rr branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Update/word_access_complete/word_0/cr) (branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Sample/word_access_start/word_0/ra branch_block_stmt_727/assign_stmt_1446_to_assign_stmt_1452/array_obj_ref_1448_Update/word_access_complete/word_0/ca)
}
$module [command_generator] 
{
  $out normalInterruptStatusVar1:$int<8>
  // can point into 
  normalInterruptStatusVar2:$int<8> := _b00000000
  // can point into 
  errorInterruptStatusVar1:$int<8>
  // can point into 
  errorInterruptStatusVar2:$int<8> := _b00000000
  // can point into 
  dataErrorInterruptStatusVar1:$int<8>
  // can point into 
  dataTransferComplete:$int<8>
  // can point into 
  // pipe-declarations for block %command_generator
  //  file .Aa/sdhc.opt.aa, line 507
  // pipe-declarations for block %command_generator%command
  //  file .Aa/sdhc.opt.aa, line 512
  // pipe-declarations for block %command_generator%command%
  //  file .Aa/sdhc.opt.aa, line 517
  // pipe-declarations for block %command_generator%command%send_command
  //  file .Aa/sdhc.opt.aa, line 532
  // pipe-declarations for block %command_generator%command%
  //  file .Aa/sdhc.opt.aa, line 701
  // memory-space 1 is written into.
  // memory-space 2 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1467] // Branch Block  file .Aa/sdhc.opt.aa, line 512
    {
      $P [branch_block_stmt_1467__entry__]
      branch_block_stmt_1467__entry__ <-| ($entry)
      $P [branch_block_stmt_1467__exit__]
      branch_block_stmt_1467__exit__ |-> ($exit)
      $P [call_stmt_1470_to_assign_stmt_1483__entry__] 
      $P [call_stmt_1470_to_assign_stmt_1483__exit__] 
      $P [merge_stmt_1484__entry__] 
      $P [merge_stmt_1484__exit__] 
      $P [call_stmt_1499_to_assign_stmt_1510__entry__] 
      $P [call_stmt_1499_to_assign_stmt_1510__exit__] 
      $P [if_stmt_1511__entry__] 
      $P [if_stmt_1511__exit__] 
      $P [call_stmt_1519_to_assign_stmt_1529__entry__] 
      $P [call_stmt_1519_to_assign_stmt_1529__exit__] 
      $P [branch_block_stmt_1530__entry__] 
      $P [branch_block_stmt_1530__exit__] 
      $P [assign_stmt_1566_to_assign_stmt_1575__entry__] 
      $P [assign_stmt_1566_to_assign_stmt_1575__exit__] 
      $P [if_stmt_1576__entry__] 
      $P [if_stmt_1576__exit__] 
      $P [if_stmt_1657__entry__] 
      $P [if_stmt_1657__exit__] 
      $P [merge_stmt_2045__entry__] 
      $P [merge_stmt_2045__exit__] 
      $P [if_stmt_2057__entry__] 
      $P [if_stmt_2057__exit__] 
      $P [assign_stmt_2158_to_assign_stmt_2161__entry__] 
      $P [assign_stmt_2158_to_assign_stmt_2161__exit__] 
      ::[call_stmt_1470_to_assign_stmt_1483] 
      {
        // start: 		$call readSDHCRegisters (14  ) (commandRegVal ) 
        //  file .Aa/sdhc.opt.aa, line 514
        $T[call_stmt_1470_sample_start_] 
        $T[call_stmt_1470_sample_completed_] 
        $T[call_stmt_1470_update_start_] 
        $T[call_stmt_1470_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1470_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1470_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1470_sample_start_ &-> (call_stmt_1470_Sample)
        call_stmt_1470_sample_completed_ <-& (call_stmt_1470_Sample)
        call_stmt_1470_sample_completed_ &-> ($null)
        call_stmt_1470_update_start_ &-> (call_stmt_1470_Update)
        call_stmt_1470_update_completed_ <-& (call_stmt_1470_Update)
        // Call output argument 0
        // (as target) commandRegVal
        // start: WAR dependencies for commandRegVal
        // done: WAR dependencies for commandRegVal
        // end: 		$call readSDHCRegisters (14  ) (commandRegVal ) 
        // start: 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
        //  file .Aa/sdhc.opt.aa, line 515
        $T[call_stmt_1473_sample_start_] 
        $T[call_stmt_1473_sample_completed_] 
        $T[call_stmt_1473_update_start_] 
        $T[call_stmt_1473_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1473_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1473_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1473_sample_start_ &-> (call_stmt_1473_Sample)
        call_stmt_1473_sample_completed_ <-& (call_stmt_1473_Sample)
        call_stmt_1473_sample_completed_ &-> ($null)
        call_stmt_1473_update_start_ &-> (call_stmt_1473_Update)
        call_stmt_1473_update_completed_ <-& (call_stmt_1473_Update)
        // Call output argument 0
        // (as target) commandRegVal1
        // start: WAR dependencies for commandRegVal1
        // done: WAR dependencies for commandRegVal1
        // end: 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
        // start: WAR dependencies for tempVal
        // done: WAR dependencies for tempVal
        // start:  		$volatile tempVal := ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) )) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 516
        // volatile! 
        // Source expression
        // ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) ))
        // (ONE_1 && ( $slice commandRegVal1 5 0 ) )
        // ( $slice commandRegVal1 5 0 ) 
        // commandRegVal1
        // Target expression
        // (as target) tempVal
        // start: WAR dependencies for tempVal
        // done: WAR dependencies for tempVal
        // end:  		$volatile tempVal := ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) )) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1470 load
        //  call_stmt_1473 load
      }
      call_stmt_1470_to_assign_stmt_1483__entry__ |-> (call_stmt_1470_to_assign_stmt_1483)
      call_stmt_1470_to_assign_stmt_1483__exit__ <-| (call_stmt_1470_to_assign_stmt_1483)
      ::[call_stmt_1499_to_assign_stmt_1510] 
      {
        // start: 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
        //  file .Aa/sdhc.opt.aa, line 523
        $T[call_stmt_1499_sample_start_] 
        $T[call_stmt_1499_sample_completed_] 
        $T[call_stmt_1499_update_start_] 
        $T[call_stmt_1499_update_completed_] 
        // Call input argument 0
        // (8  + C)
        // C
        // start: Forward dependencies from (8  + C) to transition call_stmt_1499_sample_start_
        // done: Forward dependencies from (8  + C) to transition call_stmt_1499_sample_start_
        ;;[call_stmt_1499_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1499_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1499_sample_start_ &-> (call_stmt_1499_Sample)
        call_stmt_1499_sample_completed_ <-& (call_stmt_1499_Sample)
        call_stmt_1499_sample_completed_ &-> ($null)
        call_stmt_1499_update_start_ &-> (call_stmt_1499_Update)
        call_stmt_1499_update_completed_ <-& (call_stmt_1499_Update)
        // Call output argument 0
        // (as target) tempArgument
        // start: WAR dependencies for tempArgument
        // done: WAR dependencies for tempArgument
        // end: 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
        // start: WAR dependencies for command40bits
        // ignored out-of-scope w_root 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
        // type of target is $uint<40>
        // done: WAR dependencies for command40bits
        // start:  		$volatile command40bits := (( $slice newCommand40bits 31 0 )  && tempArgument) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 524
        // volatile! 
        // Source expression
        // (( $slice newCommand40bits 31 0 )  && tempArgument)
        // ( $slice newCommand40bits 31 0 ) 
        // newCommand40bits
        // tempArgument
        // Target expression
        // (as target) command40bits
        // start: WAR dependencies for command40bits
        // ignored out-of-scope w_root 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
        // type of target is $uint<40>
        // done: WAR dependencies for command40bits
        // end:  		$volatile command40bits := (( $slice newCommand40bits 31 0 )  && tempArgument) $buffering 1
        // start: WAR dependencies for next_C
        // ignored out-of-scope w_root 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
        // type of target is $uint<8>
        // done: WAR dependencies for next_C
        // start:  		$volatile next_C := (C - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 525
        // volatile! 
        // Source expression
        // (C - 1 )
        // C
        // Target expression
        // (as target) next_C
        // start: WAR dependencies for next_C
        // ignored out-of-scope w_root 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
        // type of target is $uint<8>
        // done: WAR dependencies for next_C
        // end:  		$volatile next_C := (C - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1499 load
      }
      call_stmt_1499_to_assign_stmt_1510__entry__ |-> (call_stmt_1499_to_assign_stmt_1510)
      call_stmt_1499_to_assign_stmt_1510__exit__ <-| (call_stmt_1499_to_assign_stmt_1510)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1511_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1511__entry__ |-> (if_stmt_1511_dead_link)
      if_stmt_1511__exit__ <-| (if_stmt_1511_dead_link)
      ;;[if_stmt_1511_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (C != 0 )
        ;;[NEQ_u8_u1_1514] 
        {
          // binary expression 
          ||[NEQ_u8_u1_1514_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1511__entry__ |-> (if_stmt_1511_eval_test)
      $P [NEQ_u8_u1_1514_place]
      NEQ_u8_u1_1514_place <-| (if_stmt_1511_eval_test)
      ;;[if_stmt_1511_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1511_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_1514_place |-> (if_stmt_1511_if_link if_stmt_1511_else_link)
      $P [loopcommand40bits]
      loopcommand40bits <-| (if_stmt_1511_if_link)
      if_stmt_1511__exit__ <-| (if_stmt_1511_else_link)
      ::[call_stmt_1519_to_assign_stmt_1529] 
      {
        // start: 		$call generate_crc_7 (command40bits ) (crc7 ) 
        //  file .Aa/sdhc.opt.aa, line 529
        $T[call_stmt_1519_sample_start_] 
        $T[call_stmt_1519_sample_completed_] 
        $T[call_stmt_1519_update_start_] 
        $T[call_stmt_1519_update_completed_] 
        // Call input argument 0
        // command40bits
        // start: Forward dependencies from command40bits to transition call_stmt_1519_sample_start_
        // done: Forward dependencies from command40bits to transition call_stmt_1519_sample_start_
        ;;[call_stmt_1519_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1519_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1519_sample_start_ &-> (call_stmt_1519_Sample)
        call_stmt_1519_sample_completed_ <-& (call_stmt_1519_Sample)
        call_stmt_1519_sample_completed_ &-> ($null)
        call_stmt_1519_update_start_ &-> (call_stmt_1519_Update)
        call_stmt_1519_update_completed_ <-& (call_stmt_1519_Update)
        // Call output argument 0
        // (as target) crc7
        // start: WAR dependencies for crc7
        // done: WAR dependencies for crc7
        // end: 		$call generate_crc_7 (command40bits ) (crc7 ) 
        // start: WAR dependencies for commandbits
        // ignored out-of-scope w_root 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
        // type of target is $uint<40>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
        // done: WAR dependencies for commandbits
        // start:  		$volatile commandbits := ((command40bits && crc7) && ONE_1) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 530
        // volatile! 
        // Source expression
        // ((command40bits && crc7) && ONE_1)
        // (command40bits && crc7)
        // command40bits
        // crc7
        // Target expression
        // (as target) commandbits
        // start: WAR dependencies for commandbits
        // ignored out-of-scope w_root 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
        // type of target is $uint<40>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
        // done: WAR dependencies for commandbits
        // end:  		$volatile commandbits := ((command40bits && crc7) && ONE_1) $buffering 1
        // start:  		oe := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 531
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_1527_sample_start_] 
        $T[WPIPE_oe_1527_sample_completed_] 
        $T[WPIPE_oe_1527_update_start_] 
        $T[WPIPE_oe_1527_update_completed_] 
        ;;[WPIPE_oe_1527_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_1527_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_1527_sample_start_ &-> (WPIPE_oe_1527_Sample)
        WPIPE_oe_1527_sample_completed_ <-& (WPIPE_oe_1527_Sample)
        WPIPE_oe_1527_update_start_ <-& (WPIPE_oe_1527_sample_completed_)
        WPIPE_oe_1527_update_start_ &-> (WPIPE_oe_1527_Update)
        WPIPE_oe_1527_update_completed_ <-& (WPIPE_oe_1527_Update)
        // end:  		oe := ONE_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      call_stmt_1519_to_assign_stmt_1529__entry__ |-> (call_stmt_1519_to_assign_stmt_1529)
      call_stmt_1519_to_assign_stmt_1529__exit__ <-| (call_stmt_1519_to_assign_stmt_1529)
      <>[branch_block_stmt_1530] // Branch Block  file .Aa/sdhc.opt.aa, line 532
      {
        $P [branch_block_stmt_1530__entry__]
        branch_block_stmt_1530__entry__ <-| ($entry)
        $P [branch_block_stmt_1530__exit__]
        branch_block_stmt_1530__exit__ |-> ($exit)
        $P [do_while_stmt_1531__entry__] 
        $P [do_while_stmt_1531__exit__] 
        // do-while-statement  
        //  file .Aa/sdhc.opt.aa, line 534
        <o> [do_while_stmt_1531]  $depth 7 $buffering 1 
        {
          $P[do_while_stmt_1531__entry__] 
          $P[do_while_stmt_1531__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_1531_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_1533
            // 				$phi J := 				  ZERO_8 $on   $entry 				  next_J $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_1533_sample_start_] 
            $T[phi_stmt_1533_sample_completed_] 
            $T[phi_stmt_1533_update_start_] 
            $T[phi_stmt_1533_update_completed_] 
            $T[phi_stmt_1533_sample_start__ps] 
            phi_stmt_1533_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1533_sample_completed__ps] 
            phi_stmt_1533_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1533_update_start__ps] 
            phi_stmt_1533_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1533_update_completed__ps] 
            phi_stmt_1533_update_completed_ <-& (phi_stmt_1533_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1533_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1533_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1533_update_start_)
            $T[phi_stmt_1533_loopback_trigger] 
            phi_stmt_1533_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1533_loopback_sample_req] 
            $T[phi_stmt_1533_loopback_sample_req_ps] 
            phi_stmt_1533_loopback_sample_req <-& (phi_stmt_1533_loopback_sample_req_ps)
            phi_stmt_1533_loopback_sample_req &-> ($null)
            $T[phi_stmt_1533_entry_trigger] 
            phi_stmt_1533_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1533_entry_sample_req] 
            $T[phi_stmt_1533_entry_sample_req_ps] 
            phi_stmt_1533_entry_sample_req <-& (phi_stmt_1533_entry_sample_req_ps)
            phi_stmt_1533_entry_sample_req &-> ($null)
            phi_stmt_1533_update_start_ o<-& (phi_stmt_1533_update_completed_ 0)
            phi_stmt_1533_sample_start_ o<-& (phi_stmt_1533_sample_completed_ 1)
            $T[phi_stmt_1533_merged_reqs] 
            $T[phi_stmt_1533_phi_mux_ack] 
            $T[phi_stmt_1533_phi_mux_ack_ps] 
            phi_stmt_1533_phi_mux_ack_ps <-& (phi_stmt_1533_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1533_update_completed_)
            $T[R_ZERO_8_1535_sample_start__ps] 
            $T[R_ZERO_8_1535_sample_completed__ps] 
            $T[R_ZERO_8_1535_update_start__ps] 
            $T[R_ZERO_8_1535_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[R_ZERO_8_1535_sample_start_] 
            $T[R_ZERO_8_1535_sample_completed_] 
            R_ZERO_8_1535_sample_completed_ <-& (R_ZERO_8_1535_sample_start_)
            $T[R_ZERO_8_1535_update_start_] 
            $T [R_ZERO_8_1535_update_completed_] $delay 
            R_ZERO_8_1535_update_completed_ <-& (R_ZERO_8_1535_update_start_)
            // Phi start dependency for implicit/constant alternative.
            R_ZERO_8_1535_sample_start_ <-& (R_ZERO_8_1535_sample_start__ps)
            R_ZERO_8_1535_update_start_ <-& (R_ZERO_8_1535_update_start__ps)
            // Phi complete dependency.
            R_ZERO_8_1535_sample_completed__ps <-& (R_ZERO_8_1535_sample_completed_)
            R_ZERO_8_1535_update_completed__ps <-& (R_ZERO_8_1535_update_completed_)
            $T[R_next_J_1536_sample_start__ps] 
            $T[R_next_J_1536_sample_completed__ps] 
            $T[R_next_J_1536_update_start__ps] 
            $T[R_next_J_1536_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_J_1536_sample_start_] 
            $T[R_next_J_1536_sample_completed_] 
            $T[R_next_J_1536_update_start_] 
            $T[R_next_J_1536_update_completed_] 
            ;;[R_next_J_1536_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_J_1536_sample_start_ &-> (R_next_J_1536_Sample)
            R_next_J_1536_sample_completed_ <-& (R_next_J_1536_Sample)
            ;;[R_next_J_1536_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_J_1536_update_start_ &-> (R_next_J_1536_Update)
            R_next_J_1536_update_completed_ <-& (R_next_J_1536_Update)
            // RAW reenables for next_J
            // Phi start dependency for implicit/constant alternative.
            R_next_J_1536_sample_start_ <-& (R_next_J_1536_sample_start__ps)
            R_next_J_1536_update_start_ <-& (R_next_J_1536_update_start__ps)
            // Phi complete dependency.
            R_next_J_1536_sample_completed__ps <-& (R_next_J_1536_sample_completed_)
            R_next_J_1536_update_completed__ps <-& (R_next_J_1536_update_completed_)
            $phisequencer [ phi_stmt_1533_phi_seq] : 
            phi_stmt_1533_entry_trigger R_ZERO_8_1535_sample_start__ps R_ZERO_8_1535_sample_completed__ps R_ZERO_8_1535_update_start__ps R_ZERO_8_1535_update_completed__ps phi_stmt_1533_loopback_trigger R_next_J_1536_sample_start__ps R_next_J_1536_sample_completed__ps R_next_J_1536_update_start__ps R_next_J_1536_update_completed__ps :
            phi_stmt_1533_sample_start__ps phi_stmt_1533_sample_completed__ps phi_stmt_1533_update_start__ps phi_stmt_1533_update_completed__ps :
            phi_stmt_1533_entry_sample_req_ps phi_stmt_1533_loopback_sample_req_ps : 
            phi_stmt_1533_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1533
            // start:  PHI statement phi_stmt_1537
            // 				$phi old_commandbits := 				  commandbits $on   $entry 				  new_commandbits $on   $loopback 
            // type of target is $uint<48>
            $T[phi_stmt_1537_sample_start_] 
            $T[phi_stmt_1537_sample_completed_] 
            $T[phi_stmt_1537_update_start_] 
            $T[phi_stmt_1537_update_completed_] 
            $T[phi_stmt_1537_sample_start__ps] 
            phi_stmt_1537_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1537_sample_completed__ps] 
            phi_stmt_1537_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1537_update_start__ps] 
            phi_stmt_1537_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1537_update_completed__ps] 
            phi_stmt_1537_update_completed_ <-& (phi_stmt_1537_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1537_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1537_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1537_update_start_)
            $T[phi_stmt_1537_loopback_trigger] 
            phi_stmt_1537_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1537_loopback_sample_req] 
            $T[phi_stmt_1537_loopback_sample_req_ps] 
            phi_stmt_1537_loopback_sample_req <-& (phi_stmt_1537_loopback_sample_req_ps)
            phi_stmt_1537_loopback_sample_req &-> ($null)
            $T[phi_stmt_1537_entry_trigger] 
            phi_stmt_1537_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1537_entry_sample_req] 
            $T[phi_stmt_1537_entry_sample_req_ps] 
            phi_stmt_1537_entry_sample_req <-& (phi_stmt_1537_entry_sample_req_ps)
            phi_stmt_1537_entry_sample_req &-> ($null)
            phi_stmt_1537_update_start_ o<-& (phi_stmt_1537_update_completed_ 0)
            phi_stmt_1537_sample_start_ o<-& (phi_stmt_1537_sample_completed_ 1)
            $T[phi_stmt_1537_merged_reqs] 
            $T[phi_stmt_1537_phi_mux_ack] 
            $T[phi_stmt_1537_phi_mux_ack_ps] 
            phi_stmt_1537_phi_mux_ack_ps <-& (phi_stmt_1537_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1537_update_completed_)
            $T[R_commandbits_1539_sample_start__ps] 
            $T[R_commandbits_1539_sample_completed__ps] 
            $T[R_commandbits_1539_update_start__ps] 
            $T[R_commandbits_1539_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_commandbits_1539_sample_start_] 
            $T[R_commandbits_1539_sample_completed_] 
            $T[R_commandbits_1539_update_start_] 
            $T[R_commandbits_1539_update_completed_] 
            ;;[R_commandbits_1539_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_commandbits_1539_sample_start_ &-> (R_commandbits_1539_Sample)
            R_commandbits_1539_sample_completed_ <-& (R_commandbits_1539_Sample)
            ;;[R_commandbits_1539_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_commandbits_1539_update_start_ &-> (R_commandbits_1539_Update)
            R_commandbits_1539_update_completed_ <-& (R_commandbits_1539_Update)
            // RAW reenables for commandbits
            // Phi start dependency for implicit/constant alternative.
            R_commandbits_1539_sample_start_ <-& (R_commandbits_1539_sample_start__ps)
            R_commandbits_1539_update_start_ <-& (R_commandbits_1539_update_start__ps)
            // Phi complete dependency.
            R_commandbits_1539_sample_completed__ps <-& (R_commandbits_1539_sample_completed_)
            R_commandbits_1539_update_completed__ps <-& (R_commandbits_1539_update_completed_)
            $T[R_new_commandbits_1540_sample_start__ps] 
            $T[R_new_commandbits_1540_sample_completed__ps] 
            $T[R_new_commandbits_1540_update_start__ps] 
            $T[R_new_commandbits_1540_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_new_commandbits_1540_sample_start_] 
            $T[R_new_commandbits_1540_sample_completed_] 
            $T[R_new_commandbits_1540_update_start_] 
            $T[R_new_commandbits_1540_update_completed_] 
            ;;[R_new_commandbits_1540_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_new_commandbits_1540_sample_start_ &-> (R_new_commandbits_1540_Sample)
            R_new_commandbits_1540_sample_completed_ <-& (R_new_commandbits_1540_Sample)
            ;;[R_new_commandbits_1540_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_new_commandbits_1540_update_start_ &-> (R_new_commandbits_1540_Update)
            R_new_commandbits_1540_update_completed_ <-& (R_new_commandbits_1540_Update)
            // RAW reenables for new_commandbits
            // Phi start dependency for implicit/constant alternative.
            R_new_commandbits_1540_sample_start_ <-& (R_new_commandbits_1540_sample_start__ps)
            R_new_commandbits_1540_update_start_ <-& (R_new_commandbits_1540_update_start__ps)
            // Phi complete dependency.
            R_new_commandbits_1540_sample_completed__ps <-& (R_new_commandbits_1540_sample_completed_)
            R_new_commandbits_1540_update_completed__ps <-& (R_new_commandbits_1540_update_completed_)
            $phisequencer [ phi_stmt_1537_phi_seq] : 
            phi_stmt_1537_entry_trigger R_commandbits_1539_sample_start__ps R_commandbits_1539_sample_completed__ps R_commandbits_1539_update_start__ps R_commandbits_1539_update_completed__ps phi_stmt_1537_loopback_trigger R_new_commandbits_1540_sample_start__ps R_new_commandbits_1540_sample_completed__ps R_new_commandbits_1540_update_start__ps R_new_commandbits_1540_update_completed__ps :
            phi_stmt_1537_sample_start__ps phi_stmt_1537_sample_completed__ps phi_stmt_1537_update_start__ps phi_stmt_1537_update_completed__ps :
            phi_stmt_1537_entry_sample_req_ps phi_stmt_1537_loopback_sample_req_ps : 
            phi_stmt_1537_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1537
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // start:  				$volatile next_J := (J + 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 542
            // volatile! 
            // Source expression
            // (J + 1 )
            // J
            // Target expression
            // (as target) next_J
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // end:  				$volatile next_J := (J + 1 ) $buffering 1
            // start: WAR dependencies for bit
            // done: WAR dependencies for bit
            // start:  				$volatile bit := ( $slice old_commandbits 47 47 )  $buffering 1
            //  file .Aa/sdhc.opt.aa, line 543
            // volatile! 
            // Source expression
            // ( $slice old_commandbits 47 47 ) 
            // old_commandbits
            // Target expression
            // (as target) bit
            // start: WAR dependencies for bit
            // done: WAR dependencies for bit
            // end:  				$volatile bit := ( $slice old_commandbits 47 47 )  $buffering 1
            // start:  				commandTx := bit $buffering 1// bits of buffering = 1. 
            //  file .Aa/sdhc.opt.aa, line 544
            // Source expression
            // bit
            // Target expression
            // (as target) commandTx
            $T[WPIPE_commandTx_1551_sample_start_] 
            $T[WPIPE_commandTx_1551_sample_completed_] 
            $T[WPIPE_commandTx_1551_update_start_] 
            $T[WPIPE_commandTx_1551_update_completed_] 
            ;;[WPIPE_commandTx_1551_Sample] 
            {
              // pipe write sample-start commandTx
              $T [req] $T [ack] 
            }
            ;;[WPIPE_commandTx_1551_Update] 
            {
              // pipe write update (complete) commandTx
              $T [req] $T [ack] 
            }
            WPIPE_commandTx_1551_sample_start_ &-> (WPIPE_commandTx_1551_Sample)
            WPIPE_commandTx_1551_sample_completed_ <-& (WPIPE_commandTx_1551_Sample)
            WPIPE_commandTx_1551_update_start_ <-& (WPIPE_commandTx_1551_sample_completed_)
            WPIPE_commandTx_1551_update_start_ &-> (WPIPE_commandTx_1551_Update)
            WPIPE_commandTx_1551_update_completed_ <-& (WPIPE_commandTx_1551_Update)
            WPIPE_commandTx_1551_sample_start_ o<-& (WPIPE_commandTx_1551_update_completed_ 0)
            // start: Forward dependencies from bit to transition WPIPE_commandTx_1551_sample_start_
            WPIPE_commandTx_1551_sample_start_ <-& (phi_stmt_1537_update_completed_)
            // done: Forward dependencies from bit to transition WPIPE_commandTx_1551_sample_start_
            // RAW reenables for bit
            phi_stmt_1537_update_start_ o<-& (WPIPE_commandTx_1551_sample_completed_ 0)
            // end:  				commandTx := bit $buffering 1// bits of buffering = 1. 
            // start: WAR dependencies for new_commandbits
            // WAR dependency: Read: new_commandbits before Write: 				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for new_commandbits
            // start:  				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 545
            // volatile! 
            // Source expression
            // (old_commandbits << 1 )
            // old_commandbits
            // Target expression
            // (as target) new_commandbits
            // start: WAR dependencies for new_commandbits
            // WAR dependency: Read: new_commandbits before Write: 				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for new_commandbits
            // end:  				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
            // (next_J < 48 )
            // next_J
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (next_J < 48 ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_1533_update_completed_)
            // done: Forward dependencies from (next_J < 48 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // pipe read/write dependencies for pipe commandTx
            // read-dependencies for pipe commandTx
            // write-dependencies for pipe commandTx
            // signal write dependencies for commandTx
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_1531__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_1531_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_1531__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_1531_loop_body : condition_evaluated
          $bind do_while_stmt_1531__entry__  => do_while_stmt_1531_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_1531_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1531__exit__)
        }
        do_while_stmt_1531__entry__ |-> (do_while_stmt_1531)
        do_while_stmt_1531__exit__ <-| (do_while_stmt_1531)
        do_while_stmt_1531__entry__ <-| (branch_block_stmt_1530__entry__)
        do_while_stmt_1531__exit__ |-> (branch_block_stmt_1530__exit__)
      }
      branch_block_stmt_1530__entry__ |-> (branch_block_stmt_1530)
      branch_block_stmt_1530__exit__ <-| (branch_block_stmt_1530)
      ::[assign_stmt_1566_to_assign_stmt_1575] 
      {
        // start:  		oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 548
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_1564_sample_start_] 
        $T[WPIPE_oe_1564_sample_completed_] 
        $T[WPIPE_oe_1564_update_start_] 
        $T[WPIPE_oe_1564_update_completed_] 
        ;;[WPIPE_oe_1564_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_1564_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_1564_sample_start_ &-> (WPIPE_oe_1564_Sample)
        WPIPE_oe_1564_sample_completed_ <-& (WPIPE_oe_1564_Sample)
        WPIPE_oe_1564_update_start_ <-& (WPIPE_oe_1564_sample_completed_)
        WPIPE_oe_1564_update_start_ &-> (WPIPE_oe_1564_Update)
        WPIPE_oe_1564_update_completed_ <-& (WPIPE_oe_1564_Update)
        // end:  		oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start:  		response_type := ( $slice commandRegVal 1 0 )  $buffering 1// bits of buffering = 2. 
        //  file .Aa/sdhc.opt.aa, line 549
        // Source expression
        // ( $slice commandRegVal 1 0 ) 
        $T[slice_1569_sample_start_] 
        $T[slice_1569_sample_completed_] 
        $T[slice_1569_update_start_] 
        $T[slice_1569_update_completed_] 
        // commandRegVal
        // start: Forward dependencies from commandRegVal to transition slice_1569_sample_start_
        // done: Forward dependencies from commandRegVal to transition slice_1569_sample_start_
        ;;[slice_1569_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[slice_1569_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        slice_1569_sample_start_ &-> (slice_1569_Sample)
        slice_1569_sample_completed_ <-& (slice_1569_Sample)
        slice_1569_sample_completed_ &-> ($null)
        slice_1569_update_start_ &-> (slice_1569_Update)
        slice_1569_update_completed_ <-& (slice_1569_Update)
        // Target expression
        // (as target) response_type
        // start: WAR dependencies for response_type
        // done: WAR dependencies for response_type
        // end:  		response_type := ( $slice commandRegVal 1 0 )  $buffering 1// bits of buffering = 2. 
        // start:  		dataPresentSelect := (commandRegVal [] 5 ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 550
        // Source expression
        // (commandRegVal [] 5 )
        $T[BITSEL_u8_u1_1574_sample_start_] 
        $T[BITSEL_u8_u1_1574_sample_completed_] 
        $T[BITSEL_u8_u1_1574_update_start_] 
        $T[BITSEL_u8_u1_1574_update_completed_] 
        // commandRegVal
        // start: Forward dependencies from commandRegVal to transition BITSEL_u8_u1_1574_sample_start_
        // done: Forward dependencies from commandRegVal to transition BITSEL_u8_u1_1574_sample_start_
        ;;[BITSEL_u8_u1_1574_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[BITSEL_u8_u1_1574_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        BITSEL_u8_u1_1574_sample_start_ &-> (BITSEL_u8_u1_1574_Sample)
        BITSEL_u8_u1_1574_sample_completed_ <-& (BITSEL_u8_u1_1574_Sample)
        BITSEL_u8_u1_1574_sample_completed_ &-> ($null)
        BITSEL_u8_u1_1574_update_start_ &-> (BITSEL_u8_u1_1574_Update)
        BITSEL_u8_u1_1574_update_completed_ <-& (BITSEL_u8_u1_1574_Update)
        // Target expression
        // (as target) dataPresentSelect
        // start: WAR dependencies for dataPresentSelect
        // done: WAR dependencies for dataPresentSelect
        // end:  		dataPresentSelect := (commandRegVal [] 5 ) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      assign_stmt_1566_to_assign_stmt_1575__entry__ |-> (assign_stmt_1566_to_assign_stmt_1575)
      assign_stmt_1566_to_assign_stmt_1575__exit__ <-| (assign_stmt_1566_to_assign_stmt_1575)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1349233824
      ;;[if_stmt_1576_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1576__entry__ |-> (if_stmt_1576_dead_link)
      if_stmt_1576__exit__ <-| (if_stmt_1576_dead_link)
      ;;[if_stmt_1576_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (dataPresentSelect == 1 )
        ;;[EQ_u1_u1_1579] 
        {
          // binary expression 
          ||[EQ_u1_u1_1579_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1576__entry__ |-> (if_stmt_1576_eval_test)
      $P [EQ_u1_u1_1579_place]
      EQ_u1_u1_1579_place <-| (if_stmt_1576_eval_test)
      ;;[if_stmt_1576_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1576_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1579_place |-> (if_stmt_1576_if_link if_stmt_1576_else_link)
      $P [call_stmt_1582_to_assign_stmt_1588__entry__] 
      $P [call_stmt_1582_to_assign_stmt_1588__exit__] 
      $P [merge_stmt_1589__entry__] 
      $P [merge_stmt_1589__exit__] 
      $P [call_stmt_1604_to_assign_stmt_1615__entry__] 
      $P [call_stmt_1604_to_assign_stmt_1615__exit__] 
      $P [if_stmt_1616__entry__] 
      $P [if_stmt_1616__exit__] 
      $P [assign_stmt_1625_to_assign_stmt_1629__entry__] 
      $P [assign_stmt_1625_to_assign_stmt_1629__exit__] 
      $P [if_stmt_1630__entry__] 
      $P [if_stmt_1630__exit__] 
      $P [call_stmt_1652__entry__] 
      $P [call_stmt_1652__exit__] 
      ::[call_stmt_1582_to_assign_stmt_1588] 
      {
        // start: 			$call readSDHCRegisters (12  ) (transferVal ) 
        //  file .Aa/sdhc.opt.aa, line 552
        $T[call_stmt_1582_sample_start_] 
        $T[call_stmt_1582_sample_completed_] 
        $T[call_stmt_1582_update_start_] 
        $T[call_stmt_1582_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1582_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1582_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1582_sample_start_ &-> (call_stmt_1582_Sample)
        call_stmt_1582_sample_completed_ <-& (call_stmt_1582_Sample)
        call_stmt_1582_sample_completed_ &-> ($null)
        call_stmt_1582_update_start_ &-> (call_stmt_1582_Update)
        call_stmt_1582_update_completed_ <-& (call_stmt_1582_Update)
        // Call output argument 0
        // (as target) transferVal
        // start: WAR dependencies for transferVal
        // done: WAR dependencies for transferVal
        // end: 			$call readSDHCRegisters (12  ) (transferVal ) 
        // start:  			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 553
        // Source expression
        // (  $bitreduce |  (transferVal & _h10 ) )
        $T[BITREDUCEOR_u8_u1_1587_sample_start_] 
        $T[BITREDUCEOR_u8_u1_1587_sample_completed_] 
        $T[BITREDUCEOR_u8_u1_1587_update_start_] 
        $T[BITREDUCEOR_u8_u1_1587_update_completed_] 
        // (transferVal & _h10 )
        // transferVal
        // start: Forward dependencies from (transferVal & _h10 ) to transition BITREDUCEOR_u8_u1_1587_sample_start_
        BITREDUCEOR_u8_u1_1587_sample_start_ <-& (call_stmt_1582_update_completed_)
        // done: Forward dependencies from (transferVal & _h10 ) to transition BITREDUCEOR_u8_u1_1587_sample_start_
        ;;[BITREDUCEOR_u8_u1_1587_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[BITREDUCEOR_u8_u1_1587_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        BITREDUCEOR_u8_u1_1587_sample_start_ &-> (BITREDUCEOR_u8_u1_1587_Sample)
        BITREDUCEOR_u8_u1_1587_sample_completed_ <-& (BITREDUCEOR_u8_u1_1587_Sample)
        BITREDUCEOR_u8_u1_1587_sample_completed_ &-> ($null)
        BITREDUCEOR_u8_u1_1587_update_start_ &-> (BITREDUCEOR_u8_u1_1587_Update)
        BITREDUCEOR_u8_u1_1587_update_completed_ <-& (BITREDUCEOR_u8_u1_1587_Update)
        // Target expression
        // (as target) txOrRX
        // start: WAR dependencies for txOrRX
        // done: WAR dependencies for txOrRX
        // end:  			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1582 load
      }
      call_stmt_1582_to_assign_stmt_1588__entry__ |-> (call_stmt_1582_to_assign_stmt_1588)
      call_stmt_1582_to_assign_stmt_1588__exit__ <-| (call_stmt_1582_to_assign_stmt_1588)
      ::[call_stmt_1604_to_assign_stmt_1615] 
      {
        // start: 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        //  file .Aa/sdhc.opt.aa, line 560
        $T[call_stmt_1604_sample_start_] 
        $T[call_stmt_1604_sample_completed_] 
        $T[call_stmt_1604_update_start_] 
        $T[call_stmt_1604_update_completed_] 
        // Call input argument 0
        // (36  + E)
        // E
        // start: Forward dependencies from (36  + E) to transition call_stmt_1604_sample_start_
        // done: Forward dependencies from (36  + E) to transition call_stmt_1604_sample_start_
        ;;[call_stmt_1604_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1604_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1604_sample_start_ &-> (call_stmt_1604_Sample)
        call_stmt_1604_sample_completed_ <-& (call_stmt_1604_Sample)
        call_stmt_1604_sample_completed_ &-> ($null)
        call_stmt_1604_update_start_ &-> (call_stmt_1604_Update)
        call_stmt_1604_update_completed_ <-& (call_stmt_1604_Update)
        // Call output argument 0
        // (as target) readPresentStateTemp
        // start: WAR dependencies for readPresentStateTemp
        // done: WAR dependencies for readPresentStateTemp
        // end: 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // start: WAR dependencies for readPresentState
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // done: WAR dependencies for readPresentState
        // start:  			$volatile readPresentState := (( $slice readNewPresent 7 0 )  && readPresentStateTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 561
        // volatile! 
        // Source expression
        // (( $slice readNewPresent 7 0 )  && readPresentStateTemp)
        // ( $slice readNewPresent 7 0 ) 
        // readNewPresent
        // readPresentStateTemp
        // Target expression
        // (as target) readPresentState
        // start: WAR dependencies for readPresentState
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // done: WAR dependencies for readPresentState
        // end:  			$volatile readPresentState := (( $slice readNewPresent 7 0 )  && readPresentStateTemp) $buffering 1
        // start: WAR dependencies for next_E
        // ignored out-of-scope w_root 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
        // type of target is $uint<8>
        // done: WAR dependencies for next_E
        // start:  			$volatile next_E := (E - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 562
        // volatile! 
        // Source expression
        // (E - 1 )
        // E
        // Target expression
        // (as target) next_E
        // start: WAR dependencies for next_E
        // ignored out-of-scope w_root 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
        // type of target is $uint<8>
        // done: WAR dependencies for next_E
        // end:  			$volatile next_E := (E - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1604 load
      }
      call_stmt_1604_to_assign_stmt_1615__entry__ |-> (call_stmt_1604_to_assign_stmt_1615)
      call_stmt_1604_to_assign_stmt_1615__exit__ <-| (call_stmt_1604_to_assign_stmt_1615)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1616_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1616__entry__ |-> (if_stmt_1616_dead_link)
      if_stmt_1616__exit__ <-| (if_stmt_1616_dead_link)
      ;;[if_stmt_1616_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (E != 0 )
        ;;[NEQ_u8_u1_1619] 
        {
          // binary expression 
          ||[NEQ_u8_u1_1619_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1616__entry__ |-> (if_stmt_1616_eval_test)
      $P [NEQ_u8_u1_1619_place]
      NEQ_u8_u1_1619_place <-| (if_stmt_1616_eval_test)
      ;;[if_stmt_1616_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1616_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_1619_place |-> (if_stmt_1616_if_link if_stmt_1616_else_link)
      $P [loopPresent]
      loopPresent <-| (if_stmt_1616_if_link)
      if_stmt_1616__exit__ <-| (if_stmt_1616_else_link)
      ::[assign_stmt_1625_to_assign_stmt_1629] 
      {
        // start: WAR dependencies for presentState0Var
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for presentState0Var
        // start:  			$volatile presentState0Var := ( $slice readPresentState 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 566
        // volatile! 
        // Source expression
        // ( $slice readPresentState 7 0 ) 
        // readPresentState
        // Target expression
        // (as target) presentState0Var
        // start: WAR dependencies for presentState0Var
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for presentState0Var
        // end:  			$volatile presentState0Var := ( $slice readPresentState 7 0 )  $buffering 1
        // start: WAR dependencies for presentState1Var
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for presentState1Var
        // start:  			$volatile presentState1Var := ( $slice readPresentState 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 567
        // volatile! 
        // Source expression
        // ( $slice readPresentState 15 8 ) 
        // readPresentState
        // Target expression
        // (as target) presentState1Var
        // start: WAR dependencies for presentState1Var
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for presentState1Var
        // end:  			$volatile presentState1Var := ( $slice readPresentState 15 8 )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_1625_to_assign_stmt_1629__entry__ |-> (assign_stmt_1625_to_assign_stmt_1629)
      assign_stmt_1625_to_assign_stmt_1629__exit__ <-| (assign_stmt_1625_to_assign_stmt_1629)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1630_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1630__entry__ |-> (if_stmt_1630_dead_link)
      if_stmt_1630__exit__ <-| (if_stmt_1630_dead_link)
      ;;[if_stmt_1630_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (response_type != 3 )
        ;;[NEQ_u2_u1_1633] 
        {
          // binary expression 
          ||[NEQ_u2_u1_1633_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1630__entry__ |-> (if_stmt_1630_eval_test)
      $P [NEQ_u2_u1_1633_place]
      NEQ_u2_u1_1633_place <-| (if_stmt_1630_eval_test)
      ;;[if_stmt_1630_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1630_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u2_u1_1633_place |-> (if_stmt_1630_if_link if_stmt_1630_else_link)
      $P [assign_stmt_1643_to_call_stmt_1646__entry__] 
      $P [assign_stmt_1643_to_call_stmt_1646__exit__] 
      ::[assign_stmt_1643_to_call_stmt_1646] 
      {
        // start: WAR dependencies for tempPstate
        // ignored out-of-scope w_root 			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for tempPstate
        // start:  			$volatile tempPstate := ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 569
        // volatile! 
        // Source expression
        // ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) ) 
        // txOrRX
        // (presentState1Var | _h02 )
        // presentState1Var
        // (presentState1Var | _h01 )
        // presentState1Var
        // Target expression
        // (as target) tempPstate
        // start: WAR dependencies for tempPstate
        // ignored out-of-scope w_root 			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
        // done: WAR dependencies for tempPstate
        // end:  			$volatile tempPstate := ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) )  $buffering 1
        // start: 			$call writeSDHCRegisters (37  tempPstate ) () 
        //  file .Aa/sdhc.opt.aa, line 570
        $T[call_stmt_1646_sample_start_] 
        $T[call_stmt_1646_sample_completed_] 
        $T[call_stmt_1646_update_start_] 
        $T[call_stmt_1646_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // tempPstate
        // start: Forward dependencies from tempPstate to transition call_stmt_1646_sample_start_
        // done: Forward dependencies from tempPstate to transition call_stmt_1646_sample_start_
        ;;[call_stmt_1646_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1646_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1646_sample_start_ &-> (call_stmt_1646_Sample)
        call_stmt_1646_sample_completed_ <-& (call_stmt_1646_Sample)
        call_stmt_1646_sample_completed_ &-> ($null)
        call_stmt_1646_update_start_ &-> (call_stmt_1646_Update)
        call_stmt_1646_update_completed_ <-& (call_stmt_1646_Update)
        // end: 			$call writeSDHCRegisters (37  tempPstate ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1646 store
      }
      assign_stmt_1643_to_call_stmt_1646__entry__ |-> (assign_stmt_1643_to_call_stmt_1646)
      assign_stmt_1643_to_call_stmt_1646__exit__ <-| (assign_stmt_1643_to_call_stmt_1646)
      assign_stmt_1643_to_call_stmt_1646__entry__ <-| (if_stmt_1630_if_link)
      assign_stmt_1643_to_call_stmt_1646__exit__ |-> (if_stmt_1630__exit__)
      if_stmt_1630__exit__ <-| (if_stmt_1630_else_link)
      ::[call_stmt_1652] 
      {
        // start: 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 572
        $T[call_stmt_1652_sample_start_] 
        $T[call_stmt_1652_sample_completed_] 
        $T[call_stmt_1652_update_start_] 
        $T[call_stmt_1652_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (presentState0Var | _h06 )
        // presentState0Var
        // start: Forward dependencies from (presentState0Var | _h06 ) to transition call_stmt_1652_sample_start_
        // done: Forward dependencies from (presentState0Var | _h06 ) to transition call_stmt_1652_sample_start_
        ;;[call_stmt_1652_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1652_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1652_sample_start_ &-> (call_stmt_1652_Sample)
        call_stmt_1652_sample_completed_ <-& (call_stmt_1652_Sample)
        call_stmt_1652_sample_completed_ &-> ($null)
        call_stmt_1652_update_start_ &-> (call_stmt_1652_Update)
        call_stmt_1652_update_completed_ <-& (call_stmt_1652_Update)
        // end: 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1652 store
      }
      call_stmt_1652__entry__ |-> (call_stmt_1652)
      call_stmt_1652__exit__ <-| (call_stmt_1652)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 554
      ;;[merge_stmt_1589_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1589__entry__ |-> (merge_stmt_1589_dead_link)
      merge_stmt_1589__exit__ <-| (merge_stmt_1589_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 554  --------------------------
      ||[merge_stmt_1589__entry___PhiReq] 
      {
        ;;[phi_stmt_1590] 
        {
          ||[phi_stmt_1590_sources] 
          {
            // sources for 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ONE_8_1592_konst_delay_trans] $delay
          }
          $T [phi_stmt_1590_req] 
        }
        ;;[phi_stmt_1594] 
        {
          ||[phi_stmt_1594_sources] 
          {
            // sources for 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_1597_konst_delay_trans] $delay
          }
          $T [phi_stmt_1594_req] 
        }
      }
      merge_stmt_1589__entry__ |-> (merge_stmt_1589__entry___PhiReq)
      ||[loopPresent_PhiReq] 
      {
        ;;[phi_stmt_1590] 
        {
          ||[phi_stmt_1590_sources] 
          {
            // sources for 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1590_req] 
        }
        ;;[phi_stmt_1594] 
        {
          ||[phi_stmt_1594_sources] 
          {
            // sources for 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1594_req] 
        }
      }
      loopPresent |-> (loopPresent_PhiReq)
      $P [merge_stmt_1589_PhiReqMerge] 
      merge_stmt_1589_PhiReqMerge <-| ( merge_stmt_1589__entry___PhiReq  loopPresent_PhiReq )
      ||[merge_stmt_1589_PhiAck] 
      {
        $T [phi_stmt_1590_ack] 
        $T [phi_stmt_1594_ack] 
      }
      merge_stmt_1589_PhiReqMerge |-> (merge_stmt_1589_PhiAck)
      merge_stmt_1589__exit__  <-| (merge_stmt_1589_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 554  --------------------------
      call_stmt_1582_to_assign_stmt_1588__entry__ <-| (if_stmt_1576_if_link)
      merge_stmt_1589__entry__ <-| (call_stmt_1582_to_assign_stmt_1588__exit__)
      call_stmt_1604_to_assign_stmt_1615__entry__ <-| (merge_stmt_1589__exit__)
      if_stmt_1616__entry__ <-| (call_stmt_1604_to_assign_stmt_1615__exit__)
      assign_stmt_1625_to_assign_stmt_1629__entry__ <-| (if_stmt_1616__exit__)
      if_stmt_1630__entry__ <-| (assign_stmt_1625_to_assign_stmt_1629__exit__)
      call_stmt_1652__entry__ <-| (if_stmt_1630__exit__)
      call_stmt_1652__exit__ |-> (if_stmt_1576__exit__)
      if_stmt_1576__exit__ <-| (if_stmt_1576_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 575
      ;;[if_stmt_1657_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1657__entry__ |-> (if_stmt_1657_dead_link)
      if_stmt_1657__exit__ <-| (if_stmt_1657_dead_link)
      ;;[if_stmt_1657_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((response_type == 2 ) | (response_type == 3 ))
        ;;[OR_u1_u1_1664] 
        {
          // binary expression 
          ||[OR_u1_u1_1664_inputs] 
          {
            // (response_type == 2 )
            ;;[EQ_u2_u1_1660] 
            {
              // binary expression 
              ||[EQ_u2_u1_1660_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // (response_type == 3 )
            ;;[EQ_u2_u1_1663] 
            {
              // binary expression 
              ||[EQ_u2_u1_1663_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1657__entry__ |-> (if_stmt_1657_eval_test)
      $P [OR_u1_u1_1664_place]
      OR_u1_u1_1664_place <-| (if_stmt_1657_eval_test)
      ;;[if_stmt_1657_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1657_else_link] 
      {
        $T [else_choice_transition] 
      }
      OR_u1_u1_1664_place |-> (if_stmt_1657_if_link if_stmt_1657_else_link)
      $P [assign_stmt_1667__entry__] 
      $P [assign_stmt_1667__exit__] 
      $P [if_stmt_1668__entry__] 
      $P [if_stmt_1668__exit__] 
      $P [branch_block_stmt_1676__entry__] 
      $P [branch_block_stmt_1676__exit__] 
      $P [assign_stmt_1720__entry__] 
      $P [assign_stmt_1720__exit__] 
      $P [if_stmt_1723__entry__] 
      $P [if_stmt_1723__exit__] 
      $P [if_stmt_1741__entry__] 
      $P [if_stmt_1741__exit__] 
      $P [if_stmt_1761__entry__] 
      $P [if_stmt_1761__exit__] 
      $P [merge_stmt_1781__entry__] 
      $P [merge_stmt_1781__exit__] 
      $P [call_stmt_1797_to_assign_stmt_1809__entry__] 
      $P [call_stmt_1797_to_assign_stmt_1809__exit__] 
      $P [if_stmt_1810__entry__] 
      $P [if_stmt_1810__exit__] 
      $P [call_stmt_1818_to_assign_stmt_1852__entry__] 
      $P [call_stmt_1818_to_assign_stmt_1852__exit__] 
      $P [normalInterruptResponse2]
      ::[assign_stmt_1667] 
      {
        // start:  			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 576
        // Target expression
        // (as target) responseEnable
        $T[WPIPE_responseEnable_1665_sample_start_] 
        $T[WPIPE_responseEnable_1665_sample_completed_] 
        $T[WPIPE_responseEnable_1665_update_start_] 
        $T[WPIPE_responseEnable_1665_update_completed_] 
        ;;[WPIPE_responseEnable_1665_Sample] 
        {
          // pipe write sample-start responseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_responseEnable_1665_Update] 
        {
          // pipe write update (complete) responseEnable
          $T [req] $T [ack] 
        }
        WPIPE_responseEnable_1665_sample_start_ &-> (WPIPE_responseEnable_1665_Sample)
        WPIPE_responseEnable_1665_sample_completed_ <-& (WPIPE_responseEnable_1665_Sample)
        WPIPE_responseEnable_1665_update_start_ <-& (WPIPE_responseEnable_1665_sample_completed_)
        WPIPE_responseEnable_1665_update_start_ &-> (WPIPE_responseEnable_1665_Update)
        WPIPE_responseEnable_1665_update_completed_ <-& (WPIPE_responseEnable_1665_Update)
        // end:  			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe responseEnable
        // read-dependencies for pipe responseEnable
        // write-dependencies for pipe responseEnable
        // signal write dependencies for responseEnable
      }
      assign_stmt_1667__entry__ |-> (assign_stmt_1667)
      assign_stmt_1667__exit__ <-| (assign_stmt_1667)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1668_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1668__entry__ |-> (if_stmt_1668_dead_link)
      if_stmt_1668__exit__ <-| (if_stmt_1668_dead_link)
      ;;[if_stmt_1668_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (response_type == 3 )
        ;;[EQ_u2_u1_1671] 
        {
          // binary expression 
          ||[EQ_u2_u1_1671_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1668__entry__ |-> (if_stmt_1668_eval_test)
      $P [EQ_u2_u1_1671_place]
      EQ_u2_u1_1671_place <-| (if_stmt_1668_eval_test)
      ;;[if_stmt_1668_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1668_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_1671_place |-> (if_stmt_1668_if_link if_stmt_1668_else_link)
      $P [assign_stmt_1674__entry__] 
      $P [assign_stmt_1674__exit__] 
      ::[assign_stmt_1674] 
      {
        // start:  			busyResponse := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 578
        // Target expression
        // (as target) busyResponse
        $T[WPIPE_busyResponse_1672_sample_start_] 
        $T[WPIPE_busyResponse_1672_sample_completed_] 
        $T[WPIPE_busyResponse_1672_update_start_] 
        $T[WPIPE_busyResponse_1672_update_completed_] 
        ;;[WPIPE_busyResponse_1672_Sample] 
        {
          // pipe write sample-start busyResponse
          $T [req] $T [ack] 
        }
        ;;[WPIPE_busyResponse_1672_Update] 
        {
          // pipe write update (complete) busyResponse
          $T [req] $T [ack] 
        }
        WPIPE_busyResponse_1672_sample_start_ &-> (WPIPE_busyResponse_1672_Sample)
        WPIPE_busyResponse_1672_sample_completed_ <-& (WPIPE_busyResponse_1672_Sample)
        WPIPE_busyResponse_1672_update_start_ <-& (WPIPE_busyResponse_1672_sample_completed_)
        WPIPE_busyResponse_1672_update_start_ &-> (WPIPE_busyResponse_1672_Update)
        WPIPE_busyResponse_1672_update_completed_ <-& (WPIPE_busyResponse_1672_Update)
        // end:  			busyResponse := ONE_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe busyResponse
        // read-dependencies for pipe busyResponse
        // write-dependencies for pipe busyResponse
        // signal write dependencies for busyResponse
      }
      assign_stmt_1674__entry__ |-> (assign_stmt_1674)
      assign_stmt_1674__exit__ <-| (assign_stmt_1674)
      assign_stmt_1674__entry__ <-| (if_stmt_1668_if_link)
      assign_stmt_1674__exit__ |-> (if_stmt_1668__exit__)
      if_stmt_1668__exit__ <-| (if_stmt_1668_else_link)
      <>[branch_block_stmt_1676] // Branch Block  file .Aa/sdhc.opt.aa, line 580
      {
        $P [branch_block_stmt_1676__entry__]
        branch_block_stmt_1676__entry__ <-| ($entry)
        $P [branch_block_stmt_1676__exit__]
        branch_block_stmt_1676__exit__ |-> ($exit)
        $P [do_while_stmt_1677__entry__] 
        $P [do_while_stmt_1677__exit__] 
        // do-while-statement  
        //  file .Aa/sdhc.opt.aa, line 582
        <o> [do_while_stmt_1677]  $depth 5 $buffering 1 
        {
          $P[do_while_stmt_1677__entry__] 
          $P[do_while_stmt_1677__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_1677_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_1679
            // 				$phi J := 				  ($bitcast ($uint<6>) 0  ) $on   $entry 				  next_J $on   $loopback 
            // type of target is $uint<6>
            $T[phi_stmt_1679_sample_start_] 
            $T[phi_stmt_1679_sample_completed_] 
            $T[phi_stmt_1679_update_start_] 
            $T[phi_stmt_1679_update_completed_] 
            $T[phi_stmt_1679_sample_start__ps] 
            phi_stmt_1679_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1679_sample_completed__ps] 
            phi_stmt_1679_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1679_update_start__ps] 
            phi_stmt_1679_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1679_update_completed__ps] 
            phi_stmt_1679_update_completed_ <-& (phi_stmt_1679_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1679_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1679_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1679_update_start_)
            $T[phi_stmt_1679_loopback_trigger] 
            phi_stmt_1679_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1679_loopback_sample_req] 
            $T[phi_stmt_1679_loopback_sample_req_ps] 
            phi_stmt_1679_loopback_sample_req <-& (phi_stmt_1679_loopback_sample_req_ps)
            phi_stmt_1679_loopback_sample_req &-> ($null)
            $T[phi_stmt_1679_entry_trigger] 
            phi_stmt_1679_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1679_entry_sample_req] 
            $T[phi_stmt_1679_entry_sample_req_ps] 
            phi_stmt_1679_entry_sample_req <-& (phi_stmt_1679_entry_sample_req_ps)
            phi_stmt_1679_entry_sample_req &-> ($null)
            phi_stmt_1679_update_start_ o<-& (phi_stmt_1679_update_completed_ 0)
            phi_stmt_1679_sample_start_ o<-& (phi_stmt_1679_sample_completed_ 1)
            $T[phi_stmt_1679_merged_reqs] 
            $T[phi_stmt_1679_phi_mux_ack] 
            $T[phi_stmt_1679_phi_mux_ack_ps] 
            phi_stmt_1679_phi_mux_ack_ps <-& (phi_stmt_1679_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1679_update_completed_)
            $T[type_cast_1682_sample_start__ps] 
            $T[type_cast_1682_sample_completed__ps] 
            $T[type_cast_1682_update_start__ps] 
            $T[type_cast_1682_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_1682_sample_start_] 
            $T[type_cast_1682_sample_completed_] 
            type_cast_1682_sample_completed_ <-& (type_cast_1682_sample_start_)
            $T[type_cast_1682_update_start_] 
            $T [type_cast_1682_update_completed_] $delay 
            type_cast_1682_update_completed_ <-& (type_cast_1682_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_1682_sample_start_ <-& (type_cast_1682_sample_start__ps)
            type_cast_1682_update_start_ <-& (type_cast_1682_update_start__ps)
            // Phi complete dependency.
            type_cast_1682_sample_completed__ps <-& (type_cast_1682_sample_completed_)
            type_cast_1682_update_completed__ps <-& (type_cast_1682_update_completed_)
            $T[R_next_J_1683_sample_start__ps] 
            $T[R_next_J_1683_sample_completed__ps] 
            $T[R_next_J_1683_update_start__ps] 
            $T[R_next_J_1683_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_J_1683_sample_start_] 
            $T[R_next_J_1683_sample_completed_] 
            $T[R_next_J_1683_update_start_] 
            $T[R_next_J_1683_update_completed_] 
            ;;[R_next_J_1683_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_J_1683_sample_start_ &-> (R_next_J_1683_Sample)
            R_next_J_1683_sample_completed_ <-& (R_next_J_1683_Sample)
            ;;[R_next_J_1683_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_J_1683_update_start_ &-> (R_next_J_1683_Update)
            R_next_J_1683_update_completed_ <-& (R_next_J_1683_Update)
            // RAW reenables for next_J
            // Phi start dependency for implicit/constant alternative.
            R_next_J_1683_sample_start_ <-& (R_next_J_1683_sample_start__ps)
            R_next_J_1683_update_start_ <-& (R_next_J_1683_update_start__ps)
            // Phi complete dependency.
            R_next_J_1683_sample_completed__ps <-& (R_next_J_1683_sample_completed_)
            R_next_J_1683_update_completed__ps <-& (R_next_J_1683_update_completed_)
            $phisequencer [ phi_stmt_1679_phi_seq] : 
            phi_stmt_1679_entry_trigger type_cast_1682_sample_start__ps type_cast_1682_sample_completed__ps type_cast_1682_update_start__ps type_cast_1682_update_completed__ps phi_stmt_1679_loopback_trigger R_next_J_1683_sample_start__ps R_next_J_1683_sample_completed__ps R_next_J_1683_update_start__ps R_next_J_1683_update_completed__ps :
            phi_stmt_1679_sample_start__ps phi_stmt_1679_sample_completed__ps phi_stmt_1679_update_start__ps phi_stmt_1679_update_completed__ps :
            phi_stmt_1679_entry_sample_req_ps phi_stmt_1679_loopback_sample_req_ps : 
            phi_stmt_1679_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1679
            // start:  PHI statement phi_stmt_1684
            // 				$phi old_responsebits := 				  ($bitcast ($uint<48>) 0  ) $on   $entry 				  new_responsebits $on   $loopback 
            // type of target is $uint<48>
            $T[phi_stmt_1684_sample_start_] 
            $T[phi_stmt_1684_sample_completed_] 
            $T[phi_stmt_1684_update_start_] 
            $T[phi_stmt_1684_update_completed_] 
            $T[phi_stmt_1684_sample_start__ps] 
            phi_stmt_1684_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1684_sample_completed__ps] 
            phi_stmt_1684_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1684_update_start__ps] 
            phi_stmt_1684_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1684_update_completed__ps] 
            phi_stmt_1684_update_completed_ <-& (phi_stmt_1684_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1684_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1684_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1684_update_start_)
            $T[phi_stmt_1684_loopback_trigger] 
            phi_stmt_1684_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1684_loopback_sample_req] 
            $T[phi_stmt_1684_loopback_sample_req_ps] 
            phi_stmt_1684_loopback_sample_req <-& (phi_stmt_1684_loopback_sample_req_ps)
            phi_stmt_1684_loopback_sample_req &-> ($null)
            $T[phi_stmt_1684_entry_trigger] 
            phi_stmt_1684_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1684_entry_sample_req] 
            $T[phi_stmt_1684_entry_sample_req_ps] 
            phi_stmt_1684_entry_sample_req <-& (phi_stmt_1684_entry_sample_req_ps)
            phi_stmt_1684_entry_sample_req &-> ($null)
            phi_stmt_1684_update_start_ o<-& (phi_stmt_1684_update_completed_ 0)
            phi_stmt_1684_sample_start_ o<-& (phi_stmt_1684_sample_completed_ 1)
            $T[phi_stmt_1684_merged_reqs] 
            $T[phi_stmt_1684_phi_mux_ack] 
            $T[phi_stmt_1684_phi_mux_ack_ps] 
            phi_stmt_1684_phi_mux_ack_ps <-& (phi_stmt_1684_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1684_update_completed_)
            $T[type_cast_1688_sample_start__ps] 
            $T[type_cast_1688_sample_completed__ps] 
            $T[type_cast_1688_update_start__ps] 
            $T[type_cast_1688_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_1688_sample_start_] 
            $T[type_cast_1688_sample_completed_] 
            type_cast_1688_sample_completed_ <-& (type_cast_1688_sample_start_)
            $T[type_cast_1688_update_start_] 
            $T [type_cast_1688_update_completed_] $delay 
            type_cast_1688_update_completed_ <-& (type_cast_1688_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_1688_sample_start_ <-& (type_cast_1688_sample_start__ps)
            type_cast_1688_update_start_ <-& (type_cast_1688_update_start__ps)
            // Phi complete dependency.
            type_cast_1688_sample_completed__ps <-& (type_cast_1688_sample_completed_)
            type_cast_1688_update_completed__ps <-& (type_cast_1688_update_completed_)
            $T[R_new_responsebits_1689_sample_start__ps] 
            $T[R_new_responsebits_1689_sample_completed__ps] 
            $T[R_new_responsebits_1689_update_start__ps] 
            $T[R_new_responsebits_1689_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_new_responsebits_1689_sample_start_] 
            $T[R_new_responsebits_1689_sample_completed_] 
            $T[R_new_responsebits_1689_update_start_] 
            $T[R_new_responsebits_1689_update_completed_] 
            ;;[R_new_responsebits_1689_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_new_responsebits_1689_sample_start_ &-> (R_new_responsebits_1689_Sample)
            R_new_responsebits_1689_sample_completed_ <-& (R_new_responsebits_1689_Sample)
            ;;[R_new_responsebits_1689_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_new_responsebits_1689_update_start_ &-> (R_new_responsebits_1689_Update)
            R_new_responsebits_1689_update_completed_ <-& (R_new_responsebits_1689_Update)
            // RAW reenables for new_responsebits
            // Phi start dependency for implicit/constant alternative.
            R_new_responsebits_1689_sample_start_ <-& (R_new_responsebits_1689_sample_start__ps)
            R_new_responsebits_1689_update_start_ <-& (R_new_responsebits_1689_update_start__ps)
            // Phi complete dependency.
            R_new_responsebits_1689_sample_completed__ps <-& (R_new_responsebits_1689_sample_completed_)
            R_new_responsebits_1689_update_completed__ps <-& (R_new_responsebits_1689_update_completed_)
            $phisequencer [ phi_stmt_1684_phi_seq] : 
            phi_stmt_1684_entry_trigger type_cast_1688_sample_start__ps type_cast_1688_sample_completed__ps type_cast_1688_update_start__ps type_cast_1688_update_completed__ps phi_stmt_1684_loopback_trigger R_new_responsebits_1689_sample_start__ps R_new_responsebits_1689_sample_completed__ps R_new_responsebits_1689_update_start__ps R_new_responsebits_1689_update_completed__ps :
            phi_stmt_1684_sample_start__ps phi_stmt_1684_sample_completed__ps phi_stmt_1684_update_start__ps phi_stmt_1684_update_completed__ps :
            phi_stmt_1684_entry_sample_req_ps phi_stmt_1684_loopback_sample_req_ps : 
            phi_stmt_1684_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1684
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // start:  				$volatile next_J := (J + 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 590
            // volatile! 
            // Source expression
            // (J + 1 )
            // J
            // Target expression
            // (as target) next_J
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // end:  				$volatile next_J := (J + 1 ) $buffering 1
            // start:  				responsebit := responseRx $buffering 1// bits of buffering = 1. 
            //  file .Aa/sdhc.opt.aa, line 591
            // Source expression
            // responseRx
            $T[RPIPE_responseRx_1697_sample_start_] 
            $T[RPIPE_responseRx_1697_sample_completed_] 
            $T[RPIPE_responseRx_1697_update_start_] 
            $T[RPIPE_responseRx_1697_update_completed_] 
            ;;[RPIPE_responseRx_1697_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_responseRx_1697_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_responseRx_1697_sample_start_ &-> (RPIPE_responseRx_1697_Sample)
            RPIPE_responseRx_1697_sample_completed_ <-& (RPIPE_responseRx_1697_Sample)
            RPIPE_responseRx_1697_update_start_ <-& (RPIPE_responseRx_1697_sample_completed_)
            RPIPE_responseRx_1697_update_start_ &-> (RPIPE_responseRx_1697_Update)
            RPIPE_responseRx_1697_update_completed_ <-& (RPIPE_responseRx_1697_Update)
            RPIPE_responseRx_1697_sample_start_ o<-& (RPIPE_responseRx_1697_update_completed_ 0)
            // Target expression
            // (as target) responsebit
            // start: WAR dependencies for responsebit
            // done: WAR dependencies for responsebit
            // end:  				responsebit := responseRx $buffering 1// bits of buffering = 1. 
            // start: WAR dependencies for responsebits
            // done: WAR dependencies for responsebits
            // start:  				$volatile responsebits := (($bitcast ($uint<47>) 0  ) && responsebit) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 592
            // volatile! 
            // Source expression
            // (($bitcast ($uint<47>) 0  ) && responsebit)
            // responsebit
            // Target expression
            // (as target) responsebits
            // start: WAR dependencies for responsebits
            // done: WAR dependencies for responsebits
            // end:  				$volatile responsebits := (($bitcast ($uint<47>) 0  ) && responsebit) $buffering 1
            // start: WAR dependencies for new_responsebits
            // WAR dependency: Read: new_responsebits before Write: 				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_responseRx_1697_update_start_ <-& (phi_stmt_1684_sample_completed_)
            phi_stmt_1684_sample_start_ o<-& (RPIPE_responseRx_1697_update_completed_ 0)
            // WAR dependency: release  Read: new_responsebits with Write: 				responsebit := responseRx $buffering 1// bits of buffering = 1. 
            // done: WAR dependencies for new_responsebits
            // start:  				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 593
            // volatile! 
            // Source expression
            // ((old_responsebits << 1 ) | responsebits)
            // (old_responsebits << 1 )
            // old_responsebits
            // responsebits
            // Target expression
            // (as target) new_responsebits
            // start: WAR dependencies for new_responsebits
            // WAR dependency: Read: new_responsebits before Write: 				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_responseRx_1697_update_start_ <-& (phi_stmt_1684_sample_completed_)
            phi_stmt_1684_sample_start_ o<-& (RPIPE_responseRx_1697_update_completed_ 0)
            // WAR dependency: release  Read: new_responsebits with Write: 				responsebit := responseRx $buffering 2// bits of buffering = 2. 
            // done: WAR dependencies for new_responsebits
            // end:  				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
            // (next_J < 48 )
            // next_J
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (next_J < 48 ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_1679_update_completed_)
            // done: Forward dependencies from (next_J < 48 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // pipe read/write dependencies for pipe responseRx
            // read-dependencies for pipe responseRx
            // write-dependencies for pipe responseRx
            // signal write dependencies for responseRx
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_1677__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_1677_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_1677__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_1677_loop_body : condition_evaluated
          $bind do_while_stmt_1677__entry__  => do_while_stmt_1677_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_1677_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1677__exit__)
        }
        do_while_stmt_1677__entry__ |-> (do_while_stmt_1677)
        do_while_stmt_1677__exit__ <-| (do_while_stmt_1677)
        do_while_stmt_1677__entry__ <-| (branch_block_stmt_1676__entry__)
        do_while_stmt_1677__exit__ |-> (branch_block_stmt_1676__exit__)
      }
      branch_block_stmt_1676__entry__ |-> (branch_block_stmt_1676)
      branch_block_stmt_1676__exit__ <-| (branch_block_stmt_1676)
      ::[assign_stmt_1720] 
      {
        // start:  			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 597
        // Target expression
        // (as target) responseEnable
        $T[WPIPE_responseEnable_1718_sample_start_] 
        $T[WPIPE_responseEnable_1718_sample_completed_] 
        $T[WPIPE_responseEnable_1718_update_start_] 
        $T[WPIPE_responseEnable_1718_update_completed_] 
        ;;[WPIPE_responseEnable_1718_Sample] 
        {
          // pipe write sample-start responseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_responseEnable_1718_Update] 
        {
          // pipe write update (complete) responseEnable
          $T [req] $T [ack] 
        }
        WPIPE_responseEnable_1718_sample_start_ &-> (WPIPE_responseEnable_1718_Sample)
        WPIPE_responseEnable_1718_sample_completed_ <-& (WPIPE_responseEnable_1718_Sample)
        WPIPE_responseEnable_1718_update_start_ <-& (WPIPE_responseEnable_1718_sample_completed_)
        WPIPE_responseEnable_1718_update_start_ &-> (WPIPE_responseEnable_1718_Update)
        WPIPE_responseEnable_1718_update_completed_ <-& (WPIPE_responseEnable_1718_Update)
        // end:  			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe responseEnable
        // read-dependencies for pipe responseEnable
        // write-dependencies for pipe responseEnable
        // signal write dependencies for responseEnable
      }
      assign_stmt_1720__entry__ |-> (assign_stmt_1720)
      assign_stmt_1720__exit__ <-| (assign_stmt_1720)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1723_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1723__entry__ |-> (if_stmt_1723_dead_link)
      if_stmt_1723__exit__ <-| (if_stmt_1723_dead_link)
      ;;[if_stmt_1723_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (response_type == 3 )
        ;;[EQ_u2_u1_1726] 
        {
          // binary expression 
          ||[EQ_u2_u1_1726_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1723__entry__ |-> (if_stmt_1723_eval_test)
      $P [EQ_u2_u1_1726_place]
      EQ_u2_u1_1726_place <-| (if_stmt_1723_eval_test)
      ;;[if_stmt_1723_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1723_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_1726_place |-> (if_stmt_1723_if_link if_stmt_1723_else_link)
      $P [merge_stmt_1727__entry__] 
      $P [merge_stmt_1727__exit__] 
      $P [assign_stmt_1730__entry__] 
      $P [assign_stmt_1730__exit__] 
      $P [if_stmt_1731__entry__] 
      $P [if_stmt_1731__exit__] 
      $P [assign_stmt_1739__entry__] 
      $P [assign_stmt_1739__exit__] 
      ::[assign_stmt_1730] 
      {
        // start:  			wait := DAT0Rx $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 602
        // Source expression
        // DAT0Rx
        $T[RPIPE_DAT0Rx_1729_sample_start_] 
        $T[RPIPE_DAT0Rx_1729_sample_completed_] 
        $T[RPIPE_DAT0Rx_1729_update_start_] 
        $T[RPIPE_DAT0Rx_1729_update_completed_] 
        ;;[RPIPE_DAT0Rx_1729_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_DAT0Rx_1729_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_DAT0Rx_1729_sample_start_ &-> (RPIPE_DAT0Rx_1729_Sample)
        RPIPE_DAT0Rx_1729_sample_completed_ <-& (RPIPE_DAT0Rx_1729_Sample)
        RPIPE_DAT0Rx_1729_update_start_ <-& (RPIPE_DAT0Rx_1729_sample_completed_)
        RPIPE_DAT0Rx_1729_update_start_ &-> (RPIPE_DAT0Rx_1729_Update)
        RPIPE_DAT0Rx_1729_update_completed_ <-& (RPIPE_DAT0Rx_1729_Update)
        // Target expression
        // (as target) wait
        // start: WAR dependencies for wait
        // done: WAR dependencies for wait
        // end:  			wait := DAT0Rx $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
      }
      assign_stmt_1730__entry__ |-> (assign_stmt_1730)
      assign_stmt_1730__exit__ <-| (assign_stmt_1730)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1731_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1731__entry__ |-> (if_stmt_1731_dead_link)
      if_stmt_1731__exit__ <-| (if_stmt_1731_dead_link)
      ;;[if_stmt_1731_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (wait == ZERO_1)
        ;;[EQ_u1_u1_1734] 
        {
          // binary expression 
          ||[EQ_u1_u1_1734_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1731__entry__ |-> (if_stmt_1731_eval_test)
      $P [EQ_u1_u1_1734_place]
      EQ_u1_u1_1734_place <-| (if_stmt_1731_eval_test)
      ;;[if_stmt_1731_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1731_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1734_place |-> (if_stmt_1731_if_link if_stmt_1731_else_link)
      $P [waitloop]
      waitloop <-| (if_stmt_1731_if_link)
      if_stmt_1731__exit__ <-| (if_stmt_1731_else_link)
      ::[assign_stmt_1739] 
      {
        // start:  			busyResponse := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 606
        // Target expression
        // (as target) busyResponse
        $T[WPIPE_busyResponse_1737_sample_start_] 
        $T[WPIPE_busyResponse_1737_sample_completed_] 
        $T[WPIPE_busyResponse_1737_update_start_] 
        $T[WPIPE_busyResponse_1737_update_completed_] 
        ;;[WPIPE_busyResponse_1737_Sample] 
        {
          // pipe write sample-start busyResponse
          $T [req] $T [ack] 
        }
        ;;[WPIPE_busyResponse_1737_Update] 
        {
          // pipe write update (complete) busyResponse
          $T [req] $T [ack] 
        }
        WPIPE_busyResponse_1737_sample_start_ &-> (WPIPE_busyResponse_1737_Sample)
        WPIPE_busyResponse_1737_sample_completed_ <-& (WPIPE_busyResponse_1737_Sample)
        WPIPE_busyResponse_1737_update_start_ <-& (WPIPE_busyResponse_1737_sample_completed_)
        WPIPE_busyResponse_1737_update_start_ &-> (WPIPE_busyResponse_1737_Update)
        WPIPE_busyResponse_1737_update_completed_ <-& (WPIPE_busyResponse_1737_Update)
        // end:  			busyResponse := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe busyResponse
        // read-dependencies for pipe busyResponse
        // write-dependencies for pipe busyResponse
        // signal write dependencies for busyResponse
      }
      assign_stmt_1739__entry__ |-> (assign_stmt_1739)
      assign_stmt_1739__exit__ <-| (assign_stmt_1739)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 600
      ;;[merge_stmt_1727_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1727__entry__ |-> (merge_stmt_1727_dead_link)
      merge_stmt_1727__exit__ <-| (merge_stmt_1727_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 600  --------------------------
      ||[merge_stmt_1727__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1727__entry__ |-> (merge_stmt_1727__entry___PhiReq)
      ||[waitloop_PhiReq] 
      {
        // no phi statements in merge..
      }
      waitloop |-> (waitloop_PhiReq)
      $P [merge_stmt_1727_PhiReqMerge] 
      merge_stmt_1727_PhiReqMerge <-| ( merge_stmt_1727__entry___PhiReq  waitloop_PhiReq )
      ||[merge_stmt_1727_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1727_PhiReqMerge |-> (merge_stmt_1727_PhiAck)
      merge_stmt_1727__exit__  <-| (merge_stmt_1727_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 600  --------------------------
      merge_stmt_1727__entry__ <-| (if_stmt_1723_if_link)
      assign_stmt_1730__entry__ <-| (merge_stmt_1727__exit__)
      if_stmt_1731__entry__ <-| (assign_stmt_1730__exit__)
      assign_stmt_1739__entry__ <-| (if_stmt_1731__exit__)
      assign_stmt_1739__exit__ |-> (if_stmt_1723__exit__)
      if_stmt_1723__exit__ <-| (if_stmt_1723_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1741_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1741__entry__ |-> (if_stmt_1741_dead_link)
      if_stmt_1741__exit__ <-| (if_stmt_1741_dead_link)
      ;;[if_stmt_1741_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((commandRegVal & _h8 ) == 8 )
        ;;[EQ_u8_u1_1746] 
        {
          // binary expression 
          ||[EQ_u8_u1_1746_inputs] 
          {
            // (commandRegVal & _h8 )
            ;;[AND_u8_u8_1744] 
            {
              // binary expression 
              ||[AND_u8_u8_1744_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1741__entry__ |-> (if_stmt_1741_eval_test)
      $P [EQ_u8_u1_1746_place]
      EQ_u8_u1_1746_place <-| (if_stmt_1741_eval_test)
      ;;[if_stmt_1741_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1741_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_1746_place |-> (if_stmt_1741_if_link if_stmt_1741_else_link)
      $P [call_stmt_1750_to_assign_stmt_1759__entry__] 
      $P [call_stmt_1750_to_assign_stmt_1759__exit__] 
      ::[call_stmt_1750_to_assign_stmt_1759] 
      {
        // start: 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
        //  file .Aa/sdhc.opt.aa, line 609
        $T[call_stmt_1750_sample_start_] 
        $T[call_stmt_1750_sample_completed_] 
        $T[call_stmt_1750_update_start_] 
        $T[call_stmt_1750_update_completed_] 
        // Call input argument 0
        // ( $slice response 47 8 ) 
        // response
        // start: Forward dependencies from ( $slice response 47 8 )  to transition call_stmt_1750_sample_start_
        // done: Forward dependencies from ( $slice response 47 8 )  to transition call_stmt_1750_sample_start_
        ;;[call_stmt_1750_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1750_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1750_sample_start_ &-> (call_stmt_1750_Sample)
        call_stmt_1750_sample_completed_ <-& (call_stmt_1750_Sample)
        call_stmt_1750_sample_completed_ &-> ($null)
        call_stmt_1750_update_start_ &-> (call_stmt_1750_Update)
        call_stmt_1750_update_completed_ <-& (call_stmt_1750_Update)
        // Call output argument 0
        // (as target) R1_6_7CRC
        // start: WAR dependencies for R1_6_7CRC
        // done: WAR dependencies for R1_6_7CRC
        // end: 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
        // start:  			CommandCRCError := ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 610
        // Source expression
        // ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  ) 
        $T[MUX_1758_sample_start_] 
        $T[MUX_1758_sample_completed_] 
        $T[MUX_1758_update_start_] 
        $T[MUX_1758_update_completed_] 
        // (( $slice response 7 1 )  == R1_6_7CRC)
        // ( $slice response 7 1 ) 
        // response
        // R1_6_7CRC
        // start: Forward dependencies from (( $slice response 7 1 )  == R1_6_7CRC) to transition MUX_1758_sample_start_
        MUX_1758_sample_start_ <-& (call_stmt_1750_update_completed_)
        // done: Forward dependencies from (( $slice response 7 1 )  == R1_6_7CRC) to transition MUX_1758_sample_start_
        ;;[MUX_1758_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1758_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1758_sample_start_ &-> (MUX_1758_start)
        MUX_1758_sample_completed_ <-& (MUX_1758_start)
        MUX_1758_sample_completed_ &-> ($null)
        MUX_1758_update_start_ &-> (MUX_1758_complete)
        MUX_1758_update_completed_ <-& (MUX_1758_complete)
        // Target expression
        // (as target) CommandCRCError
        // start: WAR dependencies for CommandCRCError
        // done: WAR dependencies for CommandCRCError
        // end:  			CommandCRCError := ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      call_stmt_1750_to_assign_stmt_1759__entry__ |-> (call_stmt_1750_to_assign_stmt_1759)
      call_stmt_1750_to_assign_stmt_1759__exit__ <-| (call_stmt_1750_to_assign_stmt_1759)
      call_stmt_1750_to_assign_stmt_1759__entry__ <-| (if_stmt_1741_if_link)
      call_stmt_1750_to_assign_stmt_1759__exit__ |-> (if_stmt_1741__exit__)
      if_stmt_1741__exit__ <-| (if_stmt_1741_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1761_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1761__entry__ |-> (if_stmt_1761_dead_link)
      if_stmt_1761__exit__ <-| (if_stmt_1761_dead_link)
      ;;[if_stmt_1761_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((commandRegVal & _h10 ) == 16 )
        ;;[EQ_u8_u1_1766] 
        {
          // binary expression 
          ||[EQ_u8_u1_1766_inputs] 
          {
            // (commandRegVal & _h10 )
            ;;[AND_u8_u8_1764] 
            {
              // binary expression 
              ||[AND_u8_u8_1764_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1761__entry__ |-> (if_stmt_1761_eval_test)
      $P [EQ_u8_u1_1766_place]
      EQ_u8_u1_1766_place <-| (if_stmt_1761_eval_test)
      ;;[if_stmt_1761_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1761_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_1766_place |-> (if_stmt_1761_if_link if_stmt_1761_else_link)
      $P [assign_stmt_1773_to_assign_stmt_1779__entry__] 
      $P [assign_stmt_1773_to_assign_stmt_1779__exit__] 
      ::[assign_stmt_1773_to_assign_stmt_1779] 
      {
        // start:  			commandIndexCheck := (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 613
        // Source expression
        // (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) )
        $T[EQ_u6_u1_1772_sample_start_] 
        $T[EQ_u6_u1_1772_sample_completed_] 
        $T[EQ_u6_u1_1772_update_start_] 
        $T[EQ_u6_u1_1772_update_completed_] 
        // ( $slice commandRegVal1 5 0 ) 
        // commandRegVal1
        // ( $slice response 45 40 ) 
        // response
        // start: Forward dependencies from ( $slice commandRegVal1 5 0 )  to transition EQ_u6_u1_1772_sample_start_
        // done: Forward dependencies from ( $slice commandRegVal1 5 0 )  to transition EQ_u6_u1_1772_sample_start_
        // start: Forward dependencies from ( $slice response 45 40 )  to transition EQ_u6_u1_1772_sample_start_
        // done: Forward dependencies from ( $slice response 45 40 )  to transition EQ_u6_u1_1772_sample_start_
        ;;[EQ_u6_u1_1772_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u6_u1_1772_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u6_u1_1772_sample_start_ &-> (EQ_u6_u1_1772_Sample)
        EQ_u6_u1_1772_sample_completed_ <-& (EQ_u6_u1_1772_Sample)
        EQ_u6_u1_1772_sample_completed_ &-> ($null)
        EQ_u6_u1_1772_update_start_ &-> (EQ_u6_u1_1772_Update)
        EQ_u6_u1_1772_update_completed_ <-& (EQ_u6_u1_1772_Update)
        // Target expression
        // (as target) commandIndexCheck
        // start: WAR dependencies for commandIndexCheck
        // done: WAR dependencies for commandIndexCheck
        // end:  			commandIndexCheck := (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) ) $buffering 1// bits of buffering = 1. 
        // start:  			CommandIndexError := ( $mux commandIndexCheck _b00000000   _b00001000  )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 614
        // Source expression
        // ( $mux commandIndexCheck _b00000000   _b00001000  ) 
        $T[MUX_1778_sample_start_] 
        $T[MUX_1778_sample_completed_] 
        $T[MUX_1778_update_start_] 
        $T[MUX_1778_update_completed_] 
        // commandIndexCheck
        // start: Forward dependencies from commandIndexCheck to transition MUX_1778_sample_start_
        MUX_1778_sample_start_ <-& (EQ_u6_u1_1772_update_completed_)
        // done: Forward dependencies from commandIndexCheck to transition MUX_1778_sample_start_
        ;;[MUX_1778_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1778_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1778_sample_start_ &-> (MUX_1778_start)
        MUX_1778_sample_completed_ <-& (MUX_1778_start)
        MUX_1778_sample_completed_ &-> ($null)
        MUX_1778_update_start_ &-> (MUX_1778_complete)
        MUX_1778_update_completed_ <-& (MUX_1778_complete)
        // Target expression
        // (as target) CommandIndexError
        // start: WAR dependencies for CommandIndexError
        // done: WAR dependencies for CommandIndexError
        // end:  			CommandIndexError := ( $mux commandIndexCheck _b00000000   _b00001000  )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_1773_to_assign_stmt_1779__entry__ |-> (assign_stmt_1773_to_assign_stmt_1779)
      assign_stmt_1773_to_assign_stmt_1779__exit__ <-| (assign_stmt_1773_to_assign_stmt_1779)
      assign_stmt_1773_to_assign_stmt_1779__entry__ <-| (if_stmt_1761_if_link)
      assign_stmt_1773_to_assign_stmt_1779__exit__ |-> (if_stmt_1761__exit__)
      if_stmt_1761__exit__ <-| (if_stmt_1761_else_link)
      ::[call_stmt_1797_to_assign_stmt_1809] 
      {
        // start: 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 622
        $T[call_stmt_1797_sample_start_] 
        $T[call_stmt_1797_sample_completed_] 
        $T[call_stmt_1797_update_start_] 
        $T[call_stmt_1797_update_completed_] 
        // Call input argument 0
        // (16  + R)
        // R
        // Call input argument 1
        // ( $slice tempResponse 7 0 ) 
        // tempResponse
        // start: Forward dependencies from (16  + R) to transition call_stmt_1797_sample_start_
        // done: Forward dependencies from (16  + R) to transition call_stmt_1797_sample_start_
        // start: Forward dependencies from ( $slice tempResponse 7 0 )  to transition call_stmt_1797_sample_start_
        // done: Forward dependencies from ( $slice tempResponse 7 0 )  to transition call_stmt_1797_sample_start_
        ;;[call_stmt_1797_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1797_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1797_sample_start_ &-> (call_stmt_1797_Sample)
        call_stmt_1797_sample_completed_ <-& (call_stmt_1797_Sample)
        call_stmt_1797_sample_completed_ &-> ($null)
        call_stmt_1797_update_start_ &-> (call_stmt_1797_Update)
        call_stmt_1797_update_completed_ <-& (call_stmt_1797_Update)
        // end: 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
        // start: WAR dependencies for nextResponse
        // ignored out-of-scope w_root 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
        // type of target is $uint<32>
        // done: WAR dependencies for nextResponse
        // start:  			$volatile nextResponse := (ZERO_8 && ( $slice tempResponse 31 8 ) ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 623
        // volatile! 
        // Source expression
        // (ZERO_8 && ( $slice tempResponse 31 8 ) )
        // ( $slice tempResponse 31 8 ) 
        // tempResponse
        // Target expression
        // (as target) nextResponse
        // start: WAR dependencies for nextResponse
        // ignored out-of-scope w_root 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
        // type of target is $uint<32>
        // done: WAR dependencies for nextResponse
        // end:  			$volatile nextResponse := (ZERO_8 && ( $slice tempResponse 31 8 ) ) $buffering 1
        // start: WAR dependencies for next_R
        // ignored out-of-scope w_root 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
        // type of target is $uint<8>
        // done: WAR dependencies for next_R
        // start:  			$volatile next_R := (R + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 624
        // volatile! 
        // Source expression
        // (R + 1 )
        // R
        // Target expression
        // (as target) next_R
        // start: WAR dependencies for next_R
        // ignored out-of-scope w_root 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
        // type of target is $uint<8>
        // done: WAR dependencies for next_R
        // end:  			$volatile next_R := (R + 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1797 store
      }
      call_stmt_1797_to_assign_stmt_1809__entry__ |-> (call_stmt_1797_to_assign_stmt_1809)
      call_stmt_1797_to_assign_stmt_1809__exit__ <-| (call_stmt_1797_to_assign_stmt_1809)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1810_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1810__entry__ |-> (if_stmt_1810_dead_link)
      if_stmt_1810__exit__ <-| (if_stmt_1810_dead_link)
      ;;[if_stmt_1810_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_R < 4 )
        ;;[ULT_u8_u1_1813] 
        {
          // binary expression 
          ||[ULT_u8_u1_1813_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1810__entry__ |-> (if_stmt_1810_eval_test)
      $P [ULT_u8_u1_1813_place]
      ULT_u8_u1_1813_place <-| (if_stmt_1810_eval_test)
      ;;[if_stmt_1810_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1810_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_1813_place |-> (if_stmt_1810_if_link if_stmt_1810_else_link)
      $P [loopResponse]
      loopResponse <-| (if_stmt_1810_if_link)
      if_stmt_1810__exit__ <-| (if_stmt_1810_else_link)
      ::[call_stmt_1818_to_assign_stmt_1852] 
      {
        // start: 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
        //  file .Aa/sdhc.opt.aa, line 628
        $T[call_stmt_1818_sample_start_] 
        $T[call_stmt_1818_sample_completed_] 
        $T[call_stmt_1818_update_start_] 
        $T[call_stmt_1818_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1818_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1818_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1818_sample_start_ &-> (call_stmt_1818_Sample)
        call_stmt_1818_sample_completed_ <-& (call_stmt_1818_Sample)
        call_stmt_1818_sample_completed_ &-> ($null)
        call_stmt_1818_update_start_ &-> (call_stmt_1818_Update)
        call_stmt_1818_update_completed_ <-& (call_stmt_1818_Update)
        // Call output argument 0
        // (as target) tempPresentState2
        // start: WAR dependencies for tempPresentState2
        // done: WAR dependencies for tempPresentState2
        // end: 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
        // start: WAR dependencies for presentState2
        // done: WAR dependencies for presentState2
        // start:  			$volatile presentState2 := ((tempPresentState2 >> 1 ) << 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 629
        // volatile! 
        // Source expression
        // ((tempPresentState2 >> 1 ) << 1 )
        // (tempPresentState2 >> 1 )
        // tempPresentState2
        // Target expression
        // (as target) presentState2
        // start: WAR dependencies for presentState2
        // done: WAR dependencies for presentState2
        // end:  			$volatile presentState2 := ((tempPresentState2 >> 1 ) << 1 ) $buffering 1
        // start: 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
        //  file .Aa/sdhc.opt.aa, line 630
        $T[call_stmt_1828_sample_start_] 
        $T[call_stmt_1828_sample_completed_] 
        $T[call_stmt_1828_update_start_] 
        $T[call_stmt_1828_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1828_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1828_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1828_sample_start_ &-> (call_stmt_1828_Sample)
        call_stmt_1828_sample_completed_ <-& (call_stmt_1828_Sample)
        call_stmt_1828_sample_completed_ &-> ($null)
        call_stmt_1828_update_start_ &-> (call_stmt_1828_Update)
        call_stmt_1828_update_completed_ <-& (call_stmt_1828_Update)
        // Call output argument 0
        // (as target) normalInterrupt2
        // start: WAR dependencies for normalInterrupt2
        // done: WAR dependencies for normalInterrupt2
        // end: 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
        // start: 			$call writeSDHCRegisters (36  presentState2 ) () 
        //  file .Aa/sdhc.opt.aa, line 631
        $T[call_stmt_1831_sample_start_] 
        $T[call_stmt_1831_sample_completed_] 
        $T[call_stmt_1831_update_start_] 
        $T[call_stmt_1831_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // presentState2
        // start: Forward dependencies from presentState2 to transition call_stmt_1831_sample_start_
        call_stmt_1831_sample_start_ <-& (call_stmt_1818_update_completed_)
        // done: Forward dependencies from presentState2 to transition call_stmt_1831_sample_start_
        ;;[call_stmt_1831_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1831_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1831_sample_start_ &-> (call_stmt_1831_Sample)
        call_stmt_1831_sample_completed_ <-& (call_stmt_1831_Sample)
        call_stmt_1831_sample_completed_ &-> ($null)
        call_stmt_1831_update_start_ &-> (call_stmt_1831_Update)
        call_stmt_1831_update_completed_ <-& (call_stmt_1831_Update)
        // end: 			$call writeSDHCRegisters (36  presentState2 ) () 
        // start:  			commandEndBitError := ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 632
        // Source expression
        // ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
        $T[MUX_1839_sample_start_] 
        $T[MUX_1839_sample_completed_] 
        $T[MUX_1839_update_start_] 
        $T[MUX_1839_update_completed_] 
        // (response [] 0 )
        // response
        // start: Forward dependencies from (response [] 0 ) to transition MUX_1839_sample_start_
        // done: Forward dependencies from (response [] 0 ) to transition MUX_1839_sample_start_
        ;;[MUX_1839_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1839_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1839_sample_start_ &-> (MUX_1839_start)
        MUX_1839_sample_completed_ <-& (MUX_1839_start)
        MUX_1839_sample_completed_ &-> ($null)
        MUX_1839_update_start_ &-> (MUX_1839_complete)
        MUX_1839_update_completed_ <-& (MUX_1839_complete)
        // Target expression
        // (as target) commandEndBitError
        // start: WAR dependencies for commandEndBitError
        // done: WAR dependencies for commandEndBitError
        // end:  			commandEndBitError := ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
        // start:  			normalInterruptStatusVar_2 := (normalInterrupt2 | _h01 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 633
        // Source expression
        // (normalInterrupt2 | _h01 )
        $T[OR_u8_u8_1844_sample_start_] 
        $T[OR_u8_u8_1844_sample_completed_] 
        $T[OR_u8_u8_1844_update_start_] 
        $T[OR_u8_u8_1844_update_completed_] 
        // normalInterrupt2
        // start: Forward dependencies from normalInterrupt2 to transition OR_u8_u8_1844_sample_start_
        OR_u8_u8_1844_sample_start_ <-& (call_stmt_1828_update_completed_)
        // done: Forward dependencies from normalInterrupt2 to transition OR_u8_u8_1844_sample_start_
        ;;[OR_u8_u8_1844_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_1844_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_1844_sample_start_ &-> (OR_u8_u8_1844_Sample)
        OR_u8_u8_1844_sample_completed_ <-& (OR_u8_u8_1844_Sample)
        OR_u8_u8_1844_sample_completed_ &-> ($null)
        OR_u8_u8_1844_update_start_ &-> (OR_u8_u8_1844_Update)
        OR_u8_u8_1844_update_completed_ <-& (OR_u8_u8_1844_Update)
        // Target expression
        // (as target) normalInterruptStatusVar_2
        // start: WAR dependencies for normalInterruptStatusVar_2
        // done: WAR dependencies for normalInterruptStatusVar_2
        // end:  			normalInterruptStatusVar_2 := (normalInterrupt2 | _h01 ) $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptStatusVar_2 := ((CommandIndexError | CommandCRCError) | commandEndBitError) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 634
        // Source expression
        // ((CommandIndexError | CommandCRCError) | commandEndBitError)
        $T[OR_u8_u8_1851_sample_start_] 
        $T[OR_u8_u8_1851_sample_completed_] 
        $T[OR_u8_u8_1851_update_start_] 
        $T[OR_u8_u8_1851_update_completed_] 
        // (CommandIndexError | CommandCRCError)
        // CommandIndexError
        // CommandCRCError
        // commandEndBitError
        // start: Forward dependencies from (CommandIndexError | CommandCRCError) to transition OR_u8_u8_1851_sample_start_
        // done: Forward dependencies from (CommandIndexError | CommandCRCError) to transition OR_u8_u8_1851_sample_start_
        // start: Forward dependencies from commandEndBitError to transition OR_u8_u8_1851_sample_start_
        OR_u8_u8_1851_sample_start_ <-& (MUX_1839_update_completed_)
        // done: Forward dependencies from commandEndBitError to transition OR_u8_u8_1851_sample_start_
        ;;[OR_u8_u8_1851_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_1851_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_1851_sample_start_ &-> (OR_u8_u8_1851_Sample)
        OR_u8_u8_1851_sample_completed_ <-& (OR_u8_u8_1851_Sample)
        OR_u8_u8_1851_sample_completed_ &-> ($null)
        OR_u8_u8_1851_update_start_ &-> (OR_u8_u8_1851_Update)
        OR_u8_u8_1851_update_completed_ <-& (OR_u8_u8_1851_Update)
        // Target expression
        // (as target) errorInterruptStatusVar_2
        // start: WAR dependencies for errorInterruptStatusVar_2
        // done: WAR dependencies for errorInterruptStatusVar_2
        // end:  			errorInterruptStatusVar_2 := ((CommandIndexError | CommandCRCError) | commandEndBitError) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1818 load
        //  call_stmt_1828 load
        //  call_stmt_1831 store
        $T [call_stmt_1818_call_stmt_1831_delay] $delay
        // call_stmt_1818(load) -> call_stmt_1831(store)
        call_stmt_1831_sample_start_ <-& (call_stmt_1818_call_stmt_1831_delay)
        call_stmt_1818_call_stmt_1831_delay <-& (call_stmt_1818_update_completed_)
        $T [call_stmt_1828_call_stmt_1831_delay] $delay
        // call_stmt_1828(load) -> call_stmt_1831(store)
        call_stmt_1831_sample_start_ <-& (call_stmt_1828_call_stmt_1831_delay)
        call_stmt_1828_call_stmt_1831_delay <-& (call_stmt_1828_update_completed_)
      }
      call_stmt_1818_to_assign_stmt_1852__entry__ |-> (call_stmt_1818_to_assign_stmt_1852)
      call_stmt_1818_to_assign_stmt_1852__exit__ <-| (call_stmt_1818_to_assign_stmt_1852)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 616
      ;;[merge_stmt_1781_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1781__entry__ |-> (merge_stmt_1781_dead_link)
      merge_stmt_1781__exit__ <-| (merge_stmt_1781_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 616  --------------------------
      ||[merge_stmt_1781__entry___PhiReq] 
      {
        ;;[phi_stmt_1782] 
        {
          ||[phi_stmt_1782_sources] 
          {
            // sources for 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ZERO_8_1784_konst_delay_trans] $delay
          }
          $T [phi_stmt_1782_req] 
        }
        ;;[phi_stmt_1786] 
        {
          ||[phi_stmt_1786_sources] 
          {
            // sources for 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            // ( $slice response 39 8 ) 
            ;;[slice_1789] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_1786_req] 
        }
      }
      merge_stmt_1781__entry__ |-> (merge_stmt_1781__entry___PhiReq)
      ||[loopResponse_PhiReq] 
      {
        ;;[phi_stmt_1782] 
        {
          ||[phi_stmt_1782_sources] 
          {
            // sources for 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1782_req] 
        }
        ;;[phi_stmt_1786] 
        {
          ||[phi_stmt_1786_sources] 
          {
            // sources for 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1786_req] 
        }
      }
      loopResponse |-> (loopResponse_PhiReq)
      $P [merge_stmt_1781_PhiReqMerge] 
      merge_stmt_1781_PhiReqMerge <-| ( merge_stmt_1781__entry___PhiReq  loopResponse_PhiReq )
      ||[merge_stmt_1781_PhiAck] 
      {
        $T [phi_stmt_1782_ack] 
        $T [phi_stmt_1786_ack] 
      }
      merge_stmt_1781_PhiReqMerge |-> (merge_stmt_1781_PhiAck)
      merge_stmt_1781__exit__  <-| (merge_stmt_1781_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 616  --------------------------
      assign_stmt_1667__entry__ <-| (if_stmt_1657_if_link)
      if_stmt_1668__entry__ <-| (assign_stmt_1667__exit__)
      branch_block_stmt_1676__entry__ <-| (if_stmt_1668__exit__)
      assign_stmt_1720__entry__ <-| (branch_block_stmt_1676__exit__)
      if_stmt_1723__entry__ <-| (assign_stmt_1720__exit__)
      if_stmt_1741__entry__ <-| (if_stmt_1723__exit__)
      if_stmt_1761__entry__ <-| (if_stmt_1741__exit__)
      merge_stmt_1781__entry__ <-| (if_stmt_1761__exit__)
      call_stmt_1797_to_assign_stmt_1809__entry__ <-| (merge_stmt_1781__exit__)
      if_stmt_1810__entry__ <-| (call_stmt_1797_to_assign_stmt_1809__exit__)
      call_stmt_1818_to_assign_stmt_1852__entry__ <-| (if_stmt_1810__exit__)
      normalInterruptResponse2 <-| (call_stmt_1818_to_assign_stmt_1852__exit__)
      $P [if_stmt_1855__entry__] 
      $P [if_stmt_1855__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 637
      ;;[if_stmt_1855_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1855__entry__ |-> (if_stmt_1855_dead_link)
      if_stmt_1855__exit__ <-| (if_stmt_1855_dead_link)
      ;;[if_stmt_1855_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (response_type == 1 )
        ;;[EQ_u2_u1_1858] 
        {
          // binary expression 
          ||[EQ_u2_u1_1858_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1855__entry__ |-> (if_stmt_1855_eval_test)
      $P [EQ_u2_u1_1858_place]
      EQ_u2_u1_1858_place <-| (if_stmt_1855_eval_test)
      ;;[if_stmt_1855_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1855_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_1858_place |-> (if_stmt_1855_if_link if_stmt_1855_else_link)
      $P [assign_stmt_1861_to_assign_stmt_1864__entry__] 
      $P [assign_stmt_1861_to_assign_stmt_1864__exit__] 
      $P [branch_block_stmt_1865__entry__] 
      $P [branch_block_stmt_1865__exit__] 
      $P [assign_stmt_1909_to_assign_stmt_1918__entry__] 
      $P [assign_stmt_1909_to_assign_stmt_1918__exit__] 
      $P [if_stmt_1919__entry__] 
      $P [if_stmt_1919__exit__] 
      $P [assign_stmt_1946_to_assign_stmt_1951__entry__] 
      $P [assign_stmt_1946_to_assign_stmt_1951__exit__] 
      $P [branch_block_stmt_1952__entry__] 
      $P [branch_block_stmt_1952__exit__] 
      $P [call_stmt_1992_to_assign_stmt_2010__entry__] 
      $P [call_stmt_1992_to_assign_stmt_2010__exit__] 
      $P [normalInterruptResponse3]
      ::[assign_stmt_1861_to_assign_stmt_1864] 
      {
        // start:  			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 638
        // Target expression
        // (as target) responseEnable
        $T[WPIPE_responseEnable_1859_sample_start_] 
        $T[WPIPE_responseEnable_1859_sample_completed_] 
        $T[WPIPE_responseEnable_1859_update_start_] 
        $T[WPIPE_responseEnable_1859_update_completed_] 
        ;;[WPIPE_responseEnable_1859_Sample] 
        {
          // pipe write sample-start responseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_responseEnable_1859_Update] 
        {
          // pipe write update (complete) responseEnable
          $T [req] $T [ack] 
        }
        WPIPE_responseEnable_1859_sample_start_ &-> (WPIPE_responseEnable_1859_Sample)
        WPIPE_responseEnable_1859_sample_completed_ <-& (WPIPE_responseEnable_1859_Sample)
        WPIPE_responseEnable_1859_update_start_ <-& (WPIPE_responseEnable_1859_sample_completed_)
        WPIPE_responseEnable_1859_update_start_ &-> (WPIPE_responseEnable_1859_Update)
        WPIPE_responseEnable_1859_update_completed_ <-& (WPIPE_responseEnable_1859_Update)
        // end:  			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        // start:  			bigResponseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 639
        // Target expression
        // (as target) bigResponseEnable
        $T[WPIPE_bigResponseEnable_1862_sample_start_] 
        $T[WPIPE_bigResponseEnable_1862_sample_completed_] 
        $T[WPIPE_bigResponseEnable_1862_update_start_] 
        $T[WPIPE_bigResponseEnable_1862_update_completed_] 
        ;;[WPIPE_bigResponseEnable_1862_Sample] 
        {
          // pipe write sample-start bigResponseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_bigResponseEnable_1862_Update] 
        {
          // pipe write update (complete) bigResponseEnable
          $T [req] $T [ack] 
        }
        WPIPE_bigResponseEnable_1862_sample_start_ &-> (WPIPE_bigResponseEnable_1862_Sample)
        WPIPE_bigResponseEnable_1862_sample_completed_ <-& (WPIPE_bigResponseEnable_1862_Sample)
        WPIPE_bigResponseEnable_1862_update_start_ <-& (WPIPE_bigResponseEnable_1862_sample_completed_)
        WPIPE_bigResponseEnable_1862_update_start_ &-> (WPIPE_bigResponseEnable_1862_Update)
        WPIPE_bigResponseEnable_1862_update_completed_ <-& (WPIPE_bigResponseEnable_1862_Update)
        // end:  			bigResponseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe bigResponseEnable
        // read-dependencies for pipe bigResponseEnable
        // write-dependencies for pipe bigResponseEnable
        // signal write dependencies for bigResponseEnable
        // pipe read/write dependencies for pipe responseEnable
        // read-dependencies for pipe responseEnable
        // write-dependencies for pipe responseEnable
        // signal write dependencies for responseEnable
      }
      assign_stmt_1861_to_assign_stmt_1864__entry__ |-> (assign_stmt_1861_to_assign_stmt_1864)
      assign_stmt_1861_to_assign_stmt_1864__exit__ <-| (assign_stmt_1861_to_assign_stmt_1864)
      <>[branch_block_stmt_1865] // Branch Block  file .Aa/sdhc.opt.aa, line 640
      {
        $P [branch_block_stmt_1865__entry__]
        branch_block_stmt_1865__entry__ <-| ($entry)
        $P [branch_block_stmt_1865__exit__]
        branch_block_stmt_1865__exit__ |-> ($exit)
        $P [do_while_stmt_1866__entry__] 
        $P [do_while_stmt_1866__exit__] 
        // do-while-statement  
        //  file .Aa/sdhc.opt.aa, line 642
        <o> [do_while_stmt_1866]  $depth 10 $buffering 1 
        {
          $P[do_while_stmt_1866__entry__] 
          $P[do_while_stmt_1866__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_1866_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_1868
            // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_J $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_1868_sample_start_] 
            $T[phi_stmt_1868_sample_completed_] 
            $T[phi_stmt_1868_update_start_] 
            $T[phi_stmt_1868_update_completed_] 
            $T[phi_stmt_1868_sample_start__ps] 
            phi_stmt_1868_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1868_sample_completed__ps] 
            phi_stmt_1868_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1868_update_start__ps] 
            phi_stmt_1868_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1868_update_completed__ps] 
            phi_stmt_1868_update_completed_ <-& (phi_stmt_1868_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1868_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1868_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1868_update_start_)
            $T[phi_stmt_1868_loopback_trigger] 
            phi_stmt_1868_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1868_loopback_sample_req] 
            $T[phi_stmt_1868_loopback_sample_req_ps] 
            phi_stmt_1868_loopback_sample_req <-& (phi_stmt_1868_loopback_sample_req_ps)
            phi_stmt_1868_loopback_sample_req &-> ($null)
            $T[phi_stmt_1868_entry_trigger] 
            phi_stmt_1868_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1868_entry_sample_req] 
            $T[phi_stmt_1868_entry_sample_req_ps] 
            phi_stmt_1868_entry_sample_req <-& (phi_stmt_1868_entry_sample_req_ps)
            phi_stmt_1868_entry_sample_req &-> ($null)
            phi_stmt_1868_update_start_ o<-& (phi_stmt_1868_update_completed_ 0)
            phi_stmt_1868_sample_start_ o<-& (phi_stmt_1868_sample_completed_ 1)
            $T[phi_stmt_1868_merged_reqs] 
            $T[phi_stmt_1868_phi_mux_ack] 
            $T[phi_stmt_1868_phi_mux_ack_ps] 
            phi_stmt_1868_phi_mux_ack_ps <-& (phi_stmt_1868_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1868_update_completed_)
            $T[type_cast_1871_sample_start__ps] 
            $T[type_cast_1871_sample_completed__ps] 
            $T[type_cast_1871_update_start__ps] 
            $T[type_cast_1871_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_1871_sample_start_] 
            $T[type_cast_1871_sample_completed_] 
            type_cast_1871_sample_completed_ <-& (type_cast_1871_sample_start_)
            $T[type_cast_1871_update_start_] 
            $T [type_cast_1871_update_completed_] $delay 
            type_cast_1871_update_completed_ <-& (type_cast_1871_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_1871_sample_start_ <-& (type_cast_1871_sample_start__ps)
            type_cast_1871_update_start_ <-& (type_cast_1871_update_start__ps)
            // Phi complete dependency.
            type_cast_1871_sample_completed__ps <-& (type_cast_1871_sample_completed_)
            type_cast_1871_update_completed__ps <-& (type_cast_1871_update_completed_)
            $T[R_next_J_1872_sample_start__ps] 
            $T[R_next_J_1872_sample_completed__ps] 
            $T[R_next_J_1872_update_start__ps] 
            $T[R_next_J_1872_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_J_1872_sample_start_] 
            $T[R_next_J_1872_sample_completed_] 
            $T[R_next_J_1872_update_start_] 
            $T[R_next_J_1872_update_completed_] 
            ;;[R_next_J_1872_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_J_1872_sample_start_ &-> (R_next_J_1872_Sample)
            R_next_J_1872_sample_completed_ <-& (R_next_J_1872_Sample)
            ;;[R_next_J_1872_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_J_1872_update_start_ &-> (R_next_J_1872_Update)
            R_next_J_1872_update_completed_ <-& (R_next_J_1872_Update)
            // RAW reenables for next_J
            // Phi start dependency for implicit/constant alternative.
            R_next_J_1872_sample_start_ <-& (R_next_J_1872_sample_start__ps)
            R_next_J_1872_update_start_ <-& (R_next_J_1872_update_start__ps)
            // Phi complete dependency.
            R_next_J_1872_sample_completed__ps <-& (R_next_J_1872_sample_completed_)
            R_next_J_1872_update_completed__ps <-& (R_next_J_1872_update_completed_)
            $phisequencer [ phi_stmt_1868_phi_seq] : 
            phi_stmt_1868_entry_trigger type_cast_1871_sample_start__ps type_cast_1871_sample_completed__ps type_cast_1871_update_start__ps type_cast_1871_update_completed__ps phi_stmt_1868_loopback_trigger R_next_J_1872_sample_start__ps R_next_J_1872_sample_completed__ps R_next_J_1872_update_start__ps R_next_J_1872_update_completed__ps :
            phi_stmt_1868_sample_start__ps phi_stmt_1868_sample_completed__ps phi_stmt_1868_update_start__ps phi_stmt_1868_update_completed__ps :
            phi_stmt_1868_entry_sample_req_ps phi_stmt_1868_loopback_sample_req_ps : 
            phi_stmt_1868_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1868
            // start:  PHI statement phi_stmt_1873
            // 				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
            // type of target is $uint<136>
            $T[phi_stmt_1873_sample_start_] 
            $T[phi_stmt_1873_sample_completed_] 
            $T[phi_stmt_1873_update_start_] 
            $T[phi_stmt_1873_update_completed_] 
            $T[phi_stmt_1873_sample_start__ps] 
            phi_stmt_1873_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1873_sample_completed__ps] 
            phi_stmt_1873_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1873_update_start__ps] 
            phi_stmt_1873_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1873_update_completed__ps] 
            phi_stmt_1873_update_completed_ <-& (phi_stmt_1873_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1873_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1873_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1873_update_start_)
            $T[phi_stmt_1873_loopback_trigger] 
            phi_stmt_1873_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1873_loopback_sample_req] 
            $T[phi_stmt_1873_loopback_sample_req_ps] 
            phi_stmt_1873_loopback_sample_req <-& (phi_stmt_1873_loopback_sample_req_ps)
            phi_stmt_1873_loopback_sample_req &-> ($null)
            $T[phi_stmt_1873_entry_trigger] 
            phi_stmt_1873_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1873_entry_sample_req] 
            $T[phi_stmt_1873_entry_sample_req_ps] 
            phi_stmt_1873_entry_sample_req <-& (phi_stmt_1873_entry_sample_req_ps)
            phi_stmt_1873_entry_sample_req &-> ($null)
            phi_stmt_1873_update_start_ o<-& (phi_stmt_1873_update_completed_ 0)
            phi_stmt_1873_sample_start_ o<-& (phi_stmt_1873_sample_completed_ 1)
            $T[phi_stmt_1873_merged_reqs] 
            $T[phi_stmt_1873_phi_mux_ack] 
            $T[phi_stmt_1873_phi_mux_ack_ps] 
            phi_stmt_1873_phi_mux_ack_ps <-& (phi_stmt_1873_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1873_update_completed_)
            $T[type_cast_1877_sample_start__ps] 
            $T[type_cast_1877_sample_completed__ps] 
            $T[type_cast_1877_update_start__ps] 
            $T[type_cast_1877_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_1877_sample_start_] 
            $T[type_cast_1877_sample_completed_] 
            type_cast_1877_sample_completed_ <-& (type_cast_1877_sample_start_)
            $T[type_cast_1877_update_start_] 
            $T [type_cast_1877_update_completed_] $delay 
            type_cast_1877_update_completed_ <-& (type_cast_1877_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_1877_sample_start_ <-& (type_cast_1877_sample_start__ps)
            type_cast_1877_update_start_ <-& (type_cast_1877_update_start__ps)
            // Phi complete dependency.
            type_cast_1877_sample_completed__ps <-& (type_cast_1877_sample_completed_)
            type_cast_1877_update_completed__ps <-& (type_cast_1877_update_completed_)
            $T[R_new_bigresponsebits_1878_sample_start__ps] 
            $T[R_new_bigresponsebits_1878_sample_completed__ps] 
            $T[R_new_bigresponsebits_1878_update_start__ps] 
            $T[R_new_bigresponsebits_1878_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_new_bigresponsebits_1878_sample_start_] 
            $T[R_new_bigresponsebits_1878_sample_completed_] 
            $T[R_new_bigresponsebits_1878_update_start_] 
            $T[R_new_bigresponsebits_1878_update_completed_] 
            ;;[R_new_bigresponsebits_1878_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_new_bigresponsebits_1878_sample_start_ &-> (R_new_bigresponsebits_1878_Sample)
            R_new_bigresponsebits_1878_sample_completed_ <-& (R_new_bigresponsebits_1878_Sample)
            ;;[R_new_bigresponsebits_1878_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_new_bigresponsebits_1878_update_start_ &-> (R_new_bigresponsebits_1878_Update)
            R_new_bigresponsebits_1878_update_completed_ <-& (R_new_bigresponsebits_1878_Update)
            // RAW reenables for new_bigresponsebits
            // Phi start dependency for implicit/constant alternative.
            R_new_bigresponsebits_1878_sample_start_ <-& (R_new_bigresponsebits_1878_sample_start__ps)
            R_new_bigresponsebits_1878_update_start_ <-& (R_new_bigresponsebits_1878_update_start__ps)
            // Phi complete dependency.
            R_new_bigresponsebits_1878_sample_completed__ps <-& (R_new_bigresponsebits_1878_sample_completed_)
            R_new_bigresponsebits_1878_update_completed__ps <-& (R_new_bigresponsebits_1878_update_completed_)
            $phisequencer [ phi_stmt_1873_phi_seq] : 
            phi_stmt_1873_entry_trigger type_cast_1877_sample_start__ps type_cast_1877_sample_completed__ps type_cast_1877_update_start__ps type_cast_1877_update_completed__ps phi_stmt_1873_loopback_trigger R_new_bigresponsebits_1878_sample_start__ps R_new_bigresponsebits_1878_sample_completed__ps R_new_bigresponsebits_1878_update_start__ps R_new_bigresponsebits_1878_update_completed__ps :
            phi_stmt_1873_sample_start__ps phi_stmt_1873_sample_completed__ps phi_stmt_1873_update_start__ps phi_stmt_1873_update_completed__ps :
            phi_stmt_1873_entry_sample_req_ps phi_stmt_1873_loopback_sample_req_ps : 
            phi_stmt_1873_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1873
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // start:  				$volatile next_J := (J + 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 650
            // volatile! 
            // Source expression
            // (J + 1 )
            // J
            // Target expression
            // (as target) next_J
            // start: WAR dependencies for next_J
            // WAR dependency: Read: next_J before Write: 				$volatile next_J := (J + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_J
            // end:  				$volatile next_J := (J + 1 ) $buffering 1
            // start:  				bigresponsebit := responseRx $buffering 1// bits of buffering = 1. 
            //  file .Aa/sdhc.opt.aa, line 651
            // Source expression
            // responseRx
            $T[RPIPE_responseRx_1886_sample_start_] 
            $T[RPIPE_responseRx_1886_sample_completed_] 
            $T[RPIPE_responseRx_1886_update_start_] 
            $T[RPIPE_responseRx_1886_update_completed_] 
            ;;[RPIPE_responseRx_1886_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_responseRx_1886_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_responseRx_1886_sample_start_ &-> (RPIPE_responseRx_1886_Sample)
            RPIPE_responseRx_1886_sample_completed_ <-& (RPIPE_responseRx_1886_Sample)
            RPIPE_responseRx_1886_update_start_ <-& (RPIPE_responseRx_1886_sample_completed_)
            RPIPE_responseRx_1886_update_start_ &-> (RPIPE_responseRx_1886_Update)
            RPIPE_responseRx_1886_update_completed_ <-& (RPIPE_responseRx_1886_Update)
            RPIPE_responseRx_1886_sample_start_ o<-& (RPIPE_responseRx_1886_update_completed_ 0)
            // Target expression
            // (as target) bigresponsebit
            // start: WAR dependencies for bigresponsebit
            // done: WAR dependencies for bigresponsebit
            // end:  				bigresponsebit := responseRx $buffering 1// bits of buffering = 1. 
            // start: WAR dependencies for bigresponsebits
            // done: WAR dependencies for bigresponsebits
            // start:  				$volatile bigresponsebits := (($bitcast ($uint<135>) 0  ) && bigresponsebit) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 652
            // volatile! 
            // Source expression
            // (($bitcast ($uint<135>) 0  ) && bigresponsebit)
            // bigresponsebit
            // Target expression
            // (as target) bigresponsebits
            // start: WAR dependencies for bigresponsebits
            // done: WAR dependencies for bigresponsebits
            // end:  				$volatile bigresponsebits := (($bitcast ($uint<135>) 0  ) && bigresponsebit) $buffering 1
            // start: WAR dependencies for new_bigresponsebits
            // WAR dependency: Read: new_bigresponsebits before Write: 				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_responseRx_1886_update_start_ <-& (phi_stmt_1873_sample_completed_)
            phi_stmt_1873_sample_start_ o<-& (RPIPE_responseRx_1886_update_completed_ 0)
            // WAR dependency: release  Read: new_bigresponsebits with Write: 				bigresponsebit := responseRx $buffering 1// bits of buffering = 1. 
            // done: WAR dependencies for new_bigresponsebits
            // start:  				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 653
            // volatile! 
            // Source expression
            // ((old_bigresponsebits << 1 ) | bigresponsebits)
            // (old_bigresponsebits << 1 )
            // old_bigresponsebits
            // bigresponsebits
            // Target expression
            // (as target) new_bigresponsebits
            // start: WAR dependencies for new_bigresponsebits
            // WAR dependency: Read: new_bigresponsebits before Write: 				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_responseRx_1886_update_start_ <-& (phi_stmt_1873_sample_completed_)
            phi_stmt_1873_sample_start_ o<-& (RPIPE_responseRx_1886_update_completed_ 0)
            // WAR dependency: release  Read: new_bigresponsebits with Write: 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
            // done: WAR dependencies for new_bigresponsebits
            // end:  				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
            // (next_J < 136 )
            // next_J
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (next_J < 136 ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_1868_update_completed_)
            // done: Forward dependencies from (next_J < 136 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // pipe read/write dependencies for pipe responseRx
            // read-dependencies for pipe responseRx
            // write-dependencies for pipe responseRx
            // signal write dependencies for responseRx
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_1866__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_1866_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_1866__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_1866_loop_body : condition_evaluated
          $bind do_while_stmt_1866__entry__  => do_while_stmt_1866_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_1866_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1866__exit__)
        }
        do_while_stmt_1866__entry__ |-> (do_while_stmt_1866)
        do_while_stmt_1866__exit__ <-| (do_while_stmt_1866)
        do_while_stmt_1866__entry__ <-| (branch_block_stmt_1865__entry__)
        do_while_stmt_1866__exit__ |-> (branch_block_stmt_1865__exit__)
      }
      branch_block_stmt_1865__entry__ |-> (branch_block_stmt_1865)
      branch_block_stmt_1865__exit__ <-| (branch_block_stmt_1865)
      ::[assign_stmt_1909_to_assign_stmt_1918] 
      {
        // start:  			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 657
        // Target expression
        // (as target) responseEnable
        $T[WPIPE_responseEnable_1907_sample_start_] 
        $T[WPIPE_responseEnable_1907_sample_completed_] 
        $T[WPIPE_responseEnable_1907_update_start_] 
        $T[WPIPE_responseEnable_1907_update_completed_] 
        ;;[WPIPE_responseEnable_1907_Sample] 
        {
          // pipe write sample-start responseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_responseEnable_1907_Update] 
        {
          // pipe write update (complete) responseEnable
          $T [req] $T [ack] 
        }
        WPIPE_responseEnable_1907_sample_start_ &-> (WPIPE_responseEnable_1907_Sample)
        WPIPE_responseEnable_1907_sample_completed_ <-& (WPIPE_responseEnable_1907_Sample)
        WPIPE_responseEnable_1907_update_start_ <-& (WPIPE_responseEnable_1907_sample_completed_)
        WPIPE_responseEnable_1907_update_start_ &-> (WPIPE_responseEnable_1907_Update)
        WPIPE_responseEnable_1907_update_completed_ <-& (WPIPE_responseEnable_1907_Update)
        // end:  			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start:  			bigResponseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 658
        // Target expression
        // (as target) bigResponseEnable
        $T[WPIPE_bigResponseEnable_1910_sample_start_] 
        $T[WPIPE_bigResponseEnable_1910_sample_completed_] 
        $T[WPIPE_bigResponseEnable_1910_update_start_] 
        $T[WPIPE_bigResponseEnable_1910_update_completed_] 
        ;;[WPIPE_bigResponseEnable_1910_Sample] 
        {
          // pipe write sample-start bigResponseEnable
          $T [req] $T [ack] 
        }
        ;;[WPIPE_bigResponseEnable_1910_Update] 
        {
          // pipe write update (complete) bigResponseEnable
          $T [req] $T [ack] 
        }
        WPIPE_bigResponseEnable_1910_sample_start_ &-> (WPIPE_bigResponseEnable_1910_Sample)
        WPIPE_bigResponseEnable_1910_sample_completed_ <-& (WPIPE_bigResponseEnable_1910_Sample)
        WPIPE_bigResponseEnable_1910_update_start_ <-& (WPIPE_bigResponseEnable_1910_sample_completed_)
        WPIPE_bigResponseEnable_1910_update_start_ &-> (WPIPE_bigResponseEnable_1910_Update)
        WPIPE_bigResponseEnable_1910_update_completed_ <-& (WPIPE_bigResponseEnable_1910_Update)
        // end:  			bigResponseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start: WAR dependencies for CID_CRC
        // ignored out-of-scope w_root 				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
        // type of target is $uint<136>
        // ignored out-of-scope w_root 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
        // done: WAR dependencies for CID_CRC
        // start:  			$volatile CID_CRC := ( $slice bigResponse 7 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 660
        // volatile! 
        // Source expression
        // ( $slice bigResponse 7 1 ) 
        // bigResponse
        // Target expression
        // (as target) CID_CRC
        // start: WAR dependencies for CID_CRC
        // ignored out-of-scope w_root 				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
        // type of target is $uint<136>
        // ignored out-of-scope w_root 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
        // done: WAR dependencies for CID_CRC
        // end:  			$volatile CID_CRC := ( $slice bigResponse 7 1 )  $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe bigResponseEnable
        // read-dependencies for pipe bigResponseEnable
        // write-dependencies for pipe bigResponseEnable
        // signal write dependencies for bigResponseEnable
        // pipe read/write dependencies for pipe responseEnable
        // read-dependencies for pipe responseEnable
        // write-dependencies for pipe responseEnable
        // signal write dependencies for responseEnable
      }
      assign_stmt_1909_to_assign_stmt_1918__entry__ |-> (assign_stmt_1909_to_assign_stmt_1918)
      assign_stmt_1909_to_assign_stmt_1918__exit__ <-| (assign_stmt_1909_to_assign_stmt_1918)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_1919_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1919__entry__ |-> (if_stmt_1919_dead_link)
      if_stmt_1919__exit__ <-| (if_stmt_1919_dead_link)
      ;;[if_stmt_1919_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((commandRegVal & _h8 ) == 8 )
        ;;[EQ_u8_u1_1924] 
        {
          // binary expression 
          ||[EQ_u8_u1_1924_inputs] 
          {
            // (commandRegVal & _h8 )
            ;;[AND_u8_u8_1922] 
            {
              // binary expression 
              ||[AND_u8_u8_1922_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1919__entry__ |-> (if_stmt_1919_eval_test)
      $P [EQ_u8_u1_1924_place]
      EQ_u8_u1_1924_place <-| (if_stmt_1919_eval_test)
      ;;[if_stmt_1919_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1919_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_1924_place |-> (if_stmt_1919_if_link if_stmt_1919_else_link)
      $P [call_stmt_1928_to_assign_stmt_1936__entry__] 
      $P [call_stmt_1928_to_assign_stmt_1936__exit__] 
      ::[call_stmt_1928_to_assign_stmt_1936] 
      {
        // start: 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
        //  file .Aa/sdhc.opt.aa, line 662
        $T[call_stmt_1928_sample_start_] 
        $T[call_stmt_1928_sample_completed_] 
        $T[call_stmt_1928_update_start_] 
        $T[call_stmt_1928_update_completed_] 
        // Call input argument 0
        // ( $slice bigResponse 127 8 ) 
        // bigResponse
        // start: Forward dependencies from ( $slice bigResponse 127 8 )  to transition call_stmt_1928_sample_start_
        // done: Forward dependencies from ( $slice bigResponse 127 8 )  to transition call_stmt_1928_sample_start_
        ;;[call_stmt_1928_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1928_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1928_sample_start_ &-> (call_stmt_1928_Sample)
        call_stmt_1928_sample_completed_ <-& (call_stmt_1928_Sample)
        call_stmt_1928_sample_completed_ &-> ($null)
        call_stmt_1928_update_start_ &-> (call_stmt_1928_Update)
        call_stmt_1928_update_completed_ <-& (call_stmt_1928_Update)
        // Call output argument 0
        // (as target) R2_CRC
        // start: WAR dependencies for R2_CRC
        // done: WAR dependencies for R2_CRC
        // end: 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
        // start:  			CommandCRCError1 := ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 663
        // Source expression
        // ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  ) 
        $T[MUX_1935_sample_start_] 
        $T[MUX_1935_sample_completed_] 
        $T[MUX_1935_update_start_] 
        $T[MUX_1935_update_completed_] 
        // (CID_CRC == R2_CRC)
        // CID_CRC
        // R2_CRC
        // start: Forward dependencies from (CID_CRC == R2_CRC) to transition MUX_1935_sample_start_
        MUX_1935_sample_start_ <-& (call_stmt_1928_update_completed_)
        // done: Forward dependencies from (CID_CRC == R2_CRC) to transition MUX_1935_sample_start_
        ;;[MUX_1935_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1935_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1935_sample_start_ &-> (MUX_1935_start)
        MUX_1935_sample_completed_ <-& (MUX_1935_start)
        MUX_1935_sample_completed_ &-> ($null)
        MUX_1935_update_start_ &-> (MUX_1935_complete)
        MUX_1935_update_completed_ <-& (MUX_1935_complete)
        // Target expression
        // (as target) CommandCRCError1
        // start: WAR dependencies for CommandCRCError1
        // done: WAR dependencies for CommandCRCError1
        // end:  			CommandCRCError1 := ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      call_stmt_1928_to_assign_stmt_1936__entry__ |-> (call_stmt_1928_to_assign_stmt_1936)
      call_stmt_1928_to_assign_stmt_1936__exit__ <-| (call_stmt_1928_to_assign_stmt_1936)
      call_stmt_1928_to_assign_stmt_1936__entry__ <-| (if_stmt_1919_if_link)
      call_stmt_1928_to_assign_stmt_1936__exit__ |-> (if_stmt_1919__exit__)
      if_stmt_1919__exit__ <-| (if_stmt_1919_else_link)
      ::[assign_stmt_1946_to_assign_stmt_1951] 
      {
        // start:  			commandEndBitError1 := ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 665
        // Source expression
        // ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
        $T[MUX_1945_sample_start_] 
        $T[MUX_1945_sample_completed_] 
        $T[MUX_1945_update_start_] 
        $T[MUX_1945_update_completed_] 
        // (bigResponse [] 0 )
        // bigResponse
        // start: Forward dependencies from (bigResponse [] 0 ) to transition MUX_1945_sample_start_
        // done: Forward dependencies from (bigResponse [] 0 ) to transition MUX_1945_sample_start_
        ;;[MUX_1945_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_1945_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_1945_sample_start_ &-> (MUX_1945_start)
        MUX_1945_sample_completed_ <-& (MUX_1945_start)
        MUX_1945_sample_completed_ &-> ($null)
        MUX_1945_update_start_ &-> (MUX_1945_complete)
        MUX_1945_update_completed_ <-& (MUX_1945_complete)
        // Target expression
        // (as target) commandEndBitError1
        // start: WAR dependencies for commandEndBitError1
        // done: WAR dependencies for commandEndBitError1
        // end:  			commandEndBitError1 := ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptStatusVar_3 := (CommandCRCError1 | commandEndBitError1) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 666
        // Source expression
        // (CommandCRCError1 | commandEndBitError1)
        $T[OR_u8_u8_1950_sample_start_] 
        $T[OR_u8_u8_1950_sample_completed_] 
        $T[OR_u8_u8_1950_update_start_] 
        $T[OR_u8_u8_1950_update_completed_] 
        // CommandCRCError1
        // commandEndBitError1
        // start: Forward dependencies from CommandCRCError1 to transition OR_u8_u8_1950_sample_start_
        // done: Forward dependencies from CommandCRCError1 to transition OR_u8_u8_1950_sample_start_
        // start: Forward dependencies from commandEndBitError1 to transition OR_u8_u8_1950_sample_start_
        OR_u8_u8_1950_sample_start_ <-& (MUX_1945_update_completed_)
        // done: Forward dependencies from commandEndBitError1 to transition OR_u8_u8_1950_sample_start_
        ;;[OR_u8_u8_1950_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_1950_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_1950_sample_start_ &-> (OR_u8_u8_1950_Sample)
        OR_u8_u8_1950_sample_completed_ <-& (OR_u8_u8_1950_Sample)
        OR_u8_u8_1950_sample_completed_ &-> ($null)
        OR_u8_u8_1950_update_start_ &-> (OR_u8_u8_1950_Update)
        OR_u8_u8_1950_update_completed_ <-& (OR_u8_u8_1950_Update)
        // Target expression
        // (as target) errorInterruptStatusVar_3
        // start: WAR dependencies for errorInterruptStatusVar_3
        // done: WAR dependencies for errorInterruptStatusVar_3
        // end:  			errorInterruptStatusVar_3 := (CommandCRCError1 | commandEndBitError1) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_1946_to_assign_stmt_1951__entry__ |-> (assign_stmt_1946_to_assign_stmt_1951)
      assign_stmt_1946_to_assign_stmt_1951__exit__ <-| (assign_stmt_1946_to_assign_stmt_1951)
      <>[branch_block_stmt_1952] // Branch Block  file .Aa/sdhc.opt.aa, line 667
      {
        $P [branch_block_stmt_1952__entry__]
        branch_block_stmt_1952__entry__ <-| ($entry)
        $P [branch_block_stmt_1952__exit__]
        branch_block_stmt_1952__exit__ |-> ($exit)
        $P [do_while_stmt_1953__entry__] 
        $P [do_while_stmt_1953__exit__] 
        // do-while-statement  
        //  file .Aa/sdhc.opt.aa, line 669
        <o> [do_while_stmt_1953]  $depth 10 $buffering 1 
        {
          $P[do_while_stmt_1953__entry__] 
          $P[do_while_stmt_1953__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_1953_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_1955
            // 				$phi k := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_k $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_1955_sample_start_] 
            $T[phi_stmt_1955_sample_completed_] 
            $T[phi_stmt_1955_update_start_] 
            $T[phi_stmt_1955_update_completed_] 
            $T[phi_stmt_1955_sample_start__ps] 
            phi_stmt_1955_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1955_sample_completed__ps] 
            phi_stmt_1955_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1955_update_start__ps] 
            phi_stmt_1955_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1955_update_completed__ps] 
            phi_stmt_1955_update_completed_ <-& (phi_stmt_1955_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1955_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1955_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1955_update_start_)
            $T[phi_stmt_1955_loopback_trigger] 
            phi_stmt_1955_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1955_loopback_sample_req] 
            $T[phi_stmt_1955_loopback_sample_req_ps] 
            phi_stmt_1955_loopback_sample_req <-& (phi_stmt_1955_loopback_sample_req_ps)
            phi_stmt_1955_loopback_sample_req &-> ($null)
            $T[phi_stmt_1955_entry_trigger] 
            phi_stmt_1955_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1955_entry_sample_req] 
            $T[phi_stmt_1955_entry_sample_req_ps] 
            phi_stmt_1955_entry_sample_req <-& (phi_stmt_1955_entry_sample_req_ps)
            phi_stmt_1955_entry_sample_req &-> ($null)
            phi_stmt_1955_update_start_ o<-& (phi_stmt_1955_update_completed_ 0)
            phi_stmt_1955_sample_start_ o<-& (phi_stmt_1955_sample_completed_ 1)
            $T[phi_stmt_1955_merged_reqs] 
            $T[phi_stmt_1955_phi_mux_ack] 
            $T[phi_stmt_1955_phi_mux_ack_ps] 
            phi_stmt_1955_phi_mux_ack_ps <-& (phi_stmt_1955_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1955_update_completed_)
            $T[type_cast_1958_sample_start__ps] 
            $T[type_cast_1958_sample_completed__ps] 
            $T[type_cast_1958_update_start__ps] 
            $T[type_cast_1958_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_1958_sample_start_] 
            $T[type_cast_1958_sample_completed_] 
            type_cast_1958_sample_completed_ <-& (type_cast_1958_sample_start_)
            $T[type_cast_1958_update_start_] 
            $T [type_cast_1958_update_completed_] $delay 
            type_cast_1958_update_completed_ <-& (type_cast_1958_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_1958_sample_start_ <-& (type_cast_1958_sample_start__ps)
            type_cast_1958_update_start_ <-& (type_cast_1958_update_start__ps)
            // Phi complete dependency.
            type_cast_1958_sample_completed__ps <-& (type_cast_1958_sample_completed_)
            type_cast_1958_update_completed__ps <-& (type_cast_1958_update_completed_)
            $T[R_next_k_1959_sample_start__ps] 
            $T[R_next_k_1959_sample_completed__ps] 
            $T[R_next_k_1959_update_start__ps] 
            $T[R_next_k_1959_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_k_1959_sample_start_] 
            $T[R_next_k_1959_sample_completed_] 
            $T[R_next_k_1959_update_start_] 
            $T[R_next_k_1959_update_completed_] 
            ;;[R_next_k_1959_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_k_1959_sample_start_ &-> (R_next_k_1959_Sample)
            R_next_k_1959_sample_completed_ <-& (R_next_k_1959_Sample)
            ;;[R_next_k_1959_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_k_1959_update_start_ &-> (R_next_k_1959_Update)
            R_next_k_1959_update_completed_ <-& (R_next_k_1959_Update)
            // RAW reenables for next_k
            // Phi start dependency for implicit/constant alternative.
            R_next_k_1959_sample_start_ <-& (R_next_k_1959_sample_start__ps)
            R_next_k_1959_update_start_ <-& (R_next_k_1959_update_start__ps)
            // Phi complete dependency.
            R_next_k_1959_sample_completed__ps <-& (R_next_k_1959_sample_completed_)
            R_next_k_1959_update_completed__ps <-& (R_next_k_1959_update_completed_)
            $phisequencer [ phi_stmt_1955_phi_seq] : 
            phi_stmt_1955_entry_trigger type_cast_1958_sample_start__ps type_cast_1958_sample_completed__ps type_cast_1958_update_start__ps type_cast_1958_update_completed__ps phi_stmt_1955_loopback_trigger R_next_k_1959_sample_start__ps R_next_k_1959_sample_completed__ps R_next_k_1959_update_start__ps R_next_k_1959_update_completed__ps :
            phi_stmt_1955_sample_start__ps phi_stmt_1955_sample_completed__ps phi_stmt_1955_update_start__ps phi_stmt_1955_update_completed__ps :
            phi_stmt_1955_entry_sample_req_ps phi_stmt_1955_loopback_sample_req_ps : 
            phi_stmt_1955_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1955
            // start:  PHI statement phi_stmt_1960
            // 				$phi temp := 				  ( $slice bigResponse 127 8 )  $on   $entry 				  next_temp $on   $loopback 
            // type of target is $uint<120>
            $T[phi_stmt_1960_sample_start_] 
            $T[phi_stmt_1960_sample_completed_] 
            $T[phi_stmt_1960_update_start_] 
            $T[phi_stmt_1960_update_completed_] 
            $T[phi_stmt_1960_sample_start__ps] 
            phi_stmt_1960_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_1960_sample_completed__ps] 
            phi_stmt_1960_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_1960_update_start__ps] 
            phi_stmt_1960_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_1960_update_completed__ps] 
            phi_stmt_1960_update_completed_ <-& (phi_stmt_1960_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_1960_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_1960_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_1960_update_start_)
            $T[phi_stmt_1960_loopback_trigger] 
            phi_stmt_1960_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_1960_loopback_sample_req] 
            $T[phi_stmt_1960_loopback_sample_req_ps] 
            phi_stmt_1960_loopback_sample_req <-& (phi_stmt_1960_loopback_sample_req_ps)
            phi_stmt_1960_loopback_sample_req &-> ($null)
            $T[phi_stmt_1960_entry_trigger] 
            phi_stmt_1960_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_1960_entry_sample_req] 
            $T[phi_stmt_1960_entry_sample_req_ps] 
            phi_stmt_1960_entry_sample_req <-& (phi_stmt_1960_entry_sample_req_ps)
            phi_stmt_1960_entry_sample_req &-> ($null)
            phi_stmt_1960_update_start_ o<-& (phi_stmt_1960_update_completed_ 0)
            phi_stmt_1960_sample_start_ o<-& (phi_stmt_1960_sample_completed_ 1)
            $T[phi_stmt_1960_merged_reqs] 
            $T[phi_stmt_1960_phi_mux_ack] 
            $T[phi_stmt_1960_phi_mux_ack_ps] 
            phi_stmt_1960_phi_mux_ack_ps <-& (phi_stmt_1960_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_1960_update_completed_)
            $T[slice_1963_sample_start__ps] 
            $T[slice_1963_sample_completed__ps] 
            $T[slice_1963_update_start__ps] 
            $T[slice_1963_update_completed__ps] 
            // source expression in Phi alternative 0
            // ( $slice bigResponse 127 8 ) 
            $T[slice_1963_sample_start_] 
            $T[slice_1963_sample_completed_] 
            $T[slice_1963_update_start_] 
            $T[slice_1963_update_completed_] 
            // bigResponse
            // start: Forward dependencies from bigResponse to transition slice_1963_sample_start_
            // done: Forward dependencies from bigResponse to transition slice_1963_sample_start_
            ;;[slice_1963_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_1963_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_1963_sample_start_ &-> (slice_1963_Sample)
            slice_1963_sample_completed_ <-& (slice_1963_Sample)
            slice_1963_sample_completed_ &-> ($null)
            slice_1963_update_start_ &-> (slice_1963_Update)
            slice_1963_update_completed_ <-& (slice_1963_Update)
            // RAW reenables for bigResponse
            // self-release: 
            slice_1963_sample_start_ o<-& (slice_1963_sample_completed_ 1)
            $null &-> (slice_1963_update_start_)
            slice_1963_update_start_ o<-& (slice_1963_update_completed_ 0)
            // Phi start dependency
            slice_1963_sample_start_ <-& (slice_1963_sample_start__ps)
            slice_1963_update_start_ <-& (slice_1963_update_start__ps)
            // RAW reenables for ( $slice bigResponse 127 8 ) 
            // producer  and  consumer are both determined by PHI statements.
            // Phi complete dependency.
            slice_1963_sample_completed__ps <-& (slice_1963_sample_completed_)
            slice_1963_update_completed__ps <-& (slice_1963_update_completed_)
            $T[R_next_temp_1964_sample_start__ps] 
            $T[R_next_temp_1964_sample_completed__ps] 
            $T[R_next_temp_1964_update_start__ps] 
            $T[R_next_temp_1964_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_temp_1964_sample_start_] 
            $T[R_next_temp_1964_sample_completed_] 
            $T[R_next_temp_1964_update_start_] 
            $T[R_next_temp_1964_update_completed_] 
            ;;[R_next_temp_1964_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_temp_1964_sample_start_ &-> (R_next_temp_1964_Sample)
            R_next_temp_1964_sample_completed_ <-& (R_next_temp_1964_Sample)
            ;;[R_next_temp_1964_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_temp_1964_update_start_ &-> (R_next_temp_1964_Update)
            R_next_temp_1964_update_completed_ <-& (R_next_temp_1964_Update)
            // RAW reenables for next_temp
            // Phi start dependency for implicit/constant alternative.
            R_next_temp_1964_sample_start_ <-& (R_next_temp_1964_sample_start__ps)
            R_next_temp_1964_update_start_ <-& (R_next_temp_1964_update_start__ps)
            // Phi complete dependency.
            R_next_temp_1964_sample_completed__ps <-& (R_next_temp_1964_sample_completed_)
            R_next_temp_1964_update_completed__ps <-& (R_next_temp_1964_update_completed_)
            $phisequencer [ phi_stmt_1960_phi_seq] : 
            phi_stmt_1960_entry_trigger slice_1963_sample_start__ps slice_1963_sample_completed__ps slice_1963_update_start__ps slice_1963_update_completed__ps phi_stmt_1960_loopback_trigger R_next_temp_1964_sample_start__ps R_next_temp_1964_sample_completed__ps R_next_temp_1964_update_start__ps R_next_temp_1964_update_completed__ps :
            phi_stmt_1960_sample_start__ps phi_stmt_1960_sample_completed__ps phi_stmt_1960_update_start__ps phi_stmt_1960_update_completed__ps :
            phi_stmt_1960_entry_sample_req_ps phi_stmt_1960_loopback_sample_req_ps : 
            phi_stmt_1960_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_1960
            // start: WAR dependencies for address
            // done: WAR dependencies for address
            // start:  				$volatile address := (16  + k) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 677
            // volatile! 
            // Source expression
            // (16  + k)
            // k
            // Target expression
            // (as target) address
            // start: WAR dependencies for address
            // done: WAR dependencies for address
            // end:  				$volatile address := (16  + k) $buffering 1
            // start: 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
            //  file .Aa/sdhc.opt.aa, line 678
            $T[call_stmt_1974_sample_start_] 
            $T[call_stmt_1974_sample_completed_] 
            $T[call_stmt_1974_update_start_] 
            $T[call_stmt_1974_update_completed_] 
            // Call input argument 0
            // address
            // Call input argument 1
            // ( $slice temp 7 0 ) 
            // temp
            // start: Forward dependencies from address to transition call_stmt_1974_sample_start_
            call_stmt_1974_sample_start_ <-& (phi_stmt_1955_update_completed_)
            // done: Forward dependencies from address to transition call_stmt_1974_sample_start_
            // RAW reenables for address
            phi_stmt_1955_update_start_ o<-& (call_stmt_1974_sample_completed_ 0)
            // start: Forward dependencies from ( $slice temp 7 0 )  to transition call_stmt_1974_sample_start_
            call_stmt_1974_sample_start_ <-& (phi_stmt_1960_update_completed_)
            // done: Forward dependencies from ( $slice temp 7 0 )  to transition call_stmt_1974_sample_start_
            // RAW reenables for ( $slice temp 7 0 ) 
            phi_stmt_1960_update_start_ o<-& (call_stmt_1974_sample_completed_ 0)
            ;;[call_stmt_1974_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_1974_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_1974_sample_start_ &-> (call_stmt_1974_Sample)
            call_stmt_1974_sample_completed_ <-& (call_stmt_1974_Sample)
            call_stmt_1974_sample_completed_ &-> ($null)
            call_stmt_1974_update_start_ &-> (call_stmt_1974_Update)
            call_stmt_1974_update_completed_ <-& (call_stmt_1974_Update)
            // self-release: 
            call_stmt_1974_sample_start_ o<-& (call_stmt_1974_sample_completed_ 1)
            $null &-> (call_stmt_1974_update_start_)
            call_stmt_1974_update_start_ o<-& (call_stmt_1974_update_completed_ 0)
            // end: 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
            // start: WAR dependencies for next_temp
            // WAR dependency: Read: next_temp before Write: 				$volatile next_temp := (temp >> 8 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_temp
            // start:  				$volatile next_temp := (temp >> 8 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 679
            // volatile! 
            // Source expression
            // (temp >> 8 )
            // temp
            // Target expression
            // (as target) next_temp
            // start: WAR dependencies for next_temp
            // WAR dependency: Read: next_temp before Write: 				$volatile next_temp := (temp >> 8 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_temp
            // end:  				$volatile next_temp := (temp >> 8 ) $buffering 1
            // start: WAR dependencies for next_k
            // WAR dependency: Read: next_k before Write: 				$volatile next_k := (k + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_k
            // start:  				$volatile next_k := (k + 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 680
            // volatile! 
            // Source expression
            // (k + 1 )
            // k
            // Target expression
            // (as target) next_k
            // start: WAR dependencies for next_k
            // WAR dependency: Read: next_k before Write: 				$volatile next_k := (k + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_k
            // end:  				$volatile next_k := (k + 1 ) $buffering 1
            // (next_k < 15 )
            // next_k
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (next_k < 15 ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_1955_update_completed_)
            // done: Forward dependencies from (next_k < 15 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_8
            //  call_stmt_1974 store
            // reenable across ring for memory space memory_space_8
            // leading and trailing sets are the same... no ring dependency
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_1953__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_1953_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_1953__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_1953_loop_body : condition_evaluated
          $bind do_while_stmt_1953__entry__  => do_while_stmt_1953_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_1953_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1953__exit__)
        }
        do_while_stmt_1953__entry__ |-> (do_while_stmt_1953)
        do_while_stmt_1953__exit__ <-| (do_while_stmt_1953)
        do_while_stmt_1953__entry__ <-| (branch_block_stmt_1952__entry__)
        do_while_stmt_1953__exit__ |-> (branch_block_stmt_1952__exit__)
      }
      branch_block_stmt_1952__entry__ |-> (branch_block_stmt_1952)
      branch_block_stmt_1952__exit__ <-| (branch_block_stmt_1952)
      ::[call_stmt_1992_to_assign_stmt_2010] 
      {
        // start: 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
        //  file .Aa/sdhc.opt.aa, line 683
        $T[call_stmt_1992_sample_start_] 
        $T[call_stmt_1992_sample_completed_] 
        $T[call_stmt_1992_update_start_] 
        $T[call_stmt_1992_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1992_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1992_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1992_sample_start_ &-> (call_stmt_1992_Sample)
        call_stmt_1992_sample_completed_ <-& (call_stmt_1992_Sample)
        call_stmt_1992_sample_completed_ &-> ($null)
        call_stmt_1992_update_start_ &-> (call_stmt_1992_Update)
        call_stmt_1992_update_completed_ <-& (call_stmt_1992_Update)
        // Call output argument 0
        // (as target) tempPresentState3
        // start: WAR dependencies for tempPresentState3
        // done: WAR dependencies for tempPresentState3
        // end: 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
        // start:  			presentState3 := ((tempPresentState3 >> 1 ) << 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 684
        // Source expression
        // ((tempPresentState3 >> 1 ) << 1 )
        $T[SHL_u8_u8_1998_sample_start_] 
        $T[SHL_u8_u8_1998_sample_completed_] 
        $T[SHL_u8_u8_1998_update_start_] 
        $T[SHL_u8_u8_1998_update_completed_] 
        // (tempPresentState3 >> 1 )
        // tempPresentState3
        // start: Forward dependencies from (tempPresentState3 >> 1 ) to transition SHL_u8_u8_1998_sample_start_
        SHL_u8_u8_1998_sample_start_ <-& (call_stmt_1992_update_completed_)
        // done: Forward dependencies from (tempPresentState3 >> 1 ) to transition SHL_u8_u8_1998_sample_start_
        ;;[SHL_u8_u8_1998_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u8_u8_1998_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u8_u8_1998_sample_start_ &-> (SHL_u8_u8_1998_Sample)
        SHL_u8_u8_1998_sample_completed_ <-& (SHL_u8_u8_1998_Sample)
        SHL_u8_u8_1998_sample_completed_ &-> ($null)
        SHL_u8_u8_1998_update_start_ &-> (SHL_u8_u8_1998_Update)
        SHL_u8_u8_1998_update_completed_ <-& (SHL_u8_u8_1998_Update)
        // Target expression
        // (as target) presentState3
        // start: WAR dependencies for presentState3
        // done: WAR dependencies for presentState3
        // end:  			presentState3 := ((tempPresentState3 >> 1 ) << 1 ) $buffering 1// bits of buffering = 8. 
        // start: 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
        //  file .Aa/sdhc.opt.aa, line 685
        $T[call_stmt_2002_sample_start_] 
        $T[call_stmt_2002_sample_completed_] 
        $T[call_stmt_2002_update_start_] 
        $T[call_stmt_2002_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_2002_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2002_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2002_sample_start_ &-> (call_stmt_2002_Sample)
        call_stmt_2002_sample_completed_ <-& (call_stmt_2002_Sample)
        call_stmt_2002_sample_completed_ &-> ($null)
        call_stmt_2002_update_start_ &-> (call_stmt_2002_Update)
        call_stmt_2002_update_completed_ <-& (call_stmt_2002_Update)
        // Call output argument 0
        // (as target) normalInterrupt3
        // start: WAR dependencies for normalInterrupt3
        // done: WAR dependencies for normalInterrupt3
        // end: 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
        // start: 			$call writeSDHCRegisters (36  presentState3 ) () 
        //  file .Aa/sdhc.opt.aa, line 686
        $T[call_stmt_2005_sample_start_] 
        $T[call_stmt_2005_sample_completed_] 
        $T[call_stmt_2005_update_start_] 
        $T[call_stmt_2005_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // presentState3
        // start: Forward dependencies from presentState3 to transition call_stmt_2005_sample_start_
        call_stmt_2005_sample_start_ <-& (SHL_u8_u8_1998_update_completed_)
        // done: Forward dependencies from presentState3 to transition call_stmt_2005_sample_start_
        ;;[call_stmt_2005_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2005_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2005_sample_start_ &-> (call_stmt_2005_Sample)
        call_stmt_2005_sample_completed_ <-& (call_stmt_2005_Sample)
        call_stmt_2005_sample_completed_ &-> ($null)
        call_stmt_2005_update_start_ &-> (call_stmt_2005_Update)
        call_stmt_2005_update_completed_ <-& (call_stmt_2005_Update)
        // end: 			$call writeSDHCRegisters (36  presentState3 ) () 
        // start:  			normalInterruptStatusVar_3 := (normalInterrupt3 | _h01 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 687
        // Source expression
        // (normalInterrupt3 | _h01 )
        $T[OR_u8_u8_2009_sample_start_] 
        $T[OR_u8_u8_2009_sample_completed_] 
        $T[OR_u8_u8_2009_update_start_] 
        $T[OR_u8_u8_2009_update_completed_] 
        // normalInterrupt3
        // start: Forward dependencies from normalInterrupt3 to transition OR_u8_u8_2009_sample_start_
        OR_u8_u8_2009_sample_start_ <-& (call_stmt_2002_update_completed_)
        // done: Forward dependencies from normalInterrupt3 to transition OR_u8_u8_2009_sample_start_
        ;;[OR_u8_u8_2009_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_2009_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_2009_sample_start_ &-> (OR_u8_u8_2009_Sample)
        OR_u8_u8_2009_sample_completed_ <-& (OR_u8_u8_2009_Sample)
        OR_u8_u8_2009_sample_completed_ &-> ($null)
        OR_u8_u8_2009_update_start_ &-> (OR_u8_u8_2009_Update)
        OR_u8_u8_2009_update_completed_ <-& (OR_u8_u8_2009_Update)
        // Target expression
        // (as target) normalInterruptStatusVar_3
        // start: WAR dependencies for normalInterruptStatusVar_3
        // done: WAR dependencies for normalInterruptStatusVar_3
        // end:  			normalInterruptStatusVar_3 := (normalInterrupt3 | _h01 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_1992 load
        //  call_stmt_2002 load
        //  call_stmt_2005 store
        $T [call_stmt_1992_call_stmt_2005_delay] $delay
        // call_stmt_1992(load) -> call_stmt_2005(store)
        call_stmt_2005_sample_start_ <-& (call_stmt_1992_call_stmt_2005_delay)
        call_stmt_1992_call_stmt_2005_delay <-& (call_stmt_1992_update_completed_)
        $T [call_stmt_2002_call_stmt_2005_delay] $delay
        // call_stmt_2002(load) -> call_stmt_2005(store)
        call_stmt_2005_sample_start_ <-& (call_stmt_2002_call_stmt_2005_delay)
        call_stmt_2002_call_stmt_2005_delay <-& (call_stmt_2002_update_completed_)
      }
      call_stmt_1992_to_assign_stmt_2010__entry__ |-> (call_stmt_1992_to_assign_stmt_2010)
      call_stmt_1992_to_assign_stmt_2010__exit__ <-| (call_stmt_1992_to_assign_stmt_2010)
      assign_stmt_1861_to_assign_stmt_1864__entry__ <-| (if_stmt_1855_if_link)
      branch_block_stmt_1865__entry__ <-| (assign_stmt_1861_to_assign_stmt_1864__exit__)
      assign_stmt_1909_to_assign_stmt_1918__entry__ <-| (branch_block_stmt_1865__exit__)
      if_stmt_1919__entry__ <-| (assign_stmt_1909_to_assign_stmt_1918__exit__)
      assign_stmt_1946_to_assign_stmt_1951__entry__ <-| (if_stmt_1919__exit__)
      branch_block_stmt_1952__entry__ <-| (assign_stmt_1946_to_assign_stmt_1951__exit__)
      call_stmt_1992_to_assign_stmt_2010__entry__ <-| (branch_block_stmt_1952__exit__)
      normalInterruptResponse3 <-| (call_stmt_1992_to_assign_stmt_2010__exit__)
      $P [if_stmt_2013__entry__] 
      $P [if_stmt_2013__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2013_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2013__entry__ |-> (if_stmt_2013_dead_link)
      if_stmt_2013__exit__ <-| (if_stmt_2013_dead_link)
      ;;[if_stmt_2013_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (response_type == 0 )
        ;;[EQ_u2_u1_2016] 
        {
          // binary expression 
          ||[EQ_u2_u1_2016_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2013__entry__ |-> (if_stmt_2013_eval_test)
      $P [EQ_u2_u1_2016_place]
      EQ_u2_u1_2016_place <-| (if_stmt_2013_eval_test)
      ;;[if_stmt_2013_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2013_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_2016_place |-> (if_stmt_2013_if_link if_stmt_2013_else_link)
      $P [call_stmt_2019_to_assign_stmt_2040__entry__] 
      $P [call_stmt_2019_to_assign_stmt_2040__exit__] 
      $P [normalInterruptResponse1]
      ::[call_stmt_2019_to_assign_stmt_2040] 
      {
        // start: 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
        //  file .Aa/sdhc.opt.aa, line 691
        $T[call_stmt_2019_sample_start_] 
        $T[call_stmt_2019_sample_completed_] 
        $T[call_stmt_2019_update_start_] 
        $T[call_stmt_2019_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_2019_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2019_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2019_sample_start_ &-> (call_stmt_2019_Sample)
        call_stmt_2019_sample_completed_ <-& (call_stmt_2019_Sample)
        call_stmt_2019_sample_completed_ &-> ($null)
        call_stmt_2019_update_start_ &-> (call_stmt_2019_Update)
        call_stmt_2019_update_completed_ <-& (call_stmt_2019_Update)
        // Call output argument 0
        // (as target) tempPresentState1
        // start: WAR dependencies for tempPresentState1
        // done: WAR dependencies for tempPresentState1
        // end: 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
        // start: WAR dependencies for presentState1
        // done: WAR dependencies for presentState1
        // start:  			$volatile presentState1 := ((tempPresentState1 >> 1 ) << 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 692
        // volatile! 
        // Source expression
        // ((tempPresentState1 >> 1 ) << 1 )
        // (tempPresentState1 >> 1 )
        // tempPresentState1
        // Target expression
        // (as target) presentState1
        // start: WAR dependencies for presentState1
        // done: WAR dependencies for presentState1
        // end:  			$volatile presentState1 := ((tempPresentState1 >> 1 ) << 1 ) $buffering 1
        // start: 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
        //  file .Aa/sdhc.opt.aa, line 693
        $T[call_stmt_2029_sample_start_] 
        $T[call_stmt_2029_sample_completed_] 
        $T[call_stmt_2029_update_start_] 
        $T[call_stmt_2029_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_2029_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2029_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2029_sample_start_ &-> (call_stmt_2029_Sample)
        call_stmt_2029_sample_completed_ <-& (call_stmt_2029_Sample)
        call_stmt_2029_sample_completed_ &-> ($null)
        call_stmt_2029_update_start_ &-> (call_stmt_2029_Update)
        call_stmt_2029_update_completed_ <-& (call_stmt_2029_Update)
        // Call output argument 0
        // (as target) normalInterrupt1
        // start: WAR dependencies for normalInterrupt1
        // done: WAR dependencies for normalInterrupt1
        // end: 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
        // start: 			$call writeSDHCRegisters (36  presentState1 ) () 
        //  file .Aa/sdhc.opt.aa, line 694
        $T[call_stmt_2032_sample_start_] 
        $T[call_stmt_2032_sample_completed_] 
        $T[call_stmt_2032_update_start_] 
        $T[call_stmt_2032_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // presentState1
        // start: Forward dependencies from presentState1 to transition call_stmt_2032_sample_start_
        call_stmt_2032_sample_start_ <-& (call_stmt_2019_update_completed_)
        // done: Forward dependencies from presentState1 to transition call_stmt_2032_sample_start_
        ;;[call_stmt_2032_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2032_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2032_sample_start_ &-> (call_stmt_2032_Sample)
        call_stmt_2032_sample_completed_ <-& (call_stmt_2032_Sample)
        call_stmt_2032_sample_completed_ &-> ($null)
        call_stmt_2032_update_start_ &-> (call_stmt_2032_Update)
        call_stmt_2032_update_completed_ <-& (call_stmt_2032_Update)
        // end: 			$call writeSDHCRegisters (36  presentState1 ) () 
        // start: WAR dependencies for normalInterruptStatusVar_1
        // done: WAR dependencies for normalInterruptStatusVar_1
        // start:  			$volatile normalInterruptStatusVar_1 := (normalInterrupt1 | _h01 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 695
        // volatile! 
        // Source expression
        // (normalInterrupt1 | _h01 )
        // normalInterrupt1
        // Target expression
        // (as target) normalInterruptStatusVar_1
        // start: WAR dependencies for normalInterruptStatusVar_1
        // done: WAR dependencies for normalInterruptStatusVar_1
        // end:  			$volatile normalInterruptStatusVar_1 := (normalInterrupt1 | _h01 ) $buffering 1
        // start:  			$volatile errorInterruptStatusVar_1 := ZERO_8 $buffering 1
        //  file .Aa/sdhc.opt.aa, line 696
        // constant! 
        // end:  			$volatile errorInterruptStatusVar_1 := ZERO_8 $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_2019 load
        //  call_stmt_2029 load
        //  call_stmt_2032 store
        $T [call_stmt_2019_call_stmt_2032_delay] $delay
        // call_stmt_2019(load) -> call_stmt_2032(store)
        call_stmt_2032_sample_start_ <-& (call_stmt_2019_call_stmt_2032_delay)
        call_stmt_2019_call_stmt_2032_delay <-& (call_stmt_2019_update_completed_)
        $T [call_stmt_2029_call_stmt_2032_delay] $delay
        // call_stmt_2029(load) -> call_stmt_2032(store)
        call_stmt_2032_sample_start_ <-& (call_stmt_2029_call_stmt_2032_delay)
        call_stmt_2029_call_stmt_2032_delay <-& (call_stmt_2029_update_completed_)
      }
      call_stmt_2019_to_assign_stmt_2040__entry__ |-> (call_stmt_2019_to_assign_stmt_2040)
      call_stmt_2019_to_assign_stmt_2040__exit__ <-| (call_stmt_2019_to_assign_stmt_2040)
      call_stmt_2019_to_assign_stmt_2040__entry__ <-| (if_stmt_2013_if_link)
      normalInterruptResponse1 <-| (call_stmt_2019_to_assign_stmt_2040__exit__)
      if_stmt_2013__exit__ <-| (if_stmt_2013_else_link)
      if_stmt_2013__entry__ <-| (if_stmt_1855_else_link)
      if_stmt_2013__exit__ |-> (if_stmt_1855__exit__)
      if_stmt_1855__entry__ <-| (if_stmt_1657_else_link)
      if_stmt_1855__exit__ |-> (if_stmt_1657__exit__)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2057_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2057__entry__ |-> (if_stmt_2057_dead_link)
      if_stmt_2057__exit__ <-| (if_stmt_2057_dead_link)
      ;;[if_stmt_2057_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (dataPresentSelect == 1 )
        ;;[EQ_u1_u1_2060] 
        {
          // binary expression 
          ||[EQ_u1_u1_2060_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2057__entry__ |-> (if_stmt_2057_eval_test)
      $P [EQ_u1_u1_2060_place]
      EQ_u1_u1_2060_place <-| (if_stmt_2057_eval_test)
      ;;[if_stmt_2057_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2057_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_2060_place |-> (if_stmt_2057_if_link if_stmt_2057_else_link)
      $P [if_stmt_2061__entry__] 
      $P [if_stmt_2061__exit__] 
      $P [assign_stmt_2154__entry__] 
      $P [assign_stmt_2154__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2061_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2061__entry__ |-> (if_stmt_2061_dead_link)
      if_stmt_2061__exit__ <-| (if_stmt_2061_dead_link)
      ;;[if_stmt_2061_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((txOrRX == 1 ) & (response_type != 3 ))
        ;;[AND_u1_u1_2068] 
        {
          // binary expression 
          ||[AND_u1_u1_2068_inputs] 
          {
            // (txOrRX == 1 )
            ;;[EQ_u1_u1_2064] 
            {
              // binary expression 
              ||[EQ_u1_u1_2064_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // (response_type != 3 )
            ;;[NEQ_u2_u1_2067] 
            {
              // binary expression 
              ||[NEQ_u2_u1_2067_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2061__entry__ |-> (if_stmt_2061_eval_test)
      $P [AND_u1_u1_2068_place]
      AND_u1_u1_2068_place <-| (if_stmt_2061_eval_test)
      ;;[if_stmt_2061_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2061_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_2068_place |-> (if_stmt_2061_if_link if_stmt_2061_else_link)
      $P [call_stmt_2071_to_assign_stmt_2093__entry__] 
      $P [call_stmt_2071_to_assign_stmt_2093__exit__] 
      $P [if_stmt_2094__entry__] 
      $P [if_stmt_2094__exit__] 
      ::[call_stmt_2071_to_assign_stmt_2093] 
      {
        // start: 			$call readSDHCRegisters (12  ) (tempTransfer ) 
        //  file .Aa/sdhc.opt.aa, line 709
        $T[call_stmt_2071_sample_start_] 
        $T[call_stmt_2071_sample_completed_] 
        $T[call_stmt_2071_update_start_] 
        $T[call_stmt_2071_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_2071_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2071_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2071_sample_start_ &-> (call_stmt_2071_Sample)
        call_stmt_2071_sample_completed_ <-& (call_stmt_2071_Sample)
        call_stmt_2071_sample_completed_ &-> ($null)
        call_stmt_2071_update_start_ &-> (call_stmt_2071_Update)
        call_stmt_2071_update_completed_ <-& (call_stmt_2071_Update)
        // Call output argument 0
        // (as target) tempTransfer
        // start: WAR dependencies for tempTransfer
        // done: WAR dependencies for tempTransfer
        // end: 			$call readSDHCRegisters (12  ) (tempTransfer ) 
        // start:  			singleMultipleReadBlock := (  $bitreduce |  (tempTransfer & _h20 ) ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 710
        // Source expression
        // (  $bitreduce |  (tempTransfer & _h20 ) )
        $T[BITREDUCEOR_u8_u1_2076_sample_start_] 
        $T[BITREDUCEOR_u8_u1_2076_sample_completed_] 
        $T[BITREDUCEOR_u8_u1_2076_update_start_] 
        $T[BITREDUCEOR_u8_u1_2076_update_completed_] 
        // (tempTransfer & _h20 )
        // tempTransfer
        // start: Forward dependencies from (tempTransfer & _h20 ) to transition BITREDUCEOR_u8_u1_2076_sample_start_
        BITREDUCEOR_u8_u1_2076_sample_start_ <-& (call_stmt_2071_update_completed_)
        // done: Forward dependencies from (tempTransfer & _h20 ) to transition BITREDUCEOR_u8_u1_2076_sample_start_
        ;;[BITREDUCEOR_u8_u1_2076_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[BITREDUCEOR_u8_u1_2076_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        BITREDUCEOR_u8_u1_2076_sample_start_ &-> (BITREDUCEOR_u8_u1_2076_Sample)
        BITREDUCEOR_u8_u1_2076_sample_completed_ <-& (BITREDUCEOR_u8_u1_2076_Sample)
        BITREDUCEOR_u8_u1_2076_sample_completed_ &-> ($null)
        BITREDUCEOR_u8_u1_2076_update_start_ &-> (BITREDUCEOR_u8_u1_2076_Update)
        BITREDUCEOR_u8_u1_2076_update_completed_ <-& (BITREDUCEOR_u8_u1_2076_Update)
        // Target expression
        // (as target) singleMultipleReadBlock
        // start: WAR dependencies for singleMultipleReadBlock
        // done: WAR dependencies for singleMultipleReadBlock
        // end:  			singleMultipleReadBlock := (  $bitreduce |  (tempTransfer & _h20 ) ) $buffering 1// bits of buffering = 1. 
        // start: 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
        //  file .Aa/sdhc.opt.aa, line 711
        $T[call_stmt_2080_sample_start_] 
        $T[call_stmt_2080_sample_completed_] 
        $T[call_stmt_2080_update_start_] 
        $T[call_stmt_2080_update_completed_] 
        // Call input argument 0
        // singleMultipleReadBlock
        // start: Forward dependencies from singleMultipleReadBlock to transition call_stmt_2080_sample_start_
        call_stmt_2080_sample_start_ <-& (BITREDUCEOR_u8_u1_2076_update_completed_)
        // done: Forward dependencies from singleMultipleReadBlock to transition call_stmt_2080_sample_start_
        ;;[call_stmt_2080_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2080_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2080_sample_start_ &-> (call_stmt_2080_Sample)
        call_stmt_2080_sample_completed_ <-& (call_stmt_2080_Sample)
        call_stmt_2080_sample_completed_ &-> ($null)
        call_stmt_2080_update_start_ &-> (call_stmt_2080_Update)
        call_stmt_2080_update_completed_ <-& (call_stmt_2080_Update)
        // Call output argument 0
        // (as target) dataErrorInterruptStatusVar1
        // dataErrorInterruptStatusVar1
        // write to interface object
        // dataErrorInterruptStatusVar1
        // write to interface object
        // start: WAR dependencies for dataErrorInterruptStatusVar1
        // done: WAR dependencies for dataErrorInterruptStatusVar1
        // end: 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
        // start:  			dataRxEnrty1 := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 712
        // Target expression
        // (as target) dataRxEnrty1
        $T[STORE_dataRxEnrty1_2081_sample_start_] 
        $T[STORE_dataRxEnrty1_2081_sample_completed_] 
        $T[STORE_dataRxEnrty1_2081_update_start_] 
        $T[STORE_dataRxEnrty1_2081_update_completed_] 
        // dataRxEnrty1
        $T[STORE_dataRxEnrty1_2081_word_address_calculated] 
        $T[STORE_dataRxEnrty1_2081_root_address_calculated] 
        STORE_dataRxEnrty1_2081_word_address_calculated <-& (STORE_dataRxEnrty1_2081_root_address_calculated)
        ;;[STORE_dataRxEnrty1_2081_Sample] 
        {
          ;;[STORE_dataRxEnrty1_2081_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty1_2081_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty1_2081_sample_start_ <-& (STORE_dataRxEnrty1_2081_word_address_calculated)
        STORE_dataRxEnrty1_2081_sample_start_ &-> (STORE_dataRxEnrty1_2081_Sample)
        STORE_dataRxEnrty1_2081_sample_completed_ <-& (STORE_dataRxEnrty1_2081_Sample)
        STORE_dataRxEnrty1_2081_sample_completed_ &-> ($null)
        STORE_dataRxEnrty1_2081_update_start_ &-> (STORE_dataRxEnrty1_2081_Update)
        STORE_dataRxEnrty1_2081_update_completed_ <-& (STORE_dataRxEnrty1_2081_Update)
        // end:  			dataRxEnrty1 := ONE_1 $buffering 1// bits of buffering = 1. 
        // start:  			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 713
        // Target expression
        // (as target) dataRxEnrty2
        $T[STORE_dataRxEnrty2_2084_sample_start_] 
        $T[STORE_dataRxEnrty2_2084_sample_completed_] 
        $T[STORE_dataRxEnrty2_2084_update_start_] 
        $T[STORE_dataRxEnrty2_2084_update_completed_] 
        // dataRxEnrty2
        $T[STORE_dataRxEnrty2_2084_word_address_calculated] 
        $T[STORE_dataRxEnrty2_2084_root_address_calculated] 
        STORE_dataRxEnrty2_2084_word_address_calculated <-& (STORE_dataRxEnrty2_2084_root_address_calculated)
        ;;[STORE_dataRxEnrty2_2084_Sample] 
        {
          ;;[STORE_dataRxEnrty2_2084_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty2_2084_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty2_2084_sample_start_ <-& (STORE_dataRxEnrty2_2084_word_address_calculated)
        STORE_dataRxEnrty2_2084_sample_start_ &-> (STORE_dataRxEnrty2_2084_Sample)
        STORE_dataRxEnrty2_2084_sample_completed_ <-& (STORE_dataRxEnrty2_2084_Sample)
        STORE_dataRxEnrty2_2084_sample_completed_ &-> ($null)
        STORE_dataRxEnrty2_2084_update_start_ &-> (STORE_dataRxEnrty2_2084_Update)
        STORE_dataRxEnrty2_2084_update_completed_ <-& (STORE_dataRxEnrty2_2084_Update)
        // end:  			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start:  			transferCompleteData := ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 714
        // Source expression
        // ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
        $T[MUX_2092_sample_start_] 
        $T[MUX_2092_sample_completed_] 
        $T[MUX_2092_update_start_] 
        $T[MUX_2092_update_completed_] 
        // singleMultipleReadBlock
        // start: Forward dependencies from singleMultipleReadBlock to transition MUX_2092_sample_start_
        MUX_2092_sample_start_ <-& (BITREDUCEOR_u8_u1_2076_update_completed_)
        // done: Forward dependencies from singleMultipleReadBlock to transition MUX_2092_sample_start_
        ;;[MUX_2092_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_2092_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_2092_sample_start_ &-> (MUX_2092_start)
        MUX_2092_sample_completed_ <-& (MUX_2092_start)
        MUX_2092_sample_completed_ &-> ($null)
        MUX_2092_update_start_ &-> (MUX_2092_complete)
        MUX_2092_update_completed_ <-& (MUX_2092_complete)
        // Target expression
        // (as target) transferCompleteData
        // start: WAR dependencies for transferCompleteData
        // done: WAR dependencies for transferCompleteData
        // end:  			transferCompleteData := ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  STORE_dataRxEnrty1_2081 store
        // memory-space  memory_space_2
        //  STORE_dataRxEnrty2_2084 store
        // memory-space  memory_space_7
        //  call_stmt_2080 store
        // memory-space  memory_space_8
        //  call_stmt_2071 load
        //  call_stmt_2080 store
        $T [call_stmt_2071_call_stmt_2080_delay] $delay
        // call_stmt_2071(load) -> call_stmt_2080(store)
        call_stmt_2080_sample_start_ <-& (call_stmt_2071_call_stmt_2080_delay)
        call_stmt_2071_call_stmt_2080_delay <-& (call_stmt_2071_update_completed_)
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
        // pipe read/write dependencies for pipe DAT1Rx
        // read-dependencies for pipe DAT1Rx
        // write-dependencies for pipe DAT1Rx
        // signal write dependencies for DAT1Rx
        // pipe read/write dependencies for pipe DAT2Rx
        // read-dependencies for pipe DAT2Rx
        // write-dependencies for pipe DAT2Rx
        // signal write dependencies for DAT2Rx
        // pipe read/write dependencies for pipe DAT3Rx
        // read-dependencies for pipe DAT3Rx
        // write-dependencies for pipe DAT3Rx
        // signal write dependencies for DAT3Rx
        // pipe read/write dependencies for pipe dataBufferRx
        // read-dependencies for pipe dataBufferRx
        // write-dependencies for pipe dataBufferRx
        // signal write dependencies for dataBufferRx
      }
      call_stmt_2071_to_assign_stmt_2093__entry__ |-> (call_stmt_2071_to_assign_stmt_2093)
      call_stmt_2071_to_assign_stmt_2093__exit__ <-| (call_stmt_2071_to_assign_stmt_2093)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 28610656
      ;;[if_stmt_2094_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2094__entry__ |-> (if_stmt_2094_dead_link)
      if_stmt_2094__exit__ <-| (if_stmt_2094_dead_link)
      ;;[if_stmt_2094_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (singleMultipleReadBlock == 1 )
        ;;[EQ_u1_u1_2097] 
        {
          // binary expression 
          ||[EQ_u1_u1_2097_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2094__entry__ |-> (if_stmt_2094_eval_test)
      $P [EQ_u1_u1_2097_place]
      EQ_u1_u1_2097_place <-| (if_stmt_2094_eval_test)
      ;;[if_stmt_2094_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2094_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_2097_place |-> (if_stmt_2094_if_link if_stmt_2094_else_link)
      $P [merge_stmt_2098__entry__] 
      $P [merge_stmt_2098__exit__] 
      $P [call_stmt_2113_to_assign_stmt_2124__entry__] 
      $P [call_stmt_2113_to_assign_stmt_2124__exit__] 
      $P [if_stmt_2125__entry__] 
      $P [if_stmt_2125__exit__] 
      $P [assign_stmt_2135_to_call_stmt_2143__entry__] 
      $P [assign_stmt_2135_to_call_stmt_2143__exit__] 
      ::[call_stmt_2113_to_assign_stmt_2124] 
      {
        // start: 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
        //  file .Aa/sdhc.opt.aa, line 722
        $T[call_stmt_2113_sample_start_] 
        $T[call_stmt_2113_sample_completed_] 
        $T[call_stmt_2113_update_start_] 
        $T[call_stmt_2113_update_completed_] 
        // Call input argument 0
        // (6  + B)
        // B
        // start: Forward dependencies from (6  + B) to transition call_stmt_2113_sample_start_
        // done: Forward dependencies from (6  + B) to transition call_stmt_2113_sample_start_
        ;;[call_stmt_2113_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2113_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2113_sample_start_ &-> (call_stmt_2113_Sample)
        call_stmt_2113_sample_completed_ <-& (call_stmt_2113_Sample)
        call_stmt_2113_sample_completed_ &-> ($null)
        call_stmt_2113_update_start_ &-> (call_stmt_2113_Update)
        call_stmt_2113_update_completed_ <-& (call_stmt_2113_Update)
        // Call output argument 0
        // (as target) readnewBlockCountTemp
        // start: WAR dependencies for readnewBlockCountTemp
        // done: WAR dependencies for readnewBlockCountTemp
        // end: 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
        // start: WAR dependencies for readBlockCount
        // ignored out-of-scope w_root 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
        // type of target is $uint<16>
        // done: WAR dependencies for readBlockCount
        // start:  			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 723
        // volatile! 
        // Source expression
        // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
        // ( $slice readNewBlockCount 7 0 ) 
        // readNewBlockCount
        // readnewBlockCountTemp
        // Target expression
        // (as target) readBlockCount
        // start: WAR dependencies for readBlockCount
        // ignored out-of-scope w_root 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
        // type of target is $uint<16>
        // done: WAR dependencies for readBlockCount
        // end:  			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
        // start: WAR dependencies for next_B
        // ignored out-of-scope w_root 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
        // type of target is $uint<8>
        // done: WAR dependencies for next_B
        // start:  			$volatile next_B := (B - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 724
        // volatile! 
        // Source expression
        // (B - 1 )
        // B
        // Target expression
        // (as target) next_B
        // start: WAR dependencies for next_B
        // ignored out-of-scope w_root 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
        // type of target is $uint<8>
        // done: WAR dependencies for next_B
        // end:  			$volatile next_B := (B - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_2113 load
      }
      call_stmt_2113_to_assign_stmt_2124__entry__ |-> (call_stmt_2113_to_assign_stmt_2124)
      call_stmt_2113_to_assign_stmt_2124__exit__ <-| (call_stmt_2113_to_assign_stmt_2124)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 28403536
      ;;[if_stmt_2125_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2125__entry__ |-> (if_stmt_2125_dead_link)
      if_stmt_2125__exit__ <-| (if_stmt_2125_dead_link)
      ;;[if_stmt_2125_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (B != 0 )
        ;;[NEQ_u8_u1_2128] 
        {
          // binary expression 
          ||[NEQ_u8_u1_2128_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2125__entry__ |-> (if_stmt_2125_eval_test)
      $P [NEQ_u8_u1_2128_place]
      NEQ_u8_u1_2128_place <-| (if_stmt_2125_eval_test)
      ;;[if_stmt_2125_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2125_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_2128_place |-> (if_stmt_2125_if_link if_stmt_2125_else_link)
      $P [loopBlock1]
      loopBlock1 <-| (if_stmt_2125_if_link)
      if_stmt_2125__exit__ <-| (if_stmt_2125_else_link)
      ::[assign_stmt_2135_to_call_stmt_2143] 
      {
        // start:  			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 728
        // Source expression
        // (readBlockCount - 1 )
        $T[SUB_u16_u16_2134_sample_start_] 
        $T[SUB_u16_u16_2134_sample_completed_] 
        $T[SUB_u16_u16_2134_update_start_] 
        $T[SUB_u16_u16_2134_update_completed_] 
        // readBlockCount
        // start: Forward dependencies from readBlockCount to transition SUB_u16_u16_2134_sample_start_
        // done: Forward dependencies from readBlockCount to transition SUB_u16_u16_2134_sample_start_
        ;;[SUB_u16_u16_2134_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u16_u16_2134_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u16_u16_2134_sample_start_ &-> (SUB_u16_u16_2134_Sample)
        SUB_u16_u16_2134_sample_completed_ <-& (SUB_u16_u16_2134_Sample)
        SUB_u16_u16_2134_sample_completed_ &-> ($null)
        SUB_u16_u16_2134_update_start_ &-> (SUB_u16_u16_2134_Update)
        SUB_u16_u16_2134_update_completed_ <-& (SUB_u16_u16_2134_Update)
        // Target expression
        // (as target) newReadBlockCount
        // start: WAR dependencies for newReadBlockCount
        // done: WAR dependencies for newReadBlockCount
        // end:  			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
        // start: 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 729
        $T[call_stmt_2139_sample_start_] 
        $T[call_stmt_2139_sample_completed_] 
        $T[call_stmt_2139_update_start_] 
        $T[call_stmt_2139_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice newReadBlockCount 15 8 ) 
        // newReadBlockCount
        // start: Forward dependencies from ( $slice newReadBlockCount 15 8 )  to transition call_stmt_2139_sample_start_
        call_stmt_2139_sample_start_ <-& (SUB_u16_u16_2134_update_completed_)
        // done: Forward dependencies from ( $slice newReadBlockCount 15 8 )  to transition call_stmt_2139_sample_start_
        ;;[call_stmt_2139_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2139_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2139_sample_start_ &-> (call_stmt_2139_Sample)
        call_stmt_2139_sample_completed_ <-& (call_stmt_2139_Sample)
        call_stmt_2139_sample_completed_ &-> ($null)
        call_stmt_2139_update_start_ &-> (call_stmt_2139_Update)
        call_stmt_2139_update_completed_ <-& (call_stmt_2139_Update)
        // end: 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
        // start: 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 730
        $T[call_stmt_2143_sample_start_] 
        $T[call_stmt_2143_sample_completed_] 
        $T[call_stmt_2143_update_start_] 
        $T[call_stmt_2143_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice newReadBlockCount 7 0 ) 
        // newReadBlockCount
        // start: Forward dependencies from ( $slice newReadBlockCount 7 0 )  to transition call_stmt_2143_sample_start_
        call_stmt_2143_sample_start_ <-& (SUB_u16_u16_2134_update_completed_)
        // done: Forward dependencies from ( $slice newReadBlockCount 7 0 )  to transition call_stmt_2143_sample_start_
        ;;[call_stmt_2143_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2143_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2143_sample_start_ &-> (call_stmt_2143_Sample)
        call_stmt_2143_sample_completed_ <-& (call_stmt_2143_Sample)
        call_stmt_2143_sample_completed_ &-> ($null)
        call_stmt_2143_update_start_ &-> (call_stmt_2143_Update)
        call_stmt_2143_update_completed_ <-& (call_stmt_2143_Update)
        // end: 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_2139 store
        //  call_stmt_2143 store
        $T [call_stmt_2139_call_stmt_2143_delay] $delay
        // call_stmt_2139(store) -> call_stmt_2143(store)
        call_stmt_2143_sample_start_ <-& (call_stmt_2139_call_stmt_2143_delay)
        call_stmt_2139_call_stmt_2143_delay <-& (call_stmt_2139_update_completed_)
      }
      assign_stmt_2135_to_call_stmt_2143__entry__ |-> (assign_stmt_2135_to_call_stmt_2143)
      assign_stmt_2135_to_call_stmt_2143__exit__ <-| (assign_stmt_2135_to_call_stmt_2143)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 716
      ;;[merge_stmt_2098_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2098__entry__ |-> (merge_stmt_2098_dead_link)
      merge_stmt_2098__exit__ <-| (merge_stmt_2098_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 716  --------------------------
      ||[merge_stmt_2098__entry___PhiReq] 
      {
        ;;[phi_stmt_2103] 
        {
          ||[phi_stmt_2103_sources] 
          {
            // sources for 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_2107_konst_delay_trans] $delay
          }
          $T [phi_stmt_2103_req] 
        }
        ;;[phi_stmt_2099] 
        {
          ||[phi_stmt_2099_sources] 
          {
            // sources for 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ONE_8_2102_konst_delay_trans] $delay
          }
          $T [phi_stmt_2099_req] 
        }
      }
      merge_stmt_2098__entry__ |-> (merge_stmt_2098__entry___PhiReq)
      ||[loopBlock1_PhiReq] 
      {
        ;;[phi_stmt_2103] 
        {
          ||[phi_stmt_2103_sources] 
          {
            // sources for 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2103_req] 
        }
        ;;[phi_stmt_2099] 
        {
          ||[phi_stmt_2099_sources] 
          {
            // sources for 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2099_req] 
        }
      }
      loopBlock1 |-> (loopBlock1_PhiReq)
      $P [merge_stmt_2098_PhiReqMerge] 
      merge_stmt_2098_PhiReqMerge <-| ( merge_stmt_2098__entry___PhiReq  loopBlock1_PhiReq )
      ||[merge_stmt_2098_PhiAck] 
      {
        $T [phi_stmt_2099_ack] 
        $T [phi_stmt_2103_ack] 
      }
      merge_stmt_2098_PhiReqMerge |-> (merge_stmt_2098_PhiAck)
      merge_stmt_2098__exit__  <-| (merge_stmt_2098_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 716  --------------------------
      merge_stmt_2098__entry__ <-| (if_stmt_2094_if_link)
      call_stmt_2113_to_assign_stmt_2124__entry__ <-| (merge_stmt_2098__exit__)
      if_stmt_2125__entry__ <-| (call_stmt_2113_to_assign_stmt_2124__exit__)
      assign_stmt_2135_to_call_stmt_2143__entry__ <-| (if_stmt_2125__exit__)
      assign_stmt_2135_to_call_stmt_2143__exit__ |-> (if_stmt_2094__exit__)
      if_stmt_2094__exit__ <-| (if_stmt_2094_else_link)
      call_stmt_2071_to_assign_stmt_2093__entry__ <-| (if_stmt_2061_if_link)
      if_stmt_2094__entry__ <-| (call_stmt_2071_to_assign_stmt_2093__exit__)
      if_stmt_2094__exit__ |-> (if_stmt_2061__exit__)
      if_stmt_2061__exit__ <-| (if_stmt_2061_else_link)
      ::[assign_stmt_2154] 
      {
        // start:  			dataTransferComplete := ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 733
        // Source expression
        // ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData ) 
        $T[MUX_2153_sample_start_] 
        $T[MUX_2153_sample_completed_] 
        $T[MUX_2153_update_start_] 
        $T[MUX_2153_update_completed_] 
        // (response_type == 3 )
        // response_type
        // transferCompleteData
        // start: Forward dependencies from (response_type == 3 ) to transition MUX_2153_sample_start_
        // done: Forward dependencies from (response_type == 3 ) to transition MUX_2153_sample_start_
        // start: Forward dependencies from transferCompleteData to transition MUX_2153_sample_start_
        // done: Forward dependencies from transferCompleteData to transition MUX_2153_sample_start_
        ;;[MUX_2153_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_2153_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_2153_sample_start_ &-> (MUX_2153_start)
        MUX_2153_sample_completed_ <-& (MUX_2153_start)
        MUX_2153_sample_completed_ &-> ($null)
        MUX_2153_update_start_ &-> (MUX_2153_complete)
        MUX_2153_update_completed_ <-& (MUX_2153_complete)
        // Target expression
        // (as target) dataTransferComplete
        // dataTransferComplete
        // write to interface object
        // start: WAR dependencies for dataTransferComplete
        // done: WAR dependencies for dataTransferComplete
        // dataTransferComplete
        // write to interface object
        // end:  			dataTransferComplete := ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData )  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_2154__entry__ |-> (assign_stmt_2154)
      assign_stmt_2154__exit__ <-| (assign_stmt_2154)
      if_stmt_2061__entry__ <-| (if_stmt_2057_if_link)
      assign_stmt_2154__entry__ <-| (if_stmt_2061__exit__)
      assign_stmt_2154__exit__ |-> (if_stmt_2057__exit__)
      if_stmt_2057__exit__ <-| (if_stmt_2057_else_link)
      ::[assign_stmt_2158_to_assign_stmt_2161] 
      {
        // start:  		normalInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 735
        // constant! 
        // normalInterruptStatusVar2
        // write to interface object
        // end:  		normalInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
        // start:  		errorInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 736
        // constant! 
        // errorInterruptStatusVar2
        // write to interface object
        // end:  		errorInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_2158_to_assign_stmt_2161__entry__ |-> (assign_stmt_2158_to_assign_stmt_2161)
      assign_stmt_2158_to_assign_stmt_2161__exit__ <-| (assign_stmt_2158_to_assign_stmt_2161)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 517
      ;;[merge_stmt_1484_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1484__entry__ |-> (merge_stmt_1484_dead_link)
      merge_stmt_1484__exit__ <-| (merge_stmt_1484_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 517  --------------------------
      ||[merge_stmt_1484__entry___PhiReq] 
      {
        ;;[phi_stmt_1485] 
        {
          ||[phi_stmt_1485_sources] 
          {
            // sources for 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_1489_konst_delay_trans] $delay
          }
          $T [phi_stmt_1485_req] 
        }
        ;;[phi_stmt_1490] 
        {
          ||[phi_stmt_1490_sources] 
          {
            // sources for 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
            // type of target is $uint<40>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1490_req] 
        }
      }
      merge_stmt_1484__entry__ |-> (merge_stmt_1484__entry___PhiReq)
      ||[loopcommand40bits_PhiReq] 
      {
        ;;[phi_stmt_1485] 
        {
          ||[phi_stmt_1485_sources] 
          {
            // sources for 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1485_req] 
        }
        ;;[phi_stmt_1490] 
        {
          ||[phi_stmt_1490_sources] 
          {
            // sources for 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
            // type of target is $uint<40>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1490_req] 
        }
      }
      loopcommand40bits |-> (loopcommand40bits_PhiReq)
      $P [merge_stmt_1484_PhiReqMerge] 
      merge_stmt_1484_PhiReqMerge <-| ( merge_stmt_1484__entry___PhiReq  loopcommand40bits_PhiReq )
      ||[merge_stmt_1484_PhiAck] 
      {
        $T [phi_stmt_1485_ack] 
        $T [phi_stmt_1490_ack] 
      }
      merge_stmt_1484_PhiReqMerge |-> (merge_stmt_1484_PhiAck)
      merge_stmt_1484__exit__  <-| (merge_stmt_1484_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 517  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 701
      ;;[merge_stmt_2045_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2045__entry__ |-> (merge_stmt_2045_dead_link)
      merge_stmt_2045__exit__ <-| (merge_stmt_2045_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 701  --------------------------
      ||[normalInterruptResponse1_PhiReq] 
      {
        ;;[phi_stmt_2046] 
        {
          ||[phi_stmt_2046_sources] 
          {
            // sources for 			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2046_req] 
        }
        ;;[phi_stmt_2051] 
        {
          ||[phi_stmt_2051_sources] 
          {
            // sources for 			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_errorInterruptStatusVar_1_2053_konst_delay_trans] $delay
          }
          $T [phi_stmt_2051_req] 
        }
      }
      normalInterruptResponse1 |-> (normalInterruptResponse1_PhiReq)
      ||[normalInterruptResponse2_PhiReq] 
      {
        ;;[phi_stmt_2046] 
        {
          ||[phi_stmt_2046_sources] 
          {
            // sources for 			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2046_req] 
        }
        ;;[phi_stmt_2051] 
        {
          ||[phi_stmt_2051_sources] 
          {
            // sources for 			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2051_req] 
        }
      }
      normalInterruptResponse2 |-> (normalInterruptResponse2_PhiReq)
      ||[normalInterruptResponse3_PhiReq] 
      {
        ;;[phi_stmt_2046] 
        {
          ||[phi_stmt_2046_sources] 
          {
            // sources for 			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2046_req] 
        }
        ;;[phi_stmt_2051] 
        {
          ||[phi_stmt_2051_sources] 
          {
            // sources for 			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2051_req] 
        }
      }
      normalInterruptResponse3 |-> (normalInterruptResponse3_PhiReq)
      $P [merge_stmt_2045_PhiReqMerge] 
      merge_stmt_2045_PhiReqMerge <-| ( normalInterruptResponse1_PhiReq  normalInterruptResponse2_PhiReq  normalInterruptResponse3_PhiReq )
      ||[merge_stmt_2045_PhiAck] 
      {
        $T [phi_stmt_2046_ack] 
        $T [phi_stmt_2051_ack] 
      }
      merge_stmt_2045_PhiReqMerge |-> (merge_stmt_2045_PhiAck)
      merge_stmt_2045__exit__  <-| (merge_stmt_2045_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 701  --------------------------
      call_stmt_1470_to_assign_stmt_1483__entry__ <-| (branch_block_stmt_1467__entry__)
      merge_stmt_1484__entry__ <-| (call_stmt_1470_to_assign_stmt_1483__exit__)
      call_stmt_1499_to_assign_stmt_1510__entry__ <-| (merge_stmt_1484__exit__)
      if_stmt_1511__entry__ <-| (call_stmt_1499_to_assign_stmt_1510__exit__)
      call_stmt_1519_to_assign_stmt_1529__entry__ <-| (if_stmt_1511__exit__)
      branch_block_stmt_1530__entry__ <-| (call_stmt_1519_to_assign_stmt_1529__exit__)
      assign_stmt_1566_to_assign_stmt_1575__entry__ <-| (branch_block_stmt_1530__exit__)
      if_stmt_1576__entry__ <-| (assign_stmt_1566_to_assign_stmt_1575__exit__)
      if_stmt_1657__entry__ <-| (if_stmt_1576__exit__)
      merge_stmt_2045__entry__ <-| (if_stmt_1657__exit__)
      if_stmt_2057__entry__ <-| (merge_stmt_2045__exit__)
      assign_stmt_2158_to_assign_stmt_2161__entry__ <-| (if_stmt_2057__exit__)
      assign_stmt_2158_to_assign_stmt_2161__exit__ |-> (branch_block_stmt_1467__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 517
    // constant-object-declarations for block %command_generator%command%send_command%
    //  file .Aa/sdhc.opt.aa, line 536
    // constant-object-declarations for block %command_generator%command%send_command
    //  file .Aa/sdhc.opt.aa, line 532
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 554
    // constant-object-declarations for block %command_generator%command%receive_response%
    //  file .Aa/sdhc.opt.aa, line 584
    // constant-object-declarations for block %command_generator%command%receive_response
    //  file .Aa/sdhc.opt.aa, line 580
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 600
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 616
    // constant-object-declarations for block %command_generator%command%receive_bigresponse%
    //  file .Aa/sdhc.opt.aa, line 644
    // constant-object-declarations for block %command_generator%command%receive_bigresponse
    //  file .Aa/sdhc.opt.aa, line 640
    // constant-object-declarations for block %command_generator%command%big_resp%
    //  file .Aa/sdhc.opt.aa, line 671
    // constant-object-declarations for block %command_generator%command%big_resp
    //  file .Aa/sdhc.opt.aa, line 667
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 701
    // constant-object-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 716
    // constant-object-declarations for block %command_generator%command
    //  file .Aa/sdhc.opt.aa, line 512
    // constant-object-declarations for block %command_generator
    //  file .Aa/sdhc.opt.aa, line 507
    // constant-declarations for block %command_generator%command
    //  file .Aa/sdhc.opt.aa, line 512
    // 		$call readSDHCRegisters (14  ) (commandRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 514
    // 14 
    $constant $W[konst_1468_wire_constant] : $int<8> := _b00001110// 14
    // 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
    //  file .Aa/sdhc.opt.aa, line 515
    // 15 
    $constant $W[konst_1471_wire_constant] : $int<8> := _b00001111// 15
    // (ZERO_32 && ZERO_1)
    $constant $W[CONCAT_u32_u33_1477_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // ONE_1
    $constant $W[R_ONE_1_1478_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 517
    // constant-declarations for phi:  			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 518
    // ($bitcast ($uint<8>) 3  )
    $constant $W[type_cast_1489_wire_constant] : $int<8> := _b00000011// 3
    // constant-declarations for phi:  			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
    // type of target is $uint<40>
    //  file .Aa/sdhc.opt.aa, line 520
    // 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
    //  file .Aa/sdhc.opt.aa, line 523
    // 8 
    $constant $W[konst_1495_wire_constant] : $int<8> := _b00001000// 8
    // 1 
    $constant $W[konst_1508_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_1513_wire_constant] : $int<8> := _b00000000// 0
    // 		$call generate_crc_7 (command40bits ) (crc7 ) 
    //  file .Aa/sdhc.opt.aa, line 529
    // ONE_1
    $constant $W[R_ONE_1_1524_wire_constant] : $int<1> := _b1// 1
    // ONE_1
    $constant $W[R_ONE_1_1528_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %command_generator%command%send_command
    //  file .Aa/sdhc.opt.aa, line 532
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 534
    // 48 
    $constant $W[konst_1561_wire_constant] : $int<8> := _b00110000// 48
    // constant-declarations for block %command_generator%command%send_command%
    //  file .Aa/sdhc.opt.aa, line 536
    // constant-declarations for phi:  				$phi J := 				  ZERO_8 $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 537
    // ZERO_8
    $constant $W[R_ZERO_8_1535_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  				$phi old_commandbits := 				  commandbits $on   $entry 				  new_commandbits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 539
    // 1 
    $constant $W[konst_1544_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1556_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000001// 1
    // ZERO_1
    $constant $W[R_ZERO_1_1565_wire_constant] : $int<1> := _b0// 0
    // 5 
    $constant $W[konst_1573_wire_constant] : $int<8> := _b00000101// 5
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // 1 
    $constant $W[konst_1578_wire_constant] : $int<1> := _b1// 1
    // 			$call readSDHCRegisters (12  ) (transferVal ) 
    //  file .Aa/sdhc.opt.aa, line 552
    // 12 
    $constant $W[konst_1580_wire_constant] : $int<8> := _b00001100// 12
    // _h10 
    $constant $W[konst_1585_wire_constant] : $int<8> := _b00010000// 16
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 554
    // constant-declarations for phi:  				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 555
    // ONE_8
    $constant $W[R_ONE_8_1592_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for phi:  				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 557
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_1597_wire_constant] : $int<16> := _b0000000000000000// 0
    // 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
    //  file .Aa/sdhc.opt.aa, line 560
    // 36 
    $constant $W[konst_1600_wire_constant] : $int<8> := _b00100100// 36
    // 1 
    $constant $W[konst_1613_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_1618_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 3 
    $constant $W[konst_1632_wire_constant] : $int<2> := _b11// 3
    // ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) ) 
    // _h02 
    $constant $W[konst_1637_wire_constant] : $int<8> := _b00000010// 2
    // _h01 
    $constant $W[konst_1640_wire_constant] : $int<8> := _b00000001// 1
    // 			$call writeSDHCRegisters (37  tempPstate ) () 
    //  file .Aa/sdhc.opt.aa, line 570
    // 37 
    $constant $W[konst_1644_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 572
    // 36 
    $constant $W[konst_1648_wire_constant] : $int<8> := _b00100100// 36
    // _h06 
    $constant $W[konst_1650_wire_constant] : $int<8> := _b00000110// 6
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 575
    // 2 
    $constant $W[konst_1659_wire_constant] : $int<2> := _b10// 2
    // 3 
    $constant $W[konst_1662_wire_constant] : $int<2> := _b11// 3
    // ONE_1
    $constant $W[R_ONE_1_1666_wire_constant] : $int<1> := _b1// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 3 
    $constant $W[konst_1670_wire_constant] : $int<2> := _b11// 3
    // ONE_1
    $constant $W[R_ONE_1_1673_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %command_generator%command%receive_response
    //  file .Aa/sdhc.opt.aa, line 580
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 582
    // 48 
    $constant $W[konst_1715_wire_constant] : $int<6> := _b110000// 48
    // constant-declarations for block %command_generator%command%receive_response%
    //  file .Aa/sdhc.opt.aa, line 584
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<6>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 585
    // ($bitcast ($uint<6>) 0  )
    $constant $W[type_cast_1682_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for phi:  				$phi old_responsebits := 				  ($bitcast ($uint<48>) 0  ) $on   $entry 				  new_responsebits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 587
    // ($bitcast ($uint<48>) 0  )
    $constant $W[type_cast_1688_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_1693_wire_constant] : $int<6> := _b000001// 1
    // ($bitcast ($uint<47>) 0  )
    $constant $W[type_cast_1702_wire_constant] : $int<47> := _b00000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_1708_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000001// 1
    // ZERO_1
    $constant $W[R_ZERO_1_1719_wire_constant] : $int<1> := _b0// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 3 
    $constant $W[konst_1725_wire_constant] : $int<2> := _b11// 3
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 600
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // ZERO_1
    $constant $W[R_ZERO_1_1733_wire_constant] : $int<1> := _b0// 0
    // ZERO_1
    $constant $W[R_ZERO_1_1738_wire_constant] : $int<1> := _b0// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // _h8 
    $constant $W[konst_1743_wire_constant] : $int<8> := _b00001000// 8
    // 8 
    $constant $W[konst_1745_wire_constant] : $int<8> := _b00001000// 8
    // 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
    //  file .Aa/sdhc.opt.aa, line 609
    // ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  ) 
    // _b00000000 
    $constant $W[konst_1756_wire_constant] : $int<8> := _b00000000// 0
    // _b00000010 
    $constant $W[konst_1757_wire_constant] : $int<8> := _b00000010// 2
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // _h10 
    $constant $W[konst_1763_wire_constant] : $int<8> := _b00010000// 16
    // 16 
    $constant $W[konst_1765_wire_constant] : $int<8> := _b00010000// 16
    // ( $mux commandIndexCheck _b00000000   _b00001000  ) 
    // _b00000000 
    $constant $W[konst_1776_wire_constant] : $int<8> := _b00000000// 0
    // _b00001000 
    $constant $W[konst_1777_wire_constant] : $int<8> := _b00001000// 8
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 616
    // constant-declarations for phi:  				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 617
    // ZERO_8
    $constant $W[R_ZERO_8_1784_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
    // type of target is $uint<32>
    //  file .Aa/sdhc.opt.aa, line 619
    // 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 622
    // 16 
    $constant $W[konst_1792_wire_constant] : $int<8> := _b00010000// 16
    // ZERO_8
    $constant $W[R_ZERO_8_1799_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_1807_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4 
    $constant $W[konst_1812_wire_constant] : $int<8> := _b00000100// 4
    // 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
    //  file .Aa/sdhc.opt.aa, line 628
    // 36 
    $constant $W[konst_1816_wire_constant] : $int<8> := _b00100100// 36
    // 1 
    $constant $W[konst_1821_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1823_wire_constant] : $int<8> := _b00000001// 1
    // 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
    //  file .Aa/sdhc.opt.aa, line 630
    // 48 
    $constant $W[konst_1826_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (36  presentState2 ) () 
    //  file .Aa/sdhc.opt.aa, line 631
    // 36 
    $constant $W[konst_1829_wire_constant] : $int<8> := _b00100100// 36
    // ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
    // 0 
    $constant $W[konst_1834_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // ZERO_8
    $constant $W[R_ZERO_8_1836_wire_constant] : $int<8> := _b00000000// 0
    // ($bitcast ($uint<8>) 4  )
    $constant $W[type_cast_1838_wire_constant] : $int<8> := _b00000100// 4
    // _h01 
    $constant $W[konst_1843_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 637
    // 1 
    $constant $W[konst_1857_wire_constant] : $int<2> := _b01// 1
    // ONE_1
    $constant $W[R_ONE_1_1860_wire_constant] : $int<1> := _b1// 1
    // ONE_1
    $constant $W[R_ONE_1_1863_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %command_generator%command%receive_bigresponse
    //  file .Aa/sdhc.opt.aa, line 640
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 642
    // 136 
    $constant $W[konst_1904_wire_constant] : $int<8> := _b10001000// 136
    // constant-declarations for block %command_generator%command%receive_bigresponse%
    //  file .Aa/sdhc.opt.aa, line 644
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 645
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_1871_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
    // type of target is $uint<136>
    //  file .Aa/sdhc.opt.aa, line 647
    // ($bitcast ($uint<136>) 0  )
    $constant $W[type_cast_1877_wire_constant] : $int<136> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_1882_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<135>) 0  )
    $constant $W[type_cast_1891_wire_constant] : $int<135> := _b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_1897_wire_constant] : $int<136> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001// 1
    // ZERO_1
    $constant $W[R_ZERO_1_1908_wire_constant] : $int<1> := _b0// 0
    // ZERO_1
    $constant $W[R_ZERO_1_1911_wire_constant] : $int<1> := _b0// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // _h8 
    $constant $W[konst_1921_wire_constant] : $int<8> := _b00001000// 8
    // 8 
    $constant $W[konst_1923_wire_constant] : $int<8> := _b00001000// 8
    // 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
    //  file .Aa/sdhc.opt.aa, line 662
    // ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  ) 
    // _b00000000 
    $constant $W[konst_1933_wire_constant] : $int<8> := _b00000000// 0
    // _b00000010 
    $constant $W[konst_1934_wire_constant] : $int<8> := _b00000010// 2
    // ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
    // 0 
    $constant $W[konst_1940_wire_constant] : $int<136> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // ZERO_8
    $constant $W[R_ZERO_8_1942_wire_constant] : $int<8> := _b00000000// 0
    // ($bitcast ($uint<8>) 4  )
    $constant $W[type_cast_1944_wire_constant] : $int<8> := _b00000100// 4
    // constant-declarations for block %command_generator%command%big_resp
    //  file .Aa/sdhc.opt.aa, line 667
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 669
    // 15 
    $constant $W[konst_1987_wire_constant] : $int<8> := _b00001111// 15
    // constant-declarations for block %command_generator%command%big_resp%
    //  file .Aa/sdhc.opt.aa, line 671
    // constant-declarations for phi:  				$phi k := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_k $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 672
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_1958_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  				$phi temp := 				  ( $slice bigResponse 127 8 )  $on   $entry 				  next_temp $on   $loopback 
    // type of target is $uint<120>
    //  file .Aa/sdhc.opt.aa, line 674
    // 16 
    $constant $W[konst_1967_wire_constant] : $int<8> := _b00010000// 16
    // 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 678
    // 8 
    $constant $W[konst_1977_wire_constant] : $int<120> := _b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000// 8
    // 1 
    $constant $W[konst_1982_wire_constant] : $int<8> := _b00000001// 1
    // 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
    //  file .Aa/sdhc.opt.aa, line 683
    // 36 
    $constant $W[konst_1990_wire_constant] : $int<8> := _b00100100// 36
    // 1 
    $constant $W[konst_1995_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1997_wire_constant] : $int<8> := _b00000001// 1
    // 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
    //  file .Aa/sdhc.opt.aa, line 685
    // 48 
    $constant $W[konst_2000_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (36  presentState3 ) () 
    //  file .Aa/sdhc.opt.aa, line 686
    // 36 
    $constant $W[konst_2003_wire_constant] : $int<8> := _b00100100// 36
    // _h01 
    $constant $W[konst_2008_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_2015_wire_constant] : $int<2> := _b00// 0
    // 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
    //  file .Aa/sdhc.opt.aa, line 691
    // 36 
    $constant $W[konst_2017_wire_constant] : $int<8> := _b00100100// 36
    // 1 
    $constant $W[konst_2022_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_2024_wire_constant] : $int<8> := _b00000001// 1
    // 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
    //  file .Aa/sdhc.opt.aa, line 693
    // 48 
    $constant $W[konst_2027_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (36  presentState1 ) () 
    //  file .Aa/sdhc.opt.aa, line 694
    // 36 
    $constant $W[konst_2030_wire_constant] : $int<8> := _b00100100// 36
    // _h01 
    $constant $W[konst_2035_wire_constant] : $int<8> := _b00000001// 1
    // 			$volatile errorInterruptStatusVar_1 := ZERO_8 $buffering 1
    //  file .Aa/sdhc.opt.aa, line 696
    $constant $W[errorInterruptStatusVar_1_2040] : $int<8> := _b00000000 // 0
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 701
    // constant-declarations for phi:  			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 702
    // constant-declarations for phi:  			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 704
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_2059_wire_constant] : $int<1> := _b1// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_2063_wire_constant] : $int<1> := _b1// 1
    // 3 
    $constant $W[konst_2066_wire_constant] : $int<2> := _b11// 3
    // 			$call readSDHCRegisters (12  ) (tempTransfer ) 
    //  file .Aa/sdhc.opt.aa, line 709
    // 12 
    $constant $W[konst_2069_wire_constant] : $int<8> := _b00001100// 12
    // _h20 
    $constant $W[konst_2074_wire_constant] : $int<8> := _b00100000// 32
    // 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
    //  file .Aa/sdhc.opt.aa, line 711
    // ONE_1
    $constant $W[R_ONE_1_2082_wire_constant] : $int<1> := _b1// 1
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_2081_word_address_0] : $pointer<memory_space_1> := _b0
    // ZERO_1
    $constant $W[R_ZERO_1_2085_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_2084_word_address_0] : $pointer<memory_space_2> := _b0
    // ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
    // ($bitcast ($uint<8>) 2  )
    $constant $W[type_cast_2090_wire_constant] : $int<8> := _b00000010// 2
    // ZERO_8
    $constant $W[R_ZERO_8_2091_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 28610656
    // 1 
    $constant $W[konst_2096_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %command_generator%command%
    //  file .Aa/sdhc.opt.aa, line 716
    // constant-declarations for phi:  				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 717
    // ONE_8
    $constant $W[R_ONE_8_2102_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for phi:  				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 719
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2107_wire_constant] : $int<16> := _b0000000000000000// 0
    // 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 722
    // 6 
    $constant $W[konst_2109_wire_constant] : $int<8> := _b00000110// 6
    // 1 
    $constant $W[konst_2122_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 28403536
    // 0 
    $constant $W[konst_2127_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_2133_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 729
    // 7 
    $constant $W[konst_2136_wire_constant] : $int<8> := _b00000111// 7
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 730
    // 6 
    $constant $W[konst_2140_wire_constant] : $int<8> := _b00000110// 6
    // ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData ) 
    // 3 
    $constant $W[konst_2148_wire_constant] : $int<2> := _b11// 3
    // ($bitcast ($uint<8>) 2  )
    $constant $W[type_cast_2151_wire_constant] : $int<8> := _b00000010// 2
    // 		normalInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 735
    // 		errorInterruptStatusVar2 := ZERO_8 $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 736
    // block %command_generator%command
    //  file .Aa/sdhc.opt.aa, line 512
    // 		$call readSDHCRegisters (14  ) (commandRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 514
    // commandRegVal
    $W[commandRegVal_1470] : $int<8>
    // 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
    //  file .Aa/sdhc.opt.aa, line 515
    // commandRegVal1
    $W[commandRegVal1_1473] : $int<8>
    // 		$volatile tempVal := ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 516
    // ( $slice commandRegVal1 5 0 ) 
    $intermediate $W[slice_1480_wire] : $int<6>
    // (ONE_1 && ( $slice commandRegVal1 5 0 ) )
    $intermediate $W[CONCAT_u1_u7_1481_wire] : $int<7>
    // tempVal
    $W[tempVal_1483] : $int<40>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 517
    // 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 518
    $W[next_C_1510_1487_buffered] : $int<8>
    // C
    $W[C_1485] : $int<8>
    // 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
    // type of target is $uint<40>
    //  file .Aa/sdhc.opt.aa, line 520
    $W[command40bits_1505_1492_buffered] : $int<40>
    $W[tempVal_1483_1493_buffered] : $int<40>
    // newCommand40bits
    $W[newCommand40bits_1490] : $int<40>
    // 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
    //  file .Aa/sdhc.opt.aa, line 523
    // (8  + C)
    $intermediate $W[ADD_u8_u8_1497_wire] : $int<8>
    // tempArgument
    $W[tempArgument_1499] : $int<8>
    // 		$volatile command40bits := (( $slice newCommand40bits 31 0 )  && tempArgument) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 524
    // ( $slice newCommand40bits 31 0 ) 
    $intermediate $W[slice_1502_wire] : $int<32>
    // command40bits
    $W[command40bits_1505] : $int<40>
    // 		$volatile next_C := (C - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 525
    // next_C
    $W[next_C_1510] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (C != 0 )
    $intermediate $W[NEQ_u8_u1_1514_wire] : $int<1>
    // 		$call generate_crc_7 (command40bits ) (crc7 ) 
    //  file .Aa/sdhc.opt.aa, line 529
    // crc7
    $W[crc7_1519] : $int<7>
    // 		$volatile commandbits := ((command40bits && crc7) && ONE_1) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 530
    // (command40bits && crc7)
    $intermediate $W[CONCAT_u40_u47_1523_wire] : $int<47>
    // commandbits
    $W[commandbits_1526] : $int<48>
    // 		oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 531
    // oe
    // block %command_generator%command%send_command
    //  file .Aa/sdhc.opt.aa, line 532
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 534
    // (next_J < 48 )
    $intermediate $W[ULT_u8_u1_1562_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 536
    // 				$phi J := 				  ZERO_8 $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 537
    $W[next_J_1546_1536_buffered] : $int<8>
    // J
    $W[J_1533] : $int<8>
    // 				$phi old_commandbits := 				  commandbits $on   $entry 				  new_commandbits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 539
    $W[commandbits_1526_1539_buffered] : $int<48>
    $W[new_commandbits_1558_1540_buffered] : $int<48>
    // old_commandbits
    $W[old_commandbits_1537] : $int<48>
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 542
    // next_J
    $W[next_J_1546] : $int<8>
    // 				$volatile bit := ( $slice old_commandbits 47 47 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 543
    // bit
    $W[bit_1550] : $int<1>
    // 				commandTx := bit $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 544
    // commandTx
    // 				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 545
    // new_commandbits
    $W[new_commandbits_1558] : $int<48>
    // 		oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 548
    // oe
    // 		response_type := ( $slice commandRegVal 1 0 )  $buffering 1// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 549
    // response_type
    $W[response_type_1570] : $int<2>
    // 		dataPresentSelect := (commandRegVal [] 5 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 550
    // dataPresentSelect
    $W[dataPresentSelect_1575] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (dataPresentSelect == 1 )
    $intermediate $W[EQ_u1_u1_1579_wire] : $int<1>
    // 			$call readSDHCRegisters (12  ) (transferVal ) 
    //  file .Aa/sdhc.opt.aa, line 552
    // transferVal
    $W[transferVal_1582] : $int<8>
    // 			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 553
    // (transferVal & _h10 )
    $intermediate $W[AND_u8_u8_1586_wire] : $int<8>
    // txOrRX
    $W[txOrRX_1588] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 554
    // 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 555
    $W[next_E_1615_1593_buffered] : $int<8>
    // E
    $W[E_1590] : $int<8>
    // 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 557
    $W[readPresentState_1610_1598_buffered] : $int<16>
    // readNewPresent
    $W[readNewPresent_1594] : $int<16>
    // 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
    //  file .Aa/sdhc.opt.aa, line 560
    // (36  + E)
    $intermediate $W[ADD_u8_u8_1602_wire] : $int<8>
    // readPresentStateTemp
    $W[readPresentStateTemp_1604] : $int<8>
    // 			$volatile readPresentState := (( $slice readNewPresent 7 0 )  && readPresentStateTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 561
    // ( $slice readNewPresent 7 0 ) 
    $intermediate $W[slice_1607_wire] : $int<8>
    // readPresentState
    $W[readPresentState_1610] : $int<16>
    // 			$volatile next_E := (E - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 562
    // next_E
    $W[next_E_1615] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (E != 0 )
    $intermediate $W[NEQ_u8_u1_1619_wire] : $int<1>
    // 			$volatile presentState0Var := ( $slice readPresentState 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 566
    // presentState0Var
    $W[presentState0Var_1625] : $int<8>
    // 			$volatile presentState1Var := ( $slice readPresentState 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 567
    // presentState1Var
    $W[presentState1Var_1629] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type != 3 )
    $intermediate $W[NEQ_u2_u1_1633_wire] : $int<1>
    // 			$volatile tempPstate := ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 569
    // (presentState1Var | _h02 )
    $intermediate $W[OR_u8_u8_1638_wire] : $int<8>
    // (presentState1Var | _h01 )
    $intermediate $W[OR_u8_u8_1641_wire] : $int<8>
    // tempPstate
    $W[tempPstate_1643] : $int<8>
    // 			$call writeSDHCRegisters (37  tempPstate ) () 
    //  file .Aa/sdhc.opt.aa, line 570
    // 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 572
    // (presentState0Var | _h06 )
    $intermediate $W[OR_u8_u8_1651_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 575
    // (response_type == 2 )
    $intermediate $W[EQ_u2_u1_1660_wire] : $int<1>
    // (response_type == 3 )
    $intermediate $W[EQ_u2_u1_1663_wire] : $int<1>
    // ((response_type == 2 ) | (response_type == 3 ))
    $intermediate $W[OR_u1_u1_1664_wire] : $int<1>
    // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 576
    // responseEnable
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 3 )
    $intermediate $W[EQ_u2_u1_1671_wire] : $int<1>
    // 			busyResponse := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 578
    // busyResponse
    // block %command_generator%command%receive_response
    //  file .Aa/sdhc.opt.aa, line 580
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 582
    // (next_J < 48 )
    $intermediate $W[ULT_u6_u1_1716_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 584
    // 				$phi J := 				  ($bitcast ($uint<6>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 585
    $W[next_J_1695_1683_buffered] : $int<6>
    // J
    $W[J_1679] : $int<6>
    // 				$phi old_responsebits := 				  ($bitcast ($uint<48>) 0  ) $on   $entry 				  new_responsebits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 587
    $W[new_responsebits_1712_1689_buffered] : $int<48>
    // old_responsebits
    $W[old_responsebits_1684] : $int<48>
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 590
    // next_J
    $W[next_J_1695] : $int<6>
    // 				responsebit := responseRx $buffering 2// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 591
    // responsebit
    $W[responsebit_1698] : $int<1>
    // 				$volatile responsebits := (($bitcast ($uint<47>) 0  ) && responsebit) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 592
    // responsebits
    $W[responsebits_1705] : $int<48>
    // 				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 593
    // (old_responsebits << 1 )
    $intermediate $W[SHL_u48_u48_1709_wire] : $int<48>
    // new_responsebits
    $W[new_responsebits_1712] : $int<48>
    // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 597
    // responseEnable
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 3 )
    $intermediate $W[EQ_u2_u1_1726_wire] : $int<1>
    // 			wait := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 602
    // wait
    $W[wait_1730] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (wait == ZERO_1)
    $intermediate $W[EQ_u1_u1_1734_wire] : $int<1>
    // 			busyResponse := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 606
    // busyResponse
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h8 )
    $intermediate $W[AND_u8_u8_1744_wire] : $int<8>
    // ((commandRegVal & _h8 ) == 8 )
    $intermediate $W[EQ_u8_u1_1746_wire] : $int<1>
    // 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
    //  file .Aa/sdhc.opt.aa, line 609
    // ( $slice response 47 8 ) 
    $intermediate $W[slice_1748_wire] : $int<40>
    // R1_6_7CRC
    $W[R1_6_7CRC_1750] : $int<7>
    // 			CommandCRCError := ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 610
    // ( $slice response 7 1 ) 
    $intermediate $W[slice_1753_wire] : $int<7>
    // (( $slice response 7 1 )  == R1_6_7CRC)
    $intermediate $W[EQ_u7_u1_1755_wire] : $int<1>
    // CommandCRCError
    $W[CommandCRCError_1759] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h10 )
    $intermediate $W[AND_u8_u8_1764_wire] : $int<8>
    // ((commandRegVal & _h10 ) == 16 )
    $intermediate $W[EQ_u8_u1_1766_wire] : $int<1>
    // 			commandIndexCheck := (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 613
    // ( $slice commandRegVal1 5 0 ) 
    $intermediate $W[slice_1769_wire] : $int<6>
    // ( $slice response 45 40 ) 
    $intermediate $W[slice_1771_wire] : $int<6>
    // commandIndexCheck
    $W[commandIndexCheck_1773] : $int<1>
    // 			CommandIndexError := ( $mux commandIndexCheck _b00000000   _b00001000  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 614
    // CommandIndexError
    $W[CommandIndexError_1779] : $int<8>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 616
    // 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 617
    $W[next_R_1809_1785_buffered] : $int<8>
    // R
    $W[R_1782] : $int<8>
    // 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
    // type of target is $uint<32>
    //  file .Aa/sdhc.opt.aa, line 619
    // ( $slice response 39 8 ) 
    $intermediate $W[slice_1789_wire] : $int<32>
    $W[nextResponse_1804_1790_buffered] : $int<32>
    // tempResponse
    $W[tempResponse_1786] : $int<32>
    // 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 622
    // (16  + R)
    $intermediate $W[ADD_u8_u8_1794_wire] : $int<8>
    // ( $slice tempResponse 7 0 ) 
    $intermediate $W[slice_1796_wire] : $int<8>
    // 			$volatile nextResponse := (ZERO_8 && ( $slice tempResponse 31 8 ) ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 623
    // ( $slice tempResponse 31 8 ) 
    $intermediate $W[slice_1802_wire] : $int<24>
    // nextResponse
    $W[nextResponse_1804] : $int<32>
    // 			$volatile next_R := (R + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 624
    // next_R
    $W[next_R_1809] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_R < 4 )
    $intermediate $W[ULT_u8_u1_1813_wire] : $int<1>
    // 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
    //  file .Aa/sdhc.opt.aa, line 628
    // tempPresentState2
    $W[tempPresentState2_1818] : $int<8>
    // 			$volatile presentState2 := ((tempPresentState2 >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 629
    // (tempPresentState2 >> 1 )
    $intermediate $W[LSHR_u8_u8_1822_wire] : $int<8>
    // presentState2
    $W[presentState2_1825] : $int<8>
    // 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
    //  file .Aa/sdhc.opt.aa, line 630
    // normalInterrupt2
    $W[normalInterrupt2_1828] : $int<8>
    // 			$call writeSDHCRegisters (36  presentState2 ) () 
    //  file .Aa/sdhc.opt.aa, line 631
    // 			commandEndBitError := ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 632
    // (response [] 0 )
    $intermediate $W[BITSEL_u48_u1_1835_wire] : $int<1>
    // commandEndBitError
    $W[commandEndBitError_1840] : $int<8>
    // 			normalInterruptStatusVar_2 := (normalInterrupt2 | _h01 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 633
    // normalInterruptStatusVar_2
    $W[normalInterruptStatusVar_2_1845] : $int<8>
    // 			errorInterruptStatusVar_2 := ((CommandIndexError | CommandCRCError) | commandEndBitError) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 634
    // (CommandIndexError | CommandCRCError)
    $intermediate $W[OR_u8_u8_1849_wire] : $int<8>
    // errorInterruptStatusVar_2
    $W[errorInterruptStatusVar_2_1852] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 637
    // (response_type == 1 )
    $intermediate $W[EQ_u2_u1_1858_wire] : $int<1>
    // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 638
    // responseEnable
    // 			bigResponseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 639
    // bigResponseEnable
    // block %command_generator%command%receive_bigresponse
    //  file .Aa/sdhc.opt.aa, line 640
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 642
    // (next_J < 136 )
    $intermediate $W[ULT_u8_u1_1905_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 644
    // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 645
    $W[next_J_1884_1872_buffered] : $int<8>
    // J
    $W[J_1868] : $int<8>
    // 				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
    // type of target is $uint<136>
    //  file .Aa/sdhc.opt.aa, line 647
    $W[new_bigresponsebits_1901_1878_buffered] : $int<136>
    // old_bigresponsebits
    $W[old_bigresponsebits_1873] : $int<136>
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 650
    // next_J
    $W[next_J_1884] : $int<8>
    // 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 651
    // bigresponsebit
    $W[bigresponsebit_1887] : $int<1>
    // 				$volatile bigresponsebits := (($bitcast ($uint<135>) 0  ) && bigresponsebit) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 652
    // bigresponsebits
    $W[bigresponsebits_1894] : $int<136>
    // 				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 653
    // (old_bigresponsebits << 1 )
    $intermediate $W[SHL_u136_u136_1898_wire] : $int<136>
    // new_bigresponsebits
    $W[new_bigresponsebits_1901] : $int<136>
    // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 657
    // responseEnable
    // 			bigResponseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 658
    // bigResponseEnable
    // 			$volatile CID_CRC := ( $slice bigResponse 7 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 660
    // CID_CRC
    $W[CID_CRC_1918] : $int<7>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h8 )
    $intermediate $W[AND_u8_u8_1922_wire] : $int<8>
    // ((commandRegVal & _h8 ) == 8 )
    $intermediate $W[EQ_u8_u1_1924_wire] : $int<1>
    // 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
    //  file .Aa/sdhc.opt.aa, line 662
    // ( $slice bigResponse 127 8 ) 
    $intermediate $W[slice_1926_wire] : $int<120>
    // R2_CRC
    $W[R2_CRC_1928] : $int<7>
    // 			CommandCRCError1 := ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 663
    // (CID_CRC == R2_CRC)
    $intermediate $W[EQ_u7_u1_1932_wire] : $int<1>
    // CommandCRCError1
    $W[CommandCRCError1_1936] : $int<8>
    // 			commandEndBitError1 := ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 665
    // (bigResponse [] 0 )
    $intermediate $W[BITSEL_u136_u1_1941_wire] : $int<1>
    // commandEndBitError1
    $W[commandEndBitError1_1946] : $int<8>
    // 			errorInterruptStatusVar_3 := (CommandCRCError1 | commandEndBitError1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 666
    // errorInterruptStatusVar_3
    $W[errorInterruptStatusVar_3_1951] : $int<8>
    // block %command_generator%command%big_resp
    //  file .Aa/sdhc.opt.aa, line 667
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 669
    // (next_k < 15 )
    $intermediate $W[ULT_u8_u1_1988_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 671
    // 				$phi k := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_k $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 672
    $W[next_k_1984_1959_buffered] : $int<8>
    // k
    $W[k_1955] : $int<8>
    // 				$phi temp := 				  ( $slice bigResponse 127 8 )  $on   $entry 				  next_temp $on   $loopback 
    // type of target is $uint<120>
    //  file .Aa/sdhc.opt.aa, line 674
    // ( $slice bigResponse 127 8 ) 
    $intermediate $W[slice_1963_wire] : $int<120>
    $W[next_temp_1979_1964_buffered] : $int<120>
    // temp
    $W[temp_1960] : $int<120>
    // 				$volatile address := (16  + k) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 677
    // address
    $W[address_1970] : $int<8>
    // 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 678
    // ( $slice temp 7 0 ) 
    $intermediate $W[slice_1973_wire] : $int<8>
    // 				$volatile next_temp := (temp >> 8 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 679
    // next_temp
    $W[next_temp_1979] : $int<120>
    // 				$volatile next_k := (k + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 680
    // next_k
    $W[next_k_1984] : $int<8>
    // 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
    //  file .Aa/sdhc.opt.aa, line 683
    // tempPresentState3
    $W[tempPresentState3_1992] : $int<8>
    // 			presentState3 := ((tempPresentState3 >> 1 ) << 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 684
    // (tempPresentState3 >> 1 )
    $intermediate $W[LSHR_u8_u8_1996_wire] : $int<8>
    // presentState3
    $W[presentState3_1999] : $int<8>
    // 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
    //  file .Aa/sdhc.opt.aa, line 685
    // normalInterrupt3
    $W[normalInterrupt3_2002] : $int<8>
    // 			$call writeSDHCRegisters (36  presentState3 ) () 
    //  file .Aa/sdhc.opt.aa, line 686
    // 			normalInterruptStatusVar_3 := (normalInterrupt3 | _h01 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 687
    // normalInterruptStatusVar_3
    $W[normalInterruptStatusVar_3_2010] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 0 )
    $intermediate $W[EQ_u2_u1_2016_wire] : $int<1>
    // 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
    //  file .Aa/sdhc.opt.aa, line 691
    // tempPresentState1
    $W[tempPresentState1_2019] : $int<8>
    // 			$volatile presentState1 := ((tempPresentState1 >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 692
    // (tempPresentState1 >> 1 )
    $intermediate $W[LSHR_u8_u8_2023_wire] : $int<8>
    // presentState1
    $W[presentState1_2026] : $int<8>
    // 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
    //  file .Aa/sdhc.opt.aa, line 693
    // normalInterrupt1
    $W[normalInterrupt1_2029] : $int<8>
    // 			$call writeSDHCRegisters (36  presentState1 ) () 
    //  file .Aa/sdhc.opt.aa, line 694
    // 			$volatile normalInterruptStatusVar_1 := (normalInterrupt1 | _h01 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 695
    // normalInterruptStatusVar_1
    $W[normalInterruptStatusVar_1_2037] : $int<8>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 701
    // 			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 702
    $W[normalInterruptStatusVar_1_2037_2048_buffered] : $int<8>
    $W[normalInterruptStatusVar_2_1845_2049_buffered] : $int<8>
    $W[normalInterruptStatusVar_3_2010_2050_buffered] : $int<8>
    // normalInterruptStatusVar1
    // 			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 704
    $W[errorInterruptStatusVar_2_1852_2054_buffered] : $int<8>
    $W[errorInterruptStatusVar_3_1951_2055_buffered] : $int<8>
    // errorInterruptStatusVar1
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (dataPresentSelect == 1 )
    $intermediate $W[EQ_u1_u1_2060_wire] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (txOrRX == 1 )
    $intermediate $W[EQ_u1_u1_2064_wire] : $int<1>
    // (response_type != 3 )
    $intermediate $W[NEQ_u2_u1_2067_wire] : $int<1>
    // ((txOrRX == 1 ) & (response_type != 3 ))
    $intermediate $W[AND_u1_u1_2068_wire] : $int<1>
    // 			$call readSDHCRegisters (12  ) (tempTransfer ) 
    //  file .Aa/sdhc.opt.aa, line 709
    // tempTransfer
    $W[tempTransfer_2071] : $int<8>
    // 			singleMultipleReadBlock := (  $bitreduce |  (tempTransfer & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 710
    // (tempTransfer & _h20 )
    $intermediate $W[AND_u8_u8_2075_wire] : $int<8>
    // singleMultipleReadBlock
    $W[singleMultipleReadBlock_2077] : $int<1>
    // 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
    //  file .Aa/sdhc.opt.aa, line 711
    // dataErrorInterruptStatusVar1
    // 			dataRxEnrty1 := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 712
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_2081_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_dataRxEnrty1_2081_data_0] : $int<1>
    // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 713
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_2084_word_address_0] : $pointer<memory_space_2> := _b0
    $W[STORE_dataRxEnrty2_2084_data_0] : $int<1>
    // 			transferCompleteData := ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 714
    // transferCompleteData
    $W[transferCompleteData_2093] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 28610656
    // (singleMultipleReadBlock == 1 )
    $intermediate $W[EQ_u1_u1_2097_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 716
    // 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 717
    $W[next_B_2124_2101_buffered] : $int<8>
    // B
    $W[B_2099] : $int<8>
    // 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 719
    $W[readBlockCount_2119_2105_buffered] : $int<16>
    // readNewBlockCount
    $W[readNewBlockCount_2103] : $int<16>
    // 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 722
    // (6  + B)
    $intermediate $W[ADD_u8_u8_2111_wire] : $int<8>
    // readnewBlockCountTemp
    $W[readnewBlockCountTemp_2113] : $int<8>
    // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 723
    // ( $slice readNewBlockCount 7 0 ) 
    $intermediate $W[slice_2116_wire] : $int<8>
    // readBlockCount
    $W[readBlockCount_2119] : $int<16>
    // 			$volatile next_B := (B - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 724
    // next_B
    $W[next_B_2124] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 28403536
    // (B != 0 )
    $intermediate $W[NEQ_u8_u1_2128_wire] : $int<1>
    // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 728
    // newReadBlockCount
    $W[newReadBlockCount_2135] : $int<16>
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 729
    // ( $slice newReadBlockCount 15 8 ) 
    $intermediate $W[slice_2138_wire] : $int<8>
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 730
    // ( $slice newReadBlockCount 7 0 ) 
    $intermediate $W[slice_2142_wire] : $int<8>
    // 			dataTransferComplete := ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 733
    // (response_type == 3 )
    $intermediate $W[EQ_u2_u1_2149_wire] : $int<1>
    // dataTransferComplete
    // datapath-instances for block %command_generator%command
    //  file .Aa/sdhc.opt.aa, line 512
    // 		$call readSDHCRegisters (14  ) (commandRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 514
    $call [call_stmt_1470_call] $module readSDHCRegisters(konst_1468_wire_constant) (commandRegVal_1470)  
    $delay call_stmt_1470_call 4
    $buffering  $in call_stmt_1470_call konst_1468_wire_constant 1
    $buffering  $out call_stmt_1470_call commandRegVal_1470 1
    // 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
    //  file .Aa/sdhc.opt.aa, line 515
    $call [call_stmt_1473_call] $module readSDHCRegisters(konst_1471_wire_constant) (commandRegVal1_1473)  
    $delay call_stmt_1473_call 4
    $buffering  $in call_stmt_1473_call konst_1471_wire_constant 1
    $buffering  $out call_stmt_1473_call commandRegVal1_1473 1
    // 		$volatile tempVal := ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 516
    // ( $slice commandRegVal1 5 0 ) 
    [:] [slice_1480_inst] (commandRegVal1_1473 5 0) (slice_1480_wire)  $flowthrough
    $delay slice_1480_inst 0
    // (ONE_1 && ( $slice commandRegVal1 5 0 ) )
    &&[CONCAT_u1_u7_1481_inst] (R_ONE_1_1478_wire_constant slice_1480_wire) (CONCAT_u1_u7_1481_wire)   $flowthrough 
    $delay CONCAT_u1_u7_1481_inst 0
    // ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) ))
    &&[CONCAT_u33_u40_1482_inst] (CONCAT_u32_u33_1477_wire_constant CONCAT_u1_u7_1481_wire) (tempVal_1483)   $flowthrough 
    $delay CONCAT_u33_u40_1482_inst 0
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 517
    // 			$phi C := 			  next_C $on   loopcommand40bits 			  ($bitcast ($uint<8>) 3  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 518
    # := [next_C_1510_1487_buf] (next_C_1510) (next_C_1510_1487_buffered)    
    $phi [phi_stmt_1485] (next_C_1510_1487_buffered type_cast_1489_wire_constant) ( C_1485 ) 
    // 			$phi newCommand40bits := 			  command40bits $on   loopcommand40bits 			  tempVal $on   $entry 
    // type of target is $uint<40>
    //  file .Aa/sdhc.opt.aa, line 520
    # := [command40bits_1505_1492_buf] (command40bits_1505) (command40bits_1505_1492_buffered)    
    # := [tempVal_1483_1493_buf] (tempVal_1483) (tempVal_1483_1493_buffered)    
    $phi [phi_stmt_1490] (command40bits_1505_1492_buffered tempVal_1483_1493_buffered) ( newCommand40bits_1490 ) 
    // 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
    //  file .Aa/sdhc.opt.aa, line 523
    // (8  + C)
    +[ADD_u8_u8_1497_inst] (konst_1495_wire_constant C_1485) (ADD_u8_u8_1497_wire)   $flowthrough 
    $delay ADD_u8_u8_1497_inst 0
    $call [call_stmt_1499_call] $module readSDHCRegisters(ADD_u8_u8_1497_wire) (tempArgument_1499)  
    $delay call_stmt_1499_call 4
    $buffering  $in call_stmt_1499_call ADD_u8_u8_1497_wire 1
    $buffering  $out call_stmt_1499_call tempArgument_1499 1
    // 		$volatile command40bits := (( $slice newCommand40bits 31 0 )  && tempArgument) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 524
    // ( $slice newCommand40bits 31 0 ) 
    [:] [slice_1502_inst] (newCommand40bits_1490 31 0) (slice_1502_wire)  $flowthrough
    $delay slice_1502_inst 0
    // (( $slice newCommand40bits 31 0 )  && tempArgument)
    &&[CONCAT_u32_u40_1504_inst] (slice_1502_wire tempArgument_1499) (command40bits_1505)   $flowthrough 
    $delay CONCAT_u32_u40_1504_inst 0
    // 		$volatile next_C := (C - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 525
    // (C - 1 )
    -[SUB_u8_u8_1509_inst] (C_1485 konst_1508_wire_constant) (next_C_1510)   $flowthrough 
    $delay SUB_u8_u8_1509_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (C != 0 )
    !=[NEQ_u8_u1_1514_inst] (C_1485 konst_1513_wire_constant) (NEQ_u8_u1_1514_wire)   $flowthrough 
    $delay NEQ_u8_u1_1514_inst 0
    ==0? [if_stmt_1511_branch] (NEQ_u8_u1_1514_wire)
    // 		$call generate_crc_7 (command40bits ) (crc7 ) 
    //  file .Aa/sdhc.opt.aa, line 529
    $call [call_stmt_1519_call] $module generate_crc_7(command40bits_1505) (crc7_1519)  
    $delay call_stmt_1519_call 4
    $buffering  $in call_stmt_1519_call command40bits_1505 1
    $buffering  $out call_stmt_1519_call crc7_1519 1
    // 		$volatile commandbits := ((command40bits && crc7) && ONE_1) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 530
    // (command40bits && crc7)
    &&[CONCAT_u40_u47_1523_inst] (command40bits_1505 crc7_1519) (CONCAT_u40_u47_1523_wire)   $flowthrough 
    $delay CONCAT_u40_u47_1523_inst 0
    // ((command40bits && crc7) && ONE_1)
    &&[CONCAT_u47_u48_1525_inst] (CONCAT_u40_u47_1523_wire R_ONE_1_1524_wire_constant) (commandbits_1526)   $flowthrough 
    $delay CONCAT_u47_u48_1525_inst 0
    // 		oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 531
    // oe
    $ioport $out [WPIPE_oe_1527_inst]  (R_ONE_1_1528_wire_constant) (oe) 
    // datapath-instances for block %command_generator%command%send_command
    //  file .Aa/sdhc.opt.aa, line 532
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 534
    // (next_J < 48 )
    <[ULT_u8_u1_1562_inst] (next_J_1546 konst_1561_wire_constant) (ULT_u8_u1_1562_wire)   $flowthrough 
    $delay ULT_u8_u1_1562_inst 0
    ==0? [do_while_stmt_1531_branch] (ULT_u8_u1_1562_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 536
    // 				$phi J := 				  ZERO_8 $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 537
    # := [next_J_1546_1536_buf] (next_J_1546) (next_J_1546_1536_buffered)     $fullrate
    $buffering $out next_J_1546_1536_buf next_J_1546_1536_buffered  1
    # $phi [phi_stmt_1533] (R_ZERO_8_1535_wire_constant next_J_1546_1536_buffered) ( J_1533 ) $fullrate
    // $buffering  $out phi_stmt_1533 J_1533 2
    // 				$phi old_commandbits := 				  commandbits $on   $entry 				  new_commandbits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 539
    # := [commandbits_1526_1539_buf] (commandbits_1526) (commandbits_1526_1539_buffered)     $fullrate
    $buffering $out commandbits_1526_1539_buf commandbits_1526_1539_buffered  1
    # := [new_commandbits_1558_1540_buf] (new_commandbits_1558) (new_commandbits_1558_1540_buffered)     $fullrate
    $buffering $out new_commandbits_1558_1540_buf new_commandbits_1558_1540_buffered  1
    # $phi [phi_stmt_1537] (commandbits_1526_1539_buffered new_commandbits_1558_1540_buffered) ( old_commandbits_1537 ) $fullrate
    // $buffering  $out phi_stmt_1537 old_commandbits_1537 2
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 542
    // (J + 1 )
    +[ADD_u8_u8_1545_inst] (J_1533 konst_1544_wire_constant) (next_J_1546)   $flowthrough 
    $delay ADD_u8_u8_1545_inst 0
    // 				$volatile bit := ( $slice old_commandbits 47 47 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 543
    // ( $slice old_commandbits 47 47 ) 
    [:] [slice_1549_inst] (old_commandbits_1537 47 47) (bit_1550)  $flowthrough
    $delay slice_1549_inst 0
    // 				commandTx := bit $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 544
    // commandTx
    $ioport $out [WPIPE_commandTx_1551_inst]  (bit_1550) (commandTx)  $fullrate 
    // 				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 545
    // (old_commandbits << 1 )
    <<[SHL_u48_u48_1557_inst] (old_commandbits_1537 konst_1556_wire_constant) (new_commandbits_1558)   $flowthrough 
    $delay SHL_u48_u48_1557_inst 0
    // 		oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 548
    // oe
    $ioport $out [WPIPE_oe_1564_inst]  (R_ZERO_1_1565_wire_constant) (oe) 
    // 		response_type := ( $slice commandRegVal 1 0 )  $buffering 1// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 549
    // ( $slice commandRegVal 1 0 ) 
    [:] [slice_1569_inst] (commandRegVal_1470 1 0) (response_type_1570) 
    $buffering  $out slice_1569_inst response_type_1570 1
    $delay slice_1569_inst 1
    // 		dataPresentSelect := (commandRegVal [] 5 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 550
    // (commandRegVal [] 5 )
    [][BITSEL_u8_u1_1574_inst] (commandRegVal_1470 konst_1573_wire_constant) (dataPresentSelect_1575)   
    $buffering  $out BITSEL_u8_u1_1574_inst dataPresentSelect_1575 1
    $delay BITSEL_u8_u1_1574_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1349233824
    // (dataPresentSelect == 1 )
    ==[EQ_u1_u1_1579_inst] (dataPresentSelect_1575 konst_1578_wire_constant) (EQ_u1_u1_1579_wire)   $flowthrough 
    $delay EQ_u1_u1_1579_inst 0
    ==0? [if_stmt_1576_branch] (EQ_u1_u1_1579_wire)
    // 			$call readSDHCRegisters (12  ) (transferVal ) 
    //  file .Aa/sdhc.opt.aa, line 552
    $call [call_stmt_1582_call] $module readSDHCRegisters(konst_1580_wire_constant) (transferVal_1582)  
    $delay call_stmt_1582_call 4
    $buffering  $in call_stmt_1582_call konst_1580_wire_constant 1
    $buffering  $out call_stmt_1582_call transferVal_1582 1
    // 			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 553
    // (transferVal & _h10 )
    &[AND_u8_u8_1586_inst] (transferVal_1582 konst_1585_wire_constant) (AND_u8_u8_1586_wire)   $flowthrough 
    $delay AND_u8_u8_1586_inst 0
    // (  $bitreduce |  (transferVal & _h10 ) )
    !| [BITREDUCEOR_u8_u1_1587_inst] (AND_u8_u8_1586_wire) (txOrRX_1588)  
    $buffering  $out BITREDUCEOR_u8_u1_1587_inst txOrRX_1588 1
    $delay BITREDUCEOR_u8_u1_1587_inst 1
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 554
    // 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopPresent 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 555
    # := [next_E_1615_1593_buf] (next_E_1615) (next_E_1615_1593_buffered)    
    $phi [phi_stmt_1590] (R_ONE_8_1592_wire_constant next_E_1615_1593_buffered) ( E_1590 ) 
    // 				$phi readNewPresent := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readPresentState $on   loopPresent 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 557
    # := [readPresentState_1610_1598_buf] (readPresentState_1610) (readPresentState_1610_1598_buffered)    
    $phi [phi_stmt_1594] (type_cast_1597_wire_constant readPresentState_1610_1598_buffered) ( readNewPresent_1594 ) 
    // 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
    //  file .Aa/sdhc.opt.aa, line 560
    // (36  + E)
    +[ADD_u8_u8_1602_inst] (konst_1600_wire_constant E_1590) (ADD_u8_u8_1602_wire)   $flowthrough 
    $delay ADD_u8_u8_1602_inst 0
    $call [call_stmt_1604_call] $module readSDHCRegisters(ADD_u8_u8_1602_wire) (readPresentStateTemp_1604)  
    $delay call_stmt_1604_call 4
    $buffering  $in call_stmt_1604_call ADD_u8_u8_1602_wire 1
    $buffering  $out call_stmt_1604_call readPresentStateTemp_1604 1
    // 			$volatile readPresentState := (( $slice readNewPresent 7 0 )  && readPresentStateTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 561
    // ( $slice readNewPresent 7 0 ) 
    [:] [slice_1607_inst] (readNewPresent_1594 7 0) (slice_1607_wire)  $flowthrough
    $delay slice_1607_inst 0
    // (( $slice readNewPresent 7 0 )  && readPresentStateTemp)
    &&[CONCAT_u8_u16_1609_inst] (slice_1607_wire readPresentStateTemp_1604) (readPresentState_1610)   $flowthrough 
    $delay CONCAT_u8_u16_1609_inst 0
    // 			$volatile next_E := (E - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 562
    // (E - 1 )
    -[SUB_u8_u8_1614_inst] (E_1590 konst_1613_wire_constant) (next_E_1615)   $flowthrough 
    $delay SUB_u8_u8_1614_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (E != 0 )
    !=[NEQ_u8_u1_1619_inst] (E_1590 konst_1618_wire_constant) (NEQ_u8_u1_1619_wire)   $flowthrough 
    $delay NEQ_u8_u1_1619_inst 0
    ==0? [if_stmt_1616_branch] (NEQ_u8_u1_1619_wire)
    // 			$volatile presentState0Var := ( $slice readPresentState 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 566
    // ( $slice readPresentState 7 0 ) 
    [:] [slice_1624_inst] (readPresentState_1610 7 0) (presentState0Var_1625)  $flowthrough
    $delay slice_1624_inst 0
    // 			$volatile presentState1Var := ( $slice readPresentState 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 567
    // ( $slice readPresentState 15 8 ) 
    [:] [slice_1628_inst] (readPresentState_1610 15 8) (presentState1Var_1629)  $flowthrough
    $delay slice_1628_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type != 3 )
    !=[NEQ_u2_u1_1633_inst] (response_type_1570 konst_1632_wire_constant) (NEQ_u2_u1_1633_wire)   $flowthrough 
    $delay NEQ_u2_u1_1633_inst 0
    ==0? [if_stmt_1630_branch] (NEQ_u2_u1_1633_wire)
    // 			$volatile tempPstate := ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 569
    // (presentState1Var | _h02 )
    |[OR_u8_u8_1638_inst] (presentState1Var_1629 konst_1637_wire_constant) (OR_u8_u8_1638_wire)   $flowthrough 
    $delay OR_u8_u8_1638_inst 0
    // (presentState1Var | _h01 )
    |[OR_u8_u8_1641_inst] (presentState1Var_1629 konst_1640_wire_constant) (OR_u8_u8_1641_wire)   $flowthrough 
    $delay OR_u8_u8_1641_inst 0
    // ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) ) 
    ? [MUX_1642_inst] (txOrRX_1588 OR_u8_u8_1638_wire OR_u8_u8_1641_wire) (tempPstate_1643)  $flowthrough
    // 			$call writeSDHCRegisters (37  tempPstate ) () 
    //  file .Aa/sdhc.opt.aa, line 570
    $call [call_stmt_1646_call] $module writeSDHCRegisters(konst_1644_wire_constant tempPstate_1643) ()  
    $delay call_stmt_1646_call 4
    $buffering  $in call_stmt_1646_call konst_1644_wire_constant 1
    $buffering  $in call_stmt_1646_call tempPstate_1643 1
    // 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 572
    // (presentState0Var | _h06 )
    |[OR_u8_u8_1651_inst] (presentState0Var_1625 konst_1650_wire_constant) (OR_u8_u8_1651_wire)   $flowthrough 
    $delay OR_u8_u8_1651_inst 0
    $call [call_stmt_1652_call] $module writeSDHCRegisters(konst_1648_wire_constant OR_u8_u8_1651_wire) ()  
    $delay call_stmt_1652_call 4
    $buffering  $in call_stmt_1652_call konst_1648_wire_constant 1
    $buffering  $in call_stmt_1652_call OR_u8_u8_1651_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 575
    // (response_type == 2 )
    ==[EQ_u2_u1_1660_inst] (response_type_1570 konst_1659_wire_constant) (EQ_u2_u1_1660_wire)   $flowthrough 
    $delay EQ_u2_u1_1660_inst 0
    // (response_type == 3 )
    ==[EQ_u2_u1_1663_inst] (response_type_1570 konst_1662_wire_constant) (EQ_u2_u1_1663_wire)   $flowthrough 
    $delay EQ_u2_u1_1663_inst 0
    // ((response_type == 2 ) | (response_type == 3 ))
    |[OR_u1_u1_1664_inst] (EQ_u2_u1_1660_wire EQ_u2_u1_1663_wire) (OR_u1_u1_1664_wire)   $flowthrough 
    $delay OR_u1_u1_1664_inst 0
    ==0? [if_stmt_1657_branch] (OR_u1_u1_1664_wire)
    // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 576
    // responseEnable
    $ioport $out [WPIPE_responseEnable_1665_inst]  (R_ONE_1_1666_wire_constant) (responseEnable) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 3 )
    ==[EQ_u2_u1_1671_inst] (response_type_1570 konst_1670_wire_constant) (EQ_u2_u1_1671_wire)   $flowthrough 
    $delay EQ_u2_u1_1671_inst 0
    ==0? [if_stmt_1668_branch] (EQ_u2_u1_1671_wire)
    // 			busyResponse := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 578
    // busyResponse
    $ioport $out [WPIPE_busyResponse_1672_inst]  (R_ONE_1_1673_wire_constant) (busyResponse) 
    // datapath-instances for block %command_generator%command%receive_response
    //  file .Aa/sdhc.opt.aa, line 580
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 582
    // (next_J < 48 )
    <[ULT_u6_u1_1716_inst] (next_J_1695 konst_1715_wire_constant) (ULT_u6_u1_1716_wire)   $flowthrough 
    $delay ULT_u6_u1_1716_inst 0
    ==0? [do_while_stmt_1677_branch] (ULT_u6_u1_1716_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 584
    // 				$phi J := 				  ($bitcast ($uint<6>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<6>
    //  file .Aa/sdhc.opt.aa, line 585
    # := [next_J_1695_1683_buf] (next_J_1695) (next_J_1695_1683_buffered)     $fullrate
    $buffering $out next_J_1695_1683_buf next_J_1695_1683_buffered  1
    # $phi [phi_stmt_1679] (type_cast_1682_wire_constant next_J_1695_1683_buffered) ( J_1679 ) $fullrate
    // $buffering  $out phi_stmt_1679 J_1679 2
    // 				$phi old_responsebits := 				  ($bitcast ($uint<48>) 0  ) $on   $entry 				  new_responsebits $on   $loopback 
    // type of target is $uint<48>
    //  file .Aa/sdhc.opt.aa, line 587
    # := [new_responsebits_1712_1689_buf] (new_responsebits_1712) (new_responsebits_1712_1689_buffered)     $fullrate
    $buffering $out new_responsebits_1712_1689_buf new_responsebits_1712_1689_buffered  1
    # $phi [phi_stmt_1684] (type_cast_1688_wire_constant new_responsebits_1712_1689_buffered) ( old_responsebits_1684 ) $fullrate
    // $buffering  $out phi_stmt_1684 old_responsebits_1684 2
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 590
    // (J + 1 )
    +[ADD_u6_u6_1694_inst] (J_1679 konst_1693_wire_constant) (next_J_1695)   $flowthrough 
    $delay ADD_u6_u6_1694_inst 0
    // 				responsebit := responseRx $buffering 2// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 591
    // responseRx
    $ioport $in [RPIPE_responseRx_1697_inst] (responseRx) (responsebit_1698)  $fullrate 
    $buffering $out RPIPE_responseRx_1697_inst responsebit_1698 1
    // 				$volatile responsebits := (($bitcast ($uint<47>) 0  ) && responsebit) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 592
    // (($bitcast ($uint<47>) 0  ) && responsebit)
    &&[CONCAT_u47_u48_1704_inst] (type_cast_1702_wire_constant responsebit_1698) (responsebits_1705)   $flowthrough 
    $delay CONCAT_u47_u48_1704_inst 0
    // 				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 593
    // (old_responsebits << 1 )
    <<[SHL_u48_u48_1709_inst] (old_responsebits_1684 konst_1708_wire_constant) (SHL_u48_u48_1709_wire)   $flowthrough 
    $delay SHL_u48_u48_1709_inst 0
    // ((old_responsebits << 1 ) | responsebits)
    |[OR_u48_u48_1711_inst] (SHL_u48_u48_1709_wire responsebits_1705) (new_responsebits_1712)   $flowthrough 
    $delay OR_u48_u48_1711_inst 0
    // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 597
    // responseEnable
    $ioport $out [WPIPE_responseEnable_1718_inst]  (R_ZERO_1_1719_wire_constant) (responseEnable) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 3 )
    ==[EQ_u2_u1_1726_inst] (response_type_1570 konst_1725_wire_constant) (EQ_u2_u1_1726_wire)   $flowthrough 
    $delay EQ_u2_u1_1726_inst 0
    ==0? [if_stmt_1723_branch] (EQ_u2_u1_1726_wire)
    // 			wait := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 602
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_1729_inst] (DAT0Rx) (wait_1730) 
    $buffering $out RPIPE_DAT0Rx_1729_inst wait_1730 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (wait == ZERO_1)
    ==[EQ_u1_u1_1734_inst] (wait_1730 R_ZERO_1_1733_wire_constant) (EQ_u1_u1_1734_wire)   $flowthrough 
    $delay EQ_u1_u1_1734_inst 0
    ==0? [if_stmt_1731_branch] (EQ_u1_u1_1734_wire)
    // 			busyResponse := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 606
    // busyResponse
    $ioport $out [WPIPE_busyResponse_1737_inst]  (R_ZERO_1_1738_wire_constant) (busyResponse) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h8 )
    &[AND_u8_u8_1744_inst] (commandRegVal_1470 konst_1743_wire_constant) (AND_u8_u8_1744_wire)   $flowthrough 
    $delay AND_u8_u8_1744_inst 0
    // ((commandRegVal & _h8 ) == 8 )
    ==[EQ_u8_u1_1746_inst] (AND_u8_u8_1744_wire konst_1745_wire_constant) (EQ_u8_u1_1746_wire)   $flowthrough 
    $delay EQ_u8_u1_1746_inst 0
    ==0? [if_stmt_1741_branch] (EQ_u8_u1_1746_wire)
    // 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
    //  file .Aa/sdhc.opt.aa, line 609
    // ( $slice response 47 8 ) 
    [:] [slice_1748_inst] (new_responsebits_1712 47 8) (slice_1748_wire)  $flowthrough
    $delay slice_1748_inst 0
    $call [call_stmt_1750_call] $module generate_crc_7(slice_1748_wire) (R1_6_7CRC_1750)  
    $delay call_stmt_1750_call 4
    $buffering  $in call_stmt_1750_call slice_1748_wire 1
    $buffering  $out call_stmt_1750_call R1_6_7CRC_1750 1
    // 			CommandCRCError := ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 610
    // ( $slice response 7 1 ) 
    [:] [slice_1753_inst] (new_responsebits_1712 7 1) (slice_1753_wire)  $flowthrough
    $delay slice_1753_inst 0
    // (( $slice response 7 1 )  == R1_6_7CRC)
    ==[EQ_u7_u1_1755_inst] (slice_1753_wire R1_6_7CRC_1750) (EQ_u7_u1_1755_wire)   $flowthrough 
    $delay EQ_u7_u1_1755_inst 0
    // ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  ) 
    ? [MUX_1758_inst] (EQ_u7_u1_1755_wire konst_1756_wire_constant konst_1757_wire_constant) (CommandCRCError_1759) 
    $buffering  $out MUX_1758_inst CommandCRCError_1759 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h10 )
    &[AND_u8_u8_1764_inst] (commandRegVal_1470 konst_1763_wire_constant) (AND_u8_u8_1764_wire)   $flowthrough 
    $delay AND_u8_u8_1764_inst 0
    // ((commandRegVal & _h10 ) == 16 )
    ==[EQ_u8_u1_1766_inst] (AND_u8_u8_1764_wire konst_1765_wire_constant) (EQ_u8_u1_1766_wire)   $flowthrough 
    $delay EQ_u8_u1_1766_inst 0
    ==0? [if_stmt_1761_branch] (EQ_u8_u1_1766_wire)
    // 			commandIndexCheck := (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 613
    // ( $slice commandRegVal1 5 0 ) 
    [:] [slice_1769_inst] (commandRegVal1_1473 5 0) (slice_1769_wire)  $flowthrough
    $delay slice_1769_inst 0
    // ( $slice response 45 40 ) 
    [:] [slice_1771_inst] (new_responsebits_1712 45 40) (slice_1771_wire)  $flowthrough
    $delay slice_1771_inst 0
    // (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) )
    ==[EQ_u6_u1_1772_inst] (slice_1769_wire slice_1771_wire) (commandIndexCheck_1773)   
    $buffering  $out EQ_u6_u1_1772_inst commandIndexCheck_1773 1
    $delay EQ_u6_u1_1772_inst 1
    // 			CommandIndexError := ( $mux commandIndexCheck _b00000000   _b00001000  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 614
    // ( $mux commandIndexCheck _b00000000   _b00001000  ) 
    ? [MUX_1778_inst] (commandIndexCheck_1773 konst_1776_wire_constant konst_1777_wire_constant) (CommandIndexError_1779) 
    $buffering  $out MUX_1778_inst CommandIndexError_1779 1
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 616
    // 				$phi R := 				  ZERO_8 $on   $entry 				  next_R $on   loopResponse 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 617
    # := [next_R_1809_1785_buf] (next_R_1809) (next_R_1809_1785_buffered)    
    $phi [phi_stmt_1782] (R_ZERO_8_1784_wire_constant next_R_1809_1785_buffered) ( R_1782 ) 
    // 				$phi tempResponse := 				  ( $slice response 39 8 )  $on   $entry 				  nextResponse $on   loopResponse 
    // type of target is $uint<32>
    //  file .Aa/sdhc.opt.aa, line 619
    // ( $slice response 39 8 ) 
    [:] [slice_1789_inst] (new_responsebits_1712 39 8) (slice_1789_wire) 
    $buffering  $out slice_1789_inst slice_1789_wire 1
    $delay slice_1789_inst 1
    # := [nextResponse_1804_1790_buf] (nextResponse_1804) (nextResponse_1804_1790_buffered)    
    $phi [phi_stmt_1786] (slice_1789_wire nextResponse_1804_1790_buffered) ( tempResponse_1786 ) 
    // 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 622
    // (16  + R)
    +[ADD_u8_u8_1794_inst] (konst_1792_wire_constant R_1782) (ADD_u8_u8_1794_wire)   $flowthrough 
    $delay ADD_u8_u8_1794_inst 0
    // ( $slice tempResponse 7 0 ) 
    [:] [slice_1796_inst] (tempResponse_1786 7 0) (slice_1796_wire)  $flowthrough
    $delay slice_1796_inst 0
    $call [call_stmt_1797_call] $module writeSDHCRegisters(ADD_u8_u8_1794_wire slice_1796_wire) ()  
    $delay call_stmt_1797_call 4
    $buffering  $in call_stmt_1797_call ADD_u8_u8_1794_wire 1
    $buffering  $in call_stmt_1797_call slice_1796_wire 1
    // 			$volatile nextResponse := (ZERO_8 && ( $slice tempResponse 31 8 ) ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 623
    // ( $slice tempResponse 31 8 ) 
    [:] [slice_1802_inst] (tempResponse_1786 31 8) (slice_1802_wire)  $flowthrough
    $delay slice_1802_inst 0
    // (ZERO_8 && ( $slice tempResponse 31 8 ) )
    &&[CONCAT_u8_u32_1803_inst] (R_ZERO_8_1799_wire_constant slice_1802_wire) (nextResponse_1804)   $flowthrough 
    $delay CONCAT_u8_u32_1803_inst 0
    // 			$volatile next_R := (R + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 624
    // (R + 1 )
    +[ADD_u8_u8_1808_inst] (R_1782 konst_1807_wire_constant) (next_R_1809)   $flowthrough 
    $delay ADD_u8_u8_1808_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_R < 4 )
    <[ULT_u8_u1_1813_inst] (next_R_1809 konst_1812_wire_constant) (ULT_u8_u1_1813_wire)   $flowthrough 
    $delay ULT_u8_u1_1813_inst 0
    ==0? [if_stmt_1810_branch] (ULT_u8_u1_1813_wire)
    // 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
    //  file .Aa/sdhc.opt.aa, line 628
    $call [call_stmt_1818_call] $module readSDHCRegisters(konst_1816_wire_constant) (tempPresentState2_1818)  
    $delay call_stmt_1818_call 4
    $buffering  $in call_stmt_1818_call konst_1816_wire_constant 1
    $buffering  $out call_stmt_1818_call tempPresentState2_1818 1
    // 			$volatile presentState2 := ((tempPresentState2 >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 629
    // (tempPresentState2 >> 1 )
    >>[LSHR_u8_u8_1822_inst] (tempPresentState2_1818 konst_1821_wire_constant) (LSHR_u8_u8_1822_wire)   $flowthrough 
    $delay LSHR_u8_u8_1822_inst 0
    // ((tempPresentState2 >> 1 ) << 1 )
    <<[SHL_u8_u8_1824_inst] (LSHR_u8_u8_1822_wire konst_1823_wire_constant) (presentState2_1825)   $flowthrough 
    $delay SHL_u8_u8_1824_inst 0
    // 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
    //  file .Aa/sdhc.opt.aa, line 630
    $call [call_stmt_1828_call] $module readSDHCRegisters(konst_1826_wire_constant) (normalInterrupt2_1828)  
    $delay call_stmt_1828_call 4
    $buffering  $in call_stmt_1828_call konst_1826_wire_constant 1
    $buffering  $out call_stmt_1828_call normalInterrupt2_1828 1
    // 			$call writeSDHCRegisters (36  presentState2 ) () 
    //  file .Aa/sdhc.opt.aa, line 631
    $call [call_stmt_1831_call] $module writeSDHCRegisters(konst_1829_wire_constant presentState2_1825) ()  
    $delay call_stmt_1831_call 4
    $buffering  $in call_stmt_1831_call konst_1829_wire_constant 1
    $buffering  $in call_stmt_1831_call presentState2_1825 1
    // 			commandEndBitError := ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 632
    // (response [] 0 )
    [][BITSEL_u48_u1_1835_inst] (new_responsebits_1712 konst_1834_wire_constant) (BITSEL_u48_u1_1835_wire)   $flowthrough 
    $delay BITSEL_u48_u1_1835_inst 0
    // ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
    ? [MUX_1839_inst] (BITSEL_u48_u1_1835_wire R_ZERO_8_1836_wire_constant type_cast_1838_wire_constant) (commandEndBitError_1840) 
    $buffering  $out MUX_1839_inst commandEndBitError_1840 1
    // 			normalInterruptStatusVar_2 := (normalInterrupt2 | _h01 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 633
    // (normalInterrupt2 | _h01 )
    |[OR_u8_u8_1844_inst] (normalInterrupt2_1828 konst_1843_wire_constant) (normalInterruptStatusVar_2_1845)   
    $buffering  $out OR_u8_u8_1844_inst normalInterruptStatusVar_2_1845 1
    $delay OR_u8_u8_1844_inst 1
    // 			errorInterruptStatusVar_2 := ((CommandIndexError | CommandCRCError) | commandEndBitError) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 634
    // (CommandIndexError | CommandCRCError)
    |[OR_u8_u8_1849_inst] (CommandIndexError_1779 CommandCRCError_1759) (OR_u8_u8_1849_wire)   $flowthrough 
    $delay OR_u8_u8_1849_inst 0
    // ((CommandIndexError | CommandCRCError) | commandEndBitError)
    |[OR_u8_u8_1851_inst] (OR_u8_u8_1849_wire commandEndBitError_1840) (errorInterruptStatusVar_2_1852)   
    $buffering  $out OR_u8_u8_1851_inst errorInterruptStatusVar_2_1852 1
    $delay OR_u8_u8_1851_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 637
    // (response_type == 1 )
    ==[EQ_u2_u1_1858_inst] (response_type_1570 konst_1857_wire_constant) (EQ_u2_u1_1858_wire)   $flowthrough 
    $delay EQ_u2_u1_1858_inst 0
    ==0? [if_stmt_1855_branch] (EQ_u2_u1_1858_wire)
    // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 638
    // responseEnable
    $ioport $out [WPIPE_responseEnable_1859_inst]  (R_ONE_1_1860_wire_constant) (responseEnable) 
    // 			bigResponseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 639
    // bigResponseEnable
    $ioport $out [WPIPE_bigResponseEnable_1862_inst]  (R_ONE_1_1863_wire_constant) (bigResponseEnable) 
    // datapath-instances for block %command_generator%command%receive_bigresponse
    //  file .Aa/sdhc.opt.aa, line 640
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 642
    // (next_J < 136 )
    <[ULT_u8_u1_1905_inst] (next_J_1884 konst_1904_wire_constant) (ULT_u8_u1_1905_wire)   $flowthrough 
    $delay ULT_u8_u1_1905_inst 0
    ==0? [do_while_stmt_1866_branch] (ULT_u8_u1_1905_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 644
    // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_J $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 645
    # := [next_J_1884_1872_buf] (next_J_1884) (next_J_1884_1872_buffered)     $fullrate
    $buffering $out next_J_1884_1872_buf next_J_1884_1872_buffered  1
    # $phi [phi_stmt_1868] (type_cast_1871_wire_constant next_J_1884_1872_buffered) ( J_1868 ) $fullrate
    // $buffering  $out phi_stmt_1868 J_1868 2
    // 				$phi old_bigresponsebits := 				  ($bitcast ($uint<136>) 0  ) $on   $entry 				  new_bigresponsebits $on   $loopback 
    // type of target is $uint<136>
    //  file .Aa/sdhc.opt.aa, line 647
    # := [new_bigresponsebits_1901_1878_buf] (new_bigresponsebits_1901) (new_bigresponsebits_1901_1878_buffered)     $fullrate
    $buffering $out new_bigresponsebits_1901_1878_buf new_bigresponsebits_1901_1878_buffered  1
    # $phi [phi_stmt_1873] (type_cast_1877_wire_constant new_bigresponsebits_1901_1878_buffered) ( old_bigresponsebits_1873 ) $fullrate
    // $buffering  $out phi_stmt_1873 old_bigresponsebits_1873 2
    // 				$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 650
    // (J + 1 )
    +[ADD_u8_u8_1883_inst] (J_1868 konst_1882_wire_constant) (next_J_1884)   $flowthrough 
    $delay ADD_u8_u8_1883_inst 0
    // 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
    //  file .Aa/sdhc.opt.aa, line 651
    // responseRx
    $ioport $in [RPIPE_responseRx_1886_inst] (responseRx) (bigresponsebit_1887)  $fullrate 
    $buffering $out RPIPE_responseRx_1886_inst bigresponsebit_1887 1
    // 				$volatile bigresponsebits := (($bitcast ($uint<135>) 0  ) && bigresponsebit) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 652
    // (($bitcast ($uint<135>) 0  ) && bigresponsebit)
    &&[CONCAT_u135_u136_1893_inst] (type_cast_1891_wire_constant bigresponsebit_1887) (bigresponsebits_1894)   $flowthrough 
    $delay CONCAT_u135_u136_1893_inst 0
    // 				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 653
    // (old_bigresponsebits << 1 )
    <<[SHL_u136_u136_1898_inst] (old_bigresponsebits_1873 konst_1897_wire_constant) (SHL_u136_u136_1898_wire)   $flowthrough 
    $delay SHL_u136_u136_1898_inst 0
    // ((old_bigresponsebits << 1 ) | bigresponsebits)
    |[OR_u136_u136_1900_inst] (SHL_u136_u136_1898_wire bigresponsebits_1894) (new_bigresponsebits_1901)   $flowthrough 
    $delay OR_u136_u136_1900_inst 0
    // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 657
    // responseEnable
    $ioport $out [WPIPE_responseEnable_1907_inst]  (R_ZERO_1_1908_wire_constant) (responseEnable) 
    // 			bigResponseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 658
    // bigResponseEnable
    $ioport $out [WPIPE_bigResponseEnable_1910_inst]  (R_ZERO_1_1911_wire_constant) (bigResponseEnable) 
    // 			$volatile CID_CRC := ( $slice bigResponse 7 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 660
    // ( $slice bigResponse 7 1 ) 
    [:] [slice_1917_inst] (new_bigresponsebits_1901 7 1) (CID_CRC_1918)  $flowthrough
    $delay slice_1917_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (commandRegVal & _h8 )
    &[AND_u8_u8_1922_inst] (commandRegVal_1470 konst_1921_wire_constant) (AND_u8_u8_1922_wire)   $flowthrough 
    $delay AND_u8_u8_1922_inst 0
    // ((commandRegVal & _h8 ) == 8 )
    ==[EQ_u8_u1_1924_inst] (AND_u8_u8_1922_wire konst_1923_wire_constant) (EQ_u8_u1_1924_wire)   $flowthrough 
    $delay EQ_u8_u1_1924_inst 0
    ==0? [if_stmt_1919_branch] (EQ_u8_u1_1924_wire)
    // 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
    //  file .Aa/sdhc.opt.aa, line 662
    // ( $slice bigResponse 127 8 ) 
    [:] [slice_1926_inst] (new_bigresponsebits_1901 127 8) (slice_1926_wire)  $flowthrough
    $delay slice_1926_inst 0
    $call [call_stmt_1928_call] $module generate_crc_7_120(slice_1926_wire) (R2_CRC_1928)  
    $delay call_stmt_1928_call 4
    $buffering  $in call_stmt_1928_call slice_1926_wire 1
    $buffering  $out call_stmt_1928_call R2_CRC_1928 1
    // 			CommandCRCError1 := ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 663
    // (CID_CRC == R2_CRC)
    ==[EQ_u7_u1_1932_inst] (CID_CRC_1918 R2_CRC_1928) (EQ_u7_u1_1932_wire)   $flowthrough 
    $delay EQ_u7_u1_1932_inst 0
    // ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  ) 
    ? [MUX_1935_inst] (EQ_u7_u1_1932_wire konst_1933_wire_constant konst_1934_wire_constant) (CommandCRCError1_1936) 
    $buffering  $out MUX_1935_inst CommandCRCError1_1936 1
    // 			commandEndBitError1 := ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 665
    // (bigResponse [] 0 )
    [][BITSEL_u136_u1_1941_inst] (new_bigresponsebits_1901 konst_1940_wire_constant) (BITSEL_u136_u1_1941_wire)   $flowthrough 
    $delay BITSEL_u136_u1_1941_inst 0
    // ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
    ? [MUX_1945_inst] (BITSEL_u136_u1_1941_wire R_ZERO_8_1942_wire_constant type_cast_1944_wire_constant) (commandEndBitError1_1946) 
    $buffering  $out MUX_1945_inst commandEndBitError1_1946 1
    // 			errorInterruptStatusVar_3 := (CommandCRCError1 | commandEndBitError1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 666
    // (CommandCRCError1 | commandEndBitError1)
    |[OR_u8_u8_1950_inst] (CommandCRCError1_1936 commandEndBitError1_1946) (errorInterruptStatusVar_3_1951)   
    $buffering  $out OR_u8_u8_1950_inst errorInterruptStatusVar_3_1951 1
    $delay OR_u8_u8_1950_inst 1
    // datapath-instances for block %command_generator%command%big_resp
    //  file .Aa/sdhc.opt.aa, line 667
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 669
    // (next_k < 15 )
    <[ULT_u8_u1_1988_inst] (next_k_1984 konst_1987_wire_constant) (ULT_u8_u1_1988_wire)   $flowthrough 
    $delay ULT_u8_u1_1988_inst 0
    ==0? [do_while_stmt_1953_branch] (ULT_u8_u1_1988_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 671
    // 				$phi k := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_k $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 672
    # := [next_k_1984_1959_buf] (next_k_1984) (next_k_1984_1959_buffered)     $fullrate
    $buffering $out next_k_1984_1959_buf next_k_1984_1959_buffered  1
    # $phi [phi_stmt_1955] (type_cast_1958_wire_constant next_k_1984_1959_buffered) ( k_1955 ) $fullrate
    // $buffering  $out phi_stmt_1955 k_1955 2
    // 				$phi temp := 				  ( $slice bigResponse 127 8 )  $on   $entry 				  next_temp $on   $loopback 
    // type of target is $uint<120>
    //  file .Aa/sdhc.opt.aa, line 674
    // ( $slice bigResponse 127 8 ) 
    [:] [slice_1963_inst] (new_bigresponsebits_1901 127 8) (slice_1963_wire)  $fullrate
    $buffering  $out slice_1963_inst slice_1963_wire 1
    $delay slice_1963_inst 1
    # := [next_temp_1979_1964_buf] (next_temp_1979) (next_temp_1979_1964_buffered)     $fullrate
    $buffering $out next_temp_1979_1964_buf next_temp_1979_1964_buffered  1
    # $phi [phi_stmt_1960] (slice_1963_wire next_temp_1979_1964_buffered) ( temp_1960 ) $fullrate
    // $buffering  $out phi_stmt_1960 temp_1960 2
    // 				$volatile address := (16  + k) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 677
    // (16  + k)
    +[ADD_u8_u8_1969_inst] (konst_1967_wire_constant k_1955) (address_1970)   $flowthrough 
    $delay ADD_u8_u8_1969_inst 0
    // 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 678
    // ( $slice temp 7 0 ) 
    [:] [slice_1973_inst] (temp_1960 7 0) (slice_1973_wire)  $flowthrough
    $delay slice_1973_inst 0
    $call [call_stmt_1974_call] $module writeSDHCRegisters(address_1970 slice_1973_wire) ()   $fullrate
    $delay call_stmt_1974_call 4
    $buffering  $in call_stmt_1974_call address_1970 1
    $buffering  $in call_stmt_1974_call slice_1973_wire 1
    // 				$volatile next_temp := (temp >> 8 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 679
    // (temp >> 8 )
    >>[LSHR_u120_u120_1978_inst] (temp_1960 konst_1977_wire_constant) (next_temp_1979)   $flowthrough 
    $delay LSHR_u120_u120_1978_inst 0
    // 				$volatile next_k := (k + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 680
    // (k + 1 )
    +[ADD_u8_u8_1983_inst] (k_1955 konst_1982_wire_constant) (next_k_1984)   $flowthrough 
    $delay ADD_u8_u8_1983_inst 0
    // 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
    //  file .Aa/sdhc.opt.aa, line 683
    $call [call_stmt_1992_call] $module readSDHCRegisters(konst_1990_wire_constant) (tempPresentState3_1992)  
    $delay call_stmt_1992_call 4
    $buffering  $in call_stmt_1992_call konst_1990_wire_constant 1
    $buffering  $out call_stmt_1992_call tempPresentState3_1992 1
    // 			presentState3 := ((tempPresentState3 >> 1 ) << 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 684
    // (tempPresentState3 >> 1 )
    >>[LSHR_u8_u8_1996_inst] (tempPresentState3_1992 konst_1995_wire_constant) (LSHR_u8_u8_1996_wire)   $flowthrough 
    $delay LSHR_u8_u8_1996_inst 0
    // ((tempPresentState3 >> 1 ) << 1 )
    <<[SHL_u8_u8_1998_inst] (LSHR_u8_u8_1996_wire konst_1997_wire_constant) (presentState3_1999)   
    $buffering  $out SHL_u8_u8_1998_inst presentState3_1999 1
    $delay SHL_u8_u8_1998_inst 1
    // 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
    //  file .Aa/sdhc.opt.aa, line 685
    $call [call_stmt_2002_call] $module readSDHCRegisters(konst_2000_wire_constant) (normalInterrupt3_2002)  
    $delay call_stmt_2002_call 4
    $buffering  $in call_stmt_2002_call konst_2000_wire_constant 1
    $buffering  $out call_stmt_2002_call normalInterrupt3_2002 1
    // 			$call writeSDHCRegisters (36  presentState3 ) () 
    //  file .Aa/sdhc.opt.aa, line 686
    $call [call_stmt_2005_call] $module writeSDHCRegisters(konst_2003_wire_constant presentState3_1999) ()  
    $delay call_stmt_2005_call 4
    $buffering  $in call_stmt_2005_call konst_2003_wire_constant 1
    $buffering  $in call_stmt_2005_call presentState3_1999 1
    // 			normalInterruptStatusVar_3 := (normalInterrupt3 | _h01 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 687
    // (normalInterrupt3 | _h01 )
    |[OR_u8_u8_2009_inst] (normalInterrupt3_2002 konst_2008_wire_constant) (normalInterruptStatusVar_3_2010)   
    $buffering  $out OR_u8_u8_2009_inst normalInterruptStatusVar_3_2010 1
    $delay OR_u8_u8_2009_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (response_type == 0 )
    ==[EQ_u2_u1_2016_inst] (response_type_1570 konst_2015_wire_constant) (EQ_u2_u1_2016_wire)   $flowthrough 
    $delay EQ_u2_u1_2016_inst 0
    ==0? [if_stmt_2013_branch] (EQ_u2_u1_2016_wire)
    // 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
    //  file .Aa/sdhc.opt.aa, line 691
    $call [call_stmt_2019_call] $module readSDHCRegisters(konst_2017_wire_constant) (tempPresentState1_2019)  
    $delay call_stmt_2019_call 4
    $buffering  $in call_stmt_2019_call konst_2017_wire_constant 1
    $buffering  $out call_stmt_2019_call tempPresentState1_2019 1
    // 			$volatile presentState1 := ((tempPresentState1 >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 692
    // (tempPresentState1 >> 1 )
    >>[LSHR_u8_u8_2023_inst] (tempPresentState1_2019 konst_2022_wire_constant) (LSHR_u8_u8_2023_wire)   $flowthrough 
    $delay LSHR_u8_u8_2023_inst 0
    // ((tempPresentState1 >> 1 ) << 1 )
    <<[SHL_u8_u8_2025_inst] (LSHR_u8_u8_2023_wire konst_2024_wire_constant) (presentState1_2026)   $flowthrough 
    $delay SHL_u8_u8_2025_inst 0
    // 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
    //  file .Aa/sdhc.opt.aa, line 693
    $call [call_stmt_2029_call] $module readSDHCRegisters(konst_2027_wire_constant) (normalInterrupt1_2029)  
    $delay call_stmt_2029_call 4
    $buffering  $in call_stmt_2029_call konst_2027_wire_constant 1
    $buffering  $out call_stmt_2029_call normalInterrupt1_2029 1
    // 			$call writeSDHCRegisters (36  presentState1 ) () 
    //  file .Aa/sdhc.opt.aa, line 694
    $call [call_stmt_2032_call] $module writeSDHCRegisters(konst_2030_wire_constant presentState1_2026) ()  
    $delay call_stmt_2032_call 4
    $buffering  $in call_stmt_2032_call konst_2030_wire_constant 1
    $buffering  $in call_stmt_2032_call presentState1_2026 1
    // 			$volatile normalInterruptStatusVar_1 := (normalInterrupt1 | _h01 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 695
    // (normalInterrupt1 | _h01 )
    |[OR_u8_u8_2036_inst] (normalInterrupt1_2029 konst_2035_wire_constant) (normalInterruptStatusVar_1_2037)   $flowthrough 
    $delay OR_u8_u8_2036_inst 0
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 701
    // 			$phi normalInterruptStatusVar1 := 			  normalInterruptStatusVar_1 $on   normalInterruptResponse1 			  normalInterruptStatusVar_2 $on   normalInterruptResponse2 			  normalInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 702
    # := [normalInterruptStatusVar_1_2037_2048_buf] (normalInterruptStatusVar_1_2037) (normalInterruptStatusVar_1_2037_2048_buffered)    
    # := [normalInterruptStatusVar_2_1845_2049_buf] (normalInterruptStatusVar_2_1845) (normalInterruptStatusVar_2_1845_2049_buffered)    
    # := [normalInterruptStatusVar_3_2010_2050_buf] (normalInterruptStatusVar_3_2010) (normalInterruptStatusVar_3_2010_2050_buffered)    
    $phi [phi_stmt_2046] (normalInterruptStatusVar_1_2037_2048_buffered normalInterruptStatusVar_2_1845_2049_buffered normalInterruptStatusVar_3_2010_2050_buffered) ( normalInterruptStatusVar1 ) 
    // 			$phi errorInterruptStatusVar1 := 			  errorInterruptStatusVar_1 $on   normalInterruptResponse1 			  errorInterruptStatusVar_2 $on   normalInterruptResponse2 			  errorInterruptStatusVar_3 $on   normalInterruptResponse3 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 704
    # := [errorInterruptStatusVar_2_1852_2054_buf] (errorInterruptStatusVar_2_1852) (errorInterruptStatusVar_2_1852_2054_buffered)    
    # := [errorInterruptStatusVar_3_1951_2055_buf] (errorInterruptStatusVar_3_1951) (errorInterruptStatusVar_3_1951_2055_buffered)    
    $phi [phi_stmt_2051] (errorInterruptStatusVar_1_2040 errorInterruptStatusVar_2_1852_2054_buffered errorInterruptStatusVar_3_1951_2055_buffered) ( errorInterruptStatusVar1 ) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (dataPresentSelect == 1 )
    ==[EQ_u1_u1_2060_inst] (dataPresentSelect_1575 konst_2059_wire_constant) (EQ_u1_u1_2060_wire)   $flowthrough 
    $delay EQ_u1_u1_2060_inst 0
    ==0? [if_stmt_2057_branch] (EQ_u1_u1_2060_wire)
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (txOrRX == 1 )
    ==[EQ_u1_u1_2064_inst] (txOrRX_1588 konst_2063_wire_constant) (EQ_u1_u1_2064_wire)   $flowthrough 
    $delay EQ_u1_u1_2064_inst 0
    // (response_type != 3 )
    !=[NEQ_u2_u1_2067_inst] (response_type_1570 konst_2066_wire_constant) (NEQ_u2_u1_2067_wire)   $flowthrough 
    $delay NEQ_u2_u1_2067_inst 0
    // ((txOrRX == 1 ) & (response_type != 3 ))
    &[AND_u1_u1_2068_inst] (EQ_u1_u1_2064_wire NEQ_u2_u1_2067_wire) (AND_u1_u1_2068_wire)   $flowthrough 
    $delay AND_u1_u1_2068_inst 0
    ==0? [if_stmt_2061_branch] (AND_u1_u1_2068_wire)
    // 			$call readSDHCRegisters (12  ) (tempTransfer ) 
    //  file .Aa/sdhc.opt.aa, line 709
    $call [call_stmt_2071_call] $module readSDHCRegisters(konst_2069_wire_constant) (tempTransfer_2071)  
    $delay call_stmt_2071_call 4
    $buffering  $in call_stmt_2071_call konst_2069_wire_constant 1
    $buffering  $out call_stmt_2071_call tempTransfer_2071 1
    // 			singleMultipleReadBlock := (  $bitreduce |  (tempTransfer & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 710
    // (tempTransfer & _h20 )
    &[AND_u8_u8_2075_inst] (tempTransfer_2071 konst_2074_wire_constant) (AND_u8_u8_2075_wire)   $flowthrough 
    $delay AND_u8_u8_2075_inst 0
    // (  $bitreduce |  (tempTransfer & _h20 ) )
    !| [BITREDUCEOR_u8_u1_2076_inst] (AND_u8_u8_2075_wire) (singleMultipleReadBlock_2077)  
    $buffering  $out BITREDUCEOR_u8_u1_2076_inst singleMultipleReadBlock_2077 1
    $delay BITREDUCEOR_u8_u1_2076_inst 1
    // 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
    //  file .Aa/sdhc.opt.aa, line 711
    $call [call_stmt_2080_call] $module dataRx(singleMultipleReadBlock_2077) (dataErrorInterruptStatusVar1)  
    $delay call_stmt_2080_call 4
    $buffering  $in call_stmt_2080_call singleMultipleReadBlock_2077 1
    $buffering  $out call_stmt_2080_call dataErrorInterruptStatusVar1 1
    // 			dataRxEnrty1 := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 712
    // dataRxEnrty1
    $store [STORE_dataRxEnrty1_2081_store_0] $to memory_space_1 (STORE_dataRxEnrty1_2081_word_address_0 STORE_dataRxEnrty1_2081_data_0) 
    $delay STORE_dataRxEnrty1_2081_store_0 5
    &/ [STORE_dataRxEnrty1_2081_gather_scatter] (R_ONE_1_2082_wire_constant) (STORE_dataRxEnrty1_2081_data_0) 
    $flowthrough 
    // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 713
    // dataRxEnrty2
    $store [STORE_dataRxEnrty2_2084_store_0] $to memory_space_2 (STORE_dataRxEnrty2_2084_word_address_0 STORE_dataRxEnrty2_2084_data_0) 
    $delay STORE_dataRxEnrty2_2084_store_0 5
    &/ [STORE_dataRxEnrty2_2084_gather_scatter] (R_ZERO_1_2085_wire_constant) (STORE_dataRxEnrty2_2084_data_0) 
    $flowthrough 
    // 			transferCompleteData := ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 714
    // ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
    ? [MUX_2092_inst] (singleMultipleReadBlock_2077 type_cast_2090_wire_constant R_ZERO_8_2091_wire_constant) (transferCompleteData_2093) 
    $buffering  $out MUX_2092_inst transferCompleteData_2093 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 28610656
    // (singleMultipleReadBlock == 1 )
    ==[EQ_u1_u1_2097_inst] (singleMultipleReadBlock_2077 konst_2096_wire_constant) (EQ_u1_u1_2097_wire)   $flowthrough 
    $delay EQ_u1_u1_2097_inst 0
    ==0? [if_stmt_2094_branch] (EQ_u1_u1_2097_wire)
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 716
    // 				$phi B := 				  ONE_8 $on   $entry 				  next_B $on   loopBlock1 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 717
    # := [next_B_2124_2101_buf] (next_B_2124) (next_B_2124_2101_buffered)    
    $phi [phi_stmt_2099] (next_B_2124_2101_buffered R_ONE_8_2102_wire_constant) ( B_2099 ) 
    // 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock1 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 719
    # := [readBlockCount_2119_2105_buf] (readBlockCount_2119) (readBlockCount_2119_2105_buffered)    
    $phi [phi_stmt_2103] (readBlockCount_2119_2105_buffered type_cast_2107_wire_constant) ( readNewBlockCount_2103 ) 
    // 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 722
    // (6  + B)
    +[ADD_u8_u8_2111_inst] (konst_2109_wire_constant B_2099) (ADD_u8_u8_2111_wire)   $flowthrough 
    $delay ADD_u8_u8_2111_inst 0
    $call [call_stmt_2113_call] $module readSDHCRegisters(ADD_u8_u8_2111_wire) (readnewBlockCountTemp_2113)  
    $delay call_stmt_2113_call 4
    $buffering  $in call_stmt_2113_call ADD_u8_u8_2111_wire 1
    $buffering  $out call_stmt_2113_call readnewBlockCountTemp_2113 1
    // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 723
    // ( $slice readNewBlockCount 7 0 ) 
    [:] [slice_2116_inst] (readNewBlockCount_2103 7 0) (slice_2116_wire)  $flowthrough
    $delay slice_2116_inst 0
    // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
    &&[CONCAT_u8_u16_2118_inst] (slice_2116_wire readnewBlockCountTemp_2113) (readBlockCount_2119)   $flowthrough 
    $delay CONCAT_u8_u16_2118_inst 0
    // 			$volatile next_B := (B - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 724
    // (B - 1 )
    -[SUB_u8_u8_2123_inst] (B_2099 konst_2122_wire_constant) (next_B_2124)   $flowthrough 
    $delay SUB_u8_u8_2123_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 28403536
    // (B != 0 )
    !=[NEQ_u8_u1_2128_inst] (B_2099 konst_2127_wire_constant) (NEQ_u8_u1_2128_wire)   $flowthrough 
    $delay NEQ_u8_u1_2128_inst 0
    ==0? [if_stmt_2125_branch] (NEQ_u8_u1_2128_wire)
    // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 728
    // (readBlockCount - 1 )
    -[SUB_u16_u16_2134_inst] (readBlockCount_2119 konst_2133_wire_constant) (newReadBlockCount_2135)   
    $buffering  $out SUB_u16_u16_2134_inst newReadBlockCount_2135 1
    $delay SUB_u16_u16_2134_inst 1
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 729
    // ( $slice newReadBlockCount 15 8 ) 
    [:] [slice_2138_inst] (newReadBlockCount_2135 15 8) (slice_2138_wire)  $flowthrough
    $delay slice_2138_inst 0
    $call [call_stmt_2139_call] $module writeSDHCRegisters(konst_2136_wire_constant slice_2138_wire) ()  
    $delay call_stmt_2139_call 4
    $buffering  $in call_stmt_2139_call konst_2136_wire_constant 1
    $buffering  $in call_stmt_2139_call slice_2138_wire 1
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 730
    // ( $slice newReadBlockCount 7 0 ) 
    [:] [slice_2142_inst] (newReadBlockCount_2135 7 0) (slice_2142_wire)  $flowthrough
    $delay slice_2142_inst 0
    $call [call_stmt_2143_call] $module writeSDHCRegisters(konst_2140_wire_constant slice_2142_wire) ()  
    $delay call_stmt_2143_call 4
    $buffering  $in call_stmt_2143_call konst_2140_wire_constant 1
    $buffering  $in call_stmt_2143_call slice_2142_wire 1
    // 			dataTransferComplete := ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 733
    // (response_type == 3 )
    ==[EQ_u2_u1_2149_inst] (response_type_1570 konst_2148_wire_constant) (EQ_u2_u1_2149_wire)   $flowthrough 
    $delay EQ_u2_u1_2149_inst 0
    // ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData ) 
    ? [MUX_2153_inst] (EQ_u2_u1_2149_wire type_cast_2151_wire_constant transferCompleteData_2093) (dataTransferComplete) 
    $buffering  $out MUX_2153_inst dataTransferComplete 1
  }
  // end data-path
  // 		$call readSDHCRegisters (14  ) (commandRegVal ) 
  //  file .Aa/sdhc.opt.aa, line 514
  call_stmt_1470_call <=> (branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1470_Sample/crr branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1470_Update/ccr) (branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1470_Sample/cra branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1470_Update/cca)
  // 		$call readSDHCRegisters (15  ) (commandRegVal1 ) 
  //  file .Aa/sdhc.opt.aa, line 515
  call_stmt_1473_call <=> (branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1473_Sample/crr branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1473_Update/ccr) (branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1473_Sample/cra branch_block_stmt_1467/call_stmt_1470_to_assign_stmt_1483/call_stmt_1473_Update/cca)
  // 		$volatile tempVal := ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 516
  // ((ZERO_32 && ZERO_1) && (ONE_1 && ( $slice commandRegVal1 5 0 ) ))
  // (ONE_1 && ( $slice commandRegVal1 5 0 ) )
  // commandRegVal1
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 517
  next_C_1510_1487_buf <=> (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1485/phi_stmt_1485_sources/Interlock/Sample/req branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1485/phi_stmt_1485_sources/Interlock/Update/req) (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1485/phi_stmt_1485_sources/Interlock/Sample/ack branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1485/phi_stmt_1485_sources/Interlock/Update/ack)
  phi_stmt_1485 <=> (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1485/phi_stmt_1485_req branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1485/phi_stmt_1485_req) (branch_block_stmt_1467/merge_stmt_1484_PhiAck/phi_stmt_1485_ack)
  command40bits_1505_1492_buf <=> (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Sample/req branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Update/req) (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Sample/ack branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Update/ack)
  tempVal_1483_1493_buf <=> (branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Sample/req branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Update/req) (branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Sample/ack branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1490/phi_stmt_1490_sources/Interlock/Update/ack)
  phi_stmt_1490 <=> (branch_block_stmt_1467/loopcommand40bits_PhiReq/phi_stmt_1490/phi_stmt_1490_req branch_block_stmt_1467/merge_stmt_1484__entry___PhiReq/phi_stmt_1490/phi_stmt_1490_req) (branch_block_stmt_1467/merge_stmt_1484_PhiAck/phi_stmt_1490_ack)
  // 		$call readSDHCRegisters ((8  + C) ) (tempArgument ) 
  //  file .Aa/sdhc.opt.aa, line 523
  // (8  + C)
  // C
  call_stmt_1499_call <=> (branch_block_stmt_1467/call_stmt_1499_to_assign_stmt_1510/call_stmt_1499_Sample/crr branch_block_stmt_1467/call_stmt_1499_to_assign_stmt_1510/call_stmt_1499_Update/ccr) (branch_block_stmt_1467/call_stmt_1499_to_assign_stmt_1510/call_stmt_1499_Sample/cra branch_block_stmt_1467/call_stmt_1499_to_assign_stmt_1510/call_stmt_1499_Update/cca)
  // 		$volatile command40bits := (( $slice newCommand40bits 31 0 )  && tempArgument) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 524
  // (( $slice newCommand40bits 31 0 )  && tempArgument)
  // newCommand40bits
  // tempArgument
  // 		$volatile next_C := (C - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 525
  // (C - 1 )
  // C
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (C != 0 )
  if_stmt_1511_branch <=> (branch_block_stmt_1467/if_stmt_1511_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1511_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1511_if_link/if_choice_transition)
  // 		$call generate_crc_7 (command40bits ) (crc7 ) 
  //  file .Aa/sdhc.opt.aa, line 529
  // command40bits
  call_stmt_1519_call <=> (branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/call_stmt_1519_Sample/crr branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/call_stmt_1519_Update/ccr) (branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/call_stmt_1519_Sample/cra branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/call_stmt_1519_Update/cca)
  // 		$volatile commandbits := ((command40bits && crc7) && ONE_1) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 530
  // ((command40bits && crc7) && ONE_1)
  // (command40bits && crc7)
  // command40bits
  // crc7
  // 		oe := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 531
  // oe
  WPIPE_oe_1527_inst <=> (branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/WPIPE_oe_1527_Sample/req branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/WPIPE_oe_1527_Update/req) (branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/WPIPE_oe_1527_Sample/ack branch_block_stmt_1467/call_stmt_1519_to_assign_stmt_1529/WPIPE_oe_1527_Update/ack)
  // CP-DP links for do-while  do_while_stmt_1531
  //  file .Aa/sdhc.opt.aa, line 534
  phi_stmt_1533 <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1533_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1533_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1533_phi_mux_ack)
  next_J_1546_1536_buf <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_next_J_1536_Sample/req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_next_J_1536_Update/req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_next_J_1536_Sample/ack branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_next_J_1536_Update/ack)
  phi_stmt_1537 <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1537_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1537_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/phi_stmt_1537_phi_mux_ack)
  commandbits_1526_1539_buf <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_commandbits_1539_Sample/req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_commandbits_1539_Update/req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_commandbits_1539_Sample/ack branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_commandbits_1539_Update/ack)
  new_commandbits_1558_1540_buf <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_new_commandbits_1540_Sample/req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_new_commandbits_1540_Update/req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_new_commandbits_1540_Sample/ack branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/R_new_commandbits_1540_Update/ack)
  // 				$volatile next_J := (J + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 542
  // (J + 1 )
  // J
  // 				$volatile bit := ( $slice old_commandbits 47 47 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 543
  // old_commandbits
  // 				commandTx := bit $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 544
  // bit
  // commandTx
  WPIPE_commandTx_1551_inst <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/WPIPE_commandTx_1551_Sample/req branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/WPIPE_commandTx_1551_Update/req) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/WPIPE_commandTx_1551_Sample/ack branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/WPIPE_commandTx_1551_Update/ack)
  // 				$volatile new_commandbits := (old_commandbits << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 545
  // (old_commandbits << 1 )
  // old_commandbits
  // (next_J < 48 )
  // next_J
  do_while_stmt_1531_branch <=> (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/do_while_stmt_1531_loop_body/condition_evaluated) (branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/loop_exit/ack branch_block_stmt_1467/branch_block_stmt_1530/do_while_stmt_1531/loop_taken/ack)
  // 		oe := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 548
  // oe
  WPIPE_oe_1564_inst <=> (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/WPIPE_oe_1564_Sample/req branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/WPIPE_oe_1564_Update/req) (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/WPIPE_oe_1564_Sample/ack branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/WPIPE_oe_1564_Update/ack)
  // 		response_type := ( $slice commandRegVal 1 0 )  $buffering 1// bits of buffering = 2. 
  //  file .Aa/sdhc.opt.aa, line 549
  // commandRegVal
  // ( $slice commandRegVal 1 0 ) 
  slice_1569_inst <=> (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/slice_1569_Sample/rr branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/slice_1569_Update/cr) (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/slice_1569_Sample/ra branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/slice_1569_Update/ca)
  // 		dataPresentSelect := (commandRegVal [] 5 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 550
  // (commandRegVal [] 5 )
  // commandRegVal
  BITSEL_u8_u1_1574_inst <=> (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/BITSEL_u8_u1_1574_Sample/rr branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/BITSEL_u8_u1_1574_Update/cr) (branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/BITSEL_u8_u1_1574_Sample/ra branch_block_stmt_1467/assign_stmt_1566_to_assign_stmt_1575/BITSEL_u8_u1_1574_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1349233824
  // (dataPresentSelect == 1 )
  if_stmt_1576_branch <=> (branch_block_stmt_1467/if_stmt_1576_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1576_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1576_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (12  ) (transferVal ) 
  //  file .Aa/sdhc.opt.aa, line 552
  call_stmt_1582_call <=> (branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/call_stmt_1582_Sample/crr branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/call_stmt_1582_Update/ccr) (branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/call_stmt_1582_Sample/cra branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/call_stmt_1582_Update/cca)
  // 			txOrRX := (  $bitreduce |  (transferVal & _h10 ) ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 553
  // (transferVal & _h10 )
  // transferVal
  // (  $bitreduce |  (transferVal & _h10 ) )
  BITREDUCEOR_u8_u1_1587_inst <=> (branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/BITREDUCEOR_u8_u1_1587_Sample/rr branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/BITREDUCEOR_u8_u1_1587_Update/cr) (branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/BITREDUCEOR_u8_u1_1587_Sample/ra branch_block_stmt_1467/call_stmt_1582_to_assign_stmt_1588/BITREDUCEOR_u8_u1_1587_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 554
  next_E_1615_1593_buf <=> (branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1590/phi_stmt_1590_sources/Interlock/Sample/req branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1590/phi_stmt_1590_sources/Interlock/Update/req) (branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1590/phi_stmt_1590_sources/Interlock/Sample/ack branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1590/phi_stmt_1590_sources/Interlock/Update/ack)
  phi_stmt_1590 <=> (branch_block_stmt_1467/merge_stmt_1589__entry___PhiReq/phi_stmt_1590/phi_stmt_1590_req branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1590/phi_stmt_1590_req) (branch_block_stmt_1467/merge_stmt_1589_PhiAck/phi_stmt_1590_ack)
  readPresentState_1610_1598_buf <=> (branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1594/phi_stmt_1594_sources/Interlock/Sample/req branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1594/phi_stmt_1594_sources/Interlock/Update/req) (branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1594/phi_stmt_1594_sources/Interlock/Sample/ack branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1594/phi_stmt_1594_sources/Interlock/Update/ack)
  phi_stmt_1594 <=> (branch_block_stmt_1467/merge_stmt_1589__entry___PhiReq/phi_stmt_1594/phi_stmt_1594_req branch_block_stmt_1467/loopPresent_PhiReq/phi_stmt_1594/phi_stmt_1594_req) (branch_block_stmt_1467/merge_stmt_1589_PhiAck/phi_stmt_1594_ack)
  // 			$call readSDHCRegisters ((36  + E) ) (readPresentStateTemp ) 
  //  file .Aa/sdhc.opt.aa, line 560
  // (36  + E)
  // E
  call_stmt_1604_call <=> (branch_block_stmt_1467/call_stmt_1604_to_assign_stmt_1615/call_stmt_1604_Sample/crr branch_block_stmt_1467/call_stmt_1604_to_assign_stmt_1615/call_stmt_1604_Update/ccr) (branch_block_stmt_1467/call_stmt_1604_to_assign_stmt_1615/call_stmt_1604_Sample/cra branch_block_stmt_1467/call_stmt_1604_to_assign_stmt_1615/call_stmt_1604_Update/cca)
  // 			$volatile readPresentState := (( $slice readNewPresent 7 0 )  && readPresentStateTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 561
  // (( $slice readNewPresent 7 0 )  && readPresentStateTemp)
  // readNewPresent
  // readPresentStateTemp
  // 			$volatile next_E := (E - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 562
  // (E - 1 )
  // E
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (E != 0 )
  if_stmt_1616_branch <=> (branch_block_stmt_1467/if_stmt_1616_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1616_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1616_if_link/if_choice_transition)
  // 			$volatile presentState0Var := ( $slice readPresentState 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 566
  // readPresentState
  // 			$volatile presentState1Var := ( $slice readPresentState 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 567
  // readPresentState
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (response_type != 3 )
  if_stmt_1630_branch <=> (branch_block_stmt_1467/if_stmt_1630_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1630_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1630_if_link/if_choice_transition)
  // 			$volatile tempPstate := ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 569
  // txOrRX
  // (presentState1Var | _h02 )
  // presentState1Var
  // (presentState1Var | _h01 )
  // presentState1Var
  // ( $mux txOrRX (presentState1Var | _h02 )  (presentState1Var | _h01 ) ) 
  // 			$call writeSDHCRegisters (37  tempPstate ) () 
  //  file .Aa/sdhc.opt.aa, line 570
  // tempPstate
  call_stmt_1646_call <=> (branch_block_stmt_1467/assign_stmt_1643_to_call_stmt_1646/call_stmt_1646_Sample/crr branch_block_stmt_1467/assign_stmt_1643_to_call_stmt_1646/call_stmt_1646_Update/ccr) (branch_block_stmt_1467/assign_stmt_1643_to_call_stmt_1646/call_stmt_1646_Sample/cra branch_block_stmt_1467/assign_stmt_1643_to_call_stmt_1646/call_stmt_1646_Update/cca)
  // 			$call writeSDHCRegisters (36  (presentState0Var | _h06 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 572
  // (presentState0Var | _h06 )
  // presentState0Var
  call_stmt_1652_call <=> (branch_block_stmt_1467/call_stmt_1652/call_stmt_1652_Sample/crr branch_block_stmt_1467/call_stmt_1652/call_stmt_1652_Update/ccr) (branch_block_stmt_1467/call_stmt_1652/call_stmt_1652_Sample/cra branch_block_stmt_1467/call_stmt_1652/call_stmt_1652_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 575
  // (response_type == 2 )
  // (response_type == 3 )
  // ((response_type == 2 ) | (response_type == 3 ))
  if_stmt_1657_branch <=> (branch_block_stmt_1467/if_stmt_1657_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1657_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1657_if_link/if_choice_transition)
  // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 576
  // responseEnable
  WPIPE_responseEnable_1665_inst <=> (branch_block_stmt_1467/assign_stmt_1667/WPIPE_responseEnable_1665_Sample/req branch_block_stmt_1467/assign_stmt_1667/WPIPE_responseEnable_1665_Update/req) (branch_block_stmt_1467/assign_stmt_1667/WPIPE_responseEnable_1665_Sample/ack branch_block_stmt_1467/assign_stmt_1667/WPIPE_responseEnable_1665_Update/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (response_type == 3 )
  if_stmt_1668_branch <=> (branch_block_stmt_1467/if_stmt_1668_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1668_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1668_if_link/if_choice_transition)
  // 			busyResponse := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 578
  // busyResponse
  WPIPE_busyResponse_1672_inst <=> (branch_block_stmt_1467/assign_stmt_1674/WPIPE_busyResponse_1672_Sample/req branch_block_stmt_1467/assign_stmt_1674/WPIPE_busyResponse_1672_Update/req) (branch_block_stmt_1467/assign_stmt_1674/WPIPE_busyResponse_1672_Sample/ack branch_block_stmt_1467/assign_stmt_1674/WPIPE_busyResponse_1672_Update/ack)
  // CP-DP links for do-while  do_while_stmt_1677
  //  file .Aa/sdhc.opt.aa, line 582
  phi_stmt_1679 <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1679_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1679_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1679_phi_mux_ack)
  next_J_1695_1683_buf <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_next_J_1683_Sample/req branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_next_J_1683_Update/req) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_next_J_1683_Sample/ack branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_next_J_1683_Update/ack)
  phi_stmt_1684 <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1684_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1684_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/phi_stmt_1684_phi_mux_ack)
  new_responsebits_1712_1689_buf <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_new_responsebits_1689_Sample/req branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_new_responsebits_1689_Update/req) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_new_responsebits_1689_Sample/ack branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/R_new_responsebits_1689_Update/ack)
  // 				$volatile next_J := (J + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 590
  // (J + 1 )
  // J
  // 				responsebit := responseRx $buffering 2// bits of buffering = 2. 
  //  file .Aa/sdhc.opt.aa, line 591
  // responseRx
  RPIPE_responseRx_1697_inst <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/RPIPE_responseRx_1697_Sample/rr branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/RPIPE_responseRx_1697_Update/cr) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/RPIPE_responseRx_1697_Sample/ra branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/RPIPE_responseRx_1697_Update/ca)
  // 				$volatile responsebits := (($bitcast ($uint<47>) 0  ) && responsebit) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 592
  // (($bitcast ($uint<47>) 0  ) && responsebit)
  // responsebit
  // 				$volatile new_responsebits := ((old_responsebits << 1 ) | responsebits) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 593
  // ((old_responsebits << 1 ) | responsebits)
  // (old_responsebits << 1 )
  // old_responsebits
  // responsebits
  // (next_J < 48 )
  // next_J
  do_while_stmt_1677_branch <=> (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/do_while_stmt_1677_loop_body/condition_evaluated) (branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/loop_exit/ack branch_block_stmt_1467/branch_block_stmt_1676/do_while_stmt_1677/loop_taken/ack)
  // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 597
  // responseEnable
  WPIPE_responseEnable_1718_inst <=> (branch_block_stmt_1467/assign_stmt_1720/WPIPE_responseEnable_1718_Sample/req branch_block_stmt_1467/assign_stmt_1720/WPIPE_responseEnable_1718_Update/req) (branch_block_stmt_1467/assign_stmt_1720/WPIPE_responseEnable_1718_Sample/ack branch_block_stmt_1467/assign_stmt_1720/WPIPE_responseEnable_1718_Update/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (response_type == 3 )
  if_stmt_1723_branch <=> (branch_block_stmt_1467/if_stmt_1723_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1723_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1723_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 600
  // 			wait := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 602
  // DAT0Rx
  RPIPE_DAT0Rx_1729_inst <=> (branch_block_stmt_1467/assign_stmt_1730/RPIPE_DAT0Rx_1729_Sample/rr branch_block_stmt_1467/assign_stmt_1730/RPIPE_DAT0Rx_1729_Update/cr) (branch_block_stmt_1467/assign_stmt_1730/RPIPE_DAT0Rx_1729_Sample/ra branch_block_stmt_1467/assign_stmt_1730/RPIPE_DAT0Rx_1729_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (wait == ZERO_1)
  if_stmt_1731_branch <=> (branch_block_stmt_1467/if_stmt_1731_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1731_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1731_if_link/if_choice_transition)
  // 			busyResponse := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 606
  // busyResponse
  WPIPE_busyResponse_1737_inst <=> (branch_block_stmt_1467/assign_stmt_1739/WPIPE_busyResponse_1737_Sample/req branch_block_stmt_1467/assign_stmt_1739/WPIPE_busyResponse_1737_Update/req) (branch_block_stmt_1467/assign_stmt_1739/WPIPE_busyResponse_1737_Sample/ack branch_block_stmt_1467/assign_stmt_1739/WPIPE_busyResponse_1737_Update/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (commandRegVal & _h8 )
  // ((commandRegVal & _h8 ) == 8 )
  if_stmt_1741_branch <=> (branch_block_stmt_1467/if_stmt_1741_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1741_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1741_if_link/if_choice_transition)
  // 			$call generate_crc_7 (( $slice response 47 8 )  ) (R1_6_7CRC ) 
  //  file .Aa/sdhc.opt.aa, line 609
  // response
  call_stmt_1750_call <=> (branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/call_stmt_1750_Sample/crr branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/call_stmt_1750_Update/ccr) (branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/call_stmt_1750_Sample/cra branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/call_stmt_1750_Update/cca)
  // 			CommandCRCError := ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 610
  // (( $slice response 7 1 )  == R1_6_7CRC)
  // response
  // R1_6_7CRC
  // ( $mux (( $slice response 7 1 )  == R1_6_7CRC) _b00000000   _b00000010  ) 
  MUX_1758_inst <=> (branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/MUX_1758_start/req branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/MUX_1758_complete/req) (branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/MUX_1758_start/ack branch_block_stmt_1467/call_stmt_1750_to_assign_stmt_1759/MUX_1758_complete/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (commandRegVal & _h10 )
  // ((commandRegVal & _h10 ) == 16 )
  if_stmt_1761_branch <=> (branch_block_stmt_1467/if_stmt_1761_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1761_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1761_if_link/if_choice_transition)
  // 			commandIndexCheck := (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 613
  // (( $slice commandRegVal1 5 0 )  == ( $slice response 45 40 ) )
  // commandRegVal1
  // response
  EQ_u6_u1_1772_inst <=> (branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/EQ_u6_u1_1772_Sample/rr branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/EQ_u6_u1_1772_Update/cr) (branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/EQ_u6_u1_1772_Sample/ra branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/EQ_u6_u1_1772_Update/ca)
  // 			CommandIndexError := ( $mux commandIndexCheck _b00000000   _b00001000  )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 614
  // commandIndexCheck
  // ( $mux commandIndexCheck _b00000000   _b00001000  ) 
  MUX_1778_inst <=> (branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/MUX_1778_start/req branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/MUX_1778_complete/req) (branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/MUX_1778_start/ack branch_block_stmt_1467/assign_stmt_1773_to_assign_stmt_1779/MUX_1778_complete/ack)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 616
  next_R_1809_1785_buf <=> (branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1782/phi_stmt_1782_sources/Interlock/Sample/req branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1782/phi_stmt_1782_sources/Interlock/Update/req) (branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1782/phi_stmt_1782_sources/Interlock/Sample/ack branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1782/phi_stmt_1782_sources/Interlock/Update/ack)
  phi_stmt_1782 <=> (branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1782/phi_stmt_1782_req branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1782/phi_stmt_1782_req) (branch_block_stmt_1467/merge_stmt_1781_PhiAck/phi_stmt_1782_ack)
  // ( $slice response 39 8 ) 
  slice_1789_inst <=> (branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1786/phi_stmt_1786_sources/slice_1789/SplitProtocol/Sample/rr branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1786/phi_stmt_1786_sources/slice_1789/SplitProtocol/Update/cr) (branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1786/phi_stmt_1786_sources/slice_1789/SplitProtocol/Sample/ra branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1786/phi_stmt_1786_sources/slice_1789/SplitProtocol/Update/ca)
  nextResponse_1804_1790_buf <=> (branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1786/phi_stmt_1786_sources/Interlock/Sample/req branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1786/phi_stmt_1786_sources/Interlock/Update/req) (branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1786/phi_stmt_1786_sources/Interlock/Sample/ack branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1786/phi_stmt_1786_sources/Interlock/Update/ack)
  phi_stmt_1786 <=> (branch_block_stmt_1467/merge_stmt_1781__entry___PhiReq/phi_stmt_1786/phi_stmt_1786_req branch_block_stmt_1467/loopResponse_PhiReq/phi_stmt_1786/phi_stmt_1786_req) (branch_block_stmt_1467/merge_stmt_1781_PhiAck/phi_stmt_1786_ack)
  // 			$call writeSDHCRegisters ((16  + R) ( $slice tempResponse 7 0 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 622
  // (16  + R)
  // R
  // tempResponse
  call_stmt_1797_call <=> (branch_block_stmt_1467/call_stmt_1797_to_assign_stmt_1809/call_stmt_1797_Sample/crr branch_block_stmt_1467/call_stmt_1797_to_assign_stmt_1809/call_stmt_1797_Update/ccr) (branch_block_stmt_1467/call_stmt_1797_to_assign_stmt_1809/call_stmt_1797_Sample/cra branch_block_stmt_1467/call_stmt_1797_to_assign_stmt_1809/call_stmt_1797_Update/cca)
  // 			$volatile nextResponse := (ZERO_8 && ( $slice tempResponse 31 8 ) ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 623
  // (ZERO_8 && ( $slice tempResponse 31 8 ) )
  // tempResponse
  // 			$volatile next_R := (R + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 624
  // (R + 1 )
  // R
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_R < 4 )
  if_stmt_1810_branch <=> (branch_block_stmt_1467/if_stmt_1810_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1810_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1810_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (36  ) (tempPresentState2 ) 
  //  file .Aa/sdhc.opt.aa, line 628
  call_stmt_1818_call <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1818_Sample/crr branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1818_Update/ccr) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1818_Sample/cra branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1818_Update/cca)
  // 			$volatile presentState2 := ((tempPresentState2 >> 1 ) << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 629
  // ((tempPresentState2 >> 1 ) << 1 )
  // (tempPresentState2 >> 1 )
  // tempPresentState2
  // 			$call readSDHCRegisters (48  ) (normalInterrupt2 ) 
  //  file .Aa/sdhc.opt.aa, line 630
  call_stmt_1828_call <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1828_Sample/crr branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1828_Update/ccr) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1828_Sample/cra branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1828_Update/cca)
  // 			$call writeSDHCRegisters (36  presentState2 ) () 
  //  file .Aa/sdhc.opt.aa, line 631
  // presentState2
  call_stmt_1831_call <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1831_Sample/crr branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1831_Update/ccr) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1831_Sample/cra branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/call_stmt_1831_Update/cca)
  // 			commandEndBitError := ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 632
  // (response [] 0 )
  // response
  // ( $mux (response [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
  MUX_1839_inst <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/MUX_1839_start/req branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/MUX_1839_complete/req) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/MUX_1839_start/ack branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/MUX_1839_complete/ack)
  // 			normalInterruptStatusVar_2 := (normalInterrupt2 | _h01 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 633
  // (normalInterrupt2 | _h01 )
  // normalInterrupt2
  OR_u8_u8_1844_inst <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1844_Sample/rr branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1844_Update/cr) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1844_Sample/ra branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1844_Update/ca)
  // 			errorInterruptStatusVar_2 := ((CommandIndexError | CommandCRCError) | commandEndBitError) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 634
  // ((CommandIndexError | CommandCRCError) | commandEndBitError)
  // (CommandIndexError | CommandCRCError)
  // CommandIndexError
  // CommandCRCError
  // commandEndBitError
  OR_u8_u8_1851_inst <=> (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1851_Sample/rr branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1851_Update/cr) (branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1851_Sample/ra branch_block_stmt_1467/call_stmt_1818_to_assign_stmt_1852/OR_u8_u8_1851_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 637
  // (response_type == 1 )
  if_stmt_1855_branch <=> (branch_block_stmt_1467/if_stmt_1855_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1855_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1855_if_link/if_choice_transition)
  // 			responseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 638
  // responseEnable
  WPIPE_responseEnable_1859_inst <=> (branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_responseEnable_1859_Sample/req branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_responseEnable_1859_Update/req) (branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_responseEnable_1859_Sample/ack branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_responseEnable_1859_Update/ack)
  // 			bigResponseEnable := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 639
  // bigResponseEnable
  WPIPE_bigResponseEnable_1862_inst <=> (branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_bigResponseEnable_1862_Sample/req branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_bigResponseEnable_1862_Update/req) (branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_bigResponseEnable_1862_Sample/ack branch_block_stmt_1467/assign_stmt_1861_to_assign_stmt_1864/WPIPE_bigResponseEnable_1862_Update/ack)
  // CP-DP links for do-while  do_while_stmt_1866
  //  file .Aa/sdhc.opt.aa, line 642
  phi_stmt_1868 <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1868_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1868_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1868_phi_mux_ack)
  next_J_1884_1872_buf <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_next_J_1872_Sample/req branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_next_J_1872_Update/req) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_next_J_1872_Sample/ack branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_next_J_1872_Update/ack)
  phi_stmt_1873 <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1873_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1873_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/phi_stmt_1873_phi_mux_ack)
  new_bigresponsebits_1901_1878_buf <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_new_bigresponsebits_1878_Sample/req branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_new_bigresponsebits_1878_Update/req) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_new_bigresponsebits_1878_Sample/ack branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/R_new_bigresponsebits_1878_Update/ack)
  // 				$volatile next_J := (J + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 650
  // (J + 1 )
  // J
  // 				bigresponsebit := responseRx $buffering 2// bits of buffering = 2. 
  //  file .Aa/sdhc.opt.aa, line 651
  // responseRx
  RPIPE_responseRx_1886_inst <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/RPIPE_responseRx_1886_Sample/rr branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/RPIPE_responseRx_1886_Update/cr) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/RPIPE_responseRx_1886_Sample/ra branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/RPIPE_responseRx_1886_Update/ca)
  // 				$volatile bigresponsebits := (($bitcast ($uint<135>) 0  ) && bigresponsebit) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 652
  // (($bitcast ($uint<135>) 0  ) && bigresponsebit)
  // bigresponsebit
  // 				$volatile new_bigresponsebits := ((old_bigresponsebits << 1 ) | bigresponsebits) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 653
  // ((old_bigresponsebits << 1 ) | bigresponsebits)
  // (old_bigresponsebits << 1 )
  // old_bigresponsebits
  // bigresponsebits
  // (next_J < 136 )
  // next_J
  do_while_stmt_1866_branch <=> (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/do_while_stmt_1866_loop_body/condition_evaluated) (branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/loop_exit/ack branch_block_stmt_1467/branch_block_stmt_1865/do_while_stmt_1866/loop_taken/ack)
  // 			responseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 657
  // responseEnable
  WPIPE_responseEnable_1907_inst <=> (branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_responseEnable_1907_Sample/req branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_responseEnable_1907_Update/req) (branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_responseEnable_1907_Sample/ack branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_responseEnable_1907_Update/ack)
  // 			bigResponseEnable := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 658
  // bigResponseEnable
  WPIPE_bigResponseEnable_1910_inst <=> (branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_bigResponseEnable_1910_Sample/req branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_bigResponseEnable_1910_Update/req) (branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_bigResponseEnable_1910_Sample/ack branch_block_stmt_1467/assign_stmt_1909_to_assign_stmt_1918/WPIPE_bigResponseEnable_1910_Update/ack)
  // 			$volatile CID_CRC := ( $slice bigResponse 7 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 660
  // bigResponse
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (commandRegVal & _h8 )
  // ((commandRegVal & _h8 ) == 8 )
  if_stmt_1919_branch <=> (branch_block_stmt_1467/if_stmt_1919_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_1919_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_1919_if_link/if_choice_transition)
  // 			$call generate_crc_7_120 (( $slice bigResponse 127 8 )  ) (R2_CRC ) 
  //  file .Aa/sdhc.opt.aa, line 662
  // bigResponse
  call_stmt_1928_call <=> (branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/call_stmt_1928_Sample/crr branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/call_stmt_1928_Update/ccr) (branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/call_stmt_1928_Sample/cra branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/call_stmt_1928_Update/cca)
  // 			CommandCRCError1 := ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 663
  // (CID_CRC == R2_CRC)
  // CID_CRC
  // R2_CRC
  // ( $mux (CID_CRC == R2_CRC) _b00000000   _b00000010  ) 
  MUX_1935_inst <=> (branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/MUX_1935_start/req branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/MUX_1935_complete/req) (branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/MUX_1935_start/ack branch_block_stmt_1467/call_stmt_1928_to_assign_stmt_1936/MUX_1935_complete/ack)
  // 			commandEndBitError1 := ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 665
  // (bigResponse [] 0 )
  // bigResponse
  // ( $mux (bigResponse [] 0 ) ZERO_8  ($bitcast ($uint<8>) 4  ) ) 
  MUX_1945_inst <=> (branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/MUX_1945_start/req branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/MUX_1945_complete/req) (branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/MUX_1945_start/ack branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/MUX_1945_complete/ack)
  // 			errorInterruptStatusVar_3 := (CommandCRCError1 | commandEndBitError1) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 666
  // (CommandCRCError1 | commandEndBitError1)
  // CommandCRCError1
  // commandEndBitError1
  OR_u8_u8_1950_inst <=> (branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/OR_u8_u8_1950_Sample/rr branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/OR_u8_u8_1950_Update/cr) (branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/OR_u8_u8_1950_Sample/ra branch_block_stmt_1467/assign_stmt_1946_to_assign_stmt_1951/OR_u8_u8_1950_Update/ca)
  // CP-DP links for do-while  do_while_stmt_1953
  //  file .Aa/sdhc.opt.aa, line 669
  phi_stmt_1955 <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1955_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1955_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1955_phi_mux_ack)
  next_k_1984_1959_buf <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_k_1959_Sample/req branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_k_1959_Update/req) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_k_1959_Sample/ack branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_k_1959_Update/ack)
  phi_stmt_1960 <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1960_entry_sample_req branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1960_loopback_sample_req) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/phi_stmt_1960_phi_mux_ack)
  // bigResponse
  // ( $slice bigResponse 127 8 ) 
  slice_1963_inst <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/slice_1963_Sample/rr branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/slice_1963_Update/cr) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/slice_1963_Sample/ra branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/slice_1963_Update/ca)
  next_temp_1979_1964_buf <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_temp_1964_Sample/req branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_temp_1964_Update/req) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_temp_1964_Sample/ack branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/R_next_temp_1964_Update/ack)
  // 				$volatile address := (16  + k) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 677
  // (16  + k)
  // k
  // 				$call writeSDHCRegisters (address ( $slice temp 7 0 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 678
  // address
  // temp
  call_stmt_1974_call <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/call_stmt_1974_Sample/crr branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/call_stmt_1974_Update/ccr) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/call_stmt_1974_Sample/cra branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/call_stmt_1974_Update/cca)
  // 				$volatile next_temp := (temp >> 8 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 679
  // (temp >> 8 )
  // temp
  // 				$volatile next_k := (k + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 680
  // (k + 1 )
  // k
  // (next_k < 15 )
  // next_k
  do_while_stmt_1953_branch <=> (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/do_while_stmt_1953_loop_body/condition_evaluated) (branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/loop_exit/ack branch_block_stmt_1467/branch_block_stmt_1952/do_while_stmt_1953/loop_taken/ack)
  // 			$call readSDHCRegisters (36  ) (tempPresentState3 ) 
  //  file .Aa/sdhc.opt.aa, line 683
  call_stmt_1992_call <=> (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_1992_Sample/crr branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_1992_Update/ccr) (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_1992_Sample/cra branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_1992_Update/cca)
  // 			presentState3 := ((tempPresentState3 >> 1 ) << 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 684
  // ((tempPresentState3 >> 1 ) << 1 )
  // (tempPresentState3 >> 1 )
  // tempPresentState3
  SHL_u8_u8_1998_inst <=> (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/SHL_u8_u8_1998_Sample/rr branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/SHL_u8_u8_1998_Update/cr) (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/SHL_u8_u8_1998_Sample/ra branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/SHL_u8_u8_1998_Update/ca)
  // 			$call readSDHCRegisters (48  ) (normalInterrupt3 ) 
  //  file .Aa/sdhc.opt.aa, line 685
  call_stmt_2002_call <=> (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2002_Sample/crr branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2002_Update/ccr) (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2002_Sample/cra branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2002_Update/cca)
  // 			$call writeSDHCRegisters (36  presentState3 ) () 
  //  file .Aa/sdhc.opt.aa, line 686
  // presentState3
  call_stmt_2005_call <=> (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2005_Sample/crr branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2005_Update/ccr) (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2005_Sample/cra branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/call_stmt_2005_Update/cca)
  // 			normalInterruptStatusVar_3 := (normalInterrupt3 | _h01 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 687
  // (normalInterrupt3 | _h01 )
  // normalInterrupt3
  OR_u8_u8_2009_inst <=> (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/OR_u8_u8_2009_Sample/rr branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/OR_u8_u8_2009_Update/cr) (branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/OR_u8_u8_2009_Sample/ra branch_block_stmt_1467/call_stmt_1992_to_assign_stmt_2010/OR_u8_u8_2009_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (response_type == 0 )
  if_stmt_2013_branch <=> (branch_block_stmt_1467/if_stmt_2013_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_2013_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_2013_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (36  ) (tempPresentState1 ) 
  //  file .Aa/sdhc.opt.aa, line 691
  call_stmt_2019_call <=> (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2019_Sample/crr branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2019_Update/ccr) (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2019_Sample/cra branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2019_Update/cca)
  // 			$volatile presentState1 := ((tempPresentState1 >> 1 ) << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 692
  // ((tempPresentState1 >> 1 ) << 1 )
  // (tempPresentState1 >> 1 )
  // tempPresentState1
  // 			$call readSDHCRegisters (48  ) (normalInterrupt1 ) 
  //  file .Aa/sdhc.opt.aa, line 693
  call_stmt_2029_call <=> (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2029_Sample/crr branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2029_Update/ccr) (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2029_Sample/cra branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2029_Update/cca)
  // 			$call writeSDHCRegisters (36  presentState1 ) () 
  //  file .Aa/sdhc.opt.aa, line 694
  // presentState1
  call_stmt_2032_call <=> (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2032_Sample/crr branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2032_Update/ccr) (branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2032_Sample/cra branch_block_stmt_1467/call_stmt_2019_to_assign_stmt_2040/call_stmt_2032_Update/cca)
  // 			$volatile normalInterruptStatusVar_1 := (normalInterrupt1 | _h01 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 695
  // (normalInterrupt1 | _h01 )
  // normalInterrupt1
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 701
  normalInterruptStatusVar_1_2037_2048_buf <=> (branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/req branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/req) (branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/ack branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/ack)
  normalInterruptStatusVar_2_1845_2049_buf <=> (branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/req branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/req) (branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/ack branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/ack)
  normalInterruptStatusVar_3_2010_2050_buf <=> (branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/req branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/req) (branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Sample/ack branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2046/phi_stmt_2046_sources/Interlock/Update/ack)
  phi_stmt_2046 <=> (branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2046/phi_stmt_2046_req branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2046/phi_stmt_2046_req branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2046/phi_stmt_2046_req) (branch_block_stmt_1467/merge_stmt_2045_PhiAck/phi_stmt_2046_ack)
  errorInterruptStatusVar_2_1852_2054_buf <=> (branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Sample/req branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Update/req) (branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Sample/ack branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Update/ack)
  errorInterruptStatusVar_3_1951_2055_buf <=> (branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Sample/req branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Update/req) (branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Sample/ack branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2051/phi_stmt_2051_sources/Interlock/Update/ack)
  phi_stmt_2051 <=> (branch_block_stmt_1467/normalInterruptResponse1_PhiReq/phi_stmt_2051/phi_stmt_2051_req branch_block_stmt_1467/normalInterruptResponse2_PhiReq/phi_stmt_2051/phi_stmt_2051_req branch_block_stmt_1467/normalInterruptResponse3_PhiReq/phi_stmt_2051/phi_stmt_2051_req) (branch_block_stmt_1467/merge_stmt_2045_PhiAck/phi_stmt_2051_ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (dataPresentSelect == 1 )
  if_stmt_2057_branch <=> (branch_block_stmt_1467/if_stmt_2057_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_2057_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_2057_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (txOrRX == 1 )
  // (response_type != 3 )
  // ((txOrRX == 1 ) & (response_type != 3 ))
  if_stmt_2061_branch <=> (branch_block_stmt_1467/if_stmt_2061_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_2061_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_2061_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (12  ) (tempTransfer ) 
  //  file .Aa/sdhc.opt.aa, line 709
  call_stmt_2071_call <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2071_Sample/crr branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2071_Update/ccr) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2071_Sample/cra branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2071_Update/cca)
  // 			singleMultipleReadBlock := (  $bitreduce |  (tempTransfer & _h20 ) ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 710
  // (tempTransfer & _h20 )
  // tempTransfer
  // (  $bitreduce |  (tempTransfer & _h20 ) )
  BITREDUCEOR_u8_u1_2076_inst <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/BITREDUCEOR_u8_u1_2076_Sample/rr branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/BITREDUCEOR_u8_u1_2076_Update/cr) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/BITREDUCEOR_u8_u1_2076_Sample/ra branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/BITREDUCEOR_u8_u1_2076_Update/ca)
  // 			$call dataRx (singleMultipleReadBlock ) (dataErrorInterruptStatusVar1 ) 
  //  file .Aa/sdhc.opt.aa, line 711
  // singleMultipleReadBlock
  call_stmt_2080_call <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2080_Sample/crr branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2080_Update/ccr) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2080_Sample/cra branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/call_stmt_2080_Update/cca)
  // 			dataRxEnrty1 := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 712
  // dataRxEnrty1
  STORE_dataRxEnrty1_2081_gather_scatter <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Sample/STORE_dataRxEnrty1_2081_Split/split_req) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Sample/STORE_dataRxEnrty1_2081_Split/split_ack)
  STORE_dataRxEnrty1_2081_store_0 <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Sample/word_access_start/word_0/rr branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Update/word_access_complete/word_0/cr) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Sample/word_access_start/word_0/ra branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty1_2081_Update/word_access_complete/word_0/ca)
  // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 713
  // dataRxEnrty2
  STORE_dataRxEnrty2_2084_gather_scatter <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Sample/STORE_dataRxEnrty2_2084_Split/split_req) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Sample/STORE_dataRxEnrty2_2084_Split/split_ack)
  STORE_dataRxEnrty2_2084_store_0 <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Sample/word_access_start/word_0/rr branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Update/word_access_complete/word_0/cr) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Sample/word_access_start/word_0/ra branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/STORE_dataRxEnrty2_2084_Update/word_access_complete/word_0/ca)
  // 			transferCompleteData := ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 714
  // singleMultipleReadBlock
  // ( $mux singleMultipleReadBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
  MUX_2092_inst <=> (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/MUX_2092_start/req branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/MUX_2092_complete/req) (branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/MUX_2092_start/ack branch_block_stmt_1467/call_stmt_2071_to_assign_stmt_2093/MUX_2092_complete/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 28610656
  // (singleMultipleReadBlock == 1 )
  if_stmt_2094_branch <=> (branch_block_stmt_1467/if_stmt_2094_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_2094_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_2094_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 716
  next_B_2124_2101_buf <=> (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2099/phi_stmt_2099_sources/Interlock/Sample/req branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2099/phi_stmt_2099_sources/Interlock/Update/req) (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2099/phi_stmt_2099_sources/Interlock/Sample/ack branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2099/phi_stmt_2099_sources/Interlock/Update/ack)
  phi_stmt_2099 <=> (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2099/phi_stmt_2099_req branch_block_stmt_1467/merge_stmt_2098__entry___PhiReq/phi_stmt_2099/phi_stmt_2099_req) (branch_block_stmt_1467/merge_stmt_2098_PhiAck/phi_stmt_2099_ack)
  readBlockCount_2119_2105_buf <=> (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2103/phi_stmt_2103_sources/Interlock/Sample/req branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2103/phi_stmt_2103_sources/Interlock/Update/req) (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2103/phi_stmt_2103_sources/Interlock/Sample/ack branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2103/phi_stmt_2103_sources/Interlock/Update/ack)
  phi_stmt_2103 <=> (branch_block_stmt_1467/loopBlock1_PhiReq/phi_stmt_2103/phi_stmt_2103_req branch_block_stmt_1467/merge_stmt_2098__entry___PhiReq/phi_stmt_2103/phi_stmt_2103_req) (branch_block_stmt_1467/merge_stmt_2098_PhiAck/phi_stmt_2103_ack)
  // 			$call readSDHCRegisters ((6  + B) ) (readnewBlockCountTemp ) 
  //  file .Aa/sdhc.opt.aa, line 722
  // (6  + B)
  // B
  call_stmt_2113_call <=> (branch_block_stmt_1467/call_stmt_2113_to_assign_stmt_2124/call_stmt_2113_Sample/crr branch_block_stmt_1467/call_stmt_2113_to_assign_stmt_2124/call_stmt_2113_Update/ccr) (branch_block_stmt_1467/call_stmt_2113_to_assign_stmt_2124/call_stmt_2113_Sample/cra branch_block_stmt_1467/call_stmt_2113_to_assign_stmt_2124/call_stmt_2113_Update/cca)
  // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 723
  // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
  // readNewBlockCount
  // readnewBlockCountTemp
  // 			$volatile next_B := (B - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 724
  // (B - 1 )
  // B
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 28403536
  // (B != 0 )
  if_stmt_2125_branch <=> (branch_block_stmt_1467/if_stmt_2125_eval_test/branch_req) (branch_block_stmt_1467/if_stmt_2125_else_link/else_choice_transition branch_block_stmt_1467/if_stmt_2125_if_link/if_choice_transition)
  // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 728
  // (readBlockCount - 1 )
  // readBlockCount
  SUB_u16_u16_2134_inst <=> (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/SUB_u16_u16_2134_Sample/rr branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/SUB_u16_u16_2134_Update/cr) (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/SUB_u16_u16_2134_Sample/ra branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/SUB_u16_u16_2134_Update/ca)
  // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 729
  // newReadBlockCount
  call_stmt_2139_call <=> (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2139_Sample/crr branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2139_Update/ccr) (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2139_Sample/cra branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2139_Update/cca)
  // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 730
  // newReadBlockCount
  call_stmt_2143_call <=> (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2143_Sample/crr branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2143_Update/ccr) (branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2143_Sample/cra branch_block_stmt_1467/assign_stmt_2135_to_call_stmt_2143/call_stmt_2143_Update/cca)
  // 			dataTransferComplete := ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 733
  // (response_type == 3 )
  // response_type
  // transferCompleteData
  // ( $mux (response_type == 3 ) ($bitcast ($uint<8>) 2  )  transferCompleteData ) 
  MUX_2153_inst <=> (branch_block_stmt_1467/assign_stmt_2154/MUX_2153_start/req branch_block_stmt_1467/assign_stmt_2154/MUX_2153_complete/req) (branch_block_stmt_1467/assign_stmt_2154/MUX_2153_start/ack branch_block_stmt_1467/assign_stmt_2154/MUX_2153_complete/ack)
}
$module [sendDAT0] 
{
  $in dat0:$int<1024>
  // can point into 
  nextCRC16_DAT0:$int<16>
  // can point into 
  // pipe-declarations for block %sendDAT0
  //  file .Aa/sdhc.opt.aa, line 739
  // pipe-declarations for block %sendDAT0%parallelblock_one
  //  file .Aa/sdhc.opt.aa, line 744
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_2167] // Branch Block  file .Aa/sdhc.opt.aa, line 744
    {
      $P [branch_block_stmt_2167__entry__]
      branch_block_stmt_2167__entry__ <-| ($entry)
      $P [branch_block_stmt_2167__exit__]
      branch_block_stmt_2167__exit__ |-> ($exit)
      $P [assign_stmt_2176__entry__] 
      $P [assign_stmt_2176__exit__] 
      $P [do_while_stmt_2177__entry__] 
      $P [do_while_stmt_2177__exit__] 
      ::[assign_stmt_2176] 
      {
        // start:  		newDat0 := ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        //  file .Aa/sdhc.opt.aa, line 746
        // Source expression
        // ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1))
        $T[CONCAT_u1025_u1042_2175_sample_start_] 
        $T[CONCAT_u1025_u1042_2175_sample_completed_] 
        $T[CONCAT_u1025_u1042_2175_update_start_] 
        $T[CONCAT_u1025_u1042_2175_update_completed_] 
        // (ZERO_1 && dat0)
        // dat0
        // (nextCRC16_DAT0 && ONE_1)
        // nextCRC16_DAT0
        // start: Forward dependencies from (ZERO_1 && dat0) to transition CONCAT_u1025_u1042_2175_sample_start_
        // done: Forward dependencies from (ZERO_1 && dat0) to transition CONCAT_u1025_u1042_2175_sample_start_
        // start: Forward dependencies from (nextCRC16_DAT0 && ONE_1) to transition CONCAT_u1025_u1042_2175_sample_start_
        // done: Forward dependencies from (nextCRC16_DAT0 && ONE_1) to transition CONCAT_u1025_u1042_2175_sample_start_
        ;;[CONCAT_u1025_u1042_2175_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u1025_u1042_2175_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u1025_u1042_2175_sample_start_ &-> (CONCAT_u1025_u1042_2175_Sample)
        CONCAT_u1025_u1042_2175_sample_completed_ <-& (CONCAT_u1025_u1042_2175_Sample)
        CONCAT_u1025_u1042_2175_sample_completed_ &-> ($null)
        CONCAT_u1025_u1042_2175_update_start_ &-> (CONCAT_u1025_u1042_2175_Update)
        CONCAT_u1025_u1042_2175_update_completed_ <-& (CONCAT_u1025_u1042_2175_Update)
        // Target expression
        // (as target) newDat0
        // start: WAR dependencies for newDat0
        // done: WAR dependencies for newDat0
        // end:  		newDat0 := ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        // load-store dependencies..
      }
      assign_stmt_2176__entry__ |-> (assign_stmt_2176)
      assign_stmt_2176__exit__ <-| (assign_stmt_2176)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 747
      <o> [do_while_stmt_2177]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_2177__entry__] 
        $P[do_while_stmt_2177__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2177_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2179
          // 			$phi k_0 := 			  next_k_0 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
          // type of target is $uint<11>
          $T[phi_stmt_2179_sample_start_] 
          $T[phi_stmt_2179_sample_completed_] 
          $T[phi_stmt_2179_update_start_] 
          $T[phi_stmt_2179_update_completed_] 
          $T[phi_stmt_2179_sample_start__ps] 
          phi_stmt_2179_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2179_sample_completed__ps] 
          phi_stmt_2179_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2179_update_start__ps] 
          phi_stmt_2179_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2179_update_completed__ps] 
          phi_stmt_2179_update_completed_ <-& (phi_stmt_2179_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2179_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2179_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2179_update_start_)
          $T[phi_stmt_2179_loopback_trigger] 
          phi_stmt_2179_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2179_loopback_sample_req] 
          $T[phi_stmt_2179_loopback_sample_req_ps] 
          phi_stmt_2179_loopback_sample_req <-& (phi_stmt_2179_loopback_sample_req_ps)
          phi_stmt_2179_loopback_sample_req &-> ($null)
          $T[phi_stmt_2179_entry_trigger] 
          phi_stmt_2179_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2179_entry_sample_req] 
          $T[phi_stmt_2179_entry_sample_req_ps] 
          phi_stmt_2179_entry_sample_req <-& (phi_stmt_2179_entry_sample_req_ps)
          phi_stmt_2179_entry_sample_req &-> ($null)
          phi_stmt_2179_update_start_ o<-& (phi_stmt_2179_update_completed_ 0)
          phi_stmt_2179_sample_start_ o<-& (phi_stmt_2179_sample_completed_ 1)
          $T[phi_stmt_2179_merged_reqs] 
          $T[phi_stmt_2179_phi_mux_ack] 
          $T[phi_stmt_2179_phi_mux_ack_ps] 
          phi_stmt_2179_phi_mux_ack_ps <-& (phi_stmt_2179_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2179_update_completed_)
          $T[type_cast_2182_sample_start__ps] 
          $T[type_cast_2182_sample_completed__ps] 
          $T[type_cast_2182_update_start__ps] 
          $T[type_cast_2182_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2182_sample_start_] 
          $T[type_cast_2182_sample_completed_] 
          type_cast_2182_sample_completed_ <-& (type_cast_2182_sample_start_)
          $T[type_cast_2182_update_start_] 
          $T [type_cast_2182_update_completed_] $delay 
          type_cast_2182_update_completed_ <-& (type_cast_2182_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2182_sample_start_ <-& (type_cast_2182_sample_start__ps)
          type_cast_2182_update_start_ <-& (type_cast_2182_update_start__ps)
          // Phi complete dependency.
          type_cast_2182_sample_completed__ps <-& (type_cast_2182_sample_completed_)
          type_cast_2182_update_completed__ps <-& (type_cast_2182_update_completed_)
          $T[R_next_k_0_2183_sample_start__ps] 
          $T[R_next_k_0_2183_sample_completed__ps] 
          $T[R_next_k_0_2183_update_start__ps] 
          $T[R_next_k_0_2183_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_k_0_2183_sample_start_] 
          $T[R_next_k_0_2183_sample_completed_] 
          $T[R_next_k_0_2183_update_start_] 
          $T[R_next_k_0_2183_update_completed_] 
          ;;[R_next_k_0_2183_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_k_0_2183_sample_start_ &-> (R_next_k_0_2183_Sample)
          R_next_k_0_2183_sample_completed_ <-& (R_next_k_0_2183_Sample)
          ;;[R_next_k_0_2183_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_k_0_2183_update_start_ &-> (R_next_k_0_2183_Update)
          R_next_k_0_2183_update_completed_ <-& (R_next_k_0_2183_Update)
          // RAW reenables for next_k_0
          // Phi start dependency for implicit/constant alternative.
          R_next_k_0_2183_sample_start_ <-& (R_next_k_0_2183_sample_start__ps)
          R_next_k_0_2183_update_start_ <-& (R_next_k_0_2183_update_start__ps)
          // Phi complete dependency.
          R_next_k_0_2183_sample_completed__ps <-& (R_next_k_0_2183_sample_completed_)
          R_next_k_0_2183_update_completed__ps <-& (R_next_k_0_2183_update_completed_)
          $phisequencer [ phi_stmt_2179_phi_seq] : 
          phi_stmt_2179_entry_trigger type_cast_2182_sample_start__ps type_cast_2182_sample_completed__ps type_cast_2182_update_start__ps type_cast_2182_update_completed__ps phi_stmt_2179_loopback_trigger R_next_k_0_2183_sample_start__ps R_next_k_0_2183_sample_completed__ps R_next_k_0_2183_update_start__ps R_next_k_0_2183_update_completed__ps :
          phi_stmt_2179_sample_start__ps phi_stmt_2179_sample_completed__ps phi_stmt_2179_update_start__ps phi_stmt_2179_update_completed__ps :
          phi_stmt_2179_entry_sample_req_ps phi_stmt_2179_loopback_sample_req_ps : 
          phi_stmt_2179_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2179
          // start:  PHI statement phi_stmt_2184
          // 			$phi dat0bit4_0 := 			  newDat0 $on   $entry 			  nextbit4_0 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_2184_sample_start_] 
          $T[phi_stmt_2184_sample_completed_] 
          $T[phi_stmt_2184_update_start_] 
          $T[phi_stmt_2184_update_completed_] 
          $T[phi_stmt_2184_sample_start__ps] 
          phi_stmt_2184_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2184_sample_completed__ps] 
          phi_stmt_2184_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2184_update_start__ps] 
          phi_stmt_2184_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2184_update_completed__ps] 
          phi_stmt_2184_update_completed_ <-& (phi_stmt_2184_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2184_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2184_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2184_update_start_)
          $T[phi_stmt_2184_loopback_trigger] 
          phi_stmt_2184_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2184_loopback_sample_req] 
          $T[phi_stmt_2184_loopback_sample_req_ps] 
          phi_stmt_2184_loopback_sample_req <-& (phi_stmt_2184_loopback_sample_req_ps)
          phi_stmt_2184_loopback_sample_req &-> ($null)
          $T[phi_stmt_2184_entry_trigger] 
          phi_stmt_2184_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2184_entry_sample_req] 
          $T[phi_stmt_2184_entry_sample_req_ps] 
          phi_stmt_2184_entry_sample_req <-& (phi_stmt_2184_entry_sample_req_ps)
          phi_stmt_2184_entry_sample_req &-> ($null)
          phi_stmt_2184_update_start_ o<-& (phi_stmt_2184_update_completed_ 0)
          phi_stmt_2184_sample_start_ o<-& (phi_stmt_2184_sample_completed_ 1)
          $T[phi_stmt_2184_merged_reqs] 
          $T[phi_stmt_2184_phi_mux_ack] 
          $T[phi_stmt_2184_phi_mux_ack_ps] 
          phi_stmt_2184_phi_mux_ack_ps <-& (phi_stmt_2184_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2184_update_completed_)
          $T[R_nextbit4_0_2186_sample_start__ps] 
          $T[R_nextbit4_0_2186_sample_completed__ps] 
          $T[R_nextbit4_0_2186_update_start__ps] 
          $T[R_nextbit4_0_2186_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nextbit4_0_2186_sample_start_] 
          $T[R_nextbit4_0_2186_sample_completed_] 
          $T[R_nextbit4_0_2186_update_start_] 
          $T[R_nextbit4_0_2186_update_completed_] 
          ;;[R_nextbit4_0_2186_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextbit4_0_2186_sample_start_ &-> (R_nextbit4_0_2186_Sample)
          R_nextbit4_0_2186_sample_completed_ <-& (R_nextbit4_0_2186_Sample)
          ;;[R_nextbit4_0_2186_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextbit4_0_2186_update_start_ &-> (R_nextbit4_0_2186_Update)
          R_nextbit4_0_2186_update_completed_ <-& (R_nextbit4_0_2186_Update)
          // RAW reenables for nextbit4_0
          // Phi start dependency for implicit/constant alternative.
          R_nextbit4_0_2186_sample_start_ <-& (R_nextbit4_0_2186_sample_start__ps)
          R_nextbit4_0_2186_update_start_ <-& (R_nextbit4_0_2186_update_start__ps)
          // Phi complete dependency.
          R_nextbit4_0_2186_sample_completed__ps <-& (R_nextbit4_0_2186_sample_completed_)
          R_nextbit4_0_2186_update_completed__ps <-& (R_nextbit4_0_2186_update_completed_)
          $T[R_newDat0_2187_sample_start__ps] 
          $T[R_newDat0_2187_sample_completed__ps] 
          $T[R_newDat0_2187_update_start__ps] 
          $T[R_newDat0_2187_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_newDat0_2187_sample_start_] 
          $T[R_newDat0_2187_sample_completed_] 
          $T[R_newDat0_2187_update_start_] 
          $T[R_newDat0_2187_update_completed_] 
          ;;[R_newDat0_2187_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_newDat0_2187_sample_start_ &-> (R_newDat0_2187_Sample)
          R_newDat0_2187_sample_completed_ <-& (R_newDat0_2187_Sample)
          ;;[R_newDat0_2187_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_newDat0_2187_update_start_ &-> (R_newDat0_2187_Update)
          R_newDat0_2187_update_completed_ <-& (R_newDat0_2187_Update)
          // RAW reenables for newDat0
          // Phi start dependency for implicit/constant alternative.
          R_newDat0_2187_sample_start_ <-& (R_newDat0_2187_sample_start__ps)
          R_newDat0_2187_update_start_ <-& (R_newDat0_2187_update_start__ps)
          // Phi complete dependency.
          R_newDat0_2187_sample_completed__ps <-& (R_newDat0_2187_sample_completed_)
          R_newDat0_2187_update_completed__ps <-& (R_newDat0_2187_update_completed_)
          $phisequencer [ phi_stmt_2184_phi_seq] : 
          phi_stmt_2184_loopback_trigger R_nextbit4_0_2186_sample_start__ps R_nextbit4_0_2186_sample_completed__ps R_nextbit4_0_2186_update_start__ps R_nextbit4_0_2186_update_completed__ps phi_stmt_2184_entry_trigger R_newDat0_2187_sample_start__ps R_newDat0_2187_sample_completed__ps R_newDat0_2187_update_start__ps R_newDat0_2187_update_completed__ps :
          phi_stmt_2184_sample_start__ps phi_stmt_2184_sample_completed__ps phi_stmt_2184_update_start__ps phi_stmt_2184_update_completed__ps :
          phi_stmt_2184_loopback_sample_req_ps phi_stmt_2184_entry_sample_req_ps : 
          phi_stmt_2184_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2184
          // start:  			DAT0Tx := (dat0bit4_0 [] 1041 ) $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 755
          // Source expression
          // (dat0bit4_0 [] 1041 )
          $T[BITSEL_u1042_u1_2192_sample_start_] 
          $T[BITSEL_u1042_u1_2192_sample_completed_] 
          $T[BITSEL_u1042_u1_2192_update_start_] 
          $T[BITSEL_u1042_u1_2192_update_completed_] 
          // dat0bit4_0
          // start: Forward dependencies from dat0bit4_0 to transition BITSEL_u1042_u1_2192_sample_start_
          BITSEL_u1042_u1_2192_sample_start_ <-& (phi_stmt_2184_update_completed_)
          // done: Forward dependencies from dat0bit4_0 to transition BITSEL_u1042_u1_2192_sample_start_
          ;;[BITSEL_u1042_u1_2192_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[BITSEL_u1042_u1_2192_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          BITSEL_u1042_u1_2192_sample_start_ &-> (BITSEL_u1042_u1_2192_Sample)
          BITSEL_u1042_u1_2192_sample_completed_ <-& (BITSEL_u1042_u1_2192_Sample)
          BITSEL_u1042_u1_2192_sample_completed_ &-> ($null)
          BITSEL_u1042_u1_2192_update_start_ &-> (BITSEL_u1042_u1_2192_Update)
          BITSEL_u1042_u1_2192_update_completed_ <-& (BITSEL_u1042_u1_2192_Update)
          // RAW reenables for dat0bit4_0
          phi_stmt_2184_update_start_ o<-& (BITSEL_u1042_u1_2192_sample_completed_ 0)
          // self-release: 
          BITSEL_u1042_u1_2192_sample_start_ o<-& (BITSEL_u1042_u1_2192_sample_completed_ 1)
          $null &-> (BITSEL_u1042_u1_2192_update_start_)
          BITSEL_u1042_u1_2192_update_start_ o<-& (BITSEL_u1042_u1_2192_update_completed_ 0)
          // Target expression
          // (as target) DAT0Tx
          $T[WPIPE_DAT0Tx_2189_sample_start_] 
          $T[WPIPE_DAT0Tx_2189_sample_completed_] 
          $T[WPIPE_DAT0Tx_2189_update_start_] 
          $T[WPIPE_DAT0Tx_2189_update_completed_] 
          ;;[WPIPE_DAT0Tx_2189_Sample] 
          {
            // pipe write sample-start DAT0Tx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_DAT0Tx_2189_Update] 
          {
            // pipe write update (complete) DAT0Tx
            $T [req] $T [ack] 
          }
          WPIPE_DAT0Tx_2189_sample_start_ &-> (WPIPE_DAT0Tx_2189_Sample)
          WPIPE_DAT0Tx_2189_sample_completed_ <-& (WPIPE_DAT0Tx_2189_Sample)
          WPIPE_DAT0Tx_2189_update_start_ <-& (WPIPE_DAT0Tx_2189_sample_completed_)
          WPIPE_DAT0Tx_2189_update_start_ &-> (WPIPE_DAT0Tx_2189_Update)
          WPIPE_DAT0Tx_2189_update_completed_ <-& (WPIPE_DAT0Tx_2189_Update)
          WPIPE_DAT0Tx_2189_sample_start_ o<-& (WPIPE_DAT0Tx_2189_update_completed_ 0)
          // start: Forward dependencies from (dat0bit4_0 [] 1041 ) to transition WPIPE_DAT0Tx_2189_sample_start_
          WPIPE_DAT0Tx_2189_sample_start_ <-& (BITSEL_u1042_u1_2192_update_completed_)
          // done: Forward dependencies from (dat0bit4_0 [] 1041 ) to transition WPIPE_DAT0Tx_2189_sample_start_
          // RAW reenables for (dat0bit4_0 [] 1041 )
          BITSEL_u1042_u1_2192_update_start_ o<-& (WPIPE_DAT0Tx_2189_sample_completed_ 0)
          // end:  			DAT0Tx := (dat0bit4_0 [] 1041 ) $buffering 1// bits of buffering = 1. 
          // start: WAR dependencies for nextbit4_0
          // WAR dependency: Read: nextbit4_0 before Write: 			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_0
          // start:  			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 756
          // volatile! 
          // Source expression
          // (dat0bit4_0 << 1 )
          // dat0bit4_0
          // Target expression
          // (as target) nextbit4_0
          // start: WAR dependencies for nextbit4_0
          // WAR dependency: Read: nextbit4_0 before Write: 			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_0
          // end:  			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
          // start: WAR dependencies for next_k_0
          // WAR dependency: Read: next_k_0 before Write: 			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_0
          // start:  			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 757
          // volatile! 
          // Source expression
          // (k_0 + 1 )
          // k_0
          // Target expression
          // (as target) next_k_0
          // start: WAR dependencies for next_k_0
          // WAR dependency: Read: next_k_0 before Write: 			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_0
          // end:  			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
          // (next_k_0 < 1042 )
          // next_k_0
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_k_0 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2179_update_completed_)
          // done: Forward dependencies from (next_k_0 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT0Tx
          // read-dependencies for pipe DAT0Tx
          // write-dependencies for pipe DAT0Tx
          // signal write dependencies for DAT0Tx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2177__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2177_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2177__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2177_loop_body : condition_evaluated
        $bind do_while_stmt_2177__entry__  => do_while_stmt_2177_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2177_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2177__exit__)
      }
      do_while_stmt_2177__entry__ |-> (do_while_stmt_2177)
      do_while_stmt_2177__exit__ <-| (do_while_stmt_2177)
      assign_stmt_2176__entry__ <-| (branch_block_stmt_2167__entry__)
      do_while_stmt_2177__entry__ <-| (assign_stmt_2176__exit__)
      do_while_stmt_2177__exit__ |-> (branch_block_stmt_2167__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendDAT0%parallelblock_one%
    //  file .Aa/sdhc.opt.aa, line 749
    // constant-object-declarations for block %sendDAT0%parallelblock_one
    //  file .Aa/sdhc.opt.aa, line 744
    // constant-object-declarations for block %sendDAT0
    //  file .Aa/sdhc.opt.aa, line 739
    // constant-declarations for block %sendDAT0%parallelblock_one
    //  file .Aa/sdhc.opt.aa, line 744
    // ZERO_1
    $constant $W[R_ZERO_1_2169_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_2173_wire_constant] : $int<1> := _b1// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 747
    // 1042 
    $constant $W[konst_2206_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %sendDAT0%parallelblock_one%
    //  file .Aa/sdhc.opt.aa, line 749
    // constant-declarations for phi:  			$phi k_0 := 			  next_k_0 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 750
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2182_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat0bit4_0 := 			  newDat0 $on   $entry 			  nextbit4_0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 752
    // 1041 
    $constant $W[konst_2191_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2196_wire_constant] : $int<1042> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001// 1
    // 1 
    $constant $W[konst_2201_wire_constant] : $int<11> := _b00000000001// 1
    // block %sendDAT0%parallelblock_one
    //  file .Aa/sdhc.opt.aa, line 744
    // 		newDat0 := ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 746
    // (ZERO_1 && dat0)
    $intermediate $W[CONCAT_u1_u1025_2171_wire] : $int<1025>
    // (nextCRC16_DAT0 && ONE_1)
    $intermediate $W[CONCAT_u16_u17_2174_wire] : $int<17>
    // newDat0
    $W[newDat0_2176] : $int<1042>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 747
    // (next_k_0 < 1042 )
    $intermediate $W[ULT_u11_u1_2207_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 749
    // 			$phi k_0 := 			  next_k_0 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 750
    $W[next_k_0_2203_2183_buffered] : $int<11>
    // k_0
    $W[k_0_2179] : $int<11>
    // 			$phi dat0bit4_0 := 			  newDat0 $on   $entry 			  nextbit4_0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 752
    $W[nextbit4_0_2198_2186_buffered] : $int<1042>
    $W[newDat0_2176_2187_buffered] : $int<1042>
    // dat0bit4_0
    $W[dat0bit4_0_2184] : $int<1042>
    // 			DAT0Tx := (dat0bit4_0 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 755
    // (dat0bit4_0 [] 1041 )
    $intermediate $W[BITSEL_u1042_u1_2192_wire] : $int<1>
    // DAT0Tx
    // 			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 756
    // nextbit4_0
    $W[nextbit4_0_2198] : $int<1042>
    // 			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 757
    // next_k_0
    $W[next_k_0_2203] : $int<11>
    // datapath-instances for block %sendDAT0%parallelblock_one
    //  file .Aa/sdhc.opt.aa, line 744
    // 		newDat0 := ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 746
    // (ZERO_1 && dat0)
    &&[CONCAT_u1_u1025_2171_inst] (R_ZERO_1_2169_wire_constant dat0) (CONCAT_u1_u1025_2171_wire)   $flowthrough 
    $delay CONCAT_u1_u1025_2171_inst 0
    // (nextCRC16_DAT0 && ONE_1)
    &&[CONCAT_u16_u17_2174_inst] (nextCRC16_DAT0 R_ONE_1_2173_wire_constant) (CONCAT_u16_u17_2174_wire)   $flowthrough 
    $delay CONCAT_u16_u17_2174_inst 0
    // ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1))
    &&[CONCAT_u1025_u1042_2175_inst] (CONCAT_u1_u1025_2171_wire CONCAT_u16_u17_2174_wire) (newDat0_2176)   
    $buffering  $out CONCAT_u1025_u1042_2175_inst newDat0_2176 1
    $delay CONCAT_u1025_u1042_2175_inst 1
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 747
    // (next_k_0 < 1042 )
    <[ULT_u11_u1_2207_inst] (next_k_0_2203 konst_2206_wire_constant) (ULT_u11_u1_2207_wire)   $flowthrough 
    $delay ULT_u11_u1_2207_inst 0
    ==0? [do_while_stmt_2177_branch] (ULT_u11_u1_2207_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 749
    // 			$phi k_0 := 			  next_k_0 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 750
    # := [next_k_0_2203_2183_buf] (next_k_0_2203) (next_k_0_2203_2183_buffered)     $fullrate
    $buffering $out next_k_0_2203_2183_buf next_k_0_2203_2183_buffered  1
    # $phi [phi_stmt_2179] (type_cast_2182_wire_constant next_k_0_2203_2183_buffered) ( k_0_2179 ) $fullrate
    // $buffering  $out phi_stmt_2179 k_0_2179 2
    // 			$phi dat0bit4_0 := 			  newDat0 $on   $entry 			  nextbit4_0 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 752
    # := [nextbit4_0_2198_2186_buf] (nextbit4_0_2198) (nextbit4_0_2198_2186_buffered)     $fullrate
    $buffering $out nextbit4_0_2198_2186_buf nextbit4_0_2198_2186_buffered  1
    # := [newDat0_2176_2187_buf] (newDat0_2176) (newDat0_2176_2187_buffered)     $fullrate
    $buffering $out newDat0_2176_2187_buf newDat0_2176_2187_buffered  1
    # $phi [phi_stmt_2184] (nextbit4_0_2198_2186_buffered newDat0_2176_2187_buffered) ( dat0bit4_0_2184 ) $fullrate
    // $buffering  $out phi_stmt_2184 dat0bit4_0_2184 2
    // 			DAT0Tx := (dat0bit4_0 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 755
    // (dat0bit4_0 [] 1041 )
    [][BITSEL_u1042_u1_2192_inst] (dat0bit4_0_2184 konst_2191_wire_constant) (BITSEL_u1042_u1_2192_wire)    $fullrate
    $buffering  $out BITSEL_u1042_u1_2192_inst BITSEL_u1042_u1_2192_wire 1
    $delay BITSEL_u1042_u1_2192_inst 1
    // DAT0Tx
    $ioport $out [WPIPE_DAT0Tx_2189_inst]  (BITSEL_u1042_u1_2192_wire) (DAT0Tx)  $fullrate 
    // 			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 756
    // (dat0bit4_0 << 1 )
    <<[SHL_u1042_u1042_2197_inst] (dat0bit4_0_2184 konst_2196_wire_constant) (nextbit4_0_2198)   $flowthrough 
    $delay SHL_u1042_u1042_2197_inst 0
    // 			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 757
    // (k_0 + 1 )
    +[ADD_u11_u11_2202_inst] (k_0_2179 konst_2201_wire_constant) (next_k_0_2203)   $flowthrough 
    $delay ADD_u11_u11_2202_inst 0
  }
  // end data-path
  // 		newDat0 := ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1)) $buffering 1// bits of buffering = 1042. 
  //  file .Aa/sdhc.opt.aa, line 746
  // ((ZERO_1 && dat0) && (nextCRC16_DAT0 && ONE_1))
  // (ZERO_1 && dat0)
  // dat0
  // (nextCRC16_DAT0 && ONE_1)
  // nextCRC16_DAT0
  CONCAT_u1025_u1042_2175_inst <=> (branch_block_stmt_2167/assign_stmt_2176/CONCAT_u1025_u1042_2175_Sample/rr branch_block_stmt_2167/assign_stmt_2176/CONCAT_u1025_u1042_2175_Update/cr) (branch_block_stmt_2167/assign_stmt_2176/CONCAT_u1025_u1042_2175_Sample/ra branch_block_stmt_2167/assign_stmt_2176/CONCAT_u1025_u1042_2175_Update/ca)
  // CP-DP links for do-while  do_while_stmt_2177
  //  file .Aa/sdhc.opt.aa, line 747
  phi_stmt_2179 <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2179_entry_sample_req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2179_loopback_sample_req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2179_phi_mux_ack)
  next_k_0_2203_2183_buf <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_next_k_0_2183_Sample/req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_next_k_0_2183_Update/req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_next_k_0_2183_Sample/ack branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_next_k_0_2183_Update/ack)
  phi_stmt_2184 <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2184_loopback_sample_req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2184_entry_sample_req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/phi_stmt_2184_phi_mux_ack)
  nextbit4_0_2198_2186_buf <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_nextbit4_0_2186_Sample/req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_nextbit4_0_2186_Update/req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_nextbit4_0_2186_Sample/ack branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_nextbit4_0_2186_Update/ack)
  newDat0_2176_2187_buf <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_newDat0_2187_Sample/req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_newDat0_2187_Update/req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_newDat0_2187_Sample/ack branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/R_newDat0_2187_Update/ack)
  // 			DAT0Tx := (dat0bit4_0 [] 1041 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 755
  // (dat0bit4_0 [] 1041 )
  // dat0bit4_0
  BITSEL_u1042_u1_2192_inst <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/BITSEL_u1042_u1_2192_Sample/rr branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/BITSEL_u1042_u1_2192_Update/cr) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/BITSEL_u1042_u1_2192_Sample/ra branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/BITSEL_u1042_u1_2192_Update/ca)
  // DAT0Tx
  WPIPE_DAT0Tx_2189_inst <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/WPIPE_DAT0Tx_2189_Sample/req branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/WPIPE_DAT0Tx_2189_Update/req) (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/WPIPE_DAT0Tx_2189_Sample/ack branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/WPIPE_DAT0Tx_2189_Update/ack)
  // 			$volatile nextbit4_0 := (dat0bit4_0 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 756
  // (dat0bit4_0 << 1 )
  // dat0bit4_0
  // 			$volatile next_k_0 := (k_0 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 757
  // (k_0 + 1 )
  // k_0
  // (next_k_0 < 1042 )
  // next_k_0
  do_while_stmt_2177_branch <=> (branch_block_stmt_2167/do_while_stmt_2177/do_while_stmt_2177_loop_body/condition_evaluated) (branch_block_stmt_2167/do_while_stmt_2177/loop_exit/ack branch_block_stmt_2167/do_while_stmt_2177/loop_taken/ack)
}
$module [sendDAT1] 
{
  $in dat1:$int<1024>
  // can point into 
  nextCRC16_DAT1:$int<16>
  // can point into 
  // pipe-declarations for block %sendDAT1
  //  file .Aa/sdhc.opt.aa, line 761
  // pipe-declarations for block %sendDAT1%parallelblock_two
  //  file .Aa/sdhc.opt.aa, line 766
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_2213] // Branch Block  file .Aa/sdhc.opt.aa, line 766
    {
      $P [branch_block_stmt_2213__entry__]
      branch_block_stmt_2213__entry__ <-| ($entry)
      $P [branch_block_stmt_2213__exit__]
      branch_block_stmt_2213__exit__ |-> ($exit)
      $P [assign_stmt_2222__entry__] 
      $P [assign_stmt_2222__exit__] 
      $P [do_while_stmt_2223__entry__] 
      $P [do_while_stmt_2223__exit__] 
      ::[assign_stmt_2222] 
      {
        // start:  		newDat1 := ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        //  file .Aa/sdhc.opt.aa, line 768
        // Source expression
        // ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1))
        $T[CONCAT_u1025_u1042_2221_sample_start_] 
        $T[CONCAT_u1025_u1042_2221_sample_completed_] 
        $T[CONCAT_u1025_u1042_2221_update_start_] 
        $T[CONCAT_u1025_u1042_2221_update_completed_] 
        // (ZERO_1 && dat1)
        // dat1
        // (nextCRC16_DAT1 && ONE_1)
        // nextCRC16_DAT1
        // start: Forward dependencies from (ZERO_1 && dat1) to transition CONCAT_u1025_u1042_2221_sample_start_
        // done: Forward dependencies from (ZERO_1 && dat1) to transition CONCAT_u1025_u1042_2221_sample_start_
        // start: Forward dependencies from (nextCRC16_DAT1 && ONE_1) to transition CONCAT_u1025_u1042_2221_sample_start_
        // done: Forward dependencies from (nextCRC16_DAT1 && ONE_1) to transition CONCAT_u1025_u1042_2221_sample_start_
        ;;[CONCAT_u1025_u1042_2221_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u1025_u1042_2221_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u1025_u1042_2221_sample_start_ &-> (CONCAT_u1025_u1042_2221_Sample)
        CONCAT_u1025_u1042_2221_sample_completed_ <-& (CONCAT_u1025_u1042_2221_Sample)
        CONCAT_u1025_u1042_2221_sample_completed_ &-> ($null)
        CONCAT_u1025_u1042_2221_update_start_ &-> (CONCAT_u1025_u1042_2221_Update)
        CONCAT_u1025_u1042_2221_update_completed_ <-& (CONCAT_u1025_u1042_2221_Update)
        // Target expression
        // (as target) newDat1
        // start: WAR dependencies for newDat1
        // done: WAR dependencies for newDat1
        // end:  		newDat1 := ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        // load-store dependencies..
      }
      assign_stmt_2222__entry__ |-> (assign_stmt_2222)
      assign_stmt_2222__exit__ <-| (assign_stmt_2222)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 769
      <o> [do_while_stmt_2223]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_2223__entry__] 
        $P[do_while_stmt_2223__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2223_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2225
          // 			$phi k_1 := 			  next_k_1 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
          // type of target is $uint<11>
          $T[phi_stmt_2225_sample_start_] 
          $T[phi_stmt_2225_sample_completed_] 
          $T[phi_stmt_2225_update_start_] 
          $T[phi_stmt_2225_update_completed_] 
          $T[phi_stmt_2225_sample_start__ps] 
          phi_stmt_2225_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2225_sample_completed__ps] 
          phi_stmt_2225_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2225_update_start__ps] 
          phi_stmt_2225_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2225_update_completed__ps] 
          phi_stmt_2225_update_completed_ <-& (phi_stmt_2225_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2225_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2225_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2225_update_start_)
          $T[phi_stmt_2225_loopback_trigger] 
          phi_stmt_2225_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2225_loopback_sample_req] 
          $T[phi_stmt_2225_loopback_sample_req_ps] 
          phi_stmt_2225_loopback_sample_req <-& (phi_stmt_2225_loopback_sample_req_ps)
          phi_stmt_2225_loopback_sample_req &-> ($null)
          $T[phi_stmt_2225_entry_trigger] 
          phi_stmt_2225_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2225_entry_sample_req] 
          $T[phi_stmt_2225_entry_sample_req_ps] 
          phi_stmt_2225_entry_sample_req <-& (phi_stmt_2225_entry_sample_req_ps)
          phi_stmt_2225_entry_sample_req &-> ($null)
          phi_stmt_2225_update_start_ o<-& (phi_stmt_2225_update_completed_ 0)
          phi_stmt_2225_sample_start_ o<-& (phi_stmt_2225_sample_completed_ 1)
          $T[phi_stmt_2225_merged_reqs] 
          $T[phi_stmt_2225_phi_mux_ack] 
          $T[phi_stmt_2225_phi_mux_ack_ps] 
          phi_stmt_2225_phi_mux_ack_ps <-& (phi_stmt_2225_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2225_update_completed_)
          $T[R_next_k_1_2227_sample_start__ps] 
          $T[R_next_k_1_2227_sample_completed__ps] 
          $T[R_next_k_1_2227_update_start__ps] 
          $T[R_next_k_1_2227_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_k_1_2227_sample_start_] 
          $T[R_next_k_1_2227_sample_completed_] 
          $T[R_next_k_1_2227_update_start_] 
          $T[R_next_k_1_2227_update_completed_] 
          ;;[R_next_k_1_2227_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_k_1_2227_sample_start_ &-> (R_next_k_1_2227_Sample)
          R_next_k_1_2227_sample_completed_ <-& (R_next_k_1_2227_Sample)
          ;;[R_next_k_1_2227_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_k_1_2227_update_start_ &-> (R_next_k_1_2227_Update)
          R_next_k_1_2227_update_completed_ <-& (R_next_k_1_2227_Update)
          // RAW reenables for next_k_1
          // Phi start dependency for implicit/constant alternative.
          R_next_k_1_2227_sample_start_ <-& (R_next_k_1_2227_sample_start__ps)
          R_next_k_1_2227_update_start_ <-& (R_next_k_1_2227_update_start__ps)
          // Phi complete dependency.
          R_next_k_1_2227_sample_completed__ps <-& (R_next_k_1_2227_sample_completed_)
          R_next_k_1_2227_update_completed__ps <-& (R_next_k_1_2227_update_completed_)
          $T[type_cast_2229_sample_start__ps] 
          $T[type_cast_2229_sample_completed__ps] 
          $T[type_cast_2229_update_start__ps] 
          $T[type_cast_2229_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2229_sample_start_] 
          $T[type_cast_2229_sample_completed_] 
          type_cast_2229_sample_completed_ <-& (type_cast_2229_sample_start_)
          $T[type_cast_2229_update_start_] 
          $T [type_cast_2229_update_completed_] $delay 
          type_cast_2229_update_completed_ <-& (type_cast_2229_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2229_sample_start_ <-& (type_cast_2229_sample_start__ps)
          type_cast_2229_update_start_ <-& (type_cast_2229_update_start__ps)
          // Phi complete dependency.
          type_cast_2229_sample_completed__ps <-& (type_cast_2229_sample_completed_)
          type_cast_2229_update_completed__ps <-& (type_cast_2229_update_completed_)
          $phisequencer [ phi_stmt_2225_phi_seq] : 
          phi_stmt_2225_loopback_trigger R_next_k_1_2227_sample_start__ps R_next_k_1_2227_sample_completed__ps R_next_k_1_2227_update_start__ps R_next_k_1_2227_update_completed__ps phi_stmt_2225_entry_trigger type_cast_2229_sample_start__ps type_cast_2229_sample_completed__ps type_cast_2229_update_start__ps type_cast_2229_update_completed__ps :
          phi_stmt_2225_sample_start__ps phi_stmt_2225_sample_completed__ps phi_stmt_2225_update_start__ps phi_stmt_2225_update_completed__ps :
          phi_stmt_2225_loopback_sample_req_ps phi_stmt_2225_entry_sample_req_ps : 
          phi_stmt_2225_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2225
          // start:  PHI statement phi_stmt_2230
          // 			$phi dat0bit4_1 := 			  newDat1 $on   $entry 			  nextbit4_1 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_2230_sample_start_] 
          $T[phi_stmt_2230_sample_completed_] 
          $T[phi_stmt_2230_update_start_] 
          $T[phi_stmt_2230_update_completed_] 
          $T[phi_stmt_2230_sample_start__ps] 
          phi_stmt_2230_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2230_sample_completed__ps] 
          phi_stmt_2230_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2230_update_start__ps] 
          phi_stmt_2230_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2230_update_completed__ps] 
          phi_stmt_2230_update_completed_ <-& (phi_stmt_2230_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2230_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2230_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2230_update_start_)
          $T[phi_stmt_2230_loopback_trigger] 
          phi_stmt_2230_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2230_loopback_sample_req] 
          $T[phi_stmt_2230_loopback_sample_req_ps] 
          phi_stmt_2230_loopback_sample_req <-& (phi_stmt_2230_loopback_sample_req_ps)
          phi_stmt_2230_loopback_sample_req &-> ($null)
          $T[phi_stmt_2230_entry_trigger] 
          phi_stmt_2230_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2230_entry_sample_req] 
          $T[phi_stmt_2230_entry_sample_req_ps] 
          phi_stmt_2230_entry_sample_req <-& (phi_stmt_2230_entry_sample_req_ps)
          phi_stmt_2230_entry_sample_req &-> ($null)
          phi_stmt_2230_update_start_ o<-& (phi_stmt_2230_update_completed_ 0)
          phi_stmt_2230_sample_start_ o<-& (phi_stmt_2230_sample_completed_ 1)
          $T[phi_stmt_2230_merged_reqs] 
          $T[phi_stmt_2230_phi_mux_ack] 
          $T[phi_stmt_2230_phi_mux_ack_ps] 
          phi_stmt_2230_phi_mux_ack_ps <-& (phi_stmt_2230_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2230_update_completed_)
          $T[R_nextbit4_1_2232_sample_start__ps] 
          $T[R_nextbit4_1_2232_sample_completed__ps] 
          $T[R_nextbit4_1_2232_update_start__ps] 
          $T[R_nextbit4_1_2232_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nextbit4_1_2232_sample_start_] 
          $T[R_nextbit4_1_2232_sample_completed_] 
          $T[R_nextbit4_1_2232_update_start_] 
          $T[R_nextbit4_1_2232_update_completed_] 
          ;;[R_nextbit4_1_2232_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextbit4_1_2232_sample_start_ &-> (R_nextbit4_1_2232_Sample)
          R_nextbit4_1_2232_sample_completed_ <-& (R_nextbit4_1_2232_Sample)
          ;;[R_nextbit4_1_2232_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextbit4_1_2232_update_start_ &-> (R_nextbit4_1_2232_Update)
          R_nextbit4_1_2232_update_completed_ <-& (R_nextbit4_1_2232_Update)
          // RAW reenables for nextbit4_1
          // Phi start dependency for implicit/constant alternative.
          R_nextbit4_1_2232_sample_start_ <-& (R_nextbit4_1_2232_sample_start__ps)
          R_nextbit4_1_2232_update_start_ <-& (R_nextbit4_1_2232_update_start__ps)
          // Phi complete dependency.
          R_nextbit4_1_2232_sample_completed__ps <-& (R_nextbit4_1_2232_sample_completed_)
          R_nextbit4_1_2232_update_completed__ps <-& (R_nextbit4_1_2232_update_completed_)
          $T[R_newDat1_2233_sample_start__ps] 
          $T[R_newDat1_2233_sample_completed__ps] 
          $T[R_newDat1_2233_update_start__ps] 
          $T[R_newDat1_2233_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_newDat1_2233_sample_start_] 
          $T[R_newDat1_2233_sample_completed_] 
          $T[R_newDat1_2233_update_start_] 
          $T[R_newDat1_2233_update_completed_] 
          ;;[R_newDat1_2233_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_newDat1_2233_sample_start_ &-> (R_newDat1_2233_Sample)
          R_newDat1_2233_sample_completed_ <-& (R_newDat1_2233_Sample)
          ;;[R_newDat1_2233_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_newDat1_2233_update_start_ &-> (R_newDat1_2233_Update)
          R_newDat1_2233_update_completed_ <-& (R_newDat1_2233_Update)
          // RAW reenables for newDat1
          // Phi start dependency for implicit/constant alternative.
          R_newDat1_2233_sample_start_ <-& (R_newDat1_2233_sample_start__ps)
          R_newDat1_2233_update_start_ <-& (R_newDat1_2233_update_start__ps)
          // Phi complete dependency.
          R_newDat1_2233_sample_completed__ps <-& (R_newDat1_2233_sample_completed_)
          R_newDat1_2233_update_completed__ps <-& (R_newDat1_2233_update_completed_)
          $phisequencer [ phi_stmt_2230_phi_seq] : 
          phi_stmt_2230_loopback_trigger R_nextbit4_1_2232_sample_start__ps R_nextbit4_1_2232_sample_completed__ps R_nextbit4_1_2232_update_start__ps R_nextbit4_1_2232_update_completed__ps phi_stmt_2230_entry_trigger R_newDat1_2233_sample_start__ps R_newDat1_2233_sample_completed__ps R_newDat1_2233_update_start__ps R_newDat1_2233_update_completed__ps :
          phi_stmt_2230_sample_start__ps phi_stmt_2230_sample_completed__ps phi_stmt_2230_update_start__ps phi_stmt_2230_update_completed__ps :
          phi_stmt_2230_loopback_sample_req_ps phi_stmt_2230_entry_sample_req_ps : 
          phi_stmt_2230_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2230
          // start:  			DAT1Tx := (dat0bit4_1 [] 1041 ) $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 777
          // Source expression
          // (dat0bit4_1 [] 1041 )
          $T[BITSEL_u1042_u1_2238_sample_start_] 
          $T[BITSEL_u1042_u1_2238_sample_completed_] 
          $T[BITSEL_u1042_u1_2238_update_start_] 
          $T[BITSEL_u1042_u1_2238_update_completed_] 
          // dat0bit4_1
          // start: Forward dependencies from dat0bit4_1 to transition BITSEL_u1042_u1_2238_sample_start_
          BITSEL_u1042_u1_2238_sample_start_ <-& (phi_stmt_2230_update_completed_)
          // done: Forward dependencies from dat0bit4_1 to transition BITSEL_u1042_u1_2238_sample_start_
          ;;[BITSEL_u1042_u1_2238_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[BITSEL_u1042_u1_2238_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          BITSEL_u1042_u1_2238_sample_start_ &-> (BITSEL_u1042_u1_2238_Sample)
          BITSEL_u1042_u1_2238_sample_completed_ <-& (BITSEL_u1042_u1_2238_Sample)
          BITSEL_u1042_u1_2238_sample_completed_ &-> ($null)
          BITSEL_u1042_u1_2238_update_start_ &-> (BITSEL_u1042_u1_2238_Update)
          BITSEL_u1042_u1_2238_update_completed_ <-& (BITSEL_u1042_u1_2238_Update)
          // RAW reenables for dat0bit4_1
          phi_stmt_2230_update_start_ o<-& (BITSEL_u1042_u1_2238_sample_completed_ 0)
          // self-release: 
          BITSEL_u1042_u1_2238_sample_start_ o<-& (BITSEL_u1042_u1_2238_sample_completed_ 1)
          $null &-> (BITSEL_u1042_u1_2238_update_start_)
          BITSEL_u1042_u1_2238_update_start_ o<-& (BITSEL_u1042_u1_2238_update_completed_ 0)
          // Target expression
          // (as target) DAT1Tx
          $T[WPIPE_DAT1Tx_2235_sample_start_] 
          $T[WPIPE_DAT1Tx_2235_sample_completed_] 
          $T[WPIPE_DAT1Tx_2235_update_start_] 
          $T[WPIPE_DAT1Tx_2235_update_completed_] 
          ;;[WPIPE_DAT1Tx_2235_Sample] 
          {
            // pipe write sample-start DAT1Tx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_DAT1Tx_2235_Update] 
          {
            // pipe write update (complete) DAT1Tx
            $T [req] $T [ack] 
          }
          WPIPE_DAT1Tx_2235_sample_start_ &-> (WPIPE_DAT1Tx_2235_Sample)
          WPIPE_DAT1Tx_2235_sample_completed_ <-& (WPIPE_DAT1Tx_2235_Sample)
          WPIPE_DAT1Tx_2235_update_start_ <-& (WPIPE_DAT1Tx_2235_sample_completed_)
          WPIPE_DAT1Tx_2235_update_start_ &-> (WPIPE_DAT1Tx_2235_Update)
          WPIPE_DAT1Tx_2235_update_completed_ <-& (WPIPE_DAT1Tx_2235_Update)
          WPIPE_DAT1Tx_2235_sample_start_ o<-& (WPIPE_DAT1Tx_2235_update_completed_ 0)
          // start: Forward dependencies from (dat0bit4_1 [] 1041 ) to transition WPIPE_DAT1Tx_2235_sample_start_
          WPIPE_DAT1Tx_2235_sample_start_ <-& (BITSEL_u1042_u1_2238_update_completed_)
          // done: Forward dependencies from (dat0bit4_1 [] 1041 ) to transition WPIPE_DAT1Tx_2235_sample_start_
          // RAW reenables for (dat0bit4_1 [] 1041 )
          BITSEL_u1042_u1_2238_update_start_ o<-& (WPIPE_DAT1Tx_2235_sample_completed_ 0)
          // end:  			DAT1Tx := (dat0bit4_1 [] 1041 ) $buffering 1// bits of buffering = 1. 
          // start: WAR dependencies for nextbit4_1
          // WAR dependency: Read: nextbit4_1 before Write: 			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_1
          // start:  			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 778
          // volatile! 
          // Source expression
          // (dat0bit4_1 << 1 )
          // dat0bit4_1
          // Target expression
          // (as target) nextbit4_1
          // start: WAR dependencies for nextbit4_1
          // WAR dependency: Read: nextbit4_1 before Write: 			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_1
          // end:  			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
          // start: WAR dependencies for next_k_1
          // WAR dependency: Read: next_k_1 before Write: 			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_1
          // start:  			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 779
          // volatile! 
          // Source expression
          // (k_1 + 1 )
          // k_1
          // Target expression
          // (as target) next_k_1
          // start: WAR dependencies for next_k_1
          // WAR dependency: Read: next_k_1 before Write: 			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_1
          // end:  			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
          // (next_k_1 < 1042 )
          // next_k_1
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_k_1 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2225_update_completed_)
          // done: Forward dependencies from (next_k_1 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT1Tx
          // read-dependencies for pipe DAT1Tx
          // write-dependencies for pipe DAT1Tx
          // signal write dependencies for DAT1Tx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2223__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2223_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2223__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2223_loop_body : condition_evaluated
        $bind do_while_stmt_2223__entry__  => do_while_stmt_2223_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2223_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2223__exit__)
      }
      do_while_stmt_2223__entry__ |-> (do_while_stmt_2223)
      do_while_stmt_2223__exit__ <-| (do_while_stmt_2223)
      assign_stmt_2222__entry__ <-| (branch_block_stmt_2213__entry__)
      do_while_stmt_2223__entry__ <-| (assign_stmt_2222__exit__)
      do_while_stmt_2223__exit__ |-> (branch_block_stmt_2213__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendDAT1%parallelblock_two%
    //  file .Aa/sdhc.opt.aa, line 771
    // constant-object-declarations for block %sendDAT1%parallelblock_two
    //  file .Aa/sdhc.opt.aa, line 766
    // constant-object-declarations for block %sendDAT1
    //  file .Aa/sdhc.opt.aa, line 761
    // constant-declarations for block %sendDAT1%parallelblock_two
    //  file .Aa/sdhc.opt.aa, line 766
    // ZERO_1
    $constant $W[R_ZERO_1_2215_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_2219_wire_constant] : $int<1> := _b1// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 769
    // 1042 
    $constant $W[konst_2252_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %sendDAT1%parallelblock_two%
    //  file .Aa/sdhc.opt.aa, line 771
    // constant-declarations for phi:  			$phi k_1 := 			  next_k_1 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 772
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2229_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat0bit4_1 := 			  newDat1 $on   $entry 			  nextbit4_1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 774
    // 1041 
    $constant $W[konst_2237_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2242_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2247_wire_constant] : $int<11> := _b00000000001// 1
    // block %sendDAT1%parallelblock_two
    //  file .Aa/sdhc.opt.aa, line 766
    // 		newDat1 := ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 768
    // (ZERO_1 && dat1)
    $intermediate $W[CONCAT_u1_u1025_2217_wire] : $int<1025>
    // (nextCRC16_DAT1 && ONE_1)
    $intermediate $W[CONCAT_u16_u17_2220_wire] : $int<17>
    // newDat1
    $W[newDat1_2222] : $int<1042>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 769
    // (next_k_1 < 1042 )
    $intermediate $W[ULT_u11_u1_2253_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 771
    // 			$phi k_1 := 			  next_k_1 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 772
    $W[next_k_1_2249_2227_buffered] : $int<11>
    // k_1
    $W[k_1_2225] : $int<11>
    // 			$phi dat0bit4_1 := 			  newDat1 $on   $entry 			  nextbit4_1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 774
    $W[nextbit4_1_2244_2232_buffered] : $int<1042>
    $W[newDat1_2222_2233_buffered] : $int<1042>
    // dat0bit4_1
    $W[dat0bit4_1_2230] : $int<1042>
    // 			DAT1Tx := (dat0bit4_1 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 777
    // (dat0bit4_1 [] 1041 )
    $intermediate $W[BITSEL_u1042_u1_2238_wire] : $int<1>
    // DAT1Tx
    // 			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 778
    // nextbit4_1
    $W[nextbit4_1_2244] : $int<1042>
    // 			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 779
    // next_k_1
    $W[next_k_1_2249] : $int<11>
    // datapath-instances for block %sendDAT1%parallelblock_two
    //  file .Aa/sdhc.opt.aa, line 766
    // 		newDat1 := ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 768
    // (ZERO_1 && dat1)
    &&[CONCAT_u1_u1025_2217_inst] (R_ZERO_1_2215_wire_constant dat1) (CONCAT_u1_u1025_2217_wire)   $flowthrough 
    $delay CONCAT_u1_u1025_2217_inst 0
    // (nextCRC16_DAT1 && ONE_1)
    &&[CONCAT_u16_u17_2220_inst] (nextCRC16_DAT1 R_ONE_1_2219_wire_constant) (CONCAT_u16_u17_2220_wire)   $flowthrough 
    $delay CONCAT_u16_u17_2220_inst 0
    // ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1))
    &&[CONCAT_u1025_u1042_2221_inst] (CONCAT_u1_u1025_2217_wire CONCAT_u16_u17_2220_wire) (newDat1_2222)   
    $buffering  $out CONCAT_u1025_u1042_2221_inst newDat1_2222 1
    $delay CONCAT_u1025_u1042_2221_inst 1
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 769
    // (next_k_1 < 1042 )
    <[ULT_u11_u1_2253_inst] (next_k_1_2249 konst_2252_wire_constant) (ULT_u11_u1_2253_wire)   $flowthrough 
    $delay ULT_u11_u1_2253_inst 0
    ==0? [do_while_stmt_2223_branch] (ULT_u11_u1_2253_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 771
    // 			$phi k_1 := 			  next_k_1 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 772
    # := [next_k_1_2249_2227_buf] (next_k_1_2249) (next_k_1_2249_2227_buffered)     $fullrate
    $buffering $out next_k_1_2249_2227_buf next_k_1_2249_2227_buffered  1
    # $phi [phi_stmt_2225] (next_k_1_2249_2227_buffered type_cast_2229_wire_constant) ( k_1_2225 ) $fullrate
    // $buffering  $out phi_stmt_2225 k_1_2225 2
    // 			$phi dat0bit4_1 := 			  newDat1 $on   $entry 			  nextbit4_1 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 774
    # := [nextbit4_1_2244_2232_buf] (nextbit4_1_2244) (nextbit4_1_2244_2232_buffered)     $fullrate
    $buffering $out nextbit4_1_2244_2232_buf nextbit4_1_2244_2232_buffered  1
    # := [newDat1_2222_2233_buf] (newDat1_2222) (newDat1_2222_2233_buffered)     $fullrate
    $buffering $out newDat1_2222_2233_buf newDat1_2222_2233_buffered  1
    # $phi [phi_stmt_2230] (nextbit4_1_2244_2232_buffered newDat1_2222_2233_buffered) ( dat0bit4_1_2230 ) $fullrate
    // $buffering  $out phi_stmt_2230 dat0bit4_1_2230 2
    // 			DAT1Tx := (dat0bit4_1 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 777
    // (dat0bit4_1 [] 1041 )
    [][BITSEL_u1042_u1_2238_inst] (dat0bit4_1_2230 konst_2237_wire_constant) (BITSEL_u1042_u1_2238_wire)    $fullrate
    $buffering  $out BITSEL_u1042_u1_2238_inst BITSEL_u1042_u1_2238_wire 1
    $delay BITSEL_u1042_u1_2238_inst 1
    // DAT1Tx
    $ioport $out [WPIPE_DAT1Tx_2235_inst]  (BITSEL_u1042_u1_2238_wire) (DAT1Tx)  $fullrate 
    // 			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 778
    // (dat0bit4_1 << 1 )
    <<[SHL_u1042_u1042_2243_inst] (dat0bit4_1_2230 konst_2242_wire_constant) (nextbit4_1_2244)   $flowthrough 
    $delay SHL_u1042_u1042_2243_inst 0
    // 			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 779
    // (k_1 + 1 )
    +[ADD_u11_u11_2248_inst] (k_1_2225 konst_2247_wire_constant) (next_k_1_2249)   $flowthrough 
    $delay ADD_u11_u11_2248_inst 0
  }
  // end data-path
  // 		newDat1 := ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1)) $buffering 1// bits of buffering = 1042. 
  //  file .Aa/sdhc.opt.aa, line 768
  // ((ZERO_1 && dat1) && (nextCRC16_DAT1 && ONE_1))
  // (ZERO_1 && dat1)
  // dat1
  // (nextCRC16_DAT1 && ONE_1)
  // nextCRC16_DAT1
  CONCAT_u1025_u1042_2221_inst <=> (branch_block_stmt_2213/assign_stmt_2222/CONCAT_u1025_u1042_2221_Sample/rr branch_block_stmt_2213/assign_stmt_2222/CONCAT_u1025_u1042_2221_Update/cr) (branch_block_stmt_2213/assign_stmt_2222/CONCAT_u1025_u1042_2221_Sample/ra branch_block_stmt_2213/assign_stmt_2222/CONCAT_u1025_u1042_2221_Update/ca)
  // CP-DP links for do-while  do_while_stmt_2223
  //  file .Aa/sdhc.opt.aa, line 769
  phi_stmt_2225 <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2225_loopback_sample_req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2225_entry_sample_req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2225_phi_mux_ack)
  next_k_1_2249_2227_buf <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_next_k_1_2227_Sample/req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_next_k_1_2227_Update/req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_next_k_1_2227_Sample/ack branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_next_k_1_2227_Update/ack)
  phi_stmt_2230 <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2230_loopback_sample_req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2230_entry_sample_req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/phi_stmt_2230_phi_mux_ack)
  nextbit4_1_2244_2232_buf <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_nextbit4_1_2232_Sample/req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_nextbit4_1_2232_Update/req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_nextbit4_1_2232_Sample/ack branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_nextbit4_1_2232_Update/ack)
  newDat1_2222_2233_buf <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_newDat1_2233_Sample/req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_newDat1_2233_Update/req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_newDat1_2233_Sample/ack branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/R_newDat1_2233_Update/ack)
  // 			DAT1Tx := (dat0bit4_1 [] 1041 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 777
  // (dat0bit4_1 [] 1041 )
  // dat0bit4_1
  BITSEL_u1042_u1_2238_inst <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/BITSEL_u1042_u1_2238_Sample/rr branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/BITSEL_u1042_u1_2238_Update/cr) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/BITSEL_u1042_u1_2238_Sample/ra branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/BITSEL_u1042_u1_2238_Update/ca)
  // DAT1Tx
  WPIPE_DAT1Tx_2235_inst <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/WPIPE_DAT1Tx_2235_Sample/req branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/WPIPE_DAT1Tx_2235_Update/req) (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/WPIPE_DAT1Tx_2235_Sample/ack branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/WPIPE_DAT1Tx_2235_Update/ack)
  // 			$volatile nextbit4_1 := (dat0bit4_1 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 778
  // (dat0bit4_1 << 1 )
  // dat0bit4_1
  // 			$volatile next_k_1 := (k_1 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 779
  // (k_1 + 1 )
  // k_1
  // (next_k_1 < 1042 )
  // next_k_1
  do_while_stmt_2223_branch <=> (branch_block_stmt_2213/do_while_stmt_2223/do_while_stmt_2223_loop_body/condition_evaluated) (branch_block_stmt_2213/do_while_stmt_2223/loop_exit/ack branch_block_stmt_2213/do_while_stmt_2223/loop_taken/ack)
}
$module [sendDAT2] 
{
  $in dat2:$int<1024>
  // can point into 
  nextCRC16_DAT2:$int<16>
  // can point into 
  // pipe-declarations for block %sendDAT2
  //  file .Aa/sdhc.opt.aa, line 783
  // pipe-declarations for block %sendDAT2%parallelblock_three
  //  file .Aa/sdhc.opt.aa, line 788
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_2259] // Branch Block  file .Aa/sdhc.opt.aa, line 788
    {
      $P [branch_block_stmt_2259__entry__]
      branch_block_stmt_2259__entry__ <-| ($entry)
      $P [branch_block_stmt_2259__exit__]
      branch_block_stmt_2259__exit__ |-> ($exit)
      $P [assign_stmt_2268__entry__] 
      $P [assign_stmt_2268__exit__] 
      $P [do_while_stmt_2269__entry__] 
      $P [do_while_stmt_2269__exit__] 
      ::[assign_stmt_2268] 
      {
        // start:  		newDat2 := ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        //  file .Aa/sdhc.opt.aa, line 790
        // Source expression
        // ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1))
        $T[CONCAT_u1025_u1042_2267_sample_start_] 
        $T[CONCAT_u1025_u1042_2267_sample_completed_] 
        $T[CONCAT_u1025_u1042_2267_update_start_] 
        $T[CONCAT_u1025_u1042_2267_update_completed_] 
        // (ZERO_1 && dat2)
        // dat2
        // (nextCRC16_DAT2 && ONE_1)
        // nextCRC16_DAT2
        // start: Forward dependencies from (ZERO_1 && dat2) to transition CONCAT_u1025_u1042_2267_sample_start_
        // done: Forward dependencies from (ZERO_1 && dat2) to transition CONCAT_u1025_u1042_2267_sample_start_
        // start: Forward dependencies from (nextCRC16_DAT2 && ONE_1) to transition CONCAT_u1025_u1042_2267_sample_start_
        // done: Forward dependencies from (nextCRC16_DAT2 && ONE_1) to transition CONCAT_u1025_u1042_2267_sample_start_
        ;;[CONCAT_u1025_u1042_2267_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u1025_u1042_2267_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u1025_u1042_2267_sample_start_ &-> (CONCAT_u1025_u1042_2267_Sample)
        CONCAT_u1025_u1042_2267_sample_completed_ <-& (CONCAT_u1025_u1042_2267_Sample)
        CONCAT_u1025_u1042_2267_sample_completed_ &-> ($null)
        CONCAT_u1025_u1042_2267_update_start_ &-> (CONCAT_u1025_u1042_2267_Update)
        CONCAT_u1025_u1042_2267_update_completed_ <-& (CONCAT_u1025_u1042_2267_Update)
        // Target expression
        // (as target) newDat2
        // start: WAR dependencies for newDat2
        // done: WAR dependencies for newDat2
        // end:  		newDat2 := ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        // load-store dependencies..
      }
      assign_stmt_2268__entry__ |-> (assign_stmt_2268)
      assign_stmt_2268__exit__ <-| (assign_stmt_2268)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 791
      <o> [do_while_stmt_2269]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_2269__entry__] 
        $P[do_while_stmt_2269__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2269_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2271
          // 			$phi k_2 := 			  next_k_2 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
          // type of target is $uint<11>
          $T[phi_stmt_2271_sample_start_] 
          $T[phi_stmt_2271_sample_completed_] 
          $T[phi_stmt_2271_update_start_] 
          $T[phi_stmt_2271_update_completed_] 
          $T[phi_stmt_2271_sample_start__ps] 
          phi_stmt_2271_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2271_sample_completed__ps] 
          phi_stmt_2271_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2271_update_start__ps] 
          phi_stmt_2271_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2271_update_completed__ps] 
          phi_stmt_2271_update_completed_ <-& (phi_stmt_2271_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2271_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2271_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2271_update_start_)
          $T[phi_stmt_2271_loopback_trigger] 
          phi_stmt_2271_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2271_loopback_sample_req] 
          $T[phi_stmt_2271_loopback_sample_req_ps] 
          phi_stmt_2271_loopback_sample_req <-& (phi_stmt_2271_loopback_sample_req_ps)
          phi_stmt_2271_loopback_sample_req &-> ($null)
          $T[phi_stmt_2271_entry_trigger] 
          phi_stmt_2271_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2271_entry_sample_req] 
          $T[phi_stmt_2271_entry_sample_req_ps] 
          phi_stmt_2271_entry_sample_req <-& (phi_stmt_2271_entry_sample_req_ps)
          phi_stmt_2271_entry_sample_req &-> ($null)
          phi_stmt_2271_update_start_ o<-& (phi_stmt_2271_update_completed_ 0)
          phi_stmt_2271_sample_start_ o<-& (phi_stmt_2271_sample_completed_ 1)
          $T[phi_stmt_2271_merged_reqs] 
          $T[phi_stmt_2271_phi_mux_ack] 
          $T[phi_stmt_2271_phi_mux_ack_ps] 
          phi_stmt_2271_phi_mux_ack_ps <-& (phi_stmt_2271_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2271_update_completed_)
          $T[R_next_k_2_2273_sample_start__ps] 
          $T[R_next_k_2_2273_sample_completed__ps] 
          $T[R_next_k_2_2273_update_start__ps] 
          $T[R_next_k_2_2273_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_k_2_2273_sample_start_] 
          $T[R_next_k_2_2273_sample_completed_] 
          $T[R_next_k_2_2273_update_start_] 
          $T[R_next_k_2_2273_update_completed_] 
          ;;[R_next_k_2_2273_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_k_2_2273_sample_start_ &-> (R_next_k_2_2273_Sample)
          R_next_k_2_2273_sample_completed_ <-& (R_next_k_2_2273_Sample)
          ;;[R_next_k_2_2273_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_k_2_2273_update_start_ &-> (R_next_k_2_2273_Update)
          R_next_k_2_2273_update_completed_ <-& (R_next_k_2_2273_Update)
          // RAW reenables for next_k_2
          // Phi start dependency for implicit/constant alternative.
          R_next_k_2_2273_sample_start_ <-& (R_next_k_2_2273_sample_start__ps)
          R_next_k_2_2273_update_start_ <-& (R_next_k_2_2273_update_start__ps)
          // Phi complete dependency.
          R_next_k_2_2273_sample_completed__ps <-& (R_next_k_2_2273_sample_completed_)
          R_next_k_2_2273_update_completed__ps <-& (R_next_k_2_2273_update_completed_)
          $T[type_cast_2275_sample_start__ps] 
          $T[type_cast_2275_sample_completed__ps] 
          $T[type_cast_2275_update_start__ps] 
          $T[type_cast_2275_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2275_sample_start_] 
          $T[type_cast_2275_sample_completed_] 
          type_cast_2275_sample_completed_ <-& (type_cast_2275_sample_start_)
          $T[type_cast_2275_update_start_] 
          $T [type_cast_2275_update_completed_] $delay 
          type_cast_2275_update_completed_ <-& (type_cast_2275_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2275_sample_start_ <-& (type_cast_2275_sample_start__ps)
          type_cast_2275_update_start_ <-& (type_cast_2275_update_start__ps)
          // Phi complete dependency.
          type_cast_2275_sample_completed__ps <-& (type_cast_2275_sample_completed_)
          type_cast_2275_update_completed__ps <-& (type_cast_2275_update_completed_)
          $phisequencer [ phi_stmt_2271_phi_seq] : 
          phi_stmt_2271_loopback_trigger R_next_k_2_2273_sample_start__ps R_next_k_2_2273_sample_completed__ps R_next_k_2_2273_update_start__ps R_next_k_2_2273_update_completed__ps phi_stmt_2271_entry_trigger type_cast_2275_sample_start__ps type_cast_2275_sample_completed__ps type_cast_2275_update_start__ps type_cast_2275_update_completed__ps :
          phi_stmt_2271_sample_start__ps phi_stmt_2271_sample_completed__ps phi_stmt_2271_update_start__ps phi_stmt_2271_update_completed__ps :
          phi_stmt_2271_loopback_sample_req_ps phi_stmt_2271_entry_sample_req_ps : 
          phi_stmt_2271_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2271
          // start:  PHI statement phi_stmt_2276
          // 			$phi dat0bit4_2 := 			  newDat2 $on   $entry 			  nextbit4_2 $on   $loopback 
          // type of target is $uint<1042>
          $T[phi_stmt_2276_sample_start_] 
          $T[phi_stmt_2276_sample_completed_] 
          $T[phi_stmt_2276_update_start_] 
          $T[phi_stmt_2276_update_completed_] 
          $T[phi_stmt_2276_sample_start__ps] 
          phi_stmt_2276_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2276_sample_completed__ps] 
          phi_stmt_2276_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2276_update_start__ps] 
          phi_stmt_2276_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2276_update_completed__ps] 
          phi_stmt_2276_update_completed_ <-& (phi_stmt_2276_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2276_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2276_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2276_update_start_)
          $T[phi_stmt_2276_loopback_trigger] 
          phi_stmt_2276_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2276_loopback_sample_req] 
          $T[phi_stmt_2276_loopback_sample_req_ps] 
          phi_stmt_2276_loopback_sample_req <-& (phi_stmt_2276_loopback_sample_req_ps)
          phi_stmt_2276_loopback_sample_req &-> ($null)
          $T[phi_stmt_2276_entry_trigger] 
          phi_stmt_2276_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2276_entry_sample_req] 
          $T[phi_stmt_2276_entry_sample_req_ps] 
          phi_stmt_2276_entry_sample_req <-& (phi_stmt_2276_entry_sample_req_ps)
          phi_stmt_2276_entry_sample_req &-> ($null)
          phi_stmt_2276_update_start_ o<-& (phi_stmt_2276_update_completed_ 0)
          phi_stmt_2276_sample_start_ o<-& (phi_stmt_2276_sample_completed_ 1)
          $T[phi_stmt_2276_merged_reqs] 
          $T[phi_stmt_2276_phi_mux_ack] 
          $T[phi_stmt_2276_phi_mux_ack_ps] 
          phi_stmt_2276_phi_mux_ack_ps <-& (phi_stmt_2276_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2276_update_completed_)
          $T[R_nextbit4_2_2278_sample_start__ps] 
          $T[R_nextbit4_2_2278_sample_completed__ps] 
          $T[R_nextbit4_2_2278_update_start__ps] 
          $T[R_nextbit4_2_2278_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nextbit4_2_2278_sample_start_] 
          $T[R_nextbit4_2_2278_sample_completed_] 
          $T[R_nextbit4_2_2278_update_start_] 
          $T[R_nextbit4_2_2278_update_completed_] 
          ;;[R_nextbit4_2_2278_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextbit4_2_2278_sample_start_ &-> (R_nextbit4_2_2278_Sample)
          R_nextbit4_2_2278_sample_completed_ <-& (R_nextbit4_2_2278_Sample)
          ;;[R_nextbit4_2_2278_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextbit4_2_2278_update_start_ &-> (R_nextbit4_2_2278_Update)
          R_nextbit4_2_2278_update_completed_ <-& (R_nextbit4_2_2278_Update)
          // RAW reenables for nextbit4_2
          // Phi start dependency for implicit/constant alternative.
          R_nextbit4_2_2278_sample_start_ <-& (R_nextbit4_2_2278_sample_start__ps)
          R_nextbit4_2_2278_update_start_ <-& (R_nextbit4_2_2278_update_start__ps)
          // Phi complete dependency.
          R_nextbit4_2_2278_sample_completed__ps <-& (R_nextbit4_2_2278_sample_completed_)
          R_nextbit4_2_2278_update_completed__ps <-& (R_nextbit4_2_2278_update_completed_)
          $T[R_newDat2_2279_sample_start__ps] 
          $T[R_newDat2_2279_sample_completed__ps] 
          $T[R_newDat2_2279_update_start__ps] 
          $T[R_newDat2_2279_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_newDat2_2279_sample_start_] 
          $T[R_newDat2_2279_sample_completed_] 
          $T[R_newDat2_2279_update_start_] 
          $T[R_newDat2_2279_update_completed_] 
          ;;[R_newDat2_2279_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_newDat2_2279_sample_start_ &-> (R_newDat2_2279_Sample)
          R_newDat2_2279_sample_completed_ <-& (R_newDat2_2279_Sample)
          ;;[R_newDat2_2279_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_newDat2_2279_update_start_ &-> (R_newDat2_2279_Update)
          R_newDat2_2279_update_completed_ <-& (R_newDat2_2279_Update)
          // RAW reenables for newDat2
          // Phi start dependency for implicit/constant alternative.
          R_newDat2_2279_sample_start_ <-& (R_newDat2_2279_sample_start__ps)
          R_newDat2_2279_update_start_ <-& (R_newDat2_2279_update_start__ps)
          // Phi complete dependency.
          R_newDat2_2279_sample_completed__ps <-& (R_newDat2_2279_sample_completed_)
          R_newDat2_2279_update_completed__ps <-& (R_newDat2_2279_update_completed_)
          $phisequencer [ phi_stmt_2276_phi_seq] : 
          phi_stmt_2276_loopback_trigger R_nextbit4_2_2278_sample_start__ps R_nextbit4_2_2278_sample_completed__ps R_nextbit4_2_2278_update_start__ps R_nextbit4_2_2278_update_completed__ps phi_stmt_2276_entry_trigger R_newDat2_2279_sample_start__ps R_newDat2_2279_sample_completed__ps R_newDat2_2279_update_start__ps R_newDat2_2279_update_completed__ps :
          phi_stmt_2276_sample_start__ps phi_stmt_2276_sample_completed__ps phi_stmt_2276_update_start__ps phi_stmt_2276_update_completed__ps :
          phi_stmt_2276_loopback_sample_req_ps phi_stmt_2276_entry_sample_req_ps : 
          phi_stmt_2276_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2276
          // start:  			DAT2Tx := (dat0bit4_2 [] 1041 ) $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 799
          // Source expression
          // (dat0bit4_2 [] 1041 )
          $T[BITSEL_u1042_u1_2284_sample_start_] 
          $T[BITSEL_u1042_u1_2284_sample_completed_] 
          $T[BITSEL_u1042_u1_2284_update_start_] 
          $T[BITSEL_u1042_u1_2284_update_completed_] 
          // dat0bit4_2
          // start: Forward dependencies from dat0bit4_2 to transition BITSEL_u1042_u1_2284_sample_start_
          BITSEL_u1042_u1_2284_sample_start_ <-& (phi_stmt_2276_update_completed_)
          // done: Forward dependencies from dat0bit4_2 to transition BITSEL_u1042_u1_2284_sample_start_
          ;;[BITSEL_u1042_u1_2284_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[BITSEL_u1042_u1_2284_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          BITSEL_u1042_u1_2284_sample_start_ &-> (BITSEL_u1042_u1_2284_Sample)
          BITSEL_u1042_u1_2284_sample_completed_ <-& (BITSEL_u1042_u1_2284_Sample)
          BITSEL_u1042_u1_2284_sample_completed_ &-> ($null)
          BITSEL_u1042_u1_2284_update_start_ &-> (BITSEL_u1042_u1_2284_Update)
          BITSEL_u1042_u1_2284_update_completed_ <-& (BITSEL_u1042_u1_2284_Update)
          // RAW reenables for dat0bit4_2
          phi_stmt_2276_update_start_ o<-& (BITSEL_u1042_u1_2284_sample_completed_ 0)
          // self-release: 
          BITSEL_u1042_u1_2284_sample_start_ o<-& (BITSEL_u1042_u1_2284_sample_completed_ 1)
          $null &-> (BITSEL_u1042_u1_2284_update_start_)
          BITSEL_u1042_u1_2284_update_start_ o<-& (BITSEL_u1042_u1_2284_update_completed_ 0)
          // Target expression
          // (as target) DAT2Tx
          $T[WPIPE_DAT2Tx_2281_sample_start_] 
          $T[WPIPE_DAT2Tx_2281_sample_completed_] 
          $T[WPIPE_DAT2Tx_2281_update_start_] 
          $T[WPIPE_DAT2Tx_2281_update_completed_] 
          ;;[WPIPE_DAT2Tx_2281_Sample] 
          {
            // pipe write sample-start DAT2Tx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_DAT2Tx_2281_Update] 
          {
            // pipe write update (complete) DAT2Tx
            $T [req] $T [ack] 
          }
          WPIPE_DAT2Tx_2281_sample_start_ &-> (WPIPE_DAT2Tx_2281_Sample)
          WPIPE_DAT2Tx_2281_sample_completed_ <-& (WPIPE_DAT2Tx_2281_Sample)
          WPIPE_DAT2Tx_2281_update_start_ <-& (WPIPE_DAT2Tx_2281_sample_completed_)
          WPIPE_DAT2Tx_2281_update_start_ &-> (WPIPE_DAT2Tx_2281_Update)
          WPIPE_DAT2Tx_2281_update_completed_ <-& (WPIPE_DAT2Tx_2281_Update)
          WPIPE_DAT2Tx_2281_sample_start_ o<-& (WPIPE_DAT2Tx_2281_update_completed_ 0)
          // start: Forward dependencies from (dat0bit4_2 [] 1041 ) to transition WPIPE_DAT2Tx_2281_sample_start_
          WPIPE_DAT2Tx_2281_sample_start_ <-& (BITSEL_u1042_u1_2284_update_completed_)
          // done: Forward dependencies from (dat0bit4_2 [] 1041 ) to transition WPIPE_DAT2Tx_2281_sample_start_
          // RAW reenables for (dat0bit4_2 [] 1041 )
          BITSEL_u1042_u1_2284_update_start_ o<-& (WPIPE_DAT2Tx_2281_sample_completed_ 0)
          // end:  			DAT2Tx := (dat0bit4_2 [] 1041 ) $buffering 1// bits of buffering = 1. 
          // start: WAR dependencies for nextbit4_2
          // WAR dependency: Read: nextbit4_2 before Write: 			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_2
          // start:  			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 800
          // volatile! 
          // Source expression
          // (dat0bit4_2 << 1 )
          // dat0bit4_2
          // Target expression
          // (as target) nextbit4_2
          // start: WAR dependencies for nextbit4_2
          // WAR dependency: Read: nextbit4_2 before Write: 			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_2
          // end:  			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
          // start: WAR dependencies for next_k_2
          // WAR dependency: Read: next_k_2 before Write: 			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_2
          // start:  			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 801
          // volatile! 
          // Source expression
          // (k_2 + 1 )
          // k_2
          // Target expression
          // (as target) next_k_2
          // start: WAR dependencies for next_k_2
          // WAR dependency: Read: next_k_2 before Write: 			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_2
          // end:  			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
          // (next_k_2 < 1042 )
          // next_k_2
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_k_2 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2271_update_completed_)
          // done: Forward dependencies from (next_k_2 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT2Tx
          // read-dependencies for pipe DAT2Tx
          // write-dependencies for pipe DAT2Tx
          // signal write dependencies for DAT2Tx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2269__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2269_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2269__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2269_loop_body : condition_evaluated
        $bind do_while_stmt_2269__entry__  => do_while_stmt_2269_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2269_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2269__exit__)
      }
      do_while_stmt_2269__entry__ |-> (do_while_stmt_2269)
      do_while_stmt_2269__exit__ <-| (do_while_stmt_2269)
      assign_stmt_2268__entry__ <-| (branch_block_stmt_2259__entry__)
      do_while_stmt_2269__entry__ <-| (assign_stmt_2268__exit__)
      do_while_stmt_2269__exit__ |-> (branch_block_stmt_2259__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendDAT2%parallelblock_three%
    //  file .Aa/sdhc.opt.aa, line 793
    // constant-object-declarations for block %sendDAT2%parallelblock_three
    //  file .Aa/sdhc.opt.aa, line 788
    // constant-object-declarations for block %sendDAT2
    //  file .Aa/sdhc.opt.aa, line 783
    // constant-declarations for block %sendDAT2%parallelblock_three
    //  file .Aa/sdhc.opt.aa, line 788
    // ZERO_1
    $constant $W[R_ZERO_1_2261_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_2265_wire_constant] : $int<1> := _b1// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 791
    // 1042 
    $constant $W[konst_2298_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %sendDAT2%parallelblock_three%
    //  file .Aa/sdhc.opt.aa, line 793
    // constant-declarations for phi:  			$phi k_2 := 			  next_k_2 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 794
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2275_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat0bit4_2 := 			  newDat2 $on   $entry 			  nextbit4_2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 796
    // 1041 
    $constant $W[konst_2283_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2288_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2293_wire_constant] : $int<11> := _b00000000001// 1
    // block %sendDAT2%parallelblock_three
    //  file .Aa/sdhc.opt.aa, line 788
    // 		newDat2 := ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 790
    // (ZERO_1 && dat2)
    $intermediate $W[CONCAT_u1_u1025_2263_wire] : $int<1025>
    // (nextCRC16_DAT2 && ONE_1)
    $intermediate $W[CONCAT_u16_u17_2266_wire] : $int<17>
    // newDat2
    $W[newDat2_2268] : $int<1042>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 791
    // (next_k_2 < 1042 )
    $intermediate $W[ULT_u11_u1_2299_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 793
    // 			$phi k_2 := 			  next_k_2 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 794
    $W[next_k_2_2295_2273_buffered] : $int<11>
    // k_2
    $W[k_2_2271] : $int<11>
    // 			$phi dat0bit4_2 := 			  newDat2 $on   $entry 			  nextbit4_2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 796
    $W[nextbit4_2_2290_2278_buffered] : $int<1042>
    $W[newDat2_2268_2279_buffered] : $int<1042>
    // dat0bit4_2
    $W[dat0bit4_2_2276] : $int<1042>
    // 			DAT2Tx := (dat0bit4_2 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 799
    // (dat0bit4_2 [] 1041 )
    $intermediate $W[BITSEL_u1042_u1_2284_wire] : $int<1>
    // DAT2Tx
    // 			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 800
    // nextbit4_2
    $W[nextbit4_2_2290] : $int<1042>
    // 			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 801
    // next_k_2
    $W[next_k_2_2295] : $int<11>
    // datapath-instances for block %sendDAT2%parallelblock_three
    //  file .Aa/sdhc.opt.aa, line 788
    // 		newDat2 := ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 790
    // (ZERO_1 && dat2)
    &&[CONCAT_u1_u1025_2263_inst] (R_ZERO_1_2261_wire_constant dat2) (CONCAT_u1_u1025_2263_wire)   $flowthrough 
    $delay CONCAT_u1_u1025_2263_inst 0
    // (nextCRC16_DAT2 && ONE_1)
    &&[CONCAT_u16_u17_2266_inst] (nextCRC16_DAT2 R_ONE_1_2265_wire_constant) (CONCAT_u16_u17_2266_wire)   $flowthrough 
    $delay CONCAT_u16_u17_2266_inst 0
    // ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1))
    &&[CONCAT_u1025_u1042_2267_inst] (CONCAT_u1_u1025_2263_wire CONCAT_u16_u17_2266_wire) (newDat2_2268)   
    $buffering  $out CONCAT_u1025_u1042_2267_inst newDat2_2268 1
    $delay CONCAT_u1025_u1042_2267_inst 1
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 791
    // (next_k_2 < 1042 )
    <[ULT_u11_u1_2299_inst] (next_k_2_2295 konst_2298_wire_constant) (ULT_u11_u1_2299_wire)   $flowthrough 
    $delay ULT_u11_u1_2299_inst 0
    ==0? [do_while_stmt_2269_branch] (ULT_u11_u1_2299_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 793
    // 			$phi k_2 := 			  next_k_2 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 794
    # := [next_k_2_2295_2273_buf] (next_k_2_2295) (next_k_2_2295_2273_buffered)     $fullrate
    $buffering $out next_k_2_2295_2273_buf next_k_2_2295_2273_buffered  1
    # $phi [phi_stmt_2271] (next_k_2_2295_2273_buffered type_cast_2275_wire_constant) ( k_2_2271 ) $fullrate
    // $buffering  $out phi_stmt_2271 k_2_2271 2
    // 			$phi dat0bit4_2 := 			  newDat2 $on   $entry 			  nextbit4_2 $on   $loopback 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 796
    # := [nextbit4_2_2290_2278_buf] (nextbit4_2_2290) (nextbit4_2_2290_2278_buffered)     $fullrate
    $buffering $out nextbit4_2_2290_2278_buf nextbit4_2_2290_2278_buffered  1
    # := [newDat2_2268_2279_buf] (newDat2_2268) (newDat2_2268_2279_buffered)     $fullrate
    $buffering $out newDat2_2268_2279_buf newDat2_2268_2279_buffered  1
    # $phi [phi_stmt_2276] (nextbit4_2_2290_2278_buffered newDat2_2268_2279_buffered) ( dat0bit4_2_2276 ) $fullrate
    // $buffering  $out phi_stmt_2276 dat0bit4_2_2276 2
    // 			DAT2Tx := (dat0bit4_2 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 799
    // (dat0bit4_2 [] 1041 )
    [][BITSEL_u1042_u1_2284_inst] (dat0bit4_2_2276 konst_2283_wire_constant) (BITSEL_u1042_u1_2284_wire)    $fullrate
    $buffering  $out BITSEL_u1042_u1_2284_inst BITSEL_u1042_u1_2284_wire 1
    $delay BITSEL_u1042_u1_2284_inst 1
    // DAT2Tx
    $ioport $out [WPIPE_DAT2Tx_2281_inst]  (BITSEL_u1042_u1_2284_wire) (DAT2Tx)  $fullrate 
    // 			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 800
    // (dat0bit4_2 << 1 )
    <<[SHL_u1042_u1042_2289_inst] (dat0bit4_2_2276 konst_2288_wire_constant) (nextbit4_2_2290)   $flowthrough 
    $delay SHL_u1042_u1042_2289_inst 0
    // 			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 801
    // (k_2 + 1 )
    +[ADD_u11_u11_2294_inst] (k_2_2271 konst_2293_wire_constant) (next_k_2_2295)   $flowthrough 
    $delay ADD_u11_u11_2294_inst 0
  }
  // end data-path
  // 		newDat2 := ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1)) $buffering 1// bits of buffering = 1042. 
  //  file .Aa/sdhc.opt.aa, line 790
  // ((ZERO_1 && dat2) && (nextCRC16_DAT2 && ONE_1))
  // (ZERO_1 && dat2)
  // dat2
  // (nextCRC16_DAT2 && ONE_1)
  // nextCRC16_DAT2
  CONCAT_u1025_u1042_2267_inst <=> (branch_block_stmt_2259/assign_stmt_2268/CONCAT_u1025_u1042_2267_Sample/rr branch_block_stmt_2259/assign_stmt_2268/CONCAT_u1025_u1042_2267_Update/cr) (branch_block_stmt_2259/assign_stmt_2268/CONCAT_u1025_u1042_2267_Sample/ra branch_block_stmt_2259/assign_stmt_2268/CONCAT_u1025_u1042_2267_Update/ca)
  // CP-DP links for do-while  do_while_stmt_2269
  //  file .Aa/sdhc.opt.aa, line 791
  phi_stmt_2271 <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2271_loopback_sample_req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2271_entry_sample_req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2271_phi_mux_ack)
  next_k_2_2295_2273_buf <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_next_k_2_2273_Sample/req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_next_k_2_2273_Update/req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_next_k_2_2273_Sample/ack branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_next_k_2_2273_Update/ack)
  phi_stmt_2276 <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2276_loopback_sample_req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2276_entry_sample_req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/phi_stmt_2276_phi_mux_ack)
  nextbit4_2_2290_2278_buf <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_nextbit4_2_2278_Sample/req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_nextbit4_2_2278_Update/req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_nextbit4_2_2278_Sample/ack branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_nextbit4_2_2278_Update/ack)
  newDat2_2268_2279_buf <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_newDat2_2279_Sample/req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_newDat2_2279_Update/req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_newDat2_2279_Sample/ack branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/R_newDat2_2279_Update/ack)
  // 			DAT2Tx := (dat0bit4_2 [] 1041 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 799
  // (dat0bit4_2 [] 1041 )
  // dat0bit4_2
  BITSEL_u1042_u1_2284_inst <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/BITSEL_u1042_u1_2284_Sample/rr branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/BITSEL_u1042_u1_2284_Update/cr) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/BITSEL_u1042_u1_2284_Sample/ra branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/BITSEL_u1042_u1_2284_Update/ca)
  // DAT2Tx
  WPIPE_DAT2Tx_2281_inst <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/WPIPE_DAT2Tx_2281_Sample/req branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/WPIPE_DAT2Tx_2281_Update/req) (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/WPIPE_DAT2Tx_2281_Sample/ack branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/WPIPE_DAT2Tx_2281_Update/ack)
  // 			$volatile nextbit4_2 := (dat0bit4_2 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 800
  // (dat0bit4_2 << 1 )
  // dat0bit4_2
  // 			$volatile next_k_2 := (k_2 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 801
  // (k_2 + 1 )
  // k_2
  // (next_k_2 < 1042 )
  // next_k_2
  do_while_stmt_2269_branch <=> (branch_block_stmt_2259/do_while_stmt_2269/do_while_stmt_2269_loop_body/condition_evaluated) (branch_block_stmt_2259/do_while_stmt_2269/loop_exit/ack branch_block_stmt_2259/do_while_stmt_2269/loop_taken/ack)
}
$module [sendDAT3] 
{
  $in dat3:$int<1024>
  // can point into 
  nextCRC16_DAT3:$int<16>
  // can point into 
  // pipe-declarations for block %sendDAT3
  //  file .Aa/sdhc.opt.aa, line 805
  // pipe-declarations for block %sendDAT3%parallelblock_four
  //  file .Aa/sdhc.opt.aa, line 810
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_2305] // Branch Block  file .Aa/sdhc.opt.aa, line 810
    {
      $P [branch_block_stmt_2305__entry__]
      branch_block_stmt_2305__entry__ <-| ($entry)
      $P [branch_block_stmt_2305__exit__]
      branch_block_stmt_2305__exit__ |-> ($exit)
      $P [assign_stmt_2314__entry__] 
      $P [assign_stmt_2314__exit__] 
      $P [do_while_stmt_2315__entry__] 
      $P [do_while_stmt_2315__exit__] 
      ::[assign_stmt_2314] 
      {
        // start:  		newDat3 := ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        //  file .Aa/sdhc.opt.aa, line 812
        // Source expression
        // ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1))
        $T[CONCAT_u1025_u1042_2313_sample_start_] 
        $T[CONCAT_u1025_u1042_2313_sample_completed_] 
        $T[CONCAT_u1025_u1042_2313_update_start_] 
        $T[CONCAT_u1025_u1042_2313_update_completed_] 
        // (ZERO_1 && dat3)
        // dat3
        // (nextCRC16_DAT3 && ONE_1)
        // nextCRC16_DAT3
        // start: Forward dependencies from (ZERO_1 && dat3) to transition CONCAT_u1025_u1042_2313_sample_start_
        // done: Forward dependencies from (ZERO_1 && dat3) to transition CONCAT_u1025_u1042_2313_sample_start_
        // start: Forward dependencies from (nextCRC16_DAT3 && ONE_1) to transition CONCAT_u1025_u1042_2313_sample_start_
        // done: Forward dependencies from (nextCRC16_DAT3 && ONE_1) to transition CONCAT_u1025_u1042_2313_sample_start_
        ;;[CONCAT_u1025_u1042_2313_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u1025_u1042_2313_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u1025_u1042_2313_sample_start_ &-> (CONCAT_u1025_u1042_2313_Sample)
        CONCAT_u1025_u1042_2313_sample_completed_ <-& (CONCAT_u1025_u1042_2313_Sample)
        CONCAT_u1025_u1042_2313_sample_completed_ &-> ($null)
        CONCAT_u1025_u1042_2313_update_start_ &-> (CONCAT_u1025_u1042_2313_Update)
        CONCAT_u1025_u1042_2313_update_completed_ <-& (CONCAT_u1025_u1042_2313_Update)
        // Target expression
        // (as target) newDat3
        // start: WAR dependencies for newDat3
        // done: WAR dependencies for newDat3
        // end:  		newDat3 := ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1)) $buffering 1// bits of buffering = 1042. 
        // load-store dependencies..
      }
      assign_stmt_2314__entry__ |-> (assign_stmt_2314)
      assign_stmt_2314__exit__ <-| (assign_stmt_2314)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 813
      <o> [do_while_stmt_2315]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_2315__entry__] 
        $P[do_while_stmt_2315__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2315_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2317
          // 			$phi k_3 := 			  next_k_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
          // type of target is $uint<11>
          $T[phi_stmt_2317_sample_start_] 
          $T[phi_stmt_2317_sample_completed_] 
          $T[phi_stmt_2317_update_start_] 
          $T[phi_stmt_2317_update_completed_] 
          $T[phi_stmt_2317_sample_start__ps] 
          phi_stmt_2317_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2317_sample_completed__ps] 
          phi_stmt_2317_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2317_update_start__ps] 
          phi_stmt_2317_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2317_update_completed__ps] 
          phi_stmt_2317_update_completed_ <-& (phi_stmt_2317_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2317_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2317_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2317_update_start_)
          $T[phi_stmt_2317_loopback_trigger] 
          phi_stmt_2317_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2317_loopback_sample_req] 
          $T[phi_stmt_2317_loopback_sample_req_ps] 
          phi_stmt_2317_loopback_sample_req <-& (phi_stmt_2317_loopback_sample_req_ps)
          phi_stmt_2317_loopback_sample_req &-> ($null)
          $T[phi_stmt_2317_entry_trigger] 
          phi_stmt_2317_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2317_entry_sample_req] 
          $T[phi_stmt_2317_entry_sample_req_ps] 
          phi_stmt_2317_entry_sample_req <-& (phi_stmt_2317_entry_sample_req_ps)
          phi_stmt_2317_entry_sample_req &-> ($null)
          phi_stmt_2317_update_start_ o<-& (phi_stmt_2317_update_completed_ 0)
          phi_stmt_2317_sample_start_ o<-& (phi_stmt_2317_sample_completed_ 1)
          $T[phi_stmt_2317_merged_reqs] 
          $T[phi_stmt_2317_phi_mux_ack] 
          $T[phi_stmt_2317_phi_mux_ack_ps] 
          phi_stmt_2317_phi_mux_ack_ps <-& (phi_stmt_2317_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2317_update_completed_)
          $T[type_cast_2320_sample_start__ps] 
          $T[type_cast_2320_sample_completed__ps] 
          $T[type_cast_2320_update_start__ps] 
          $T[type_cast_2320_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2320_sample_start_] 
          $T[type_cast_2320_sample_completed_] 
          type_cast_2320_sample_completed_ <-& (type_cast_2320_sample_start_)
          $T[type_cast_2320_update_start_] 
          $T [type_cast_2320_update_completed_] $delay 
          type_cast_2320_update_completed_ <-& (type_cast_2320_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2320_sample_start_ <-& (type_cast_2320_sample_start__ps)
          type_cast_2320_update_start_ <-& (type_cast_2320_update_start__ps)
          // Phi complete dependency.
          type_cast_2320_sample_completed__ps <-& (type_cast_2320_sample_completed_)
          type_cast_2320_update_completed__ps <-& (type_cast_2320_update_completed_)
          $T[R_next_k_3_2321_sample_start__ps] 
          $T[R_next_k_3_2321_sample_completed__ps] 
          $T[R_next_k_3_2321_update_start__ps] 
          $T[R_next_k_3_2321_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_k_3_2321_sample_start_] 
          $T[R_next_k_3_2321_sample_completed_] 
          $T[R_next_k_3_2321_update_start_] 
          $T[R_next_k_3_2321_update_completed_] 
          ;;[R_next_k_3_2321_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_k_3_2321_sample_start_ &-> (R_next_k_3_2321_Sample)
          R_next_k_3_2321_sample_completed_ <-& (R_next_k_3_2321_Sample)
          ;;[R_next_k_3_2321_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_k_3_2321_update_start_ &-> (R_next_k_3_2321_Update)
          R_next_k_3_2321_update_completed_ <-& (R_next_k_3_2321_Update)
          // RAW reenables for next_k_3
          // Phi start dependency for implicit/constant alternative.
          R_next_k_3_2321_sample_start_ <-& (R_next_k_3_2321_sample_start__ps)
          R_next_k_3_2321_update_start_ <-& (R_next_k_3_2321_update_start__ps)
          // Phi complete dependency.
          R_next_k_3_2321_sample_completed__ps <-& (R_next_k_3_2321_sample_completed_)
          R_next_k_3_2321_update_completed__ps <-& (R_next_k_3_2321_update_completed_)
          $phisequencer [ phi_stmt_2317_phi_seq] : 
          phi_stmt_2317_entry_trigger type_cast_2320_sample_start__ps type_cast_2320_sample_completed__ps type_cast_2320_update_start__ps type_cast_2320_update_completed__ps phi_stmt_2317_loopback_trigger R_next_k_3_2321_sample_start__ps R_next_k_3_2321_sample_completed__ps R_next_k_3_2321_update_start__ps R_next_k_3_2321_update_completed__ps :
          phi_stmt_2317_sample_start__ps phi_stmt_2317_sample_completed__ps phi_stmt_2317_update_start__ps phi_stmt_2317_update_completed__ps :
          phi_stmt_2317_entry_sample_req_ps phi_stmt_2317_loopback_sample_req_ps : 
          phi_stmt_2317_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2317
          // start:  PHI statement phi_stmt_2322
          // 			$phi dat0bit4_3 := 			  nextbit4_3 $on   $loopback 			  newDat3 $on   $entry 
          // type of target is $uint<1042>
          $T[phi_stmt_2322_sample_start_] 
          $T[phi_stmt_2322_sample_completed_] 
          $T[phi_stmt_2322_update_start_] 
          $T[phi_stmt_2322_update_completed_] 
          $T[phi_stmt_2322_sample_start__ps] 
          phi_stmt_2322_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2322_sample_completed__ps] 
          phi_stmt_2322_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2322_update_start__ps] 
          phi_stmt_2322_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2322_update_completed__ps] 
          phi_stmt_2322_update_completed_ <-& (phi_stmt_2322_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2322_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2322_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2322_update_start_)
          $T[phi_stmt_2322_loopback_trigger] 
          phi_stmt_2322_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2322_loopback_sample_req] 
          $T[phi_stmt_2322_loopback_sample_req_ps] 
          phi_stmt_2322_loopback_sample_req <-& (phi_stmt_2322_loopback_sample_req_ps)
          phi_stmt_2322_loopback_sample_req &-> ($null)
          $T[phi_stmt_2322_entry_trigger] 
          phi_stmt_2322_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2322_entry_sample_req] 
          $T[phi_stmt_2322_entry_sample_req_ps] 
          phi_stmt_2322_entry_sample_req <-& (phi_stmt_2322_entry_sample_req_ps)
          phi_stmt_2322_entry_sample_req &-> ($null)
          phi_stmt_2322_update_start_ o<-& (phi_stmt_2322_update_completed_ 0)
          phi_stmt_2322_sample_start_ o<-& (phi_stmt_2322_sample_completed_ 1)
          $T[phi_stmt_2322_merged_reqs] 
          $T[phi_stmt_2322_phi_mux_ack] 
          $T[phi_stmt_2322_phi_mux_ack_ps] 
          phi_stmt_2322_phi_mux_ack_ps <-& (phi_stmt_2322_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2322_update_completed_)
          $T[R_newDat3_2324_sample_start__ps] 
          $T[R_newDat3_2324_sample_completed__ps] 
          $T[R_newDat3_2324_update_start__ps] 
          $T[R_newDat3_2324_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_newDat3_2324_sample_start_] 
          $T[R_newDat3_2324_sample_completed_] 
          $T[R_newDat3_2324_update_start_] 
          $T[R_newDat3_2324_update_completed_] 
          ;;[R_newDat3_2324_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_newDat3_2324_sample_start_ &-> (R_newDat3_2324_Sample)
          R_newDat3_2324_sample_completed_ <-& (R_newDat3_2324_Sample)
          ;;[R_newDat3_2324_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_newDat3_2324_update_start_ &-> (R_newDat3_2324_Update)
          R_newDat3_2324_update_completed_ <-& (R_newDat3_2324_Update)
          // RAW reenables for newDat3
          // Phi start dependency for implicit/constant alternative.
          R_newDat3_2324_sample_start_ <-& (R_newDat3_2324_sample_start__ps)
          R_newDat3_2324_update_start_ <-& (R_newDat3_2324_update_start__ps)
          // Phi complete dependency.
          R_newDat3_2324_sample_completed__ps <-& (R_newDat3_2324_sample_completed_)
          R_newDat3_2324_update_completed__ps <-& (R_newDat3_2324_update_completed_)
          $T[R_nextbit4_3_2325_sample_start__ps] 
          $T[R_nextbit4_3_2325_sample_completed__ps] 
          $T[R_nextbit4_3_2325_update_start__ps] 
          $T[R_nextbit4_3_2325_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextbit4_3_2325_sample_start_] 
          $T[R_nextbit4_3_2325_sample_completed_] 
          $T[R_nextbit4_3_2325_update_start_] 
          $T[R_nextbit4_3_2325_update_completed_] 
          ;;[R_nextbit4_3_2325_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextbit4_3_2325_sample_start_ &-> (R_nextbit4_3_2325_Sample)
          R_nextbit4_3_2325_sample_completed_ <-& (R_nextbit4_3_2325_Sample)
          ;;[R_nextbit4_3_2325_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextbit4_3_2325_update_start_ &-> (R_nextbit4_3_2325_Update)
          R_nextbit4_3_2325_update_completed_ <-& (R_nextbit4_3_2325_Update)
          // RAW reenables for nextbit4_3
          // Phi start dependency for implicit/constant alternative.
          R_nextbit4_3_2325_sample_start_ <-& (R_nextbit4_3_2325_sample_start__ps)
          R_nextbit4_3_2325_update_start_ <-& (R_nextbit4_3_2325_update_start__ps)
          // Phi complete dependency.
          R_nextbit4_3_2325_sample_completed__ps <-& (R_nextbit4_3_2325_sample_completed_)
          R_nextbit4_3_2325_update_completed__ps <-& (R_nextbit4_3_2325_update_completed_)
          $phisequencer [ phi_stmt_2322_phi_seq] : 
          phi_stmt_2322_entry_trigger R_newDat3_2324_sample_start__ps R_newDat3_2324_sample_completed__ps R_newDat3_2324_update_start__ps R_newDat3_2324_update_completed__ps phi_stmt_2322_loopback_trigger R_nextbit4_3_2325_sample_start__ps R_nextbit4_3_2325_sample_completed__ps R_nextbit4_3_2325_update_start__ps R_nextbit4_3_2325_update_completed__ps :
          phi_stmt_2322_sample_start__ps phi_stmt_2322_sample_completed__ps phi_stmt_2322_update_start__ps phi_stmt_2322_update_completed__ps :
          phi_stmt_2322_entry_sample_req_ps phi_stmt_2322_loopback_sample_req_ps : 
          phi_stmt_2322_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2322
          // start:  			DAT3Tx := (dat0bit4_3 [] 1041 ) $buffering 1// bits of buffering = 1. 
          //  file .Aa/sdhc.opt.aa, line 821
          // Source expression
          // (dat0bit4_3 [] 1041 )
          $T[BITSEL_u1042_u1_2330_sample_start_] 
          $T[BITSEL_u1042_u1_2330_sample_completed_] 
          $T[BITSEL_u1042_u1_2330_update_start_] 
          $T[BITSEL_u1042_u1_2330_update_completed_] 
          // dat0bit4_3
          // start: Forward dependencies from dat0bit4_3 to transition BITSEL_u1042_u1_2330_sample_start_
          BITSEL_u1042_u1_2330_sample_start_ <-& (phi_stmt_2322_update_completed_)
          // done: Forward dependencies from dat0bit4_3 to transition BITSEL_u1042_u1_2330_sample_start_
          ;;[BITSEL_u1042_u1_2330_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[BITSEL_u1042_u1_2330_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          BITSEL_u1042_u1_2330_sample_start_ &-> (BITSEL_u1042_u1_2330_Sample)
          BITSEL_u1042_u1_2330_sample_completed_ <-& (BITSEL_u1042_u1_2330_Sample)
          BITSEL_u1042_u1_2330_sample_completed_ &-> ($null)
          BITSEL_u1042_u1_2330_update_start_ &-> (BITSEL_u1042_u1_2330_Update)
          BITSEL_u1042_u1_2330_update_completed_ <-& (BITSEL_u1042_u1_2330_Update)
          // RAW reenables for dat0bit4_3
          phi_stmt_2322_update_start_ o<-& (BITSEL_u1042_u1_2330_sample_completed_ 0)
          // self-release: 
          BITSEL_u1042_u1_2330_sample_start_ o<-& (BITSEL_u1042_u1_2330_sample_completed_ 1)
          $null &-> (BITSEL_u1042_u1_2330_update_start_)
          BITSEL_u1042_u1_2330_update_start_ o<-& (BITSEL_u1042_u1_2330_update_completed_ 0)
          // Target expression
          // (as target) DAT3Tx
          $T[WPIPE_DAT3Tx_2327_sample_start_] 
          $T[WPIPE_DAT3Tx_2327_sample_completed_] 
          $T[WPIPE_DAT3Tx_2327_update_start_] 
          $T[WPIPE_DAT3Tx_2327_update_completed_] 
          ;;[WPIPE_DAT3Tx_2327_Sample] 
          {
            // pipe write sample-start DAT3Tx
            $T [req] $T [ack] 
          }
          ;;[WPIPE_DAT3Tx_2327_Update] 
          {
            // pipe write update (complete) DAT3Tx
            $T [req] $T [ack] 
          }
          WPIPE_DAT3Tx_2327_sample_start_ &-> (WPIPE_DAT3Tx_2327_Sample)
          WPIPE_DAT3Tx_2327_sample_completed_ <-& (WPIPE_DAT3Tx_2327_Sample)
          WPIPE_DAT3Tx_2327_update_start_ <-& (WPIPE_DAT3Tx_2327_sample_completed_)
          WPIPE_DAT3Tx_2327_update_start_ &-> (WPIPE_DAT3Tx_2327_Update)
          WPIPE_DAT3Tx_2327_update_completed_ <-& (WPIPE_DAT3Tx_2327_Update)
          WPIPE_DAT3Tx_2327_sample_start_ o<-& (WPIPE_DAT3Tx_2327_update_completed_ 0)
          // start: Forward dependencies from (dat0bit4_3 [] 1041 ) to transition WPIPE_DAT3Tx_2327_sample_start_
          WPIPE_DAT3Tx_2327_sample_start_ <-& (BITSEL_u1042_u1_2330_update_completed_)
          // done: Forward dependencies from (dat0bit4_3 [] 1041 ) to transition WPIPE_DAT3Tx_2327_sample_start_
          // RAW reenables for (dat0bit4_3 [] 1041 )
          BITSEL_u1042_u1_2330_update_start_ o<-& (WPIPE_DAT3Tx_2327_sample_completed_ 0)
          // end:  			DAT3Tx := (dat0bit4_3 [] 1041 ) $buffering 1// bits of buffering = 1. 
          // start: WAR dependencies for nextbit4_3
          // WAR dependency: Read: nextbit4_3 before Write: 			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_3
          // start:  			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 822
          // volatile! 
          // Source expression
          // (dat0bit4_3 << 1 )
          // dat0bit4_3
          // Target expression
          // (as target) nextbit4_3
          // start: WAR dependencies for nextbit4_3
          // WAR dependency: Read: nextbit4_3 before Write: 			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextbit4_3
          // end:  			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
          // start: WAR dependencies for next_k_3
          // WAR dependency: Read: next_k_3 before Write: 			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_3
          // start:  			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 823
          // volatile! 
          // Source expression
          // (k_3 + 1 )
          // k_3
          // Target expression
          // (as target) next_k_3
          // start: WAR dependencies for next_k_3
          // WAR dependency: Read: next_k_3 before Write: 			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_k_3
          // end:  			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
          // (next_k_3 < 1042 )
          // next_k_3
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_k_3 < 1042 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2317_update_completed_)
          // done: Forward dependencies from (next_k_3 < 1042 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT3Tx
          // read-dependencies for pipe DAT3Tx
          // write-dependencies for pipe DAT3Tx
          // signal write dependencies for DAT3Tx
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2315__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2315_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2315__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2315_loop_body : condition_evaluated
        $bind do_while_stmt_2315__entry__  => do_while_stmt_2315_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2315_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2315__exit__)
      }
      do_while_stmt_2315__entry__ |-> (do_while_stmt_2315)
      do_while_stmt_2315__exit__ <-| (do_while_stmt_2315)
      assign_stmt_2314__entry__ <-| (branch_block_stmt_2305__entry__)
      do_while_stmt_2315__entry__ <-| (assign_stmt_2314__exit__)
      do_while_stmt_2315__exit__ |-> (branch_block_stmt_2305__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendDAT3%parallelblock_four%
    //  file .Aa/sdhc.opt.aa, line 815
    // constant-object-declarations for block %sendDAT3%parallelblock_four
    //  file .Aa/sdhc.opt.aa, line 810
    // constant-object-declarations for block %sendDAT3
    //  file .Aa/sdhc.opt.aa, line 805
    // constant-declarations for block %sendDAT3%parallelblock_four
    //  file .Aa/sdhc.opt.aa, line 810
    // ZERO_1
    $constant $W[R_ZERO_1_2307_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_2311_wire_constant] : $int<1> := _b1// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 813
    // 1042 
    $constant $W[konst_2344_wire_constant] : $int<11> := _b10000010010// 1042
    // constant-declarations for block %sendDAT3%parallelblock_four%
    //  file .Aa/sdhc.opt.aa, line 815
    // constant-declarations for phi:  			$phi k_3 := 			  next_k_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 816
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2320_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi dat0bit4_3 := 			  nextbit4_3 $on   $loopback 			  newDat3 $on   $entry 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 818
    // 1041 
    $constant $W[konst_2329_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2334_wire_constant] : $int<1042> := _b
    // 1 
    $constant $W[konst_2339_wire_constant] : $int<11> := _b00000000001// 1
    // block %sendDAT3%parallelblock_four
    //  file .Aa/sdhc.opt.aa, line 810
    // 		newDat3 := ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 812
    // (ZERO_1 && dat3)
    $intermediate $W[CONCAT_u1_u1025_2309_wire] : $int<1025>
    // (nextCRC16_DAT3 && ONE_1)
    $intermediate $W[CONCAT_u16_u17_2312_wire] : $int<17>
    // newDat3
    $W[newDat3_2314] : $int<1042>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 813
    // (next_k_3 < 1042 )
    $intermediate $W[ULT_u11_u1_2345_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 815
    // 			$phi k_3 := 			  next_k_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 816
    $W[next_k_3_2341_2321_buffered] : $int<11>
    // k_3
    $W[k_3_2317] : $int<11>
    // 			$phi dat0bit4_3 := 			  nextbit4_3 $on   $loopback 			  newDat3 $on   $entry 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 818
    $W[newDat3_2314_2324_buffered] : $int<1042>
    $W[nextbit4_3_2336_2325_buffered] : $int<1042>
    // dat0bit4_3
    $W[dat0bit4_3_2322] : $int<1042>
    // 			DAT3Tx := (dat0bit4_3 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 821
    // (dat0bit4_3 [] 1041 )
    $intermediate $W[BITSEL_u1042_u1_2330_wire] : $int<1>
    // DAT3Tx
    // 			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 822
    // nextbit4_3
    $W[nextbit4_3_2336] : $int<1042>
    // 			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 823
    // next_k_3
    $W[next_k_3_2341] : $int<11>
    // datapath-instances for block %sendDAT3%parallelblock_four
    //  file .Aa/sdhc.opt.aa, line 810
    // 		newDat3 := ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1)) $buffering 1// bits of buffering = 1042. 
    //  file .Aa/sdhc.opt.aa, line 812
    // (ZERO_1 && dat3)
    &&[CONCAT_u1_u1025_2309_inst] (R_ZERO_1_2307_wire_constant dat3) (CONCAT_u1_u1025_2309_wire)   $flowthrough 
    $delay CONCAT_u1_u1025_2309_inst 0
    // (nextCRC16_DAT3 && ONE_1)
    &&[CONCAT_u16_u17_2312_inst] (nextCRC16_DAT3 R_ONE_1_2311_wire_constant) (CONCAT_u16_u17_2312_wire)   $flowthrough 
    $delay CONCAT_u16_u17_2312_inst 0
    // ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1))
    &&[CONCAT_u1025_u1042_2313_inst] (CONCAT_u1_u1025_2309_wire CONCAT_u16_u17_2312_wire) (newDat3_2314)   
    $buffering  $out CONCAT_u1025_u1042_2313_inst newDat3_2314 1
    $delay CONCAT_u1025_u1042_2313_inst 1
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 813
    // (next_k_3 < 1042 )
    <[ULT_u11_u1_2345_inst] (next_k_3_2341 konst_2344_wire_constant) (ULT_u11_u1_2345_wire)   $flowthrough 
    $delay ULT_u11_u1_2345_inst 0
    ==0? [do_while_stmt_2315_branch] (ULT_u11_u1_2345_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 815
    // 			$phi k_3 := 			  next_k_3 $on   $loopback 			  ($bitcast ($uint<11>) 0  ) $on   $entry 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 816
    # := [next_k_3_2341_2321_buf] (next_k_3_2341) (next_k_3_2341_2321_buffered)     $fullrate
    $buffering $out next_k_3_2341_2321_buf next_k_3_2341_2321_buffered  1
    # $phi [phi_stmt_2317] (type_cast_2320_wire_constant next_k_3_2341_2321_buffered) ( k_3_2317 ) $fullrate
    // $buffering  $out phi_stmt_2317 k_3_2317 2
    // 			$phi dat0bit4_3 := 			  nextbit4_3 $on   $loopback 			  newDat3 $on   $entry 
    // type of target is $uint<1042>
    //  file .Aa/sdhc.opt.aa, line 818
    # := [newDat3_2314_2324_buf] (newDat3_2314) (newDat3_2314_2324_buffered)     $fullrate
    $buffering $out newDat3_2314_2324_buf newDat3_2314_2324_buffered  1
    # := [nextbit4_3_2336_2325_buf] (nextbit4_3_2336) (nextbit4_3_2336_2325_buffered)     $fullrate
    $buffering $out nextbit4_3_2336_2325_buf nextbit4_3_2336_2325_buffered  1
    # $phi [phi_stmt_2322] (newDat3_2314_2324_buffered nextbit4_3_2336_2325_buffered) ( dat0bit4_3_2322 ) $fullrate
    // $buffering  $out phi_stmt_2322 dat0bit4_3_2322 2
    // 			DAT3Tx := (dat0bit4_3 [] 1041 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 821
    // (dat0bit4_3 [] 1041 )
    [][BITSEL_u1042_u1_2330_inst] (dat0bit4_3_2322 konst_2329_wire_constant) (BITSEL_u1042_u1_2330_wire)    $fullrate
    $buffering  $out BITSEL_u1042_u1_2330_inst BITSEL_u1042_u1_2330_wire 1
    $delay BITSEL_u1042_u1_2330_inst 1
    // DAT3Tx
    $ioport $out [WPIPE_DAT3Tx_2327_inst]  (BITSEL_u1042_u1_2330_wire) (DAT3Tx)  $fullrate 
    // 			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 822
    // (dat0bit4_3 << 1 )
    <<[SHL_u1042_u1042_2335_inst] (dat0bit4_3_2322 konst_2334_wire_constant) (nextbit4_3_2336)   $flowthrough 
    $delay SHL_u1042_u1042_2335_inst 0
    // 			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 823
    // (k_3 + 1 )
    +[ADD_u11_u11_2340_inst] (k_3_2317 konst_2339_wire_constant) (next_k_3_2341)   $flowthrough 
    $delay ADD_u11_u11_2340_inst 0
  }
  // end data-path
  // 		newDat3 := ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1)) $buffering 1// bits of buffering = 1042. 
  //  file .Aa/sdhc.opt.aa, line 812
  // ((ZERO_1 && dat3) && (nextCRC16_DAT3 && ONE_1))
  // (ZERO_1 && dat3)
  // dat3
  // (nextCRC16_DAT3 && ONE_1)
  // nextCRC16_DAT3
  CONCAT_u1025_u1042_2313_inst <=> (branch_block_stmt_2305/assign_stmt_2314/CONCAT_u1025_u1042_2313_Sample/rr branch_block_stmt_2305/assign_stmt_2314/CONCAT_u1025_u1042_2313_Update/cr) (branch_block_stmt_2305/assign_stmt_2314/CONCAT_u1025_u1042_2313_Sample/ra branch_block_stmt_2305/assign_stmt_2314/CONCAT_u1025_u1042_2313_Update/ca)
  // CP-DP links for do-while  do_while_stmt_2315
  //  file .Aa/sdhc.opt.aa, line 813
  phi_stmt_2317 <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2317_entry_sample_req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2317_loopback_sample_req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2317_phi_mux_ack)
  next_k_3_2341_2321_buf <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_next_k_3_2321_Sample/req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_next_k_3_2321_Update/req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_next_k_3_2321_Sample/ack branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_next_k_3_2321_Update/ack)
  phi_stmt_2322 <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2322_entry_sample_req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2322_loopback_sample_req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/phi_stmt_2322_phi_mux_ack)
  newDat3_2314_2324_buf <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_newDat3_2324_Sample/req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_newDat3_2324_Update/req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_newDat3_2324_Sample/ack branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_newDat3_2324_Update/ack)
  nextbit4_3_2336_2325_buf <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_nextbit4_3_2325_Sample/req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_nextbit4_3_2325_Update/req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_nextbit4_3_2325_Sample/ack branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/R_nextbit4_3_2325_Update/ack)
  // 			DAT3Tx := (dat0bit4_3 [] 1041 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 821
  // (dat0bit4_3 [] 1041 )
  // dat0bit4_3
  BITSEL_u1042_u1_2330_inst <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/BITSEL_u1042_u1_2330_Sample/rr branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/BITSEL_u1042_u1_2330_Update/cr) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/BITSEL_u1042_u1_2330_Sample/ra branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/BITSEL_u1042_u1_2330_Update/ca)
  // DAT3Tx
  WPIPE_DAT3Tx_2327_inst <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/WPIPE_DAT3Tx_2327_Sample/req branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/WPIPE_DAT3Tx_2327_Update/req) (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/WPIPE_DAT3Tx_2327_Sample/ack branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/WPIPE_DAT3Tx_2327_Update/ack)
  // 			$volatile nextbit4_3 := (dat0bit4_3 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 822
  // (dat0bit4_3 << 1 )
  // dat0bit4_3
  // 			$volatile next_k_3 := (k_3 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 823
  // (k_3 + 1 )
  // k_3
  // (next_k_3 < 1042 )
  // next_k_3
  do_while_stmt_2315_branch <=> (branch_block_stmt_2305/do_while_stmt_2315/do_while_stmt_2315_loop_body/condition_evaluated) (branch_block_stmt_2305/do_while_stmt_2315/loop_exit/ack branch_block_stmt_2305/do_while_stmt_2315/loop_taken/ack)
}
$module [dataTx] 
{
  $in lastBlock:$int<1>
  // can point into 
  blockCountEnable:$int<1>
  // can point into 
  blockCount:$int<16>
  // can point into 
  $out blockCountNext:$int<16>
  // can point into 
  transferComplete:$int<8> := _b00000010
  // can point into 
  // pipe-declarations for block %dataTx
  //  file .Aa/sdhc.opt.aa, line 827
  // pipe-declarations for block %dataTx%data
  //  file .Aa/sdhc.opt.aa, line 832
  // pipe-declarations for block %dataTx%data%
  //  file .Aa/sdhc.opt.aa, line 999
  // memory-space 8 is written into.
  // memory-space 9 is written into.
  // memory-space 8 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_2354] // Branch Block  file .Aa/sdhc.opt.aa, line 832
    {
      $P [branch_block_stmt_2354__entry__]
      branch_block_stmt_2354__entry__ <-| ($entry)
      $P [branch_block_stmt_2354__exit__]
      branch_block_stmt_2354__exit__ |-> ($exit)
      $P [if_stmt_2355__entry__] 
      $P [if_stmt_2355__exit__] 
      $P [assign_stmt_2936_to_assign_stmt_2942__entry__] 
      $P [assign_stmt_2936_to_assign_stmt_2942__exit__] 
      $P [if_stmt_2943__entry__] 
      $P [if_stmt_2943__exit__] 
      $P [merge_stmt_2962__entry__] 
      $P [merge_stmt_2962__exit__] 
      $P [assign_stmt_2965__entry__] 
      $P [assign_stmt_2965__exit__] 
      $P [if_stmt_2966__entry__] 
      $P [if_stmt_2966__exit__] 
      $P [assign_stmt_2974__entry__] 
      $P [assign_stmt_2974__exit__] 
      $P [if_stmt_2975__entry__] 
      $P [if_stmt_2975__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 834
      ;;[if_stmt_2355_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2355__entry__ |-> (if_stmt_2355_dead_link)
      if_stmt_2355__exit__ <-| (if_stmt_2355_dead_link)
      ;;[if_stmt_2355_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (sdhcRegisters[40 ] [] 1 )
        ;;[BITSEL_u8_u1_2359] 
        {
          // binary expression 
          ||[BITSEL_u8_u1_2359_inputs] 
          {
            // sdhcRegisters[40 ]
            ;;[array_obj_ref_2357] 
            {
              // load 
              ;;[array_obj_ref_2357_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2355__entry__ |-> (if_stmt_2355_eval_test)
      $P [BITSEL_u8_u1_2359_place]
      BITSEL_u8_u1_2359_place <-| (if_stmt_2355_eval_test)
      ;;[if_stmt_2355_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2355_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u8_u1_2359_place |-> (if_stmt_2355_if_link if_stmt_2355_else_link)
      $P [branch_block_stmt_2360__entry__] 
      $P [branch_block_stmt_2360__exit__] 
      $P [assign_stmt_2471__entry__] 
      $P [assign_stmt_2471__exit__] 
      $P [do_while_stmt_2472__entry__] 
      $P [do_while_stmt_2472__exit__] 
      $P [do_while_stmt_2536__entry__] 
      $P [do_while_stmt_2536__exit__] 
      $P [do_while_stmt_2600__entry__] 
      $P [do_while_stmt_2600__exit__] 
      $P [do_while_stmt_2664__entry__] 
      $P [do_while_stmt_2664__exit__] 
      $P [assign_stmt_2730__entry__] 
      $P [assign_stmt_2730__exit__] 
      $P [parallel_block_stmt_2731__entry__] 
      $P [parallel_block_stmt_2731__exit__] 
      $P [assign_stmt_2747__entry__] 
      $P [assign_stmt_2747__exit__] 
      <>[branch_block_stmt_2360] // Branch Block  file .Aa/sdhc.opt.aa, line 835
      {
        $P [branch_block_stmt_2360__entry__]
        branch_block_stmt_2360__entry__ <-| ($entry)
        $P [branch_block_stmt_2360__exit__]
        branch_block_stmt_2360__exit__ |-> ($exit)
        $P [do_while_stmt_2361__entry__] 
        $P [do_while_stmt_2361__exit__] 
        // do-while-statement  
        //  file .Aa/sdhc.opt.aa, line 837
        <o> [do_while_stmt_2361]  $depth 10 $buffering 1 
        {
          $P[do_while_stmt_2361__entry__] 
          $P[do_while_stmt_2361__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_2361_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_2363
            // 				$phi i := 				  ($bitcast ($uint<10>) 0  ) $on   $entry 				  next_i $on   $loopback 
            // type of target is $uint<10>
            $T[phi_stmt_2363_sample_start_] 
            $T[phi_stmt_2363_sample_completed_] 
            $T[phi_stmt_2363_update_start_] 
            $T[phi_stmt_2363_update_completed_] 
            $T[phi_stmt_2363_sample_start__ps] 
            phi_stmt_2363_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_2363_sample_completed__ps] 
            phi_stmt_2363_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_2363_update_start__ps] 
            phi_stmt_2363_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_2363_update_completed__ps] 
            phi_stmt_2363_update_completed_ <-& (phi_stmt_2363_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_2363_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_2363_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_2363_update_start_)
            $T[phi_stmt_2363_loopback_trigger] 
            phi_stmt_2363_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_2363_loopback_sample_req] 
            $T[phi_stmt_2363_loopback_sample_req_ps] 
            phi_stmt_2363_loopback_sample_req <-& (phi_stmt_2363_loopback_sample_req_ps)
            phi_stmt_2363_loopback_sample_req &-> ($null)
            $T[phi_stmt_2363_entry_trigger] 
            phi_stmt_2363_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_2363_entry_sample_req] 
            $T[phi_stmt_2363_entry_sample_req_ps] 
            phi_stmt_2363_entry_sample_req <-& (phi_stmt_2363_entry_sample_req_ps)
            phi_stmt_2363_entry_sample_req &-> ($null)
            phi_stmt_2363_update_start_ o<-& (phi_stmt_2363_update_completed_ 0)
            phi_stmt_2363_sample_start_ o<-& (phi_stmt_2363_sample_completed_ 1)
            $T[phi_stmt_2363_merged_reqs] 
            $T[phi_stmt_2363_phi_mux_ack] 
            $T[phi_stmt_2363_phi_mux_ack_ps] 
            phi_stmt_2363_phi_mux_ack_ps <-& (phi_stmt_2363_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_2363_update_completed_)
            $T[R_next_i_2365_sample_start__ps] 
            $T[R_next_i_2365_sample_completed__ps] 
            $T[R_next_i_2365_update_start__ps] 
            $T[R_next_i_2365_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_next_i_2365_sample_start_] 
            $T[R_next_i_2365_sample_completed_] 
            $T[R_next_i_2365_update_start_] 
            $T[R_next_i_2365_update_completed_] 
            ;;[R_next_i_2365_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_i_2365_sample_start_ &-> (R_next_i_2365_Sample)
            R_next_i_2365_sample_completed_ <-& (R_next_i_2365_Sample)
            ;;[R_next_i_2365_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_i_2365_update_start_ &-> (R_next_i_2365_Update)
            R_next_i_2365_update_completed_ <-& (R_next_i_2365_Update)
            // RAW reenables for next_i
            // Phi start dependency for implicit/constant alternative.
            R_next_i_2365_sample_start_ <-& (R_next_i_2365_sample_start__ps)
            R_next_i_2365_update_start_ <-& (R_next_i_2365_update_start__ps)
            // Phi complete dependency.
            R_next_i_2365_sample_completed__ps <-& (R_next_i_2365_sample_completed_)
            R_next_i_2365_update_completed__ps <-& (R_next_i_2365_update_completed_)
            $T[type_cast_2367_sample_start__ps] 
            $T[type_cast_2367_sample_completed__ps] 
            $T[type_cast_2367_update_start__ps] 
            $T[type_cast_2367_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_2367_sample_start_] 
            $T[type_cast_2367_sample_completed_] 
            type_cast_2367_sample_completed_ <-& (type_cast_2367_sample_start_)
            $T[type_cast_2367_update_start_] 
            $T [type_cast_2367_update_completed_] $delay 
            type_cast_2367_update_completed_ <-& (type_cast_2367_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_2367_sample_start_ <-& (type_cast_2367_sample_start__ps)
            type_cast_2367_update_start_ <-& (type_cast_2367_update_start__ps)
            // Phi complete dependency.
            type_cast_2367_sample_completed__ps <-& (type_cast_2367_sample_completed_)
            type_cast_2367_update_completed__ps <-& (type_cast_2367_update_completed_)
            $phisequencer [ phi_stmt_2363_phi_seq] : 
            phi_stmt_2363_loopback_trigger R_next_i_2365_sample_start__ps R_next_i_2365_sample_completed__ps R_next_i_2365_update_start__ps R_next_i_2365_update_completed__ps phi_stmt_2363_entry_trigger type_cast_2367_sample_start__ps type_cast_2367_sample_completed__ps type_cast_2367_update_start__ps type_cast_2367_update_completed__ps :
            phi_stmt_2363_sample_start__ps phi_stmt_2363_sample_completed__ps phi_stmt_2363_update_start__ps phi_stmt_2363_update_completed__ps :
            phi_stmt_2363_loopback_sample_req_ps phi_stmt_2363_entry_sample_req_ps : 
            phi_stmt_2363_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_2363
            // start:  PHI statement phi_stmt_2368
            // 				$phi dat0 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data0 $on   $loopback 
            // type of target is $uint<1024>
            $T[phi_stmt_2368_sample_start_] 
            $T[phi_stmt_2368_sample_completed_] 
            $T[phi_stmt_2368_update_start_] 
            $T[phi_stmt_2368_update_completed_] 
            $T[phi_stmt_2368_sample_start__ps] 
            phi_stmt_2368_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_2368_sample_completed__ps] 
            phi_stmt_2368_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_2368_update_start__ps] 
            phi_stmt_2368_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_2368_update_completed__ps] 
            phi_stmt_2368_update_completed_ <-& (phi_stmt_2368_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_2368_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_2368_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_2368_update_start_)
            $T[phi_stmt_2368_loopback_trigger] 
            phi_stmt_2368_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_2368_loopback_sample_req] 
            $T[phi_stmt_2368_loopback_sample_req_ps] 
            phi_stmt_2368_loopback_sample_req <-& (phi_stmt_2368_loopback_sample_req_ps)
            phi_stmt_2368_loopback_sample_req &-> ($null)
            $T[phi_stmt_2368_entry_trigger] 
            phi_stmt_2368_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_2368_entry_sample_req] 
            $T[phi_stmt_2368_entry_sample_req_ps] 
            phi_stmt_2368_entry_sample_req <-& (phi_stmt_2368_entry_sample_req_ps)
            phi_stmt_2368_entry_sample_req &-> ($null)
            phi_stmt_2368_update_start_ o<-& (phi_stmt_2368_update_completed_ 0)
            phi_stmt_2368_sample_start_ o<-& (phi_stmt_2368_sample_completed_ 1)
            $T[phi_stmt_2368_merged_reqs] 
            $T[phi_stmt_2368_phi_mux_ack] 
            $T[phi_stmt_2368_phi_mux_ack_ps] 
            phi_stmt_2368_phi_mux_ack_ps <-& (phi_stmt_2368_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_2368_update_completed_)
            $T[R_next_data0_2370_sample_start__ps] 
            $T[R_next_data0_2370_sample_completed__ps] 
            $T[R_next_data0_2370_update_start__ps] 
            $T[R_next_data0_2370_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_next_data0_2370_sample_start_] 
            $T[R_next_data0_2370_sample_completed_] 
            $T[R_next_data0_2370_update_start_] 
            $T[R_next_data0_2370_update_completed_] 
            ;;[R_next_data0_2370_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_data0_2370_sample_start_ &-> (R_next_data0_2370_Sample)
            R_next_data0_2370_sample_completed_ <-& (R_next_data0_2370_Sample)
            ;;[R_next_data0_2370_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_data0_2370_update_start_ &-> (R_next_data0_2370_Update)
            R_next_data0_2370_update_completed_ <-& (R_next_data0_2370_Update)
            // RAW reenables for next_data0
            // Phi start dependency for implicit/constant alternative.
            R_next_data0_2370_sample_start_ <-& (R_next_data0_2370_sample_start__ps)
            R_next_data0_2370_update_start_ <-& (R_next_data0_2370_update_start__ps)
            // Phi complete dependency.
            R_next_data0_2370_sample_completed__ps <-& (R_next_data0_2370_sample_completed_)
            R_next_data0_2370_update_completed__ps <-& (R_next_data0_2370_update_completed_)
            $T[type_cast_2372_sample_start__ps] 
            $T[type_cast_2372_sample_completed__ps] 
            $T[type_cast_2372_update_start__ps] 
            $T[type_cast_2372_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_2372_sample_start_] 
            $T[type_cast_2372_sample_completed_] 
            type_cast_2372_sample_completed_ <-& (type_cast_2372_sample_start_)
            $T[type_cast_2372_update_start_] 
            $T [type_cast_2372_update_completed_] $delay 
            type_cast_2372_update_completed_ <-& (type_cast_2372_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_2372_sample_start_ <-& (type_cast_2372_sample_start__ps)
            type_cast_2372_update_start_ <-& (type_cast_2372_update_start__ps)
            // Phi complete dependency.
            type_cast_2372_sample_completed__ps <-& (type_cast_2372_sample_completed_)
            type_cast_2372_update_completed__ps <-& (type_cast_2372_update_completed_)
            $phisequencer [ phi_stmt_2368_phi_seq] : 
            phi_stmt_2368_loopback_trigger R_next_data0_2370_sample_start__ps R_next_data0_2370_sample_completed__ps R_next_data0_2370_update_start__ps R_next_data0_2370_update_completed__ps phi_stmt_2368_entry_trigger type_cast_2372_sample_start__ps type_cast_2372_sample_completed__ps type_cast_2372_update_start__ps type_cast_2372_update_completed__ps :
            phi_stmt_2368_sample_start__ps phi_stmt_2368_sample_completed__ps phi_stmt_2368_update_start__ps phi_stmt_2368_update_completed__ps :
            phi_stmt_2368_loopback_sample_req_ps phi_stmt_2368_entry_sample_req_ps : 
            phi_stmt_2368_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_2368
            // start:  PHI statement phi_stmt_2373
            // 				$phi dat1 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data1 $on   $loopback 
            // type of target is $uint<1024>
            $T[phi_stmt_2373_sample_start_] 
            $T[phi_stmt_2373_sample_completed_] 
            $T[phi_stmt_2373_update_start_] 
            $T[phi_stmt_2373_update_completed_] 
            $T[phi_stmt_2373_sample_start__ps] 
            phi_stmt_2373_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_2373_sample_completed__ps] 
            phi_stmt_2373_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_2373_update_start__ps] 
            phi_stmt_2373_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_2373_update_completed__ps] 
            phi_stmt_2373_update_completed_ <-& (phi_stmt_2373_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_2373_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_2373_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_2373_update_start_)
            $T[phi_stmt_2373_loopback_trigger] 
            phi_stmt_2373_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_2373_loopback_sample_req] 
            $T[phi_stmt_2373_loopback_sample_req_ps] 
            phi_stmt_2373_loopback_sample_req <-& (phi_stmt_2373_loopback_sample_req_ps)
            phi_stmt_2373_loopback_sample_req &-> ($null)
            $T[phi_stmt_2373_entry_trigger] 
            phi_stmt_2373_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_2373_entry_sample_req] 
            $T[phi_stmt_2373_entry_sample_req_ps] 
            phi_stmt_2373_entry_sample_req <-& (phi_stmt_2373_entry_sample_req_ps)
            phi_stmt_2373_entry_sample_req &-> ($null)
            phi_stmt_2373_update_start_ o<-& (phi_stmt_2373_update_completed_ 0)
            phi_stmt_2373_sample_start_ o<-& (phi_stmt_2373_sample_completed_ 1)
            $T[phi_stmt_2373_merged_reqs] 
            $T[phi_stmt_2373_phi_mux_ack] 
            $T[phi_stmt_2373_phi_mux_ack_ps] 
            phi_stmt_2373_phi_mux_ack_ps <-& (phi_stmt_2373_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_2373_update_completed_)
            $T[R_next_data1_2375_sample_start__ps] 
            $T[R_next_data1_2375_sample_completed__ps] 
            $T[R_next_data1_2375_update_start__ps] 
            $T[R_next_data1_2375_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_next_data1_2375_sample_start_] 
            $T[R_next_data1_2375_sample_completed_] 
            $T[R_next_data1_2375_update_start_] 
            $T[R_next_data1_2375_update_completed_] 
            ;;[R_next_data1_2375_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_data1_2375_sample_start_ &-> (R_next_data1_2375_Sample)
            R_next_data1_2375_sample_completed_ <-& (R_next_data1_2375_Sample)
            ;;[R_next_data1_2375_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_data1_2375_update_start_ &-> (R_next_data1_2375_Update)
            R_next_data1_2375_update_completed_ <-& (R_next_data1_2375_Update)
            // RAW reenables for next_data1
            // Phi start dependency for implicit/constant alternative.
            R_next_data1_2375_sample_start_ <-& (R_next_data1_2375_sample_start__ps)
            R_next_data1_2375_update_start_ <-& (R_next_data1_2375_update_start__ps)
            // Phi complete dependency.
            R_next_data1_2375_sample_completed__ps <-& (R_next_data1_2375_sample_completed_)
            R_next_data1_2375_update_completed__ps <-& (R_next_data1_2375_update_completed_)
            $T[type_cast_2377_sample_start__ps] 
            $T[type_cast_2377_sample_completed__ps] 
            $T[type_cast_2377_update_start__ps] 
            $T[type_cast_2377_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_2377_sample_start_] 
            $T[type_cast_2377_sample_completed_] 
            type_cast_2377_sample_completed_ <-& (type_cast_2377_sample_start_)
            $T[type_cast_2377_update_start_] 
            $T [type_cast_2377_update_completed_] $delay 
            type_cast_2377_update_completed_ <-& (type_cast_2377_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_2377_sample_start_ <-& (type_cast_2377_sample_start__ps)
            type_cast_2377_update_start_ <-& (type_cast_2377_update_start__ps)
            // Phi complete dependency.
            type_cast_2377_sample_completed__ps <-& (type_cast_2377_sample_completed_)
            type_cast_2377_update_completed__ps <-& (type_cast_2377_update_completed_)
            $phisequencer [ phi_stmt_2373_phi_seq] : 
            phi_stmt_2373_loopback_trigger R_next_data1_2375_sample_start__ps R_next_data1_2375_sample_completed__ps R_next_data1_2375_update_start__ps R_next_data1_2375_update_completed__ps phi_stmt_2373_entry_trigger type_cast_2377_sample_start__ps type_cast_2377_sample_completed__ps type_cast_2377_update_start__ps type_cast_2377_update_completed__ps :
            phi_stmt_2373_sample_start__ps phi_stmt_2373_sample_completed__ps phi_stmt_2373_update_start__ps phi_stmt_2373_update_completed__ps :
            phi_stmt_2373_loopback_sample_req_ps phi_stmt_2373_entry_sample_req_ps : 
            phi_stmt_2373_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_2373
            // start:  PHI statement phi_stmt_2378
            // 				$phi dat2 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data2 $on   $loopback 
            // type of target is $uint<1024>
            $T[phi_stmt_2378_sample_start_] 
            $T[phi_stmt_2378_sample_completed_] 
            $T[phi_stmt_2378_update_start_] 
            $T[phi_stmt_2378_update_completed_] 
            $T[phi_stmt_2378_sample_start__ps] 
            phi_stmt_2378_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_2378_sample_completed__ps] 
            phi_stmt_2378_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_2378_update_start__ps] 
            phi_stmt_2378_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_2378_update_completed__ps] 
            phi_stmt_2378_update_completed_ <-& (phi_stmt_2378_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_2378_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_2378_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_2378_update_start_)
            $T[phi_stmt_2378_loopback_trigger] 
            phi_stmt_2378_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_2378_loopback_sample_req] 
            $T[phi_stmt_2378_loopback_sample_req_ps] 
            phi_stmt_2378_loopback_sample_req <-& (phi_stmt_2378_loopback_sample_req_ps)
            phi_stmt_2378_loopback_sample_req &-> ($null)
            $T[phi_stmt_2378_entry_trigger] 
            phi_stmt_2378_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_2378_entry_sample_req] 
            $T[phi_stmt_2378_entry_sample_req_ps] 
            phi_stmt_2378_entry_sample_req <-& (phi_stmt_2378_entry_sample_req_ps)
            phi_stmt_2378_entry_sample_req &-> ($null)
            phi_stmt_2378_update_start_ o<-& (phi_stmt_2378_update_completed_ 0)
            phi_stmt_2378_sample_start_ o<-& (phi_stmt_2378_sample_completed_ 1)
            $T[phi_stmt_2378_merged_reqs] 
            $T[phi_stmt_2378_phi_mux_ack] 
            $T[phi_stmt_2378_phi_mux_ack_ps] 
            phi_stmt_2378_phi_mux_ack_ps <-& (phi_stmt_2378_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_2378_update_completed_)
            $T[R_next_data2_2380_sample_start__ps] 
            $T[R_next_data2_2380_sample_completed__ps] 
            $T[R_next_data2_2380_update_start__ps] 
            $T[R_next_data2_2380_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_next_data2_2380_sample_start_] 
            $T[R_next_data2_2380_sample_completed_] 
            $T[R_next_data2_2380_update_start_] 
            $T[R_next_data2_2380_update_completed_] 
            ;;[R_next_data2_2380_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_data2_2380_sample_start_ &-> (R_next_data2_2380_Sample)
            R_next_data2_2380_sample_completed_ <-& (R_next_data2_2380_Sample)
            ;;[R_next_data2_2380_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_data2_2380_update_start_ &-> (R_next_data2_2380_Update)
            R_next_data2_2380_update_completed_ <-& (R_next_data2_2380_Update)
            // RAW reenables for next_data2
            // Phi start dependency for implicit/constant alternative.
            R_next_data2_2380_sample_start_ <-& (R_next_data2_2380_sample_start__ps)
            R_next_data2_2380_update_start_ <-& (R_next_data2_2380_update_start__ps)
            // Phi complete dependency.
            R_next_data2_2380_sample_completed__ps <-& (R_next_data2_2380_sample_completed_)
            R_next_data2_2380_update_completed__ps <-& (R_next_data2_2380_update_completed_)
            $T[type_cast_2382_sample_start__ps] 
            $T[type_cast_2382_sample_completed__ps] 
            $T[type_cast_2382_update_start__ps] 
            $T[type_cast_2382_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_2382_sample_start_] 
            $T[type_cast_2382_sample_completed_] 
            type_cast_2382_sample_completed_ <-& (type_cast_2382_sample_start_)
            $T[type_cast_2382_update_start_] 
            $T [type_cast_2382_update_completed_] $delay 
            type_cast_2382_update_completed_ <-& (type_cast_2382_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_2382_sample_start_ <-& (type_cast_2382_sample_start__ps)
            type_cast_2382_update_start_ <-& (type_cast_2382_update_start__ps)
            // Phi complete dependency.
            type_cast_2382_sample_completed__ps <-& (type_cast_2382_sample_completed_)
            type_cast_2382_update_completed__ps <-& (type_cast_2382_update_completed_)
            $phisequencer [ phi_stmt_2378_phi_seq] : 
            phi_stmt_2378_loopback_trigger R_next_data2_2380_sample_start__ps R_next_data2_2380_sample_completed__ps R_next_data2_2380_update_start__ps R_next_data2_2380_update_completed__ps phi_stmt_2378_entry_trigger type_cast_2382_sample_start__ps type_cast_2382_sample_completed__ps type_cast_2382_update_start__ps type_cast_2382_update_completed__ps :
            phi_stmt_2378_sample_start__ps phi_stmt_2378_sample_completed__ps phi_stmt_2378_update_start__ps phi_stmt_2378_update_completed__ps :
            phi_stmt_2378_loopback_sample_req_ps phi_stmt_2378_entry_sample_req_ps : 
            phi_stmt_2378_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_2378
            // start:  PHI statement phi_stmt_2383
            // 				$phi dat3 := 				  next_data3 $on   $loopback 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 
            // type of target is $uint<1024>
            $T[phi_stmt_2383_sample_start_] 
            $T[phi_stmt_2383_sample_completed_] 
            $T[phi_stmt_2383_update_start_] 
            $T[phi_stmt_2383_update_completed_] 
            $T[phi_stmt_2383_sample_start__ps] 
            phi_stmt_2383_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_2383_sample_completed__ps] 
            phi_stmt_2383_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_2383_update_start__ps] 
            phi_stmt_2383_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_2383_update_completed__ps] 
            phi_stmt_2383_update_completed_ <-& (phi_stmt_2383_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_2383_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_2383_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_2383_update_start_)
            $T[phi_stmt_2383_loopback_trigger] 
            phi_stmt_2383_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_2383_loopback_sample_req] 
            $T[phi_stmt_2383_loopback_sample_req_ps] 
            phi_stmt_2383_loopback_sample_req <-& (phi_stmt_2383_loopback_sample_req_ps)
            phi_stmt_2383_loopback_sample_req &-> ($null)
            $T[phi_stmt_2383_entry_trigger] 
            phi_stmt_2383_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_2383_entry_sample_req] 
            $T[phi_stmt_2383_entry_sample_req_ps] 
            phi_stmt_2383_entry_sample_req <-& (phi_stmt_2383_entry_sample_req_ps)
            phi_stmt_2383_entry_sample_req &-> ($null)
            phi_stmt_2383_update_start_ o<-& (phi_stmt_2383_update_completed_ 0)
            phi_stmt_2383_sample_start_ o<-& (phi_stmt_2383_sample_completed_ 1)
            $T[phi_stmt_2383_merged_reqs] 
            $T[phi_stmt_2383_phi_mux_ack] 
            $T[phi_stmt_2383_phi_mux_ack_ps] 
            phi_stmt_2383_phi_mux_ack_ps <-& (phi_stmt_2383_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_2383_update_completed_)
            $T[R_next_data3_2385_sample_start__ps] 
            $T[R_next_data3_2385_sample_completed__ps] 
            $T[R_next_data3_2385_update_start__ps] 
            $T[R_next_data3_2385_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 0
            $T[R_next_data3_2385_sample_start_] 
            $T[R_next_data3_2385_sample_completed_] 
            $T[R_next_data3_2385_update_start_] 
            $T[R_next_data3_2385_update_completed_] 
            ;;[R_next_data3_2385_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_data3_2385_sample_start_ &-> (R_next_data3_2385_Sample)
            R_next_data3_2385_sample_completed_ <-& (R_next_data3_2385_Sample)
            ;;[R_next_data3_2385_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_data3_2385_update_start_ &-> (R_next_data3_2385_Update)
            R_next_data3_2385_update_completed_ <-& (R_next_data3_2385_Update)
            // RAW reenables for next_data3
            // Phi start dependency for implicit/constant alternative.
            R_next_data3_2385_sample_start_ <-& (R_next_data3_2385_sample_start__ps)
            R_next_data3_2385_update_start_ <-& (R_next_data3_2385_update_start__ps)
            // Phi complete dependency.
            R_next_data3_2385_sample_completed__ps <-& (R_next_data3_2385_sample_completed_)
            R_next_data3_2385_update_completed__ps <-& (R_next_data3_2385_update_completed_)
            $T[type_cast_2387_sample_start__ps] 
            $T[type_cast_2387_sample_completed__ps] 
            $T[type_cast_2387_update_start__ps] 
            $T[type_cast_2387_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_2387_sample_start_] 
            $T[type_cast_2387_sample_completed_] 
            type_cast_2387_sample_completed_ <-& (type_cast_2387_sample_start_)
            $T[type_cast_2387_update_start_] 
            $T [type_cast_2387_update_completed_] $delay 
            type_cast_2387_update_completed_ <-& (type_cast_2387_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_2387_sample_start_ <-& (type_cast_2387_sample_start__ps)
            type_cast_2387_update_start_ <-& (type_cast_2387_update_start__ps)
            // Phi complete dependency.
            type_cast_2387_sample_completed__ps <-& (type_cast_2387_sample_completed_)
            type_cast_2387_update_completed__ps <-& (type_cast_2387_update_completed_)
            $phisequencer [ phi_stmt_2383_phi_seq] : 
            phi_stmt_2383_loopback_trigger R_next_data3_2385_sample_start__ps R_next_data3_2385_sample_completed__ps R_next_data3_2385_update_start__ps R_next_data3_2385_update_completed__ps phi_stmt_2383_entry_trigger type_cast_2387_sample_start__ps type_cast_2387_sample_completed__ps type_cast_2387_update_start__ps type_cast_2387_update_completed__ps :
            phi_stmt_2383_sample_start__ps phi_stmt_2383_sample_completed__ps phi_stmt_2383_update_start__ps phi_stmt_2383_update_completed__ps :
            phi_stmt_2383_loopback_sample_req_ps phi_stmt_2383_entry_sample_req_ps : 
            phi_stmt_2383_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_2383
            // start:  				tempBuffer := dataBufferTx $buffering 1// bits of buffering = 8. 
            //  file .Aa/sdhc.opt.aa, line 851
            // Source expression
            // dataBufferTx
            $T[RPIPE_dataBufferTx_2390_sample_start_] 
            $T[RPIPE_dataBufferTx_2390_sample_completed_] 
            $T[RPIPE_dataBufferTx_2390_update_start_] 
            $T[RPIPE_dataBufferTx_2390_update_completed_] 
            ;;[RPIPE_dataBufferTx_2390_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_dataBufferTx_2390_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_dataBufferTx_2390_sample_start_ &-> (RPIPE_dataBufferTx_2390_Sample)
            RPIPE_dataBufferTx_2390_sample_completed_ <-& (RPIPE_dataBufferTx_2390_Sample)
            RPIPE_dataBufferTx_2390_update_start_ <-& (RPIPE_dataBufferTx_2390_sample_completed_)
            RPIPE_dataBufferTx_2390_update_start_ &-> (RPIPE_dataBufferTx_2390_Update)
            RPIPE_dataBufferTx_2390_update_completed_ <-& (RPIPE_dataBufferTx_2390_Update)
            RPIPE_dataBufferTx_2390_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // Target expression
            // (as target) tempBuffer
            // start: WAR dependencies for tempBuffer
            // done: WAR dependencies for tempBuffer
            // end:  				tempBuffer := dataBufferTx $buffering 1// bits of buffering = 8. 
            // start: WAR dependencies for next_data3
            // WAR dependency: Read: next_data3 before Write: 				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2383_sample_completed_)
            phi_stmt_2383_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data3 with Write: 				tempBuffer := dataBufferTx $buffering 1// bits of buffering = 8. 
            // done: WAR dependencies for next_data3
            // start:  				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 852
            // volatile! 
            // Source expression
            // ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 )))
            // (dat3 << 2 )
            // dat3
            // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))
            // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 ))
            // (tempBuffer [] 7 )
            // tempBuffer
            // (tempBuffer [] 3 )
            // tempBuffer
            // Target expression
            // (as target) next_data3
            // start: WAR dependencies for next_data3
            // WAR dependency: Read: next_data3 before Write: 				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2383_sample_completed_)
            phi_stmt_2383_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data3 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data3
            // end:  				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
            // start: WAR dependencies for next_data2
            // WAR dependency: Read: next_data2 before Write: 				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2378_sample_completed_)
            phi_stmt_2378_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data2 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data2
            // start:  				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 853
            // volatile! 
            // Source expression
            // ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 )))
            // (dat2 << 2 )
            // dat2
            // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))
            // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 ))
            // (tempBuffer [] 6 )
            // tempBuffer
            // (tempBuffer [] 2 )
            // tempBuffer
            // Target expression
            // (as target) next_data2
            // start: WAR dependencies for next_data2
            // WAR dependency: Read: next_data2 before Write: 				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2378_sample_completed_)
            phi_stmt_2378_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data2 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data2
            // end:  				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
            // start: WAR dependencies for next_data1
            // WAR dependency: Read: next_data1 before Write: 				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2373_sample_completed_)
            phi_stmt_2373_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data1 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data1
            // start:  				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 854
            // volatile! 
            // Source expression
            // ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 )))
            // (dat1 << 2 )
            // dat1
            // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))
            // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 ))
            // (tempBuffer [] 5 )
            // tempBuffer
            // (tempBuffer [] 1 )
            // tempBuffer
            // Target expression
            // (as target) next_data1
            // start: WAR dependencies for next_data1
            // WAR dependency: Read: next_data1 before Write: 				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2373_sample_completed_)
            phi_stmt_2373_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data1 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data1
            // end:  				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
            // start: WAR dependencies for next_data0
            // WAR dependency: Read: next_data0 before Write: 				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2368_sample_completed_)
            phi_stmt_2368_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data0 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data0
            // start:  				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 855
            // volatile! 
            // Source expression
            // ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 )))
            // (dat0 << 2 )
            // dat0
            // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))
            // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 ))
            // (tempBuffer [] 4 )
            // tempBuffer
            // (tempBuffer [] 0 )
            // tempBuffer
            // Target expression
            // (as target) next_data0
            // start: WAR dependencies for next_data0
            // WAR dependency: Read: next_data0 before Write: 				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            RPIPE_dataBufferTx_2390_update_start_ <-& (phi_stmt_2368_sample_completed_)
            phi_stmt_2368_sample_start_ o<-& (RPIPE_dataBufferTx_2390_update_completed_ 0)
            // WAR dependency: release  Read: next_data0 with Write: 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
            // done: WAR dependencies for next_data0
            // end:  				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
            // start: WAR dependencies for next_i
            // WAR dependency: Read: next_i before Write: 				$volatile next_i := (i + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_i
            // start:  				$volatile next_i := (i + 1 ) $buffering 1
            //  file .Aa/sdhc.opt.aa, line 856
            // volatile! 
            // Source expression
            // (i + 1 )
            // i
            // Target expression
            // (as target) next_i
            // start: WAR dependencies for next_i
            // WAR dependency: Read: next_i before Write: 				$volatile next_i := (i + 1 ) $buffering 1
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_i
            // end:  				$volatile next_i := (i + 1 ) $buffering 1
            // (next_i < 512 )
            // next_i
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (next_i < 512 ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_2363_update_completed_)
            // done: Forward dependencies from (next_i < 512 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // pipe read/write dependencies for pipe dataBufferTx
            // read-dependencies for pipe dataBufferTx
            // write-dependencies for pipe dataBufferTx
            // signal write dependencies for dataBufferTx
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_2361__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_2361_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_2361__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_2361_loop_body : condition_evaluated
          $bind do_while_stmt_2361__entry__  => do_while_stmt_2361_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_2361_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2361__exit__)
        }
        do_while_stmt_2361__entry__ |-> (do_while_stmt_2361)
        do_while_stmt_2361__exit__ <-| (do_while_stmt_2361)
        do_while_stmt_2361__entry__ <-| (branch_block_stmt_2360__entry__)
        do_while_stmt_2361__exit__ |-> (branch_block_stmt_2360__exit__)
      }
      branch_block_stmt_2360__entry__ |-> (branch_block_stmt_2360)
      branch_block_stmt_2360__exit__ <-| (branch_block_stmt_2360)
      ::[assign_stmt_2471] 
      {
        // start:  			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 860
        // Target expression
        // (as target) txBufferPointer
        $T[STORE_txBufferPointer_2468_sample_start_] 
        $T[STORE_txBufferPointer_2468_sample_completed_] 
        $T[STORE_txBufferPointer_2468_update_start_] 
        $T[STORE_txBufferPointer_2468_update_completed_] 
        // txBufferPointer
        $T[STORE_txBufferPointer_2468_word_address_calculated] 
        $T[STORE_txBufferPointer_2468_root_address_calculated] 
        STORE_txBufferPointer_2468_word_address_calculated <-& (STORE_txBufferPointer_2468_root_address_calculated)
        ;;[STORE_txBufferPointer_2468_Sample] 
        {
          ;;[STORE_txBufferPointer_2468_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_txBufferPointer_2468_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_txBufferPointer_2468_sample_start_ <-& (STORE_txBufferPointer_2468_word_address_calculated)
        STORE_txBufferPointer_2468_sample_start_ &-> (STORE_txBufferPointer_2468_Sample)
        STORE_txBufferPointer_2468_sample_completed_ <-& (STORE_txBufferPointer_2468_Sample)
        STORE_txBufferPointer_2468_sample_completed_ &-> ($null)
        STORE_txBufferPointer_2468_update_start_ &-> (STORE_txBufferPointer_2468_Update)
        STORE_txBufferPointer_2468_update_completed_ <-& (STORE_txBufferPointer_2468_Update)
        // end:  			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
        // load-store dependencies..
        // memory-space  memory_space_9
        //  STORE_txBufferPointer_2468 store
      }
      assign_stmt_2471__entry__ |-> (assign_stmt_2471)
      assign_stmt_2471__exit__ <-| (assign_stmt_2471)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 861
      <o> [do_while_stmt_2472]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_2472__entry__] 
        $P[do_while_stmt_2472__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2472_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2474
          // 			$phi j_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_0 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_2474_sample_start_] 
          $T[phi_stmt_2474_sample_completed_] 
          $T[phi_stmt_2474_update_start_] 
          $T[phi_stmt_2474_update_completed_] 
          $T[phi_stmt_2474_sample_start__ps] 
          phi_stmt_2474_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2474_sample_completed__ps] 
          phi_stmt_2474_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2474_update_start__ps] 
          phi_stmt_2474_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2474_update_completed__ps] 
          phi_stmt_2474_update_completed_ <-& (phi_stmt_2474_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2474_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2474_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2474_update_start_)
          $T[phi_stmt_2474_loopback_trigger] 
          phi_stmt_2474_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2474_loopback_sample_req] 
          $T[phi_stmt_2474_loopback_sample_req_ps] 
          phi_stmt_2474_loopback_sample_req <-& (phi_stmt_2474_loopback_sample_req_ps)
          phi_stmt_2474_loopback_sample_req &-> ($null)
          $T[phi_stmt_2474_entry_trigger] 
          phi_stmt_2474_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2474_entry_sample_req] 
          $T[phi_stmt_2474_entry_sample_req_ps] 
          phi_stmt_2474_entry_sample_req <-& (phi_stmt_2474_entry_sample_req_ps)
          phi_stmt_2474_entry_sample_req &-> ($null)
          phi_stmt_2474_update_start_ o<-& (phi_stmt_2474_update_completed_ 0)
          phi_stmt_2474_sample_start_ o<-& (phi_stmt_2474_sample_completed_ 1)
          $T[phi_stmt_2474_merged_reqs] 
          $T[phi_stmt_2474_phi_mux_ack] 
          $T[phi_stmt_2474_phi_mux_ack_ps] 
          phi_stmt_2474_phi_mux_ack_ps <-& (phi_stmt_2474_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2474_update_completed_)
          $T[R_next_j_0_2476_sample_start__ps] 
          $T[R_next_j_0_2476_sample_completed__ps] 
          $T[R_next_j_0_2476_update_start__ps] 
          $T[R_next_j_0_2476_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_j_0_2476_sample_start_] 
          $T[R_next_j_0_2476_sample_completed_] 
          $T[R_next_j_0_2476_update_start_] 
          $T[R_next_j_0_2476_update_completed_] 
          ;;[R_next_j_0_2476_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_j_0_2476_sample_start_ &-> (R_next_j_0_2476_Sample)
          R_next_j_0_2476_sample_completed_ <-& (R_next_j_0_2476_Sample)
          ;;[R_next_j_0_2476_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_j_0_2476_update_start_ &-> (R_next_j_0_2476_Update)
          R_next_j_0_2476_update_completed_ <-& (R_next_j_0_2476_Update)
          // RAW reenables for next_j_0
          // Phi start dependency for implicit/constant alternative.
          R_next_j_0_2476_sample_start_ <-& (R_next_j_0_2476_sample_start__ps)
          R_next_j_0_2476_update_start_ <-& (R_next_j_0_2476_update_start__ps)
          // Phi complete dependency.
          R_next_j_0_2476_sample_completed__ps <-& (R_next_j_0_2476_sample_completed_)
          R_next_j_0_2476_update_completed__ps <-& (R_next_j_0_2476_update_completed_)
          $T[type_cast_2478_sample_start__ps] 
          $T[type_cast_2478_sample_completed__ps] 
          $T[type_cast_2478_update_start__ps] 
          $T[type_cast_2478_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2478_sample_start_] 
          $T[type_cast_2478_sample_completed_] 
          type_cast_2478_sample_completed_ <-& (type_cast_2478_sample_start_)
          $T[type_cast_2478_update_start_] 
          $T [type_cast_2478_update_completed_] $delay 
          type_cast_2478_update_completed_ <-& (type_cast_2478_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2478_sample_start_ <-& (type_cast_2478_sample_start__ps)
          type_cast_2478_update_start_ <-& (type_cast_2478_update_start__ps)
          // Phi complete dependency.
          type_cast_2478_sample_completed__ps <-& (type_cast_2478_sample_completed_)
          type_cast_2478_update_completed__ps <-& (type_cast_2478_update_completed_)
          $phisequencer [ phi_stmt_2474_phi_seq] : 
          phi_stmt_2474_loopback_trigger R_next_j_0_2476_sample_start__ps R_next_j_0_2476_sample_completed__ps R_next_j_0_2476_update_start__ps R_next_j_0_2476_update_completed__ps phi_stmt_2474_entry_trigger type_cast_2478_sample_start__ps type_cast_2478_sample_completed__ps type_cast_2478_update_start__ps type_cast_2478_update_completed__ps :
          phi_stmt_2474_sample_start__ps phi_stmt_2474_sample_completed__ps phi_stmt_2474_update_start__ps phi_stmt_2474_update_completed__ps :
          phi_stmt_2474_loopback_sample_req_ps phi_stmt_2474_entry_sample_req_ps : 
          phi_stmt_2474_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2474
          // start:  PHI statement phi_stmt_2479
          // 			$phi CRC_16_DAT0 := 			  nextCRC16_DAT0 $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_2479_sample_start_] 
          $T[phi_stmt_2479_sample_completed_] 
          $T[phi_stmt_2479_update_start_] 
          $T[phi_stmt_2479_update_completed_] 
          $T[phi_stmt_2479_sample_start__ps] 
          phi_stmt_2479_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2479_sample_completed__ps] 
          phi_stmt_2479_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2479_update_start__ps] 
          phi_stmt_2479_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2479_update_completed__ps] 
          phi_stmt_2479_update_completed_ <-& (phi_stmt_2479_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2479_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2479_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2479_update_start_)
          $T[phi_stmt_2479_loopback_trigger] 
          phi_stmt_2479_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2479_loopback_sample_req] 
          $T[phi_stmt_2479_loopback_sample_req_ps] 
          phi_stmt_2479_loopback_sample_req <-& (phi_stmt_2479_loopback_sample_req_ps)
          phi_stmt_2479_loopback_sample_req &-> ($null)
          $T[phi_stmt_2479_entry_trigger] 
          phi_stmt_2479_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2479_entry_sample_req] 
          $T[phi_stmt_2479_entry_sample_req_ps] 
          phi_stmt_2479_entry_sample_req <-& (phi_stmt_2479_entry_sample_req_ps)
          phi_stmt_2479_entry_sample_req &-> ($null)
          phi_stmt_2479_update_start_ o<-& (phi_stmt_2479_update_completed_ 0)
          phi_stmt_2479_sample_start_ o<-& (phi_stmt_2479_sample_completed_ 1)
          $T[phi_stmt_2479_merged_reqs] 
          $T[phi_stmt_2479_phi_mux_ack] 
          $T[phi_stmt_2479_phi_mux_ack_ps] 
          phi_stmt_2479_phi_mux_ack_ps <-& (phi_stmt_2479_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2479_update_completed_)
          $T[type_cast_2482_sample_start__ps] 
          $T[type_cast_2482_sample_completed__ps] 
          $T[type_cast_2482_update_start__ps] 
          $T[type_cast_2482_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2482_sample_start_] 
          $T[type_cast_2482_sample_completed_] 
          type_cast_2482_sample_completed_ <-& (type_cast_2482_sample_start_)
          $T[type_cast_2482_update_start_] 
          $T [type_cast_2482_update_completed_] $delay 
          type_cast_2482_update_completed_ <-& (type_cast_2482_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2482_sample_start_ <-& (type_cast_2482_sample_start__ps)
          type_cast_2482_update_start_ <-& (type_cast_2482_update_start__ps)
          // Phi complete dependency.
          type_cast_2482_sample_completed__ps <-& (type_cast_2482_sample_completed_)
          type_cast_2482_update_completed__ps <-& (type_cast_2482_update_completed_)
          $T[R_nextCRC16_DAT0_2483_sample_start__ps] 
          $T[R_nextCRC16_DAT0_2483_sample_completed__ps] 
          $T[R_nextCRC16_DAT0_2483_update_start__ps] 
          $T[R_nextCRC16_DAT0_2483_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_DAT0_2483_sample_start_] 
          $T[R_nextCRC16_DAT0_2483_sample_completed_] 
          $T[R_nextCRC16_DAT0_2483_update_start_] 
          $T[R_nextCRC16_DAT0_2483_update_completed_] 
          ;;[R_nextCRC16_DAT0_2483_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_DAT0_2483_sample_start_ &-> (R_nextCRC16_DAT0_2483_Sample)
          R_nextCRC16_DAT0_2483_sample_completed_ <-& (R_nextCRC16_DAT0_2483_Sample)
          ;;[R_nextCRC16_DAT0_2483_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_DAT0_2483_update_start_ &-> (R_nextCRC16_DAT0_2483_Update)
          R_nextCRC16_DAT0_2483_update_completed_ <-& (R_nextCRC16_DAT0_2483_Update)
          // RAW reenables for nextCRC16_DAT0
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_DAT0_2483_sample_start_ <-& (R_nextCRC16_DAT0_2483_sample_start__ps)
          R_nextCRC16_DAT0_2483_update_start_ <-& (R_nextCRC16_DAT0_2483_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_DAT0_2483_sample_completed__ps <-& (R_nextCRC16_DAT0_2483_sample_completed_)
          R_nextCRC16_DAT0_2483_update_completed__ps <-& (R_nextCRC16_DAT0_2483_update_completed_)
          $phisequencer [ phi_stmt_2479_phi_seq] : 
          phi_stmt_2479_entry_trigger type_cast_2482_sample_start__ps type_cast_2482_sample_completed__ps type_cast_2482_update_start__ps type_cast_2482_update_completed__ps phi_stmt_2479_loopback_trigger R_nextCRC16_DAT0_2483_sample_start__ps R_nextCRC16_DAT0_2483_sample_completed__ps R_nextCRC16_DAT0_2483_update_start__ps R_nextCRC16_DAT0_2483_update_completed__ps :
          phi_stmt_2479_sample_start__ps phi_stmt_2479_sample_completed__ps phi_stmt_2479_update_start__ps phi_stmt_2479_update_completed__ps :
          phi_stmt_2479_entry_sample_req_ps phi_stmt_2479_loopback_sample_req_ps : 
          phi_stmt_2479_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2479
          // start:  PHI statement phi_stmt_2484
          // 			$phi tempDataD0 := 			  nextTempDataD0 $on   $loopback 			  dat0 $on   $entry 
          // type of target is $uint<1024>
          $T[phi_stmt_2484_sample_start_] 
          $T[phi_stmt_2484_sample_completed_] 
          $T[phi_stmt_2484_update_start_] 
          $T[phi_stmt_2484_update_completed_] 
          $T[phi_stmt_2484_sample_start__ps] 
          phi_stmt_2484_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2484_sample_completed__ps] 
          phi_stmt_2484_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2484_update_start__ps] 
          phi_stmt_2484_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2484_update_completed__ps] 
          phi_stmt_2484_update_completed_ <-& (phi_stmt_2484_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2484_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2484_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2484_update_start_)
          $T[phi_stmt_2484_loopback_trigger] 
          phi_stmt_2484_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2484_loopback_sample_req] 
          $T[phi_stmt_2484_loopback_sample_req_ps] 
          phi_stmt_2484_loopback_sample_req <-& (phi_stmt_2484_loopback_sample_req_ps)
          phi_stmt_2484_loopback_sample_req &-> ($null)
          $T[phi_stmt_2484_entry_trigger] 
          phi_stmt_2484_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2484_entry_sample_req] 
          $T[phi_stmt_2484_entry_sample_req_ps] 
          phi_stmt_2484_entry_sample_req <-& (phi_stmt_2484_entry_sample_req_ps)
          phi_stmt_2484_entry_sample_req &-> ($null)
          phi_stmt_2484_update_start_ o<-& (phi_stmt_2484_update_completed_ 0)
          phi_stmt_2484_sample_start_ o<-& (phi_stmt_2484_sample_completed_ 1)
          $T[phi_stmt_2484_merged_reqs] 
          $T[phi_stmt_2484_phi_mux_ack] 
          $T[phi_stmt_2484_phi_mux_ack_ps] 
          phi_stmt_2484_phi_mux_ack_ps <-& (phi_stmt_2484_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2484_update_completed_)
          $T[R_nextTempDataD0_2486_sample_start__ps] 
          $T[R_nextTempDataD0_2486_sample_completed__ps] 
          $T[R_nextTempDataD0_2486_update_start__ps] 
          $T[R_nextTempDataD0_2486_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nextTempDataD0_2486_sample_start_] 
          $T[R_nextTempDataD0_2486_sample_completed_] 
          $T[R_nextTempDataD0_2486_update_start_] 
          $T[R_nextTempDataD0_2486_update_completed_] 
          ;;[R_nextTempDataD0_2486_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempDataD0_2486_sample_start_ &-> (R_nextTempDataD0_2486_Sample)
          R_nextTempDataD0_2486_sample_completed_ <-& (R_nextTempDataD0_2486_Sample)
          ;;[R_nextTempDataD0_2486_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempDataD0_2486_update_start_ &-> (R_nextTempDataD0_2486_Update)
          R_nextTempDataD0_2486_update_completed_ <-& (R_nextTempDataD0_2486_Update)
          // RAW reenables for nextTempDataD0
          // Phi start dependency for implicit/constant alternative.
          R_nextTempDataD0_2486_sample_start_ <-& (R_nextTempDataD0_2486_sample_start__ps)
          R_nextTempDataD0_2486_update_start_ <-& (R_nextTempDataD0_2486_update_start__ps)
          // Phi complete dependency.
          R_nextTempDataD0_2486_sample_completed__ps <-& (R_nextTempDataD0_2486_sample_completed_)
          R_nextTempDataD0_2486_update_completed__ps <-& (R_nextTempDataD0_2486_update_completed_)
          $T[R_dat0_2487_sample_start__ps] 
          $T[R_dat0_2487_sample_completed__ps] 
          $T[R_dat0_2487_update_start__ps] 
          $T[R_dat0_2487_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_dat0_2487_sample_start_] 
          $T[R_dat0_2487_sample_completed_] 
          $T[R_dat0_2487_update_start_] 
          $T[R_dat0_2487_update_completed_] 
          ;;[R_dat0_2487_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat0_2487_sample_start_ &-> (R_dat0_2487_Sample)
          R_dat0_2487_sample_completed_ <-& (R_dat0_2487_Sample)
          ;;[R_dat0_2487_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat0_2487_update_start_ &-> (R_dat0_2487_Update)
          R_dat0_2487_update_completed_ <-& (R_dat0_2487_Update)
          // RAW reenables for dat0
          // Phi start dependency for implicit/constant alternative.
          R_dat0_2487_sample_start_ <-& (R_dat0_2487_sample_start__ps)
          R_dat0_2487_update_start_ <-& (R_dat0_2487_update_start__ps)
          // Phi complete dependency.
          R_dat0_2487_sample_completed__ps <-& (R_dat0_2487_sample_completed_)
          R_dat0_2487_update_completed__ps <-& (R_dat0_2487_update_completed_)
          $phisequencer [ phi_stmt_2484_phi_seq] : 
          phi_stmt_2484_loopback_trigger R_nextTempDataD0_2486_sample_start__ps R_nextTempDataD0_2486_sample_completed__ps R_nextTempDataD0_2486_update_start__ps R_nextTempDataD0_2486_update_completed__ps phi_stmt_2484_entry_trigger R_dat0_2487_sample_start__ps R_dat0_2487_sample_completed__ps R_dat0_2487_update_start__ps R_dat0_2487_update_completed__ps :
          phi_stmt_2484_sample_start__ps phi_stmt_2484_sample_completed__ps phi_stmt_2484_update_start__ps phi_stmt_2484_update_completed__ps :
          phi_stmt_2484_loopback_sample_req_ps phi_stmt_2484_entry_sample_req_ps : 
          phi_stmt_2484_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2484
          // start: WAR dependencies for invd0
          // done: WAR dependencies for invd0
          // start:  			$volatile invd0 := ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 871
          // volatile! 
          // Source expression
          // ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 ))
          // (tempDataD0 [] 1023 )
          // tempDataD0
          // (CRC_16_DAT0 [] 15 )
          // CRC_16_DAT0
          // Target expression
          // (as target) invd0
          // start: WAR dependencies for invd0
          // done: WAR dependencies for invd0
          // end:  			$volatile invd0 := ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_DAT0
          // WAR dependency: Read: nextCRC16_DAT0 before Write: 			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT0
          // start:  			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 872
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0))
          // ((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) )
          // (( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0))
          // ( $slice CRC_16_DAT0 14 12 ) 
          // CRC_16_DAT0
          // ((CRC_16_DAT0 [] 11 ) ^ invd0)
          // (CRC_16_DAT0 [] 11 )
          // CRC_16_DAT0
          // invd0
          // ( $slice CRC_16_DAT0 10 5 ) 
          // CRC_16_DAT0
          // ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)
          // (((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) )
          // ((CRC_16_DAT0 [] 4 ) ^ invd0)
          // (CRC_16_DAT0 [] 4 )
          // CRC_16_DAT0
          // invd0
          // ( $slice CRC_16_DAT0 3 0 ) 
          // CRC_16_DAT0
          // invd0
          // Target expression
          // (as target) nextCRC16_DAT0
          // start: WAR dependencies for nextCRC16_DAT0
          // WAR dependency: Read: nextCRC16_DAT0 before Write: 			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT0
          // end:  			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
          // start: WAR dependencies for nextTempDataD0
          // WAR dependency: Read: nextTempDataD0 before Write: 			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD0
          // start:  			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 873
          // volatile! 
          // Source expression
          // (tempDataD0 << 1 )
          // tempDataD0
          // Target expression
          // (as target) nextTempDataD0
          // start: WAR dependencies for nextTempDataD0
          // WAR dependency: Read: nextTempDataD0 before Write: 			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD0
          // end:  			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
          // start: WAR dependencies for next_j_0
          // WAR dependency: Read: next_j_0 before Write: 			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_0
          // start:  			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 874
          // volatile! 
          // Source expression
          // (j_0 + 1 )
          // j_0
          // Target expression
          // (as target) next_j_0
          // start: WAR dependencies for next_j_0
          // WAR dependency: Read: next_j_0 before Write: 			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_0
          // end:  			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
          // (next_j_0 < 1024 )
          // next_j_0
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_j_0 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2474_update_completed_)
          // done: Forward dependencies from (next_j_0 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2472__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2472_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2472__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2472_loop_body : condition_evaluated
        $bind do_while_stmt_2472__entry__  => do_while_stmt_2472_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2472_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2472__exit__)
      }
      do_while_stmt_2472__entry__ |-> (do_while_stmt_2472)
      do_while_stmt_2472__exit__ <-| (do_while_stmt_2472)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 876
      <o> [do_while_stmt_2536]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_2536__entry__] 
        $P[do_while_stmt_2536__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2536_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2538
          // 			$phi j_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_1 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_2538_sample_start_] 
          $T[phi_stmt_2538_sample_completed_] 
          $T[phi_stmt_2538_update_start_] 
          $T[phi_stmt_2538_update_completed_] 
          $T[phi_stmt_2538_sample_start__ps] 
          phi_stmt_2538_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2538_sample_completed__ps] 
          phi_stmt_2538_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2538_update_start__ps] 
          phi_stmt_2538_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2538_update_completed__ps] 
          phi_stmt_2538_update_completed_ <-& (phi_stmt_2538_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2538_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2538_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2538_update_start_)
          $T[phi_stmt_2538_loopback_trigger] 
          phi_stmt_2538_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2538_loopback_sample_req] 
          $T[phi_stmt_2538_loopback_sample_req_ps] 
          phi_stmt_2538_loopback_sample_req <-& (phi_stmt_2538_loopback_sample_req_ps)
          phi_stmt_2538_loopback_sample_req &-> ($null)
          $T[phi_stmt_2538_entry_trigger] 
          phi_stmt_2538_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2538_entry_sample_req] 
          $T[phi_stmt_2538_entry_sample_req_ps] 
          phi_stmt_2538_entry_sample_req <-& (phi_stmt_2538_entry_sample_req_ps)
          phi_stmt_2538_entry_sample_req &-> ($null)
          phi_stmt_2538_update_start_ o<-& (phi_stmt_2538_update_completed_ 0)
          phi_stmt_2538_sample_start_ o<-& (phi_stmt_2538_sample_completed_ 1)
          $T[phi_stmt_2538_merged_reqs] 
          $T[phi_stmt_2538_phi_mux_ack] 
          $T[phi_stmt_2538_phi_mux_ack_ps] 
          phi_stmt_2538_phi_mux_ack_ps <-& (phi_stmt_2538_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2538_update_completed_)
          $T[type_cast_2541_sample_start__ps] 
          $T[type_cast_2541_sample_completed__ps] 
          $T[type_cast_2541_update_start__ps] 
          $T[type_cast_2541_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2541_sample_start_] 
          $T[type_cast_2541_sample_completed_] 
          type_cast_2541_sample_completed_ <-& (type_cast_2541_sample_start_)
          $T[type_cast_2541_update_start_] 
          $T [type_cast_2541_update_completed_] $delay 
          type_cast_2541_update_completed_ <-& (type_cast_2541_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2541_sample_start_ <-& (type_cast_2541_sample_start__ps)
          type_cast_2541_update_start_ <-& (type_cast_2541_update_start__ps)
          // Phi complete dependency.
          type_cast_2541_sample_completed__ps <-& (type_cast_2541_sample_completed_)
          type_cast_2541_update_completed__ps <-& (type_cast_2541_update_completed_)
          $T[R_next_j_1_2542_sample_start__ps] 
          $T[R_next_j_1_2542_sample_completed__ps] 
          $T[R_next_j_1_2542_update_start__ps] 
          $T[R_next_j_1_2542_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_j_1_2542_sample_start_] 
          $T[R_next_j_1_2542_sample_completed_] 
          $T[R_next_j_1_2542_update_start_] 
          $T[R_next_j_1_2542_update_completed_] 
          ;;[R_next_j_1_2542_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_j_1_2542_sample_start_ &-> (R_next_j_1_2542_Sample)
          R_next_j_1_2542_sample_completed_ <-& (R_next_j_1_2542_Sample)
          ;;[R_next_j_1_2542_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_j_1_2542_update_start_ &-> (R_next_j_1_2542_Update)
          R_next_j_1_2542_update_completed_ <-& (R_next_j_1_2542_Update)
          // RAW reenables for next_j_1
          // Phi start dependency for implicit/constant alternative.
          R_next_j_1_2542_sample_start_ <-& (R_next_j_1_2542_sample_start__ps)
          R_next_j_1_2542_update_start_ <-& (R_next_j_1_2542_update_start__ps)
          // Phi complete dependency.
          R_next_j_1_2542_sample_completed__ps <-& (R_next_j_1_2542_sample_completed_)
          R_next_j_1_2542_update_completed__ps <-& (R_next_j_1_2542_update_completed_)
          $phisequencer [ phi_stmt_2538_phi_seq] : 
          phi_stmt_2538_entry_trigger type_cast_2541_sample_start__ps type_cast_2541_sample_completed__ps type_cast_2541_update_start__ps type_cast_2541_update_completed__ps phi_stmt_2538_loopback_trigger R_next_j_1_2542_sample_start__ps R_next_j_1_2542_sample_completed__ps R_next_j_1_2542_update_start__ps R_next_j_1_2542_update_completed__ps :
          phi_stmt_2538_sample_start__ps phi_stmt_2538_sample_completed__ps phi_stmt_2538_update_start__ps phi_stmt_2538_update_completed__ps :
          phi_stmt_2538_entry_sample_req_ps phi_stmt_2538_loopback_sample_req_ps : 
          phi_stmt_2538_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2538
          // start:  PHI statement phi_stmt_2543
          // 			$phi CRC_16_DAT1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT1 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_2543_sample_start_] 
          $T[phi_stmt_2543_sample_completed_] 
          $T[phi_stmt_2543_update_start_] 
          $T[phi_stmt_2543_update_completed_] 
          $T[phi_stmt_2543_sample_start__ps] 
          phi_stmt_2543_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2543_sample_completed__ps] 
          phi_stmt_2543_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2543_update_start__ps] 
          phi_stmt_2543_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2543_update_completed__ps] 
          phi_stmt_2543_update_completed_ <-& (phi_stmt_2543_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2543_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2543_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2543_update_start_)
          $T[phi_stmt_2543_loopback_trigger] 
          phi_stmt_2543_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2543_loopback_sample_req] 
          $T[phi_stmt_2543_loopback_sample_req_ps] 
          phi_stmt_2543_loopback_sample_req <-& (phi_stmt_2543_loopback_sample_req_ps)
          phi_stmt_2543_loopback_sample_req &-> ($null)
          $T[phi_stmt_2543_entry_trigger] 
          phi_stmt_2543_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2543_entry_sample_req] 
          $T[phi_stmt_2543_entry_sample_req_ps] 
          phi_stmt_2543_entry_sample_req <-& (phi_stmt_2543_entry_sample_req_ps)
          phi_stmt_2543_entry_sample_req &-> ($null)
          phi_stmt_2543_update_start_ o<-& (phi_stmt_2543_update_completed_ 0)
          phi_stmt_2543_sample_start_ o<-& (phi_stmt_2543_sample_completed_ 1)
          $T[phi_stmt_2543_merged_reqs] 
          $T[phi_stmt_2543_phi_mux_ack] 
          $T[phi_stmt_2543_phi_mux_ack_ps] 
          phi_stmt_2543_phi_mux_ack_ps <-& (phi_stmt_2543_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2543_update_completed_)
          $T[type_cast_2546_sample_start__ps] 
          $T[type_cast_2546_sample_completed__ps] 
          $T[type_cast_2546_update_start__ps] 
          $T[type_cast_2546_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2546_sample_start_] 
          $T[type_cast_2546_sample_completed_] 
          type_cast_2546_sample_completed_ <-& (type_cast_2546_sample_start_)
          $T[type_cast_2546_update_start_] 
          $T [type_cast_2546_update_completed_] $delay 
          type_cast_2546_update_completed_ <-& (type_cast_2546_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2546_sample_start_ <-& (type_cast_2546_sample_start__ps)
          type_cast_2546_update_start_ <-& (type_cast_2546_update_start__ps)
          // Phi complete dependency.
          type_cast_2546_sample_completed__ps <-& (type_cast_2546_sample_completed_)
          type_cast_2546_update_completed__ps <-& (type_cast_2546_update_completed_)
          $T[R_nextCRC16_DAT1_2547_sample_start__ps] 
          $T[R_nextCRC16_DAT1_2547_sample_completed__ps] 
          $T[R_nextCRC16_DAT1_2547_update_start__ps] 
          $T[R_nextCRC16_DAT1_2547_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_DAT1_2547_sample_start_] 
          $T[R_nextCRC16_DAT1_2547_sample_completed_] 
          $T[R_nextCRC16_DAT1_2547_update_start_] 
          $T[R_nextCRC16_DAT1_2547_update_completed_] 
          ;;[R_nextCRC16_DAT1_2547_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_DAT1_2547_sample_start_ &-> (R_nextCRC16_DAT1_2547_Sample)
          R_nextCRC16_DAT1_2547_sample_completed_ <-& (R_nextCRC16_DAT1_2547_Sample)
          ;;[R_nextCRC16_DAT1_2547_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_DAT1_2547_update_start_ &-> (R_nextCRC16_DAT1_2547_Update)
          R_nextCRC16_DAT1_2547_update_completed_ <-& (R_nextCRC16_DAT1_2547_Update)
          // RAW reenables for nextCRC16_DAT1
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_DAT1_2547_sample_start_ <-& (R_nextCRC16_DAT1_2547_sample_start__ps)
          R_nextCRC16_DAT1_2547_update_start_ <-& (R_nextCRC16_DAT1_2547_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_DAT1_2547_sample_completed__ps <-& (R_nextCRC16_DAT1_2547_sample_completed_)
          R_nextCRC16_DAT1_2547_update_completed__ps <-& (R_nextCRC16_DAT1_2547_update_completed_)
          $phisequencer [ phi_stmt_2543_phi_seq] : 
          phi_stmt_2543_entry_trigger type_cast_2546_sample_start__ps type_cast_2546_sample_completed__ps type_cast_2546_update_start__ps type_cast_2546_update_completed__ps phi_stmt_2543_loopback_trigger R_nextCRC16_DAT1_2547_sample_start__ps R_nextCRC16_DAT1_2547_sample_completed__ps R_nextCRC16_DAT1_2547_update_start__ps R_nextCRC16_DAT1_2547_update_completed__ps :
          phi_stmt_2543_sample_start__ps phi_stmt_2543_sample_completed__ps phi_stmt_2543_update_start__ps phi_stmt_2543_update_completed__ps :
          phi_stmt_2543_entry_sample_req_ps phi_stmt_2543_loopback_sample_req_ps : 
          phi_stmt_2543_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2543
          // start:  PHI statement phi_stmt_2548
          // 			$phi tempDataD1 := 			  dat1 $on   $entry 			  nextTempDataD1 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_2548_sample_start_] 
          $T[phi_stmt_2548_sample_completed_] 
          $T[phi_stmt_2548_update_start_] 
          $T[phi_stmt_2548_update_completed_] 
          $T[phi_stmt_2548_sample_start__ps] 
          phi_stmt_2548_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2548_sample_completed__ps] 
          phi_stmt_2548_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2548_update_start__ps] 
          phi_stmt_2548_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2548_update_completed__ps] 
          phi_stmt_2548_update_completed_ <-& (phi_stmt_2548_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2548_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2548_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2548_update_start_)
          $T[phi_stmt_2548_loopback_trigger] 
          phi_stmt_2548_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2548_loopback_sample_req] 
          $T[phi_stmt_2548_loopback_sample_req_ps] 
          phi_stmt_2548_loopback_sample_req <-& (phi_stmt_2548_loopback_sample_req_ps)
          phi_stmt_2548_loopback_sample_req &-> ($null)
          $T[phi_stmt_2548_entry_trigger] 
          phi_stmt_2548_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2548_entry_sample_req] 
          $T[phi_stmt_2548_entry_sample_req_ps] 
          phi_stmt_2548_entry_sample_req <-& (phi_stmt_2548_entry_sample_req_ps)
          phi_stmt_2548_entry_sample_req &-> ($null)
          phi_stmt_2548_update_start_ o<-& (phi_stmt_2548_update_completed_ 0)
          phi_stmt_2548_sample_start_ o<-& (phi_stmt_2548_sample_completed_ 1)
          $T[phi_stmt_2548_merged_reqs] 
          $T[phi_stmt_2548_phi_mux_ack] 
          $T[phi_stmt_2548_phi_mux_ack_ps] 
          phi_stmt_2548_phi_mux_ack_ps <-& (phi_stmt_2548_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2548_update_completed_)
          $T[R_dat1_2550_sample_start__ps] 
          $T[R_dat1_2550_sample_completed__ps] 
          $T[R_dat1_2550_update_start__ps] 
          $T[R_dat1_2550_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat1_2550_sample_start_] 
          $T[R_dat1_2550_sample_completed_] 
          $T[R_dat1_2550_update_start_] 
          $T[R_dat1_2550_update_completed_] 
          ;;[R_dat1_2550_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat1_2550_sample_start_ &-> (R_dat1_2550_Sample)
          R_dat1_2550_sample_completed_ <-& (R_dat1_2550_Sample)
          ;;[R_dat1_2550_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat1_2550_update_start_ &-> (R_dat1_2550_Update)
          R_dat1_2550_update_completed_ <-& (R_dat1_2550_Update)
          // RAW reenables for dat1
          // Phi start dependency for implicit/constant alternative.
          R_dat1_2550_sample_start_ <-& (R_dat1_2550_sample_start__ps)
          R_dat1_2550_update_start_ <-& (R_dat1_2550_update_start__ps)
          // Phi complete dependency.
          R_dat1_2550_sample_completed__ps <-& (R_dat1_2550_sample_completed_)
          R_dat1_2550_update_completed__ps <-& (R_dat1_2550_update_completed_)
          $T[R_nextTempDataD1_2551_sample_start__ps] 
          $T[R_nextTempDataD1_2551_sample_completed__ps] 
          $T[R_nextTempDataD1_2551_update_start__ps] 
          $T[R_nextTempDataD1_2551_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempDataD1_2551_sample_start_] 
          $T[R_nextTempDataD1_2551_sample_completed_] 
          $T[R_nextTempDataD1_2551_update_start_] 
          $T[R_nextTempDataD1_2551_update_completed_] 
          ;;[R_nextTempDataD1_2551_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempDataD1_2551_sample_start_ &-> (R_nextTempDataD1_2551_Sample)
          R_nextTempDataD1_2551_sample_completed_ <-& (R_nextTempDataD1_2551_Sample)
          ;;[R_nextTempDataD1_2551_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempDataD1_2551_update_start_ &-> (R_nextTempDataD1_2551_Update)
          R_nextTempDataD1_2551_update_completed_ <-& (R_nextTempDataD1_2551_Update)
          // RAW reenables for nextTempDataD1
          // Phi start dependency for implicit/constant alternative.
          R_nextTempDataD1_2551_sample_start_ <-& (R_nextTempDataD1_2551_sample_start__ps)
          R_nextTempDataD1_2551_update_start_ <-& (R_nextTempDataD1_2551_update_start__ps)
          // Phi complete dependency.
          R_nextTempDataD1_2551_sample_completed__ps <-& (R_nextTempDataD1_2551_sample_completed_)
          R_nextTempDataD1_2551_update_completed__ps <-& (R_nextTempDataD1_2551_update_completed_)
          $phisequencer [ phi_stmt_2548_phi_seq] : 
          phi_stmt_2548_entry_trigger R_dat1_2550_sample_start__ps R_dat1_2550_sample_completed__ps R_dat1_2550_update_start__ps R_dat1_2550_update_completed__ps phi_stmt_2548_loopback_trigger R_nextTempDataD1_2551_sample_start__ps R_nextTempDataD1_2551_sample_completed__ps R_nextTempDataD1_2551_update_start__ps R_nextTempDataD1_2551_update_completed__ps :
          phi_stmt_2548_sample_start__ps phi_stmt_2548_sample_completed__ps phi_stmt_2548_update_start__ps phi_stmt_2548_update_completed__ps :
          phi_stmt_2548_entry_sample_req_ps phi_stmt_2548_loopback_sample_req_ps : 
          phi_stmt_2548_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2548
          // start: WAR dependencies for invd1
          // done: WAR dependencies for invd1
          // start:  			$volatile invd1 := ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 886
          // volatile! 
          // Source expression
          // ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 ))
          // (tempDataD1 [] 1023 )
          // tempDataD1
          // (CRC_16_DAT1 [] 15 )
          // CRC_16_DAT1
          // Target expression
          // (as target) invd1
          // start: WAR dependencies for invd1
          // done: WAR dependencies for invd1
          // end:  			$volatile invd1 := ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_DAT1
          // WAR dependency: Read: nextCRC16_DAT1 before Write: 			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT1
          // start:  			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 887
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1))
          // ((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) )
          // (( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1))
          // ( $slice CRC_16_DAT1 14 12 ) 
          // CRC_16_DAT1
          // ((CRC_16_DAT1 [] 11 ) ^ invd1)
          // (CRC_16_DAT1 [] 11 )
          // CRC_16_DAT1
          // invd1
          // ( $slice CRC_16_DAT1 10 5 ) 
          // CRC_16_DAT1
          // ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)
          // (((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) )
          // ((CRC_16_DAT1 [] 4 ) ^ invd1)
          // (CRC_16_DAT1 [] 4 )
          // CRC_16_DAT1
          // invd1
          // ( $slice CRC_16_DAT1 3 0 ) 
          // CRC_16_DAT1
          // invd1
          // Target expression
          // (as target) nextCRC16_DAT1
          // start: WAR dependencies for nextCRC16_DAT1
          // WAR dependency: Read: nextCRC16_DAT1 before Write: 			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT1
          // end:  			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
          // start: WAR dependencies for nextTempDataD1
          // WAR dependency: Read: nextTempDataD1 before Write: 			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD1
          // start:  			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 888
          // volatile! 
          // Source expression
          // (tempDataD1 << 1 )
          // tempDataD1
          // Target expression
          // (as target) nextTempDataD1
          // start: WAR dependencies for nextTempDataD1
          // WAR dependency: Read: nextTempDataD1 before Write: 			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD1
          // end:  			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
          // start: WAR dependencies for next_j_1
          // WAR dependency: Read: next_j_1 before Write: 			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_1
          // start:  			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 889
          // volatile! 
          // Source expression
          // (j_1 + 1 )
          // j_1
          // Target expression
          // (as target) next_j_1
          // start: WAR dependencies for next_j_1
          // WAR dependency: Read: next_j_1 before Write: 			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_1
          // end:  			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
          // (next_j_1 < 1024 )
          // next_j_1
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_j_1 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2538_update_completed_)
          // done: Forward dependencies from (next_j_1 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2536__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2536_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2536__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2536_loop_body : condition_evaluated
        $bind do_while_stmt_2536__entry__  => do_while_stmt_2536_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2536_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2536__exit__)
      }
      do_while_stmt_2536__entry__ |-> (do_while_stmt_2536)
      do_while_stmt_2536__exit__ <-| (do_while_stmt_2536)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 891
      <o> [do_while_stmt_2600]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_2600__entry__] 
        $P[do_while_stmt_2600__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2600_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2602
          // 			$phi j_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_2 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_2602_sample_start_] 
          $T[phi_stmt_2602_sample_completed_] 
          $T[phi_stmt_2602_update_start_] 
          $T[phi_stmt_2602_update_completed_] 
          $T[phi_stmt_2602_sample_start__ps] 
          phi_stmt_2602_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2602_sample_completed__ps] 
          phi_stmt_2602_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2602_update_start__ps] 
          phi_stmt_2602_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2602_update_completed__ps] 
          phi_stmt_2602_update_completed_ <-& (phi_stmt_2602_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2602_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2602_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2602_update_start_)
          $T[phi_stmt_2602_loopback_trigger] 
          phi_stmt_2602_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2602_loopback_sample_req] 
          $T[phi_stmt_2602_loopback_sample_req_ps] 
          phi_stmt_2602_loopback_sample_req <-& (phi_stmt_2602_loopback_sample_req_ps)
          phi_stmt_2602_loopback_sample_req &-> ($null)
          $T[phi_stmt_2602_entry_trigger] 
          phi_stmt_2602_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2602_entry_sample_req] 
          $T[phi_stmt_2602_entry_sample_req_ps] 
          phi_stmt_2602_entry_sample_req <-& (phi_stmt_2602_entry_sample_req_ps)
          phi_stmt_2602_entry_sample_req &-> ($null)
          phi_stmt_2602_update_start_ o<-& (phi_stmt_2602_update_completed_ 0)
          phi_stmt_2602_sample_start_ o<-& (phi_stmt_2602_sample_completed_ 1)
          $T[phi_stmt_2602_merged_reqs] 
          $T[phi_stmt_2602_phi_mux_ack] 
          $T[phi_stmt_2602_phi_mux_ack_ps] 
          phi_stmt_2602_phi_mux_ack_ps <-& (phi_stmt_2602_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2602_update_completed_)
          $T[type_cast_2605_sample_start__ps] 
          $T[type_cast_2605_sample_completed__ps] 
          $T[type_cast_2605_update_start__ps] 
          $T[type_cast_2605_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2605_sample_start_] 
          $T[type_cast_2605_sample_completed_] 
          type_cast_2605_sample_completed_ <-& (type_cast_2605_sample_start_)
          $T[type_cast_2605_update_start_] 
          $T [type_cast_2605_update_completed_] $delay 
          type_cast_2605_update_completed_ <-& (type_cast_2605_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2605_sample_start_ <-& (type_cast_2605_sample_start__ps)
          type_cast_2605_update_start_ <-& (type_cast_2605_update_start__ps)
          // Phi complete dependency.
          type_cast_2605_sample_completed__ps <-& (type_cast_2605_sample_completed_)
          type_cast_2605_update_completed__ps <-& (type_cast_2605_update_completed_)
          $T[R_next_j_2_2606_sample_start__ps] 
          $T[R_next_j_2_2606_sample_completed__ps] 
          $T[R_next_j_2_2606_update_start__ps] 
          $T[R_next_j_2_2606_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_j_2_2606_sample_start_] 
          $T[R_next_j_2_2606_sample_completed_] 
          $T[R_next_j_2_2606_update_start_] 
          $T[R_next_j_2_2606_update_completed_] 
          ;;[R_next_j_2_2606_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_j_2_2606_sample_start_ &-> (R_next_j_2_2606_Sample)
          R_next_j_2_2606_sample_completed_ <-& (R_next_j_2_2606_Sample)
          ;;[R_next_j_2_2606_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_j_2_2606_update_start_ &-> (R_next_j_2_2606_Update)
          R_next_j_2_2606_update_completed_ <-& (R_next_j_2_2606_Update)
          // RAW reenables for next_j_2
          // Phi start dependency for implicit/constant alternative.
          R_next_j_2_2606_sample_start_ <-& (R_next_j_2_2606_sample_start__ps)
          R_next_j_2_2606_update_start_ <-& (R_next_j_2_2606_update_start__ps)
          // Phi complete dependency.
          R_next_j_2_2606_sample_completed__ps <-& (R_next_j_2_2606_sample_completed_)
          R_next_j_2_2606_update_completed__ps <-& (R_next_j_2_2606_update_completed_)
          $phisequencer [ phi_stmt_2602_phi_seq] : 
          phi_stmt_2602_entry_trigger type_cast_2605_sample_start__ps type_cast_2605_sample_completed__ps type_cast_2605_update_start__ps type_cast_2605_update_completed__ps phi_stmt_2602_loopback_trigger R_next_j_2_2606_sample_start__ps R_next_j_2_2606_sample_completed__ps R_next_j_2_2606_update_start__ps R_next_j_2_2606_update_completed__ps :
          phi_stmt_2602_sample_start__ps phi_stmt_2602_sample_completed__ps phi_stmt_2602_update_start__ps phi_stmt_2602_update_completed__ps :
          phi_stmt_2602_entry_sample_req_ps phi_stmt_2602_loopback_sample_req_ps : 
          phi_stmt_2602_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2602
          // start:  PHI statement phi_stmt_2607
          // 			$phi CRC_16_DAT2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT2 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_2607_sample_start_] 
          $T[phi_stmt_2607_sample_completed_] 
          $T[phi_stmt_2607_update_start_] 
          $T[phi_stmt_2607_update_completed_] 
          $T[phi_stmt_2607_sample_start__ps] 
          phi_stmt_2607_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2607_sample_completed__ps] 
          phi_stmt_2607_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2607_update_start__ps] 
          phi_stmt_2607_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2607_update_completed__ps] 
          phi_stmt_2607_update_completed_ <-& (phi_stmt_2607_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2607_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2607_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2607_update_start_)
          $T[phi_stmt_2607_loopback_trigger] 
          phi_stmt_2607_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2607_loopback_sample_req] 
          $T[phi_stmt_2607_loopback_sample_req_ps] 
          phi_stmt_2607_loopback_sample_req <-& (phi_stmt_2607_loopback_sample_req_ps)
          phi_stmt_2607_loopback_sample_req &-> ($null)
          $T[phi_stmt_2607_entry_trigger] 
          phi_stmt_2607_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2607_entry_sample_req] 
          $T[phi_stmt_2607_entry_sample_req_ps] 
          phi_stmt_2607_entry_sample_req <-& (phi_stmt_2607_entry_sample_req_ps)
          phi_stmt_2607_entry_sample_req &-> ($null)
          phi_stmt_2607_update_start_ o<-& (phi_stmt_2607_update_completed_ 0)
          phi_stmt_2607_sample_start_ o<-& (phi_stmt_2607_sample_completed_ 1)
          $T[phi_stmt_2607_merged_reqs] 
          $T[phi_stmt_2607_phi_mux_ack] 
          $T[phi_stmt_2607_phi_mux_ack_ps] 
          phi_stmt_2607_phi_mux_ack_ps <-& (phi_stmt_2607_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2607_update_completed_)
          $T[type_cast_2610_sample_start__ps] 
          $T[type_cast_2610_sample_completed__ps] 
          $T[type_cast_2610_update_start__ps] 
          $T[type_cast_2610_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2610_sample_start_] 
          $T[type_cast_2610_sample_completed_] 
          type_cast_2610_sample_completed_ <-& (type_cast_2610_sample_start_)
          $T[type_cast_2610_update_start_] 
          $T [type_cast_2610_update_completed_] $delay 
          type_cast_2610_update_completed_ <-& (type_cast_2610_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2610_sample_start_ <-& (type_cast_2610_sample_start__ps)
          type_cast_2610_update_start_ <-& (type_cast_2610_update_start__ps)
          // Phi complete dependency.
          type_cast_2610_sample_completed__ps <-& (type_cast_2610_sample_completed_)
          type_cast_2610_update_completed__ps <-& (type_cast_2610_update_completed_)
          $T[R_nextCRC16_DAT2_2611_sample_start__ps] 
          $T[R_nextCRC16_DAT2_2611_sample_completed__ps] 
          $T[R_nextCRC16_DAT2_2611_update_start__ps] 
          $T[R_nextCRC16_DAT2_2611_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_DAT2_2611_sample_start_] 
          $T[R_nextCRC16_DAT2_2611_sample_completed_] 
          $T[R_nextCRC16_DAT2_2611_update_start_] 
          $T[R_nextCRC16_DAT2_2611_update_completed_] 
          ;;[R_nextCRC16_DAT2_2611_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_DAT2_2611_sample_start_ &-> (R_nextCRC16_DAT2_2611_Sample)
          R_nextCRC16_DAT2_2611_sample_completed_ <-& (R_nextCRC16_DAT2_2611_Sample)
          ;;[R_nextCRC16_DAT2_2611_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_DAT2_2611_update_start_ &-> (R_nextCRC16_DAT2_2611_Update)
          R_nextCRC16_DAT2_2611_update_completed_ <-& (R_nextCRC16_DAT2_2611_Update)
          // RAW reenables for nextCRC16_DAT2
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_DAT2_2611_sample_start_ <-& (R_nextCRC16_DAT2_2611_sample_start__ps)
          R_nextCRC16_DAT2_2611_update_start_ <-& (R_nextCRC16_DAT2_2611_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_DAT2_2611_sample_completed__ps <-& (R_nextCRC16_DAT2_2611_sample_completed_)
          R_nextCRC16_DAT2_2611_update_completed__ps <-& (R_nextCRC16_DAT2_2611_update_completed_)
          $phisequencer [ phi_stmt_2607_phi_seq] : 
          phi_stmt_2607_entry_trigger type_cast_2610_sample_start__ps type_cast_2610_sample_completed__ps type_cast_2610_update_start__ps type_cast_2610_update_completed__ps phi_stmt_2607_loopback_trigger R_nextCRC16_DAT2_2611_sample_start__ps R_nextCRC16_DAT2_2611_sample_completed__ps R_nextCRC16_DAT2_2611_update_start__ps R_nextCRC16_DAT2_2611_update_completed__ps :
          phi_stmt_2607_sample_start__ps phi_stmt_2607_sample_completed__ps phi_stmt_2607_update_start__ps phi_stmt_2607_update_completed__ps :
          phi_stmt_2607_entry_sample_req_ps phi_stmt_2607_loopback_sample_req_ps : 
          phi_stmt_2607_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2607
          // start:  PHI statement phi_stmt_2612
          // 			$phi tempDataD2 := 			  dat2 $on   $entry 			  nextTempDataD2 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_2612_sample_start_] 
          $T[phi_stmt_2612_sample_completed_] 
          $T[phi_stmt_2612_update_start_] 
          $T[phi_stmt_2612_update_completed_] 
          $T[phi_stmt_2612_sample_start__ps] 
          phi_stmt_2612_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2612_sample_completed__ps] 
          phi_stmt_2612_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2612_update_start__ps] 
          phi_stmt_2612_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2612_update_completed__ps] 
          phi_stmt_2612_update_completed_ <-& (phi_stmt_2612_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2612_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2612_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2612_update_start_)
          $T[phi_stmt_2612_loopback_trigger] 
          phi_stmt_2612_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2612_loopback_sample_req] 
          $T[phi_stmt_2612_loopback_sample_req_ps] 
          phi_stmt_2612_loopback_sample_req <-& (phi_stmt_2612_loopback_sample_req_ps)
          phi_stmt_2612_loopback_sample_req &-> ($null)
          $T[phi_stmt_2612_entry_trigger] 
          phi_stmt_2612_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2612_entry_sample_req] 
          $T[phi_stmt_2612_entry_sample_req_ps] 
          phi_stmt_2612_entry_sample_req <-& (phi_stmt_2612_entry_sample_req_ps)
          phi_stmt_2612_entry_sample_req &-> ($null)
          phi_stmt_2612_update_start_ o<-& (phi_stmt_2612_update_completed_ 0)
          phi_stmt_2612_sample_start_ o<-& (phi_stmt_2612_sample_completed_ 1)
          $T[phi_stmt_2612_merged_reqs] 
          $T[phi_stmt_2612_phi_mux_ack] 
          $T[phi_stmt_2612_phi_mux_ack_ps] 
          phi_stmt_2612_phi_mux_ack_ps <-& (phi_stmt_2612_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2612_update_completed_)
          $T[R_dat2_2614_sample_start__ps] 
          $T[R_dat2_2614_sample_completed__ps] 
          $T[R_dat2_2614_update_start__ps] 
          $T[R_dat2_2614_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat2_2614_sample_start_] 
          $T[R_dat2_2614_sample_completed_] 
          $T[R_dat2_2614_update_start_] 
          $T[R_dat2_2614_update_completed_] 
          ;;[R_dat2_2614_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat2_2614_sample_start_ &-> (R_dat2_2614_Sample)
          R_dat2_2614_sample_completed_ <-& (R_dat2_2614_Sample)
          ;;[R_dat2_2614_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat2_2614_update_start_ &-> (R_dat2_2614_Update)
          R_dat2_2614_update_completed_ <-& (R_dat2_2614_Update)
          // RAW reenables for dat2
          // Phi start dependency for implicit/constant alternative.
          R_dat2_2614_sample_start_ <-& (R_dat2_2614_sample_start__ps)
          R_dat2_2614_update_start_ <-& (R_dat2_2614_update_start__ps)
          // Phi complete dependency.
          R_dat2_2614_sample_completed__ps <-& (R_dat2_2614_sample_completed_)
          R_dat2_2614_update_completed__ps <-& (R_dat2_2614_update_completed_)
          $T[R_nextTempDataD2_2615_sample_start__ps] 
          $T[R_nextTempDataD2_2615_sample_completed__ps] 
          $T[R_nextTempDataD2_2615_update_start__ps] 
          $T[R_nextTempDataD2_2615_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempDataD2_2615_sample_start_] 
          $T[R_nextTempDataD2_2615_sample_completed_] 
          $T[R_nextTempDataD2_2615_update_start_] 
          $T[R_nextTempDataD2_2615_update_completed_] 
          ;;[R_nextTempDataD2_2615_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempDataD2_2615_sample_start_ &-> (R_nextTempDataD2_2615_Sample)
          R_nextTempDataD2_2615_sample_completed_ <-& (R_nextTempDataD2_2615_Sample)
          ;;[R_nextTempDataD2_2615_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempDataD2_2615_update_start_ &-> (R_nextTempDataD2_2615_Update)
          R_nextTempDataD2_2615_update_completed_ <-& (R_nextTempDataD2_2615_Update)
          // RAW reenables for nextTempDataD2
          // Phi start dependency for implicit/constant alternative.
          R_nextTempDataD2_2615_sample_start_ <-& (R_nextTempDataD2_2615_sample_start__ps)
          R_nextTempDataD2_2615_update_start_ <-& (R_nextTempDataD2_2615_update_start__ps)
          // Phi complete dependency.
          R_nextTempDataD2_2615_sample_completed__ps <-& (R_nextTempDataD2_2615_sample_completed_)
          R_nextTempDataD2_2615_update_completed__ps <-& (R_nextTempDataD2_2615_update_completed_)
          $phisequencer [ phi_stmt_2612_phi_seq] : 
          phi_stmt_2612_entry_trigger R_dat2_2614_sample_start__ps R_dat2_2614_sample_completed__ps R_dat2_2614_update_start__ps R_dat2_2614_update_completed__ps phi_stmt_2612_loopback_trigger R_nextTempDataD2_2615_sample_start__ps R_nextTempDataD2_2615_sample_completed__ps R_nextTempDataD2_2615_update_start__ps R_nextTempDataD2_2615_update_completed__ps :
          phi_stmt_2612_sample_start__ps phi_stmt_2612_sample_completed__ps phi_stmt_2612_update_start__ps phi_stmt_2612_update_completed__ps :
          phi_stmt_2612_entry_sample_req_ps phi_stmt_2612_loopback_sample_req_ps : 
          phi_stmt_2612_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2612
          // start: WAR dependencies for invd2
          // done: WAR dependencies for invd2
          // start:  			$volatile invd2 := ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 901
          // volatile! 
          // Source expression
          // ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 ))
          // (tempDataD2 [] 1023 )
          // tempDataD2
          // (CRC_16_DAT2 [] 15 )
          // CRC_16_DAT2
          // Target expression
          // (as target) invd2
          // start: WAR dependencies for invd2
          // done: WAR dependencies for invd2
          // end:  			$volatile invd2 := ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_DAT2
          // WAR dependency: Read: nextCRC16_DAT2 before Write: 			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT2
          // start:  			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 902
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2))
          // ((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) )
          // (( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2))
          // ( $slice CRC_16_DAT2 14 12 ) 
          // CRC_16_DAT2
          // ((CRC_16_DAT2 [] 11 ) ^ invd2)
          // (CRC_16_DAT2 [] 11 )
          // CRC_16_DAT2
          // invd2
          // ( $slice CRC_16_DAT2 10 5 ) 
          // CRC_16_DAT2
          // ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)
          // (((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) )
          // ((CRC_16_DAT2 [] 4 ) ^ invd2)
          // (CRC_16_DAT2 [] 4 )
          // CRC_16_DAT2
          // invd2
          // ( $slice CRC_16_DAT2 3 0 ) 
          // CRC_16_DAT2
          // invd2
          // Target expression
          // (as target) nextCRC16_DAT2
          // start: WAR dependencies for nextCRC16_DAT2
          // WAR dependency: Read: nextCRC16_DAT2 before Write: 			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT2
          // end:  			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
          // start: WAR dependencies for nextTempDataD2
          // WAR dependency: Read: nextTempDataD2 before Write: 			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD2
          // start:  			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 903
          // volatile! 
          // Source expression
          // (tempDataD2 << 1 )
          // tempDataD2
          // Target expression
          // (as target) nextTempDataD2
          // start: WAR dependencies for nextTempDataD2
          // WAR dependency: Read: nextTempDataD2 before Write: 			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD2
          // end:  			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
          // start: WAR dependencies for next_j_2
          // WAR dependency: Read: next_j_2 before Write: 			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_2
          // start:  			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 904
          // volatile! 
          // Source expression
          // (j_2 + 1 )
          // j_2
          // Target expression
          // (as target) next_j_2
          // start: WAR dependencies for next_j_2
          // WAR dependency: Read: next_j_2 before Write: 			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_2
          // end:  			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
          // (next_j_2 < 1024 )
          // next_j_2
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_j_2 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2602_update_completed_)
          // done: Forward dependencies from (next_j_2 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2600__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2600_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2600__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2600_loop_body : condition_evaluated
        $bind do_while_stmt_2600__entry__  => do_while_stmt_2600_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2600_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2600__exit__)
      }
      do_while_stmt_2600__entry__ |-> (do_while_stmt_2600)
      do_while_stmt_2600__exit__ <-| (do_while_stmt_2600)
      // do-while-statement  
      //  file .Aa/sdhc.opt.aa, line 906
      <o> [do_while_stmt_2664]  $depth 10 $buffering 1 
      {
        $P[do_while_stmt_2664__entry__] 
        $P[do_while_stmt_2664__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2664_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2666
          // 			$phi j_3 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_3 $on   $loopback 
          // type of target is $uint<11>
          $T[phi_stmt_2666_sample_start_] 
          $T[phi_stmt_2666_sample_completed_] 
          $T[phi_stmt_2666_update_start_] 
          $T[phi_stmt_2666_update_completed_] 
          $T[phi_stmt_2666_sample_start__ps] 
          phi_stmt_2666_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2666_sample_completed__ps] 
          phi_stmt_2666_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2666_update_start__ps] 
          phi_stmt_2666_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2666_update_completed__ps] 
          phi_stmt_2666_update_completed_ <-& (phi_stmt_2666_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2666_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2666_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2666_update_start_)
          $T[phi_stmt_2666_loopback_trigger] 
          phi_stmt_2666_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2666_loopback_sample_req] 
          $T[phi_stmt_2666_loopback_sample_req_ps] 
          phi_stmt_2666_loopback_sample_req <-& (phi_stmt_2666_loopback_sample_req_ps)
          phi_stmt_2666_loopback_sample_req &-> ($null)
          $T[phi_stmt_2666_entry_trigger] 
          phi_stmt_2666_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2666_entry_sample_req] 
          $T[phi_stmt_2666_entry_sample_req_ps] 
          phi_stmt_2666_entry_sample_req <-& (phi_stmt_2666_entry_sample_req_ps)
          phi_stmt_2666_entry_sample_req &-> ($null)
          phi_stmt_2666_update_start_ o<-& (phi_stmt_2666_update_completed_ 0)
          phi_stmt_2666_sample_start_ o<-& (phi_stmt_2666_sample_completed_ 1)
          $T[phi_stmt_2666_merged_reqs] 
          $T[phi_stmt_2666_phi_mux_ack] 
          $T[phi_stmt_2666_phi_mux_ack_ps] 
          phi_stmt_2666_phi_mux_ack_ps <-& (phi_stmt_2666_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2666_update_completed_)
          $T[type_cast_2669_sample_start__ps] 
          $T[type_cast_2669_sample_completed__ps] 
          $T[type_cast_2669_update_start__ps] 
          $T[type_cast_2669_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2669_sample_start_] 
          $T[type_cast_2669_sample_completed_] 
          type_cast_2669_sample_completed_ <-& (type_cast_2669_sample_start_)
          $T[type_cast_2669_update_start_] 
          $T [type_cast_2669_update_completed_] $delay 
          type_cast_2669_update_completed_ <-& (type_cast_2669_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2669_sample_start_ <-& (type_cast_2669_sample_start__ps)
          type_cast_2669_update_start_ <-& (type_cast_2669_update_start__ps)
          // Phi complete dependency.
          type_cast_2669_sample_completed__ps <-& (type_cast_2669_sample_completed_)
          type_cast_2669_update_completed__ps <-& (type_cast_2669_update_completed_)
          $T[R_next_j_3_2670_sample_start__ps] 
          $T[R_next_j_3_2670_sample_completed__ps] 
          $T[R_next_j_3_2670_update_start__ps] 
          $T[R_next_j_3_2670_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_j_3_2670_sample_start_] 
          $T[R_next_j_3_2670_sample_completed_] 
          $T[R_next_j_3_2670_update_start_] 
          $T[R_next_j_3_2670_update_completed_] 
          ;;[R_next_j_3_2670_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_j_3_2670_sample_start_ &-> (R_next_j_3_2670_Sample)
          R_next_j_3_2670_sample_completed_ <-& (R_next_j_3_2670_Sample)
          ;;[R_next_j_3_2670_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_j_3_2670_update_start_ &-> (R_next_j_3_2670_Update)
          R_next_j_3_2670_update_completed_ <-& (R_next_j_3_2670_Update)
          // RAW reenables for next_j_3
          // Phi start dependency for implicit/constant alternative.
          R_next_j_3_2670_sample_start_ <-& (R_next_j_3_2670_sample_start__ps)
          R_next_j_3_2670_update_start_ <-& (R_next_j_3_2670_update_start__ps)
          // Phi complete dependency.
          R_next_j_3_2670_sample_completed__ps <-& (R_next_j_3_2670_sample_completed_)
          R_next_j_3_2670_update_completed__ps <-& (R_next_j_3_2670_update_completed_)
          $phisequencer [ phi_stmt_2666_phi_seq] : 
          phi_stmt_2666_entry_trigger type_cast_2669_sample_start__ps type_cast_2669_sample_completed__ps type_cast_2669_update_start__ps type_cast_2669_update_completed__ps phi_stmt_2666_loopback_trigger R_next_j_3_2670_sample_start__ps R_next_j_3_2670_sample_completed__ps R_next_j_3_2670_update_start__ps R_next_j_3_2670_update_completed__ps :
          phi_stmt_2666_sample_start__ps phi_stmt_2666_sample_completed__ps phi_stmt_2666_update_start__ps phi_stmt_2666_update_completed__ps :
          phi_stmt_2666_entry_sample_req_ps phi_stmt_2666_loopback_sample_req_ps : 
          phi_stmt_2666_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2666
          // start:  PHI statement phi_stmt_2671
          // 			$phi CRC_16_DAT3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT3 $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_2671_sample_start_] 
          $T[phi_stmt_2671_sample_completed_] 
          $T[phi_stmt_2671_update_start_] 
          $T[phi_stmt_2671_update_completed_] 
          $T[phi_stmt_2671_sample_start__ps] 
          phi_stmt_2671_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2671_sample_completed__ps] 
          phi_stmt_2671_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2671_update_start__ps] 
          phi_stmt_2671_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2671_update_completed__ps] 
          phi_stmt_2671_update_completed_ <-& (phi_stmt_2671_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2671_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2671_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2671_update_start_)
          $T[phi_stmt_2671_loopback_trigger] 
          phi_stmt_2671_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2671_loopback_sample_req] 
          $T[phi_stmt_2671_loopback_sample_req_ps] 
          phi_stmt_2671_loopback_sample_req <-& (phi_stmt_2671_loopback_sample_req_ps)
          phi_stmt_2671_loopback_sample_req &-> ($null)
          $T[phi_stmt_2671_entry_trigger] 
          phi_stmt_2671_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2671_entry_sample_req] 
          $T[phi_stmt_2671_entry_sample_req_ps] 
          phi_stmt_2671_entry_sample_req <-& (phi_stmt_2671_entry_sample_req_ps)
          phi_stmt_2671_entry_sample_req &-> ($null)
          phi_stmt_2671_update_start_ o<-& (phi_stmt_2671_update_completed_ 0)
          phi_stmt_2671_sample_start_ o<-& (phi_stmt_2671_sample_completed_ 1)
          $T[phi_stmt_2671_merged_reqs] 
          $T[phi_stmt_2671_phi_mux_ack] 
          $T[phi_stmt_2671_phi_mux_ack_ps] 
          phi_stmt_2671_phi_mux_ack_ps <-& (phi_stmt_2671_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2671_update_completed_)
          $T[type_cast_2674_sample_start__ps] 
          $T[type_cast_2674_sample_completed__ps] 
          $T[type_cast_2674_update_start__ps] 
          $T[type_cast_2674_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2674_sample_start_] 
          $T[type_cast_2674_sample_completed_] 
          type_cast_2674_sample_completed_ <-& (type_cast_2674_sample_start_)
          $T[type_cast_2674_update_start_] 
          $T [type_cast_2674_update_completed_] $delay 
          type_cast_2674_update_completed_ <-& (type_cast_2674_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2674_sample_start_ <-& (type_cast_2674_sample_start__ps)
          type_cast_2674_update_start_ <-& (type_cast_2674_update_start__ps)
          // Phi complete dependency.
          type_cast_2674_sample_completed__ps <-& (type_cast_2674_sample_completed_)
          type_cast_2674_update_completed__ps <-& (type_cast_2674_update_completed_)
          $T[R_nextCRC16_DAT3_2675_sample_start__ps] 
          $T[R_nextCRC16_DAT3_2675_sample_completed__ps] 
          $T[R_nextCRC16_DAT3_2675_update_start__ps] 
          $T[R_nextCRC16_DAT3_2675_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextCRC16_DAT3_2675_sample_start_] 
          $T[R_nextCRC16_DAT3_2675_sample_completed_] 
          $T[R_nextCRC16_DAT3_2675_update_start_] 
          $T[R_nextCRC16_DAT3_2675_update_completed_] 
          ;;[R_nextCRC16_DAT3_2675_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextCRC16_DAT3_2675_sample_start_ &-> (R_nextCRC16_DAT3_2675_Sample)
          R_nextCRC16_DAT3_2675_sample_completed_ <-& (R_nextCRC16_DAT3_2675_Sample)
          ;;[R_nextCRC16_DAT3_2675_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextCRC16_DAT3_2675_update_start_ &-> (R_nextCRC16_DAT3_2675_Update)
          R_nextCRC16_DAT3_2675_update_completed_ <-& (R_nextCRC16_DAT3_2675_Update)
          // RAW reenables for nextCRC16_DAT3
          // Phi start dependency for implicit/constant alternative.
          R_nextCRC16_DAT3_2675_sample_start_ <-& (R_nextCRC16_DAT3_2675_sample_start__ps)
          R_nextCRC16_DAT3_2675_update_start_ <-& (R_nextCRC16_DAT3_2675_update_start__ps)
          // Phi complete dependency.
          R_nextCRC16_DAT3_2675_sample_completed__ps <-& (R_nextCRC16_DAT3_2675_sample_completed_)
          R_nextCRC16_DAT3_2675_update_completed__ps <-& (R_nextCRC16_DAT3_2675_update_completed_)
          $phisequencer [ phi_stmt_2671_phi_seq] : 
          phi_stmt_2671_entry_trigger type_cast_2674_sample_start__ps type_cast_2674_sample_completed__ps type_cast_2674_update_start__ps type_cast_2674_update_completed__ps phi_stmt_2671_loopback_trigger R_nextCRC16_DAT3_2675_sample_start__ps R_nextCRC16_DAT3_2675_sample_completed__ps R_nextCRC16_DAT3_2675_update_start__ps R_nextCRC16_DAT3_2675_update_completed__ps :
          phi_stmt_2671_sample_start__ps phi_stmt_2671_sample_completed__ps phi_stmt_2671_update_start__ps phi_stmt_2671_update_completed__ps :
          phi_stmt_2671_entry_sample_req_ps phi_stmt_2671_loopback_sample_req_ps : 
          phi_stmt_2671_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2671
          // start:  PHI statement phi_stmt_2676
          // 			$phi tempDataD3 := 			  dat3 $on   $entry 			  nextTempDataD3 $on   $loopback 
          // type of target is $uint<1024>
          $T[phi_stmt_2676_sample_start_] 
          $T[phi_stmt_2676_sample_completed_] 
          $T[phi_stmt_2676_update_start_] 
          $T[phi_stmt_2676_update_completed_] 
          $T[phi_stmt_2676_sample_start__ps] 
          phi_stmt_2676_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2676_sample_completed__ps] 
          phi_stmt_2676_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2676_update_start__ps] 
          phi_stmt_2676_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2676_update_completed__ps] 
          phi_stmt_2676_update_completed_ <-& (phi_stmt_2676_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2676_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2676_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2676_update_start_)
          $T[phi_stmt_2676_loopback_trigger] 
          phi_stmt_2676_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2676_loopback_sample_req] 
          $T[phi_stmt_2676_loopback_sample_req_ps] 
          phi_stmt_2676_loopback_sample_req <-& (phi_stmt_2676_loopback_sample_req_ps)
          phi_stmt_2676_loopback_sample_req &-> ($null)
          $T[phi_stmt_2676_entry_trigger] 
          phi_stmt_2676_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2676_entry_sample_req] 
          $T[phi_stmt_2676_entry_sample_req_ps] 
          phi_stmt_2676_entry_sample_req <-& (phi_stmt_2676_entry_sample_req_ps)
          phi_stmt_2676_entry_sample_req &-> ($null)
          phi_stmt_2676_update_start_ o<-& (phi_stmt_2676_update_completed_ 0)
          phi_stmt_2676_sample_start_ o<-& (phi_stmt_2676_sample_completed_ 1)
          $T[phi_stmt_2676_merged_reqs] 
          $T[phi_stmt_2676_phi_mux_ack] 
          $T[phi_stmt_2676_phi_mux_ack_ps] 
          phi_stmt_2676_phi_mux_ack_ps <-& (phi_stmt_2676_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2676_update_completed_)
          $T[R_dat3_2678_sample_start__ps] 
          $T[R_dat3_2678_sample_completed__ps] 
          $T[R_dat3_2678_update_start__ps] 
          $T[R_dat3_2678_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_dat3_2678_sample_start_] 
          $T[R_dat3_2678_sample_completed_] 
          $T[R_dat3_2678_update_start_] 
          $T[R_dat3_2678_update_completed_] 
          ;;[R_dat3_2678_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_dat3_2678_sample_start_ &-> (R_dat3_2678_Sample)
          R_dat3_2678_sample_completed_ <-& (R_dat3_2678_Sample)
          ;;[R_dat3_2678_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_dat3_2678_update_start_ &-> (R_dat3_2678_Update)
          R_dat3_2678_update_completed_ <-& (R_dat3_2678_Update)
          // RAW reenables for dat3
          // Phi start dependency for implicit/constant alternative.
          R_dat3_2678_sample_start_ <-& (R_dat3_2678_sample_start__ps)
          R_dat3_2678_update_start_ <-& (R_dat3_2678_update_start__ps)
          // Phi complete dependency.
          R_dat3_2678_sample_completed__ps <-& (R_dat3_2678_sample_completed_)
          R_dat3_2678_update_completed__ps <-& (R_dat3_2678_update_completed_)
          $T[R_nextTempDataD3_2679_sample_start__ps] 
          $T[R_nextTempDataD3_2679_sample_completed__ps] 
          $T[R_nextTempDataD3_2679_update_start__ps] 
          $T[R_nextTempDataD3_2679_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nextTempDataD3_2679_sample_start_] 
          $T[R_nextTempDataD3_2679_sample_completed_] 
          $T[R_nextTempDataD3_2679_update_start_] 
          $T[R_nextTempDataD3_2679_update_completed_] 
          ;;[R_nextTempDataD3_2679_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nextTempDataD3_2679_sample_start_ &-> (R_nextTempDataD3_2679_Sample)
          R_nextTempDataD3_2679_sample_completed_ <-& (R_nextTempDataD3_2679_Sample)
          ;;[R_nextTempDataD3_2679_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nextTempDataD3_2679_update_start_ &-> (R_nextTempDataD3_2679_Update)
          R_nextTempDataD3_2679_update_completed_ <-& (R_nextTempDataD3_2679_Update)
          // RAW reenables for nextTempDataD3
          // Phi start dependency for implicit/constant alternative.
          R_nextTempDataD3_2679_sample_start_ <-& (R_nextTempDataD3_2679_sample_start__ps)
          R_nextTempDataD3_2679_update_start_ <-& (R_nextTempDataD3_2679_update_start__ps)
          // Phi complete dependency.
          R_nextTempDataD3_2679_sample_completed__ps <-& (R_nextTempDataD3_2679_sample_completed_)
          R_nextTempDataD3_2679_update_completed__ps <-& (R_nextTempDataD3_2679_update_completed_)
          $phisequencer [ phi_stmt_2676_phi_seq] : 
          phi_stmt_2676_entry_trigger R_dat3_2678_sample_start__ps R_dat3_2678_sample_completed__ps R_dat3_2678_update_start__ps R_dat3_2678_update_completed__ps phi_stmt_2676_loopback_trigger R_nextTempDataD3_2679_sample_start__ps R_nextTempDataD3_2679_sample_completed__ps R_nextTempDataD3_2679_update_start__ps R_nextTempDataD3_2679_update_completed__ps :
          phi_stmt_2676_sample_start__ps phi_stmt_2676_sample_completed__ps phi_stmt_2676_update_start__ps phi_stmt_2676_update_completed__ps :
          phi_stmt_2676_entry_sample_req_ps phi_stmt_2676_loopback_sample_req_ps : 
          phi_stmt_2676_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2676
          // start: WAR dependencies for invd3
          // done: WAR dependencies for invd3
          // start:  			$volatile invd3 := ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 )) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 916
          // volatile! 
          // Source expression
          // ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 ))
          // (tempDataD3 [] 1023 )
          // tempDataD3
          // (CRC_16_DAT3 [] 15 )
          // CRC_16_DAT3
          // Target expression
          // (as target) invd3
          // start: WAR dependencies for invd3
          // done: WAR dependencies for invd3
          // end:  			$volatile invd3 := ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 )) $buffering 1
          // start: WAR dependencies for nextCRC16_DAT3
          // WAR dependency: Read: nextCRC16_DAT3 before Write: 			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT3
          // start:  			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 917
          // volatile! 
          // Source expression
          // (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3))
          // ((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) )
          // (( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3))
          // ( $slice CRC_16_DAT3 14 12 ) 
          // CRC_16_DAT3
          // ((CRC_16_DAT3 [] 11 ) ^ invd3)
          // (CRC_16_DAT3 [] 11 )
          // CRC_16_DAT3
          // invd3
          // ( $slice CRC_16_DAT3 10 5 ) 
          // CRC_16_DAT3
          // ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)
          // (((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) )
          // ((CRC_16_DAT3 [] 4 ) ^ invd3)
          // (CRC_16_DAT3 [] 4 )
          // CRC_16_DAT3
          // invd3
          // ( $slice CRC_16_DAT3 3 0 ) 
          // CRC_16_DAT3
          // invd3
          // Target expression
          // (as target) nextCRC16_DAT3
          // start: WAR dependencies for nextCRC16_DAT3
          // WAR dependency: Read: nextCRC16_DAT3 before Write: 			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextCRC16_DAT3
          // end:  			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
          // start: WAR dependencies for nextTempDataD3
          // WAR dependency: Read: nextTempDataD3 before Write: 			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD3
          // start:  			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 918
          // volatile! 
          // Source expression
          // (tempDataD3 << 1 )
          // tempDataD3
          // Target expression
          // (as target) nextTempDataD3
          // start: WAR dependencies for nextTempDataD3
          // WAR dependency: Read: nextTempDataD3 before Write: 			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nextTempDataD3
          // end:  			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
          // start: WAR dependencies for next_j_3
          // WAR dependency: Read: next_j_3 before Write: 			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_3
          // start:  			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
          //  file .Aa/sdhc.opt.aa, line 919
          // volatile! 
          // Source expression
          // (j_3 + 1 )
          // j_3
          // Target expression
          // (as target) next_j_3
          // start: WAR dependencies for next_j_3
          // WAR dependency: Read: next_j_3 before Write: 			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_j_3
          // end:  			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
          // (next_j_3 < 1024 )
          // next_j_3
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (next_j_3 < 1024 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2666_update_completed_)
          // done: Forward dependencies from (next_j_3 < 1024 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2664__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2664_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2664__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2664_loop_body : condition_evaluated
        $bind do_while_stmt_2664__entry__  => do_while_stmt_2664_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2664_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2664__exit__)
      }
      do_while_stmt_2664__entry__ |-> (do_while_stmt_2664)
      do_while_stmt_2664__exit__ <-| (do_while_stmt_2664)
      ::[assign_stmt_2730] 
      {
        // start:  			oe := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 921
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_2728_sample_start_] 
        $T[WPIPE_oe_2728_sample_completed_] 
        $T[WPIPE_oe_2728_update_start_] 
        $T[WPIPE_oe_2728_update_completed_] 
        ;;[WPIPE_oe_2728_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_2728_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_2728_sample_start_ &-> (WPIPE_oe_2728_Sample)
        WPIPE_oe_2728_sample_completed_ <-& (WPIPE_oe_2728_Sample)
        WPIPE_oe_2728_update_start_ <-& (WPIPE_oe_2728_sample_completed_)
        WPIPE_oe_2728_update_start_ &-> (WPIPE_oe_2728_Update)
        WPIPE_oe_2728_update_completed_ <-& (WPIPE_oe_2728_Update)
        // end:  			oe := ONE_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      assign_stmt_2730__entry__ |-> (assign_stmt_2730)
      assign_stmt_2730__exit__ <-| (assign_stmt_2730)
      ||[parallel_block_stmt_2731] 
      {
        ::[call_stmt_2734] 
        {
          // start: 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
          //  file .Aa/sdhc.opt.aa, line 924
          $T[call_stmt_2734_sample_start_] 
          $T[call_stmt_2734_sample_completed_] 
          $T[call_stmt_2734_update_start_] 
          $T[call_stmt_2734_update_completed_] 
          // Call input argument 0
          // dat0
          // Call input argument 1
          // nextCRC16_DAT0
          // start: Forward dependencies from dat0 to transition call_stmt_2734_sample_start_
          // done: Forward dependencies from dat0 to transition call_stmt_2734_sample_start_
          // start: Forward dependencies from nextCRC16_DAT0 to transition call_stmt_2734_sample_start_
          // done: Forward dependencies from nextCRC16_DAT0 to transition call_stmt_2734_sample_start_
          ;;[call_stmt_2734_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2734_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2734_sample_start_ &-> (call_stmt_2734_Sample)
          call_stmt_2734_sample_completed_ <-& (call_stmt_2734_Sample)
          call_stmt_2734_sample_completed_ &-> ($null)
          call_stmt_2734_update_start_ &-> (call_stmt_2734_Update)
          call_stmt_2734_update_completed_ <-& (call_stmt_2734_Update)
          // end: 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT0Tx
          // read-dependencies for pipe DAT0Tx
          // write-dependencies for pipe DAT0Tx
          // signal write dependencies for DAT0Tx
        }
        ::[call_stmt_2737] 
        {
          // start: 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
          //  file .Aa/sdhc.opt.aa, line 925
          $T[call_stmt_2737_sample_start_] 
          $T[call_stmt_2737_sample_completed_] 
          $T[call_stmt_2737_update_start_] 
          $T[call_stmt_2737_update_completed_] 
          // Call input argument 0
          // dat1
          // Call input argument 1
          // nextCRC16_DAT1
          // start: Forward dependencies from dat1 to transition call_stmt_2737_sample_start_
          // done: Forward dependencies from dat1 to transition call_stmt_2737_sample_start_
          // start: Forward dependencies from nextCRC16_DAT1 to transition call_stmt_2737_sample_start_
          // done: Forward dependencies from nextCRC16_DAT1 to transition call_stmt_2737_sample_start_
          ;;[call_stmt_2737_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2737_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2737_sample_start_ &-> (call_stmt_2737_Sample)
          call_stmt_2737_sample_completed_ <-& (call_stmt_2737_Sample)
          call_stmt_2737_sample_completed_ &-> ($null)
          call_stmt_2737_update_start_ &-> (call_stmt_2737_Update)
          call_stmt_2737_update_completed_ <-& (call_stmt_2737_Update)
          // end: 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT1Tx
          // read-dependencies for pipe DAT1Tx
          // write-dependencies for pipe DAT1Tx
          // signal write dependencies for DAT1Tx
        }
        ::[call_stmt_2740] 
        {
          // start: 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
          //  file .Aa/sdhc.opt.aa, line 926
          $T[call_stmt_2740_sample_start_] 
          $T[call_stmt_2740_sample_completed_] 
          $T[call_stmt_2740_update_start_] 
          $T[call_stmt_2740_update_completed_] 
          // Call input argument 0
          // dat2
          // Call input argument 1
          // nextCRC16_DAT2
          // start: Forward dependencies from dat2 to transition call_stmt_2740_sample_start_
          // done: Forward dependencies from dat2 to transition call_stmt_2740_sample_start_
          // start: Forward dependencies from nextCRC16_DAT2 to transition call_stmt_2740_sample_start_
          // done: Forward dependencies from nextCRC16_DAT2 to transition call_stmt_2740_sample_start_
          ;;[call_stmt_2740_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2740_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2740_sample_start_ &-> (call_stmt_2740_Sample)
          call_stmt_2740_sample_completed_ <-& (call_stmt_2740_Sample)
          call_stmt_2740_sample_completed_ &-> ($null)
          call_stmt_2740_update_start_ &-> (call_stmt_2740_Update)
          call_stmt_2740_update_completed_ <-& (call_stmt_2740_Update)
          // end: 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT2Tx
          // read-dependencies for pipe DAT2Tx
          // write-dependencies for pipe DAT2Tx
          // signal write dependencies for DAT2Tx
        }
        ::[call_stmt_2743] 
        {
          // start: 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
          //  file .Aa/sdhc.opt.aa, line 927
          $T[call_stmt_2743_sample_start_] 
          $T[call_stmt_2743_sample_completed_] 
          $T[call_stmt_2743_update_start_] 
          $T[call_stmt_2743_update_completed_] 
          // Call input argument 0
          // dat3
          // Call input argument 1
          // nextCRC16_DAT3
          // start: Forward dependencies from dat3 to transition call_stmt_2743_sample_start_
          // done: Forward dependencies from dat3 to transition call_stmt_2743_sample_start_
          // start: Forward dependencies from nextCRC16_DAT3 to transition call_stmt_2743_sample_start_
          // done: Forward dependencies from nextCRC16_DAT3 to transition call_stmt_2743_sample_start_
          ;;[call_stmt_2743_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2743_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2743_sample_start_ &-> (call_stmt_2743_Sample)
          call_stmt_2743_sample_completed_ <-& (call_stmt_2743_Sample)
          call_stmt_2743_sample_completed_ &-> ($null)
          call_stmt_2743_update_start_ &-> (call_stmt_2743_Update)
          call_stmt_2743_update_completed_ <-& (call_stmt_2743_Update)
          // end: 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
          // load-store dependencies..
          // pipe read/write dependencies for pipe DAT3Tx
          // read-dependencies for pipe DAT3Tx
          // write-dependencies for pipe DAT3Tx
          // signal write dependencies for DAT3Tx
        }
      }
      parallel_block_stmt_2731__entry__ |-> (parallel_block_stmt_2731)
      parallel_block_stmt_2731__exit__ <-| (parallel_block_stmt_2731)
      ::[assign_stmt_2747] 
      {
        // start:  			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 929
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_2745_sample_start_] 
        $T[WPIPE_oe_2745_sample_completed_] 
        $T[WPIPE_oe_2745_update_start_] 
        $T[WPIPE_oe_2745_update_completed_] 
        ;;[WPIPE_oe_2745_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_2745_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_2745_sample_start_ &-> (WPIPE_oe_2745_Sample)
        WPIPE_oe_2745_sample_completed_ <-& (WPIPE_oe_2745_Sample)
        WPIPE_oe_2745_update_start_ <-& (WPIPE_oe_2745_sample_completed_)
        WPIPE_oe_2745_update_start_ &-> (WPIPE_oe_2745_Update)
        WPIPE_oe_2745_update_completed_ <-& (WPIPE_oe_2745_Update)
        // end:  			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      assign_stmt_2747__entry__ |-> (assign_stmt_2747)
      assign_stmt_2747__exit__ <-| (assign_stmt_2747)
      branch_block_stmt_2360__entry__ <-| (if_stmt_2355_if_link)
      assign_stmt_2471__entry__ <-| (branch_block_stmt_2360__exit__)
      do_while_stmt_2472__entry__ <-| (assign_stmt_2471__exit__)
      do_while_stmt_2536__entry__ <-| (do_while_stmt_2472__exit__)
      do_while_stmt_2600__entry__ <-| (do_while_stmt_2536__exit__)
      do_while_stmt_2664__entry__ <-| (do_while_stmt_2600__exit__)
      assign_stmt_2730__entry__ <-| (do_while_stmt_2664__exit__)
      parallel_block_stmt_2731__entry__ <-| (assign_stmt_2730__exit__)
      assign_stmt_2747__entry__ <-| (parallel_block_stmt_2731__exit__)
      assign_stmt_2747__exit__ |-> (if_stmt_2355__exit__)
      $P [branch_block_stmt_2749__entry__] 
      $P [branch_block_stmt_2749__exit__] 
      $P [assign_stmt_2787__entry__] 
      $P [assign_stmt_2787__exit__] 
      $P [merge_stmt_2788__entry__] 
      $P [merge_stmt_2788__exit__] 
      $P [assign_stmt_2812_to_assign_stmt_2846__entry__] 
      $P [assign_stmt_2812_to_assign_stmt_2846__exit__] 
      $P [if_stmt_2847__entry__] 
      $P [if_stmt_2847__exit__] 
      $P [assign_stmt_2859_to_assign_stmt_2862__entry__] 
      $P [assign_stmt_2859_to_assign_stmt_2862__exit__] 
      $P [merge_stmt_2863__entry__] 
      $P [merge_stmt_2863__exit__] 
      $P [assign_stmt_2878_to_assign_stmt_2888__entry__] 
      $P [assign_stmt_2878_to_assign_stmt_2888__exit__] 
      $P [if_stmt_2889__entry__] 
      $P [if_stmt_2889__exit__] 
      $P [merge_stmt_2895__entry__] 
      $P [merge_stmt_2895__exit__] 
      $P [assign_stmt_2910_to_assign_stmt_2920__entry__] 
      $P [assign_stmt_2910_to_assign_stmt_2920__exit__] 
      $P [if_stmt_2921__entry__] 
      $P [if_stmt_2921__exit__] 
      $P [assign_stmt_2929_to_assign_stmt_2932__entry__] 
      $P [assign_stmt_2929_to_assign_stmt_2932__exit__] 
      <>[branch_block_stmt_2749] // Branch Block  file .Aa/sdhc.opt.aa, line 931
      {
        $P [branch_block_stmt_2749__entry__]
        branch_block_stmt_2749__entry__ <-| ($entry)
        $P [branch_block_stmt_2749__exit__]
        branch_block_stmt_2749__exit__ |-> ($exit)
        $P [merge_stmt_2750__entry__] 
        $P [merge_stmt_2750__exit__] 
        $P [assign_stmt_2771_to_assign_stmt_2776__entry__] 
        $P [assign_stmt_2771_to_assign_stmt_2776__exit__] 
        $P [if_stmt_2777__entry__] 
        $P [if_stmt_2777__exit__] 
        ::[assign_stmt_2771_to_assign_stmt_2776] 
        {
          // start:  				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx)) $buffering 1// bits of buffering = 4096. 
          //  file .Aa/sdhc.opt.aa, line 939
          // Source expression
          // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx))
          $T[OR_u4096_u4096_2770_sample_start_] 
          $T[OR_u4096_u4096_2770_sample_completed_] 
          $T[OR_u4096_u4096_2770_update_start_] 
          $T[OR_u4096_u4096_2770_update_completed_] 
          // (dat << 8 )
          // dat
          // (($bitcast ($uint<4088>) 0  ) && dataBufferTx)
          // dataBufferTx
          $T[RPIPE_dataBufferTx_2768_sample_start_] 
          $T[RPIPE_dataBufferTx_2768_sample_completed_] 
          $T[RPIPE_dataBufferTx_2768_update_start_] 
          $T[RPIPE_dataBufferTx_2768_update_completed_] 
          ;;[RPIPE_dataBufferTx_2768_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_dataBufferTx_2768_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_dataBufferTx_2768_sample_start_ &-> (RPIPE_dataBufferTx_2768_Sample)
          RPIPE_dataBufferTx_2768_sample_completed_ <-& (RPIPE_dataBufferTx_2768_Sample)
          RPIPE_dataBufferTx_2768_update_start_ <-& (RPIPE_dataBufferTx_2768_sample_completed_)
          RPIPE_dataBufferTx_2768_update_start_ &-> (RPIPE_dataBufferTx_2768_Update)
          RPIPE_dataBufferTx_2768_update_completed_ <-& (RPIPE_dataBufferTx_2768_Update)
          // start: Forward dependencies from (dat << 8 ) to transition OR_u4096_u4096_2770_sample_start_
          // done: Forward dependencies from (dat << 8 ) to transition OR_u4096_u4096_2770_sample_start_
          // start: Forward dependencies from (($bitcast ($uint<4088>) 0  ) && dataBufferTx) to transition OR_u4096_u4096_2770_sample_start_
          OR_u4096_u4096_2770_sample_start_ <-& (RPIPE_dataBufferTx_2768_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<4088>) 0  ) && dataBufferTx) to transition OR_u4096_u4096_2770_sample_start_
          ;;[OR_u4096_u4096_2770_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[OR_u4096_u4096_2770_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          OR_u4096_u4096_2770_sample_start_ &-> (OR_u4096_u4096_2770_Sample)
          OR_u4096_u4096_2770_sample_completed_ <-& (OR_u4096_u4096_2770_Sample)
          OR_u4096_u4096_2770_sample_completed_ &-> ($null)
          OR_u4096_u4096_2770_update_start_ &-> (OR_u4096_u4096_2770_Update)
          OR_u4096_u4096_2770_update_completed_ <-& (OR_u4096_u4096_2770_Update)
          // Target expression
          // (as target) next_data
          // start: WAR dependencies for next_data
          // done: WAR dependencies for next_data
          // end:  				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx)) $buffering 1// bits of buffering = 4096. 
          // start:  				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
          //  file .Aa/sdhc.opt.aa, line 940
          // Source expression
          // (I + 1 )
          $T[ADD_u10_u10_2775_sample_start_] 
          $T[ADD_u10_u10_2775_sample_completed_] 
          $T[ADD_u10_u10_2775_update_start_] 
          $T[ADD_u10_u10_2775_update_completed_] 
          // I
          // start: Forward dependencies from I to transition ADD_u10_u10_2775_sample_start_
          // done: Forward dependencies from I to transition ADD_u10_u10_2775_sample_start_
          ;;[ADD_u10_u10_2775_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u10_u10_2775_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u10_u10_2775_sample_start_ &-> (ADD_u10_u10_2775_Sample)
          ADD_u10_u10_2775_sample_completed_ <-& (ADD_u10_u10_2775_Sample)
          ADD_u10_u10_2775_sample_completed_ &-> ($null)
          ADD_u10_u10_2775_update_start_ &-> (ADD_u10_u10_2775_Update)
          ADD_u10_u10_2775_update_completed_ <-& (ADD_u10_u10_2775_Update)
          // Target expression
          // (as target) next_I
          // start: WAR dependencies for next_I
          // done: WAR dependencies for next_I
          // end:  				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
          // load-store dependencies..
          // pipe read/write dependencies for pipe dataBufferTx
          // read-dependencies for pipe dataBufferTx
          // write-dependencies for pipe dataBufferTx
          // signal write dependencies for dataBufferTx
        }
        assign_stmt_2771_to_assign_stmt_2776__entry__ |-> (assign_stmt_2771_to_assign_stmt_2776)
        assign_stmt_2771_to_assign_stmt_2776__exit__ <-| (assign_stmt_2771_to_assign_stmt_2776)
        // if-statement  
        //  file .Aa/sdhc.opt.aa, line 0
        ;;[if_stmt_2777_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        if_stmt_2777__entry__ |-> (if_stmt_2777_dead_link)
        if_stmt_2777__exit__ <-| (if_stmt_2777_dead_link)
        ;;[if_stmt_2777_eval_test] 
        {
          // test expression evaluate and trigger branch 
          // (next_I < 512 )
          ;;[ULT_u10_u1_2780] 
          {
            // binary expression 
            ||[ULT_u10_u1_2780_inputs] 
            {
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          $T [branch_req] 
        }
        if_stmt_2777__entry__ |-> (if_stmt_2777_eval_test)
        $P [ULT_u10_u1_2780_place]
        ULT_u10_u1_2780_place <-| (if_stmt_2777_eval_test)
        ;;[if_stmt_2777_if_link] 
        {
          $T [if_choice_transition] 
        }
        ;;[if_stmt_2777_else_link] 
        {
          $T [else_choice_transition] 
        }
        ULT_u10_u1_2780_place |-> (if_stmt_2777_if_link if_stmt_2777_else_link)
        $P [loopback1]
        loopback1 <-| (if_stmt_2777_if_link)
        if_stmt_2777__exit__ <-| (if_stmt_2777_else_link)
        // control-path for merge  
        //  file .Aa/sdhc.opt.aa, line 933
        ;;[merge_stmt_2750_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        merge_stmt_2750__entry__ |-> (merge_stmt_2750_dead_link)
        merge_stmt_2750__exit__ <-| (merge_stmt_2750_dead_link)
        //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 933  --------------------------
        ||[merge_stmt_2750__entry___PhiReq] 
        {
          ;;[phi_stmt_2751] 
          {
            ||[phi_stmt_2751_sources] 
            {
              // sources for 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
              // type of target is $uint<10>
              // constant source .... delay transition 
              $T [type_cast_2754_konst_delay_trans] $delay
            }
            $T [phi_stmt_2751_req] 
          }
          ;;[phi_stmt_2756] 
          {
            ||[phi_stmt_2756_sources] 
            {
              // sources for 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
              // type of target is $uint<4096>
              // constant source .... delay transition 
              $T [type_cast_2759_konst_delay_trans] $delay
            }
            $T [phi_stmt_2756_req] 
          }
        }
        merge_stmt_2750__entry__ |-> (merge_stmt_2750__entry___PhiReq)
        ||[loopback1_PhiReq] 
        {
          ;;[phi_stmt_2751] 
          {
            ||[phi_stmt_2751_sources] 
            {
              // sources for 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
              // type of target is $uint<10>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_2751_req] 
          }
          ;;[phi_stmt_2756] 
          {
            ||[phi_stmt_2756_sources] 
            {
              // sources for 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
              // type of target is $uint<4096>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_2756_req] 
          }
        }
        loopback1 |-> (loopback1_PhiReq)
        $P [merge_stmt_2750_PhiReqMerge] 
        merge_stmt_2750_PhiReqMerge <-| ( merge_stmt_2750__entry___PhiReq  loopback1_PhiReq )
        ||[merge_stmt_2750_PhiAck] 
        {
          $T [phi_stmt_2751_ack] 
          $T [phi_stmt_2756_ack] 
        }
        merge_stmt_2750_PhiReqMerge |-> (merge_stmt_2750_PhiAck)
        merge_stmt_2750__exit__  <-| (merge_stmt_2750_PhiAck)
        //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 933  --------------------------
        merge_stmt_2750__entry__ <-| (branch_block_stmt_2749__entry__)
        assign_stmt_2771_to_assign_stmt_2776__entry__ <-| (merge_stmt_2750__exit__)
        if_stmt_2777__entry__ <-| (assign_stmt_2771_to_assign_stmt_2776__exit__)
        if_stmt_2777__exit__ |-> (branch_block_stmt_2749__exit__)
      }
      branch_block_stmt_2749__entry__ |-> (branch_block_stmt_2749)
      branch_block_stmt_2749__exit__ <-| (branch_block_stmt_2749)
      ::[assign_stmt_2787] 
      {
        // start:  			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 946
        // Target expression
        // (as target) txBufferPointer
        $T[STORE_txBufferPointer_2784_sample_start_] 
        $T[STORE_txBufferPointer_2784_sample_completed_] 
        $T[STORE_txBufferPointer_2784_update_start_] 
        $T[STORE_txBufferPointer_2784_update_completed_] 
        // txBufferPointer
        $T[STORE_txBufferPointer_2784_word_address_calculated] 
        $T[STORE_txBufferPointer_2784_root_address_calculated] 
        STORE_txBufferPointer_2784_word_address_calculated <-& (STORE_txBufferPointer_2784_root_address_calculated)
        ;;[STORE_txBufferPointer_2784_Sample] 
        {
          ;;[STORE_txBufferPointer_2784_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_txBufferPointer_2784_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_txBufferPointer_2784_sample_start_ <-& (STORE_txBufferPointer_2784_word_address_calculated)
        STORE_txBufferPointer_2784_sample_start_ &-> (STORE_txBufferPointer_2784_Sample)
        STORE_txBufferPointer_2784_sample_completed_ <-& (STORE_txBufferPointer_2784_Sample)
        STORE_txBufferPointer_2784_sample_completed_ &-> ($null)
        STORE_txBufferPointer_2784_update_start_ &-> (STORE_txBufferPointer_2784_Update)
        STORE_txBufferPointer_2784_update_completed_ <-& (STORE_txBufferPointer_2784_Update)
        // end:  			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
        // load-store dependencies..
        // memory-space  memory_space_9
        //  STORE_txBufferPointer_2784 store
      }
      assign_stmt_2787__entry__ |-> (assign_stmt_2787)
      assign_stmt_2787__exit__ <-| (assign_stmt_2787)
      ::[assign_stmt_2812_to_assign_stmt_2846] 
      {
        // start:  			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 955
        // Source expression
        // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
        $T[XOR_u1_u1_2811_sample_start_] 
        $T[XOR_u1_u1_2811_sample_completed_] 
        $T[XOR_u1_u1_2811_update_start_] 
        $T[XOR_u1_u1_2811_update_completed_] 
        // (tempData [] 4095 )
        // tempData
        // (CRC_16 [] 15 )
        // CRC_16
        // start: Forward dependencies from (tempData [] 4095 ) to transition XOR_u1_u1_2811_sample_start_
        // done: Forward dependencies from (tempData [] 4095 ) to transition XOR_u1_u1_2811_sample_start_
        // start: Forward dependencies from (CRC_16 [] 15 ) to transition XOR_u1_u1_2811_sample_start_
        // done: Forward dependencies from (CRC_16 [] 15 ) to transition XOR_u1_u1_2811_sample_start_
        ;;[XOR_u1_u1_2811_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[XOR_u1_u1_2811_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        XOR_u1_u1_2811_sample_start_ &-> (XOR_u1_u1_2811_Sample)
        XOR_u1_u1_2811_sample_completed_ <-& (XOR_u1_u1_2811_Sample)
        XOR_u1_u1_2811_sample_completed_ &-> ($null)
        XOR_u1_u1_2811_update_start_ &-> (XOR_u1_u1_2811_Update)
        XOR_u1_u1_2811_update_completed_ <-& (XOR_u1_u1_2811_Update)
        // Target expression
        // (as target) inv
        // start: WAR dependencies for inv
        // done: WAR dependencies for inv
        // end:  			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
        // start:  			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 956
        // Source expression
        // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
        $T[CONCAT_u10_u16_2835_sample_start_] 
        $T[CONCAT_u10_u16_2835_sample_completed_] 
        $T[CONCAT_u10_u16_2835_update_start_] 
        $T[CONCAT_u10_u16_2835_update_completed_] 
        // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
        // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
        // ( $slice CRC_16 14 12 ) 
        // CRC_16
        // ((CRC_16 [] 11 ) ^ inv)
        // (CRC_16 [] 11 )
        // CRC_16
        // inv
        // ( $slice CRC_16 10 5 ) 
        // CRC_16
        // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
        // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
        // ((CRC_16 [] 4 ) ^ inv)
        // (CRC_16 [] 4 )
        // CRC_16
        // inv
        // ( $slice CRC_16 3 0 ) 
        // CRC_16
        // inv
        // start: Forward dependencies from ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) to transition CONCAT_u10_u16_2835_sample_start_
        CONCAT_u10_u16_2835_sample_start_ <-& (XOR_u1_u1_2811_update_completed_)
        // done: Forward dependencies from ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) to transition CONCAT_u10_u16_2835_sample_start_
        // start: Forward dependencies from ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv) to transition CONCAT_u10_u16_2835_sample_start_
        CONCAT_u10_u16_2835_sample_start_ <-& (XOR_u1_u1_2811_update_completed_)
        // done: Forward dependencies from ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv) to transition CONCAT_u10_u16_2835_sample_start_
        ;;[CONCAT_u10_u16_2835_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u10_u16_2835_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u10_u16_2835_sample_start_ &-> (CONCAT_u10_u16_2835_Sample)
        CONCAT_u10_u16_2835_sample_completed_ <-& (CONCAT_u10_u16_2835_Sample)
        CONCAT_u10_u16_2835_sample_completed_ &-> ($null)
        CONCAT_u10_u16_2835_update_start_ &-> (CONCAT_u10_u16_2835_Update)
        CONCAT_u10_u16_2835_update_completed_ <-& (CONCAT_u10_u16_2835_Update)
        // Target expression
        // (as target) nextCRC16
        // start: WAR dependencies for nextCRC16
        // done: WAR dependencies for nextCRC16
        // end:  			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
        // start:  			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
        //  file .Aa/sdhc.opt.aa, line 957
        // Source expression
        // (tempData << 1 )
        $T[SHL_u4096_u4096_2840_sample_start_] 
        $T[SHL_u4096_u4096_2840_sample_completed_] 
        $T[SHL_u4096_u4096_2840_update_start_] 
        $T[SHL_u4096_u4096_2840_update_completed_] 
        // tempData
        // start: Forward dependencies from tempData to transition SHL_u4096_u4096_2840_sample_start_
        // done: Forward dependencies from tempData to transition SHL_u4096_u4096_2840_sample_start_
        ;;[SHL_u4096_u4096_2840_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u4096_u4096_2840_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u4096_u4096_2840_sample_start_ &-> (SHL_u4096_u4096_2840_Sample)
        SHL_u4096_u4096_2840_sample_completed_ <-& (SHL_u4096_u4096_2840_Sample)
        SHL_u4096_u4096_2840_sample_completed_ &-> ($null)
        SHL_u4096_u4096_2840_update_start_ &-> (SHL_u4096_u4096_2840_Update)
        SHL_u4096_u4096_2840_update_completed_ <-& (SHL_u4096_u4096_2840_Update)
        // Target expression
        // (as target) nextTempData
        // start: WAR dependencies for nextTempData
        // done: WAR dependencies for nextTempData
        // end:  			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
        // start: WAR dependencies for next_J
        // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
        // type of target is $uint<13>
        // done: WAR dependencies for next_J
        // start:  			$volatile next_J := (J + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 958
        // volatile! 
        // Source expression
        // (J + 1 )
        // J
        // Target expression
        // (as target) next_J
        // start: WAR dependencies for next_J
        // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
        // type of target is $uint<13>
        // done: WAR dependencies for next_J
        // end:  			$volatile next_J := (J + 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_2812_to_assign_stmt_2846__entry__ |-> (assign_stmt_2812_to_assign_stmt_2846)
      assign_stmt_2812_to_assign_stmt_2846__exit__ <-| (assign_stmt_2812_to_assign_stmt_2846)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2847_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2847__entry__ |-> (if_stmt_2847_dead_link)
      if_stmt_2847__exit__ <-| (if_stmt_2847_dead_link)
      ;;[if_stmt_2847_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_J < 4096 )
        ;;[ULT_u13_u1_2850] 
        {
          // binary expression 
          ||[ULT_u13_u1_2850_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2847__entry__ |-> (if_stmt_2847_eval_test)
      $P [ULT_u13_u1_2850_place]
      ULT_u13_u1_2850_place <-| (if_stmt_2847_eval_test)
      ;;[if_stmt_2847_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2847_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u13_u1_2850_place |-> (if_stmt_2847_if_link if_stmt_2847_else_link)
      $P [loopback]
      loopback <-| (if_stmt_2847_if_link)
      if_stmt_2847__exit__ <-| (if_stmt_2847_else_link)
      ::[assign_stmt_2859_to_assign_stmt_2862] 
      {
        // start:  			oe := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 963
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_2857_sample_start_] 
        $T[WPIPE_oe_2857_sample_completed_] 
        $T[WPIPE_oe_2857_update_start_] 
        $T[WPIPE_oe_2857_update_completed_] 
        ;;[WPIPE_oe_2857_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_2857_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_2857_sample_start_ &-> (WPIPE_oe_2857_Sample)
        WPIPE_oe_2857_sample_completed_ <-& (WPIPE_oe_2857_Sample)
        WPIPE_oe_2857_update_start_ <-& (WPIPE_oe_2857_sample_completed_)
        WPIPE_oe_2857_update_start_ &-> (WPIPE_oe_2857_Update)
        WPIPE_oe_2857_update_completed_ <-& (WPIPE_oe_2857_Update)
        // end:  			oe := ONE_1 $buffering 1// bits of buffering = 1. 
        // start:  			DAT0Tx := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 964
        // Target expression
        // (as target) DAT0Tx
        $T[WPIPE_DAT0Tx_2860_sample_start_] 
        $T[WPIPE_DAT0Tx_2860_sample_completed_] 
        $T[WPIPE_DAT0Tx_2860_update_start_] 
        $T[WPIPE_DAT0Tx_2860_update_completed_] 
        ;;[WPIPE_DAT0Tx_2860_Sample] 
        {
          // pipe write sample-start DAT0Tx
          $T [req] $T [ack] 
        }
        ;;[WPIPE_DAT0Tx_2860_Update] 
        {
          // pipe write update (complete) DAT0Tx
          $T [req] $T [ack] 
        }
        WPIPE_DAT0Tx_2860_sample_start_ &-> (WPIPE_DAT0Tx_2860_Sample)
        WPIPE_DAT0Tx_2860_sample_completed_ <-& (WPIPE_DAT0Tx_2860_Sample)
        WPIPE_DAT0Tx_2860_update_start_ <-& (WPIPE_DAT0Tx_2860_sample_completed_)
        WPIPE_DAT0Tx_2860_update_start_ &-> (WPIPE_DAT0Tx_2860_Update)
        WPIPE_DAT0Tx_2860_update_completed_ <-& (WPIPE_DAT0Tx_2860_Update)
        // end:  			DAT0Tx := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Tx
        // read-dependencies for pipe DAT0Tx
        // write-dependencies for pipe DAT0Tx
        // signal write dependencies for DAT0Tx
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      assign_stmt_2859_to_assign_stmt_2862__entry__ |-> (assign_stmt_2859_to_assign_stmt_2862)
      assign_stmt_2859_to_assign_stmt_2862__exit__ <-| (assign_stmt_2859_to_assign_stmt_2862)
      ::[assign_stmt_2878_to_assign_stmt_2888] 
      {
        // start:  			DAT0Tx := (dat0bit [] 4095 ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 971
        // Source expression
        // (dat0bit [] 4095 )
        $T[BITSEL_u4096_u1_2877_sample_start_] 
        $T[BITSEL_u4096_u1_2877_sample_completed_] 
        $T[BITSEL_u4096_u1_2877_update_start_] 
        $T[BITSEL_u4096_u1_2877_update_completed_] 
        // dat0bit
        // start: Forward dependencies from dat0bit to transition BITSEL_u4096_u1_2877_sample_start_
        // done: Forward dependencies from dat0bit to transition BITSEL_u4096_u1_2877_sample_start_
        ;;[BITSEL_u4096_u1_2877_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[BITSEL_u4096_u1_2877_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        BITSEL_u4096_u1_2877_sample_start_ &-> (BITSEL_u4096_u1_2877_Sample)
        BITSEL_u4096_u1_2877_sample_completed_ <-& (BITSEL_u4096_u1_2877_Sample)
        BITSEL_u4096_u1_2877_sample_completed_ &-> ($null)
        BITSEL_u4096_u1_2877_update_start_ &-> (BITSEL_u4096_u1_2877_Update)
        BITSEL_u4096_u1_2877_update_completed_ <-& (BITSEL_u4096_u1_2877_Update)
        // Target expression
        // (as target) DAT0Tx
        $T[WPIPE_DAT0Tx_2874_sample_start_] 
        $T[WPIPE_DAT0Tx_2874_sample_completed_] 
        $T[WPIPE_DAT0Tx_2874_update_start_] 
        $T[WPIPE_DAT0Tx_2874_update_completed_] 
        ;;[WPIPE_DAT0Tx_2874_Sample] 
        {
          // pipe write sample-start DAT0Tx
          $T [req] $T [ack] 
        }
        ;;[WPIPE_DAT0Tx_2874_Update] 
        {
          // pipe write update (complete) DAT0Tx
          $T [req] $T [ack] 
        }
        WPIPE_DAT0Tx_2874_sample_start_ &-> (WPIPE_DAT0Tx_2874_Sample)
        WPIPE_DAT0Tx_2874_sample_completed_ <-& (WPIPE_DAT0Tx_2874_Sample)
        WPIPE_DAT0Tx_2874_update_start_ <-& (WPIPE_DAT0Tx_2874_sample_completed_)
        WPIPE_DAT0Tx_2874_update_start_ &-> (WPIPE_DAT0Tx_2874_Update)
        WPIPE_DAT0Tx_2874_update_completed_ <-& (WPIPE_DAT0Tx_2874_Update)
        // start: Forward dependencies from (dat0bit [] 4095 ) to transition WPIPE_DAT0Tx_2874_sample_start_
        WPIPE_DAT0Tx_2874_sample_start_ <-& (BITSEL_u4096_u1_2877_update_completed_)
        // done: Forward dependencies from (dat0bit [] 4095 ) to transition WPIPE_DAT0Tx_2874_sample_start_
        // end:  			DAT0Tx := (dat0bit [] 4095 ) $buffering 1// bits of buffering = 1. 
        // start:  			nextbit := (dat0bit << 1 ) $buffering 1// bits of buffering = 4096. 
        //  file .Aa/sdhc.opt.aa, line 972
        // Source expression
        // (dat0bit << 1 )
        $T[SHL_u4096_u4096_2882_sample_start_] 
        $T[SHL_u4096_u4096_2882_sample_completed_] 
        $T[SHL_u4096_u4096_2882_update_start_] 
        $T[SHL_u4096_u4096_2882_update_completed_] 
        // dat0bit
        // start: Forward dependencies from dat0bit to transition SHL_u4096_u4096_2882_sample_start_
        // done: Forward dependencies from dat0bit to transition SHL_u4096_u4096_2882_sample_start_
        ;;[SHL_u4096_u4096_2882_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u4096_u4096_2882_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u4096_u4096_2882_sample_start_ &-> (SHL_u4096_u4096_2882_Sample)
        SHL_u4096_u4096_2882_sample_completed_ <-& (SHL_u4096_u4096_2882_Sample)
        SHL_u4096_u4096_2882_sample_completed_ &-> ($null)
        SHL_u4096_u4096_2882_update_start_ &-> (SHL_u4096_u4096_2882_Update)
        SHL_u4096_u4096_2882_update_completed_ <-& (SHL_u4096_u4096_2882_Update)
        // Target expression
        // (as target) nextbit
        // start: WAR dependencies for nextbit
        // done: WAR dependencies for nextbit
        // end:  			nextbit := (dat0bit << 1 ) $buffering 1// bits of buffering = 4096. 
        // start:  			next_K := (K + 1 ) $buffering 1// bits of buffering = 13. 
        //  file .Aa/sdhc.opt.aa, line 973
        // Source expression
        // (K + 1 )
        $T[ADD_u13_u13_2887_sample_start_] 
        $T[ADD_u13_u13_2887_sample_completed_] 
        $T[ADD_u13_u13_2887_update_start_] 
        $T[ADD_u13_u13_2887_update_completed_] 
        // K
        // start: Forward dependencies from K to transition ADD_u13_u13_2887_sample_start_
        // done: Forward dependencies from K to transition ADD_u13_u13_2887_sample_start_
        ;;[ADD_u13_u13_2887_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u13_u13_2887_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u13_u13_2887_sample_start_ &-> (ADD_u13_u13_2887_Sample)
        ADD_u13_u13_2887_sample_completed_ <-& (ADD_u13_u13_2887_Sample)
        ADD_u13_u13_2887_sample_completed_ &-> ($null)
        ADD_u13_u13_2887_update_start_ &-> (ADD_u13_u13_2887_Update)
        ADD_u13_u13_2887_update_completed_ <-& (ADD_u13_u13_2887_Update)
        // Target expression
        // (as target) next_K
        // start: WAR dependencies for next_K
        // done: WAR dependencies for next_K
        // end:  			next_K := (K + 1 ) $buffering 1// bits of buffering = 13. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Tx
        // read-dependencies for pipe DAT0Tx
        // write-dependencies for pipe DAT0Tx
        // signal write dependencies for DAT0Tx
      }
      assign_stmt_2878_to_assign_stmt_2888__entry__ |-> (assign_stmt_2878_to_assign_stmt_2888)
      assign_stmt_2878_to_assign_stmt_2888__exit__ <-| (assign_stmt_2878_to_assign_stmt_2888)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2889_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2889__entry__ |-> (if_stmt_2889_dead_link)
      if_stmt_2889__exit__ <-| (if_stmt_2889_dead_link)
      ;;[if_stmt_2889_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_K < 4096 )
        ;;[ULT_u13_u1_2892] 
        {
          // binary expression 
          ||[ULT_u13_u1_2892_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2889__entry__ |-> (if_stmt_2889_eval_test)
      $P [ULT_u13_u1_2892_place]
      ULT_u13_u1_2892_place <-| (if_stmt_2889_eval_test)
      ;;[if_stmt_2889_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2889_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u13_u1_2892_place |-> (if_stmt_2889_if_link if_stmt_2889_else_link)
      $P [dataloop]
      dataloop <-| (if_stmt_2889_if_link)
      if_stmt_2889__exit__ <-| (if_stmt_2889_else_link)
      ::[assign_stmt_2910_to_assign_stmt_2920] 
      {
        // start:  			DAT0Tx := (dat0crc [] 15 ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 983
        // Source expression
        // (dat0crc [] 15 )
        $T[BITSEL_u16_u1_2909_sample_start_] 
        $T[BITSEL_u16_u1_2909_sample_completed_] 
        $T[BITSEL_u16_u1_2909_update_start_] 
        $T[BITSEL_u16_u1_2909_update_completed_] 
        // dat0crc
        // start: Forward dependencies from dat0crc to transition BITSEL_u16_u1_2909_sample_start_
        // done: Forward dependencies from dat0crc to transition BITSEL_u16_u1_2909_sample_start_
        ;;[BITSEL_u16_u1_2909_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[BITSEL_u16_u1_2909_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        BITSEL_u16_u1_2909_sample_start_ &-> (BITSEL_u16_u1_2909_Sample)
        BITSEL_u16_u1_2909_sample_completed_ <-& (BITSEL_u16_u1_2909_Sample)
        BITSEL_u16_u1_2909_sample_completed_ &-> ($null)
        BITSEL_u16_u1_2909_update_start_ &-> (BITSEL_u16_u1_2909_Update)
        BITSEL_u16_u1_2909_update_completed_ <-& (BITSEL_u16_u1_2909_Update)
        // Target expression
        // (as target) DAT0Tx
        $T[WPIPE_DAT0Tx_2906_sample_start_] 
        $T[WPIPE_DAT0Tx_2906_sample_completed_] 
        $T[WPIPE_DAT0Tx_2906_update_start_] 
        $T[WPIPE_DAT0Tx_2906_update_completed_] 
        ;;[WPIPE_DAT0Tx_2906_Sample] 
        {
          // pipe write sample-start DAT0Tx
          $T [req] $T [ack] 
        }
        ;;[WPIPE_DAT0Tx_2906_Update] 
        {
          // pipe write update (complete) DAT0Tx
          $T [req] $T [ack] 
        }
        WPIPE_DAT0Tx_2906_sample_start_ &-> (WPIPE_DAT0Tx_2906_Sample)
        WPIPE_DAT0Tx_2906_sample_completed_ <-& (WPIPE_DAT0Tx_2906_Sample)
        WPIPE_DAT0Tx_2906_update_start_ <-& (WPIPE_DAT0Tx_2906_sample_completed_)
        WPIPE_DAT0Tx_2906_update_start_ &-> (WPIPE_DAT0Tx_2906_Update)
        WPIPE_DAT0Tx_2906_update_completed_ <-& (WPIPE_DAT0Tx_2906_Update)
        // start: Forward dependencies from (dat0crc [] 15 ) to transition WPIPE_DAT0Tx_2906_sample_start_
        WPIPE_DAT0Tx_2906_sample_start_ <-& (BITSEL_u16_u1_2909_update_completed_)
        // done: Forward dependencies from (dat0crc [] 15 ) to transition WPIPE_DAT0Tx_2906_sample_start_
        // end:  			DAT0Tx := (dat0crc [] 15 ) $buffering 1// bits of buffering = 1. 
        // start:  			nextbitcrc := (dat0crc << 1 ) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 984
        // Source expression
        // (dat0crc << 1 )
        $T[SHL_u16_u16_2914_sample_start_] 
        $T[SHL_u16_u16_2914_sample_completed_] 
        $T[SHL_u16_u16_2914_update_start_] 
        $T[SHL_u16_u16_2914_update_completed_] 
        // dat0crc
        // start: Forward dependencies from dat0crc to transition SHL_u16_u16_2914_sample_start_
        // done: Forward dependencies from dat0crc to transition SHL_u16_u16_2914_sample_start_
        ;;[SHL_u16_u16_2914_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SHL_u16_u16_2914_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SHL_u16_u16_2914_sample_start_ &-> (SHL_u16_u16_2914_Sample)
        SHL_u16_u16_2914_sample_completed_ <-& (SHL_u16_u16_2914_Sample)
        SHL_u16_u16_2914_sample_completed_ &-> ($null)
        SHL_u16_u16_2914_update_start_ &-> (SHL_u16_u16_2914_Update)
        SHL_u16_u16_2914_update_completed_ <-& (SHL_u16_u16_2914_Update)
        // Target expression
        // (as target) nextbitcrc
        // start: WAR dependencies for nextbitcrc
        // done: WAR dependencies for nextbitcrc
        // end:  			nextbitcrc := (dat0crc << 1 ) $buffering 1// bits of buffering = 16. 
        // start:  			next_L := (L + 1 ) $buffering 1// bits of buffering = 5. 
        //  file .Aa/sdhc.opt.aa, line 985
        // Source expression
        // (L + 1 )
        $T[ADD_u5_u5_2919_sample_start_] 
        $T[ADD_u5_u5_2919_sample_completed_] 
        $T[ADD_u5_u5_2919_update_start_] 
        $T[ADD_u5_u5_2919_update_completed_] 
        // L
        // start: Forward dependencies from L to transition ADD_u5_u5_2919_sample_start_
        // done: Forward dependencies from L to transition ADD_u5_u5_2919_sample_start_
        ;;[ADD_u5_u5_2919_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u5_u5_2919_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u5_u5_2919_sample_start_ &-> (ADD_u5_u5_2919_Sample)
        ADD_u5_u5_2919_sample_completed_ <-& (ADD_u5_u5_2919_Sample)
        ADD_u5_u5_2919_sample_completed_ &-> ($null)
        ADD_u5_u5_2919_update_start_ &-> (ADD_u5_u5_2919_Update)
        ADD_u5_u5_2919_update_completed_ <-& (ADD_u5_u5_2919_Update)
        // Target expression
        // (as target) next_L
        // start: WAR dependencies for next_L
        // done: WAR dependencies for next_L
        // end:  			next_L := (L + 1 ) $buffering 1// bits of buffering = 5. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Tx
        // read-dependencies for pipe DAT0Tx
        // write-dependencies for pipe DAT0Tx
        // signal write dependencies for DAT0Tx
      }
      assign_stmt_2910_to_assign_stmt_2920__entry__ |-> (assign_stmt_2910_to_assign_stmt_2920)
      assign_stmt_2910_to_assign_stmt_2920__exit__ <-| (assign_stmt_2910_to_assign_stmt_2920)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2921_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2921__entry__ |-> (if_stmt_2921_dead_link)
      if_stmt_2921__exit__ <-| (if_stmt_2921_dead_link)
      ;;[if_stmt_2921_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_L < 16 )
        ;;[ULT_u5_u1_2924] 
        {
          // binary expression 
          ||[ULT_u5_u1_2924_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2921__entry__ |-> (if_stmt_2921_eval_test)
      $P [ULT_u5_u1_2924_place]
      ULT_u5_u1_2924_place <-| (if_stmt_2921_eval_test)
      ;;[if_stmt_2921_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2921_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u5_u1_2924_place |-> (if_stmt_2921_if_link if_stmt_2921_else_link)
      $P [crcloop]
      crcloop <-| (if_stmt_2921_if_link)
      if_stmt_2921__exit__ <-| (if_stmt_2921_else_link)
      ::[assign_stmt_2929_to_assign_stmt_2932] 
      {
        // start:  			DAT0Tx := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 989
        // Target expression
        // (as target) DAT0Tx
        $T[WPIPE_DAT0Tx_2927_sample_start_] 
        $T[WPIPE_DAT0Tx_2927_sample_completed_] 
        $T[WPIPE_DAT0Tx_2927_update_start_] 
        $T[WPIPE_DAT0Tx_2927_update_completed_] 
        ;;[WPIPE_DAT0Tx_2927_Sample] 
        {
          // pipe write sample-start DAT0Tx
          $T [req] $T [ack] 
        }
        ;;[WPIPE_DAT0Tx_2927_Update] 
        {
          // pipe write update (complete) DAT0Tx
          $T [req] $T [ack] 
        }
        WPIPE_DAT0Tx_2927_sample_start_ &-> (WPIPE_DAT0Tx_2927_Sample)
        WPIPE_DAT0Tx_2927_sample_completed_ <-& (WPIPE_DAT0Tx_2927_Sample)
        WPIPE_DAT0Tx_2927_update_start_ <-& (WPIPE_DAT0Tx_2927_sample_completed_)
        WPIPE_DAT0Tx_2927_update_start_ &-> (WPIPE_DAT0Tx_2927_Update)
        WPIPE_DAT0Tx_2927_update_completed_ <-& (WPIPE_DAT0Tx_2927_Update)
        // end:  			DAT0Tx := ONE_1 $buffering 1// bits of buffering = 1. 
        // start:  			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 990
        // Target expression
        // (as target) oe
        $T[WPIPE_oe_2930_sample_start_] 
        $T[WPIPE_oe_2930_sample_completed_] 
        $T[WPIPE_oe_2930_update_start_] 
        $T[WPIPE_oe_2930_update_completed_] 
        ;;[WPIPE_oe_2930_Sample] 
        {
          // pipe write sample-start oe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_oe_2930_Update] 
        {
          // pipe write update (complete) oe
          $T [req] $T [ack] 
        }
        WPIPE_oe_2930_sample_start_ &-> (WPIPE_oe_2930_Sample)
        WPIPE_oe_2930_sample_completed_ <-& (WPIPE_oe_2930_Sample)
        WPIPE_oe_2930_update_start_ <-& (WPIPE_oe_2930_sample_completed_)
        WPIPE_oe_2930_update_start_ &-> (WPIPE_oe_2930_Update)
        WPIPE_oe_2930_update_completed_ <-& (WPIPE_oe_2930_Update)
        // end:  			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Tx
        // read-dependencies for pipe DAT0Tx
        // write-dependencies for pipe DAT0Tx
        // signal write dependencies for DAT0Tx
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
      }
      assign_stmt_2929_to_assign_stmt_2932__entry__ |-> (assign_stmt_2929_to_assign_stmt_2932)
      assign_stmt_2929_to_assign_stmt_2932__exit__ <-| (assign_stmt_2929_to_assign_stmt_2932)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 947
      ;;[merge_stmt_2788_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2788__entry__ |-> (merge_stmt_2788_dead_link)
      merge_stmt_2788__exit__ <-| (merge_stmt_2788_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 947  --------------------------
      ||[merge_stmt_2788__entry___PhiReq] 
      {
        ;;[phi_stmt_2789] 
        {
          ||[phi_stmt_2789_sources] 
          {
            // sources for 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
            // type of target is $uint<13>
            // constant source .... delay transition 
            $T [type_cast_2792_konst_delay_trans] $delay
          }
          $T [phi_stmt_2789_req] 
        }
        ;;[phi_stmt_2794] 
        {
          ||[phi_stmt_2794_sources] 
          {
            // sources for 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_2797_konst_delay_trans] $delay
          }
          $T [phi_stmt_2794_req] 
        }
        ;;[phi_stmt_2799] 
        {
          ||[phi_stmt_2799_sources] 
          {
            // sources for 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2799_req] 
        }
      }
      merge_stmt_2788__entry__ |-> (merge_stmt_2788__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_2789] 
        {
          ||[phi_stmt_2789_sources] 
          {
            // sources for 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
            // type of target is $uint<13>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2789_req] 
        }
        ;;[phi_stmt_2794] 
        {
          ||[phi_stmt_2794_sources] 
          {
            // sources for 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2794_req] 
        }
        ;;[phi_stmt_2799] 
        {
          ||[phi_stmt_2799_sources] 
          {
            // sources for 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2799_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_2788_PhiReqMerge] 
      merge_stmt_2788_PhiReqMerge <-| ( merge_stmt_2788__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_2788_PhiAck] 
      {
        $T [phi_stmt_2789_ack] 
        $T [phi_stmt_2794_ack] 
        $T [phi_stmt_2799_ack] 
      }
      merge_stmt_2788_PhiReqMerge |-> (merge_stmt_2788_PhiAck)
      merge_stmt_2788__exit__  <-| (merge_stmt_2788_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 947  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 965
      ;;[merge_stmt_2863_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2863__entry__ |-> (merge_stmt_2863_dead_link)
      merge_stmt_2863__exit__ <-| (merge_stmt_2863_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 965  --------------------------
      ||[merge_stmt_2863__entry___PhiReq] 
      {
        ;;[phi_stmt_2864] 
        {
          ||[phi_stmt_2864_sources] 
          {
            // sources for 				$phi K := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_K $on   dataloop 
            // type of target is $uint<13>
            // constant source .... delay transition 
            $T [type_cast_2867_konst_delay_trans] $delay
          }
          $T [phi_stmt_2864_req] 
        }
        ;;[phi_stmt_2869] 
        {
          ||[phi_stmt_2869_sources] 
          {
            // sources for 				$phi dat0bit := 				  dat $on   $entry 				  nextbit $on   dataloop 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2869_req] 
        }
      }
      merge_stmt_2863__entry__ |-> (merge_stmt_2863__entry___PhiReq)
      ||[dataloop_PhiReq] 
      {
        ;;[phi_stmt_2864] 
        {
          ||[phi_stmt_2864_sources] 
          {
            // sources for 				$phi K := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_K $on   dataloop 
            // type of target is $uint<13>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2864_req] 
        }
        ;;[phi_stmt_2869] 
        {
          ||[phi_stmt_2869_sources] 
          {
            // sources for 				$phi dat0bit := 				  dat $on   $entry 				  nextbit $on   dataloop 
            // type of target is $uint<4096>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2869_req] 
        }
      }
      dataloop |-> (dataloop_PhiReq)
      $P [merge_stmt_2863_PhiReqMerge] 
      merge_stmt_2863_PhiReqMerge <-| ( merge_stmt_2863__entry___PhiReq  dataloop_PhiReq )
      ||[merge_stmt_2863_PhiAck] 
      {
        $T [phi_stmt_2864_ack] 
        $T [phi_stmt_2869_ack] 
      }
      merge_stmt_2863_PhiReqMerge |-> (merge_stmt_2863_PhiAck)
      merge_stmt_2863__exit__  <-| (merge_stmt_2863_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 965  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 977
      ;;[merge_stmt_2895_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2895__entry__ |-> (merge_stmt_2895_dead_link)
      merge_stmt_2895__exit__ <-| (merge_stmt_2895_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 977  --------------------------
      ||[merge_stmt_2895__entry___PhiReq] 
      {
        ;;[phi_stmt_2896] 
        {
          ||[phi_stmt_2896_sources] 
          {
            // sources for 				$phi L := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_L $on   crcloop 
            // type of target is $uint<5>
            // constant source .... delay transition 
            $T [type_cast_2899_konst_delay_trans] $delay
          }
          $T [phi_stmt_2896_req] 
        }
        ;;[phi_stmt_2901] 
        {
          ||[phi_stmt_2901_sources] 
          {
            // sources for 				$phi dat0crc := 				  nextCRC16 $on   $entry 				  nextbitcrc $on   crcloop 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2901_req] 
        }
      }
      merge_stmt_2895__entry__ |-> (merge_stmt_2895__entry___PhiReq)
      ||[crcloop_PhiReq] 
      {
        ;;[phi_stmt_2896] 
        {
          ||[phi_stmt_2896_sources] 
          {
            // sources for 				$phi L := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_L $on   crcloop 
            // type of target is $uint<5>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2896_req] 
        }
        ;;[phi_stmt_2901] 
        {
          ||[phi_stmt_2901_sources] 
          {
            // sources for 				$phi dat0crc := 				  nextCRC16 $on   $entry 				  nextbitcrc $on   crcloop 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_2901_req] 
        }
      }
      crcloop |-> (crcloop_PhiReq)
      $P [merge_stmt_2895_PhiReqMerge] 
      merge_stmt_2895_PhiReqMerge <-| ( merge_stmt_2895__entry___PhiReq  crcloop_PhiReq )
      ||[merge_stmt_2895_PhiAck] 
      {
        $T [phi_stmt_2896_ack] 
        $T [phi_stmt_2901_ack] 
      }
      merge_stmt_2895_PhiReqMerge |-> (merge_stmt_2895_PhiAck)
      merge_stmt_2895__exit__  <-| (merge_stmt_2895_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 977  --------------------------
      branch_block_stmt_2749__entry__ <-| (if_stmt_2355_else_link)
      assign_stmt_2787__entry__ <-| (branch_block_stmt_2749__exit__)
      merge_stmt_2788__entry__ <-| (assign_stmt_2787__exit__)
      assign_stmt_2812_to_assign_stmt_2846__entry__ <-| (merge_stmt_2788__exit__)
      if_stmt_2847__entry__ <-| (assign_stmt_2812_to_assign_stmt_2846__exit__)
      assign_stmt_2859_to_assign_stmt_2862__entry__ <-| (if_stmt_2847__exit__)
      merge_stmt_2863__entry__ <-| (assign_stmt_2859_to_assign_stmt_2862__exit__)
      assign_stmt_2878_to_assign_stmt_2888__entry__ <-| (merge_stmt_2863__exit__)
      if_stmt_2889__entry__ <-| (assign_stmt_2878_to_assign_stmt_2888__exit__)
      merge_stmt_2895__entry__ <-| (if_stmt_2889__exit__)
      assign_stmt_2910_to_assign_stmt_2920__entry__ <-| (merge_stmt_2895__exit__)
      if_stmt_2921__entry__ <-| (assign_stmt_2910_to_assign_stmt_2920__exit__)
      assign_stmt_2929_to_assign_stmt_2932__entry__ <-| (if_stmt_2921__exit__)
      assign_stmt_2929_to_assign_stmt_2932__exit__ |-> (if_stmt_2355__exit__)
      ::[assign_stmt_2936_to_assign_stmt_2942] 
      {
        // start:  		busy := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 992
        // Target expression
        // (as target) busy
        $T[WPIPE_busy_2934_sample_start_] 
        $T[WPIPE_busy_2934_sample_completed_] 
        $T[WPIPE_busy_2934_update_start_] 
        $T[WPIPE_busy_2934_update_completed_] 
        ;;[WPIPE_busy_2934_Sample] 
        {
          // pipe write sample-start busy
          $T [req] $T [ack] 
        }
        ;;[WPIPE_busy_2934_Update] 
        {
          // pipe write update (complete) busy
          $T [req] $T [ack] 
        }
        WPIPE_busy_2934_sample_start_ &-> (WPIPE_busy_2934_Sample)
        WPIPE_busy_2934_sample_completed_ <-& (WPIPE_busy_2934_Sample)
        WPIPE_busy_2934_update_start_ <-& (WPIPE_busy_2934_sample_completed_)
        WPIPE_busy_2934_update_start_ &-> (WPIPE_busy_2934_Update)
        WPIPE_busy_2934_update_completed_ <-& (WPIPE_busy_2934_Update)
        // end:  		busy := ONE_1 $buffering 1// bits of buffering = 1. 
        // start:  		$guard (blockCountEnable) blockCountNext := (blockCount - 1 ) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 993
        // Guard expression 
        // blockCountEnable
        // Source expression
        // (blockCount - 1 )
        $T[SUB_u16_u16_2941_sample_start_] 
        $T[SUB_u16_u16_2941_sample_completed_] 
        $T[SUB_u16_u16_2941_update_start_] 
        $T[SUB_u16_u16_2941_update_completed_] 
        // Guard dependency for expression SUB_u16_u16_2941 with guard R_blockCountEnable_2937
        // root blockCountEnable of guard-expression not in visited elements.
        // blockCount
        // start: Forward dependencies from blockCount to transition SUB_u16_u16_2941_sample_start_
        // done: Forward dependencies from blockCount to transition SUB_u16_u16_2941_sample_start_
        ;;[SUB_u16_u16_2941_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u16_u16_2941_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u16_u16_2941_sample_start_ &-> (SUB_u16_u16_2941_Sample)
        SUB_u16_u16_2941_sample_completed_ <-& (SUB_u16_u16_2941_Sample)
        SUB_u16_u16_2941_sample_completed_ &-> ($null)
        SUB_u16_u16_2941_update_start_ &-> (SUB_u16_u16_2941_Update)
        SUB_u16_u16_2941_update_completed_ <-& (SUB_u16_u16_2941_Update)
        // Target expression
        // (as target) blockCountNext
        // blockCountNext
        // write to interface object
        // start: WAR dependencies for blockCountNext
        // done: WAR dependencies for blockCountNext
        // blockCountNext
        // write to interface object
        // end:  		$guard (blockCountEnable) blockCountNext := (blockCount - 1 ) $buffering 1// bits of buffering = 16. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe busy
        // read-dependencies for pipe busy
        // write-dependencies for pipe busy
        // signal write dependencies for busy
      }
      assign_stmt_2936_to_assign_stmt_2942__entry__ |-> (assign_stmt_2936_to_assign_stmt_2942)
      assign_stmt_2936_to_assign_stmt_2942__exit__ <-| (assign_stmt_2936_to_assign_stmt_2942)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2943_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2943__entry__ |-> (if_stmt_2943_dead_link)
      if_stmt_2943__exit__ <-| (if_stmt_2943_dead_link)
      ;;[if_stmt_2943_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (lastBlock == 1 )
        ;;[EQ_u1_u1_2946] 
        {
          // binary expression 
          ||[EQ_u1_u1_2946_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2943__entry__ |-> (if_stmt_2943_eval_test)
      $P [EQ_u1_u1_2946_place]
      EQ_u1_u1_2946_place <-| (if_stmt_2943_eval_test)
      ;;[if_stmt_2943_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2943_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_2946_place |-> (if_stmt_2943_if_link if_stmt_2943_else_link)
      $P [assign_stmt_2950_to_assign_stmt_2960__entry__] 
      $P [assign_stmt_2950_to_assign_stmt_2960__exit__] 
      ::[assign_stmt_2950_to_assign_stmt_2960] 
      {
        // start:  			presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 995
        // Source expression
        // sdhcRegisters[37 ]
        $T[array_obj_ref_2949_base_address_calculated] 
        $T[array_obj_ref_2949_sample_start_] 
        $T[array_obj_ref_2949_sample_completed_] 
        $T[array_obj_ref_2949_update_start_] 
        $T[array_obj_ref_2949_update_completed_] 
        $T[array_obj_ref_2949_word_address_calculated] 
        $T[array_obj_ref_2949_root_address_calculated] 
        array_obj_ref_2949_word_address_calculated <-& (array_obj_ref_2949_root_address_calculated)
        ;;[array_obj_ref_2949_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_2949_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_2949_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_2949_sample_start_ <-& (array_obj_ref_2949_word_address_calculated)
        array_obj_ref_2949_sample_start_ &-> (array_obj_ref_2949_Sample)
        array_obj_ref_2949_sample_completed_ <-& (array_obj_ref_2949_Sample)
        array_obj_ref_2949_sample_completed_ &-> ($null)
        array_obj_ref_2949_update_start_ &-> (array_obj_ref_2949_Update)
        array_obj_ref_2949_update_completed_ <-& (array_obj_ref_2949_Update)
        // Target expression
        // (as target) presentState1Var
        // start: WAR dependencies for presentState1Var
        // done: WAR dependencies for presentState1Var
        // end:  			presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
        // start:  			presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 996
        // Source expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_2953_base_address_calculated] 
        $T[array_obj_ref_2953_sample_start_] 
        $T[array_obj_ref_2953_sample_completed_] 
        $T[array_obj_ref_2953_update_start_] 
        $T[array_obj_ref_2953_update_completed_] 
        $T[array_obj_ref_2953_word_address_calculated] 
        $T[array_obj_ref_2953_root_address_calculated] 
        array_obj_ref_2953_word_address_calculated <-& (array_obj_ref_2953_root_address_calculated)
        ;;[array_obj_ref_2953_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_2953_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_2953_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_2953_sample_start_ <-& (array_obj_ref_2953_word_address_calculated)
        array_obj_ref_2953_sample_start_ &-> (array_obj_ref_2953_Sample)
        array_obj_ref_2953_sample_completed_ <-& (array_obj_ref_2953_Sample)
        array_obj_ref_2953_sample_completed_ &-> ($null)
        array_obj_ref_2953_update_start_ &-> (array_obj_ref_2953_Update)
        array_obj_ref_2953_update_completed_ <-& (array_obj_ref_2953_Update)
        // Target expression
        // (as target) presentState0Var
        // start: WAR dependencies for presentState0Var
        // done: WAR dependencies for presentState0Var
        // end:  			presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
        // start:  			sdhcRegisters[37 ] := (presentState1Var & _hfe ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 997
        // Source expression
        // (presentState1Var & _hfe )
        $T[AND_u8_u8_2959_sample_start_] 
        $T[AND_u8_u8_2959_sample_completed_] 
        $T[AND_u8_u8_2959_update_start_] 
        $T[AND_u8_u8_2959_update_completed_] 
        // presentState1Var
        // start: Forward dependencies from presentState1Var to transition AND_u8_u8_2959_sample_start_
        AND_u8_u8_2959_sample_start_ <-& (array_obj_ref_2949_update_completed_)
        // done: Forward dependencies from presentState1Var to transition AND_u8_u8_2959_sample_start_
        ;;[AND_u8_u8_2959_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_2959_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_2959_sample_start_ &-> (AND_u8_u8_2959_Sample)
        AND_u8_u8_2959_sample_completed_ <-& (AND_u8_u8_2959_Sample)
        AND_u8_u8_2959_sample_completed_ &-> ($null)
        AND_u8_u8_2959_update_start_ &-> (AND_u8_u8_2959_Update)
        AND_u8_u8_2959_update_completed_ <-& (AND_u8_u8_2959_Update)
        // Target expression
        // sdhcRegisters[37 ]
        $T[array_obj_ref_2956_sample_start_] 
        $T[array_obj_ref_2956_sample_completed_] 
        $T[array_obj_ref_2956_update_start_] 
        $T[array_obj_ref_2956_update_completed_] 
        $T[array_obj_ref_2956_word_address_calculated] 
        $T[array_obj_ref_2956_root_address_calculated] 
        array_obj_ref_2956_word_address_calculated <-& (array_obj_ref_2956_root_address_calculated)
        ;;[array_obj_ref_2956_Sample] 
        {
          ;;[array_obj_ref_2956_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_2956_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_2956_sample_start_ <-& (array_obj_ref_2956_word_address_calculated)
        array_obj_ref_2956_sample_start_ &-> (array_obj_ref_2956_Sample)
        array_obj_ref_2956_sample_completed_ <-& (array_obj_ref_2956_Sample)
        array_obj_ref_2956_sample_completed_ &-> ($null)
        array_obj_ref_2956_update_start_ &-> (array_obj_ref_2956_Update)
        array_obj_ref_2956_update_completed_ <-& (array_obj_ref_2956_Update)
        // start: Forward dependencies from (presentState1Var & _hfe ) to transition array_obj_ref_2956_sample_start_
        array_obj_ref_2956_sample_start_ <-& (AND_u8_u8_2959_update_completed_)
        // done: Forward dependencies from (presentState1Var & _hfe ) to transition array_obj_ref_2956_sample_start_
        // end:  			sdhcRegisters[37 ] := (presentState1Var & _hfe ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_2949 load
        //  array_obj_ref_2953 load
        //  array_obj_ref_2956 store
        $T [array_obj_ref_2949_array_obj_ref_2956_delay] $delay
        // array_obj_ref_2949(load) -> array_obj_ref_2956(store)
        array_obj_ref_2956_sample_start_ <-& (array_obj_ref_2949_array_obj_ref_2956_delay)
        array_obj_ref_2949_array_obj_ref_2956_delay <-& (array_obj_ref_2949_sample_completed_)
        $T [array_obj_ref_2953_array_obj_ref_2956_delay] $delay
        // array_obj_ref_2953(load) -> array_obj_ref_2956(store)
        array_obj_ref_2956_sample_start_ <-& (array_obj_ref_2953_array_obj_ref_2956_delay)
        array_obj_ref_2953_array_obj_ref_2956_delay <-& (array_obj_ref_2953_sample_completed_)
      }
      assign_stmt_2950_to_assign_stmt_2960__entry__ |-> (assign_stmt_2950_to_assign_stmt_2960)
      assign_stmt_2950_to_assign_stmt_2960__exit__ <-| (assign_stmt_2950_to_assign_stmt_2960)
      assign_stmt_2950_to_assign_stmt_2960__entry__ <-| (if_stmt_2943_if_link)
      assign_stmt_2950_to_assign_stmt_2960__exit__ |-> (if_stmt_2943__exit__)
      if_stmt_2943__exit__ <-| (if_stmt_2943_else_link)
      ::[assign_stmt_2965] 
      {
        // start:  		wait := DAT0Rx $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1001
        // Source expression
        // DAT0Rx
        $T[RPIPE_DAT0Rx_2964_sample_start_] 
        $T[RPIPE_DAT0Rx_2964_sample_completed_] 
        $T[RPIPE_DAT0Rx_2964_update_start_] 
        $T[RPIPE_DAT0Rx_2964_update_completed_] 
        ;;[RPIPE_DAT0Rx_2964_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_DAT0Rx_2964_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_DAT0Rx_2964_sample_start_ &-> (RPIPE_DAT0Rx_2964_Sample)
        RPIPE_DAT0Rx_2964_sample_completed_ <-& (RPIPE_DAT0Rx_2964_Sample)
        RPIPE_DAT0Rx_2964_update_start_ <-& (RPIPE_DAT0Rx_2964_sample_completed_)
        RPIPE_DAT0Rx_2964_update_start_ &-> (RPIPE_DAT0Rx_2964_Update)
        RPIPE_DAT0Rx_2964_update_completed_ <-& (RPIPE_DAT0Rx_2964_Update)
        // Target expression
        // (as target) wait
        // start: WAR dependencies for wait
        // done: WAR dependencies for wait
        // end:  		wait := DAT0Rx $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
      }
      assign_stmt_2965__entry__ |-> (assign_stmt_2965)
      assign_stmt_2965__exit__ <-| (assign_stmt_2965)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2966_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2966__entry__ |-> (if_stmt_2966_dead_link)
      if_stmt_2966__exit__ <-| (if_stmt_2966_dead_link)
      ;;[if_stmt_2966_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (wait == ZERO_1)
        ;;[EQ_u1_u1_2969] 
        {
          // binary expression 
          ||[EQ_u1_u1_2969_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2966__entry__ |-> (if_stmt_2966_eval_test)
      $P [EQ_u1_u1_2969_place]
      EQ_u1_u1_2969_place <-| (if_stmt_2966_eval_test)
      ;;[if_stmt_2966_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2966_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_2969_place |-> (if_stmt_2966_if_link if_stmt_2966_else_link)
      $P [waitloop]
      waitloop <-| (if_stmt_2966_if_link)
      if_stmt_2966__exit__ <-| (if_stmt_2966_else_link)
      ::[assign_stmt_2974] 
      {
        // start:  		busy := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1005
        // Target expression
        // (as target) busy
        $T[WPIPE_busy_2972_sample_start_] 
        $T[WPIPE_busy_2972_sample_completed_] 
        $T[WPIPE_busy_2972_update_start_] 
        $T[WPIPE_busy_2972_update_completed_] 
        ;;[WPIPE_busy_2972_Sample] 
        {
          // pipe write sample-start busy
          $T [req] $T [ack] 
        }
        ;;[WPIPE_busy_2972_Update] 
        {
          // pipe write update (complete) busy
          $T [req] $T [ack] 
        }
        WPIPE_busy_2972_sample_start_ &-> (WPIPE_busy_2972_Sample)
        WPIPE_busy_2972_sample_completed_ <-& (WPIPE_busy_2972_Sample)
        WPIPE_busy_2972_update_start_ <-& (WPIPE_busy_2972_sample_completed_)
        WPIPE_busy_2972_update_start_ &-> (WPIPE_busy_2972_Update)
        WPIPE_busy_2972_update_completed_ <-& (WPIPE_busy_2972_Update)
        // end:  		busy := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe busy
        // read-dependencies for pipe busy
        // write-dependencies for pipe busy
        // signal write dependencies for busy
      }
      assign_stmt_2974__entry__ |-> (assign_stmt_2974)
      assign_stmt_2974__exit__ <-| (assign_stmt_2974)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_2975_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2975__entry__ |-> (if_stmt_2975_dead_link)
      if_stmt_2975__exit__ <-| (if_stmt_2975_dead_link)
      ;;[if_stmt_2975_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (lastBlock == 1 )
        ;;[EQ_u1_u1_2978] 
        {
          // binary expression 
          ||[EQ_u1_u1_2978_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2975__entry__ |-> (if_stmt_2975_eval_test)
      $P [EQ_u1_u1_2978_place]
      EQ_u1_u1_2978_place <-| (if_stmt_2975_eval_test)
      ;;[if_stmt_2975_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2975_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_2978_place |-> (if_stmt_2975_if_link if_stmt_2975_else_link)
      $P [assign_stmt_2984_to_assign_stmt_2989__entry__] 
      $P [assign_stmt_2984_to_assign_stmt_2989__exit__] 
      ::[assign_stmt_2984_to_assign_stmt_2989] 
      {
        // start:  			sdhcRegisters[36 ] := (presentState0Var & _hf9 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1007
        // Source expression
        // (presentState0Var & _hf9 )
        $T[AND_u8_u8_2983_sample_start_] 
        $T[AND_u8_u8_2983_sample_completed_] 
        $T[AND_u8_u8_2983_update_start_] 
        $T[AND_u8_u8_2983_update_completed_] 
        // presentState0Var
        // start: Forward dependencies from presentState0Var to transition AND_u8_u8_2983_sample_start_
        // done: Forward dependencies from presentState0Var to transition AND_u8_u8_2983_sample_start_
        ;;[AND_u8_u8_2983_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_2983_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_2983_sample_start_ &-> (AND_u8_u8_2983_Sample)
        AND_u8_u8_2983_sample_completed_ <-& (AND_u8_u8_2983_Sample)
        AND_u8_u8_2983_sample_completed_ &-> ($null)
        AND_u8_u8_2983_update_start_ &-> (AND_u8_u8_2983_Update)
        AND_u8_u8_2983_update_completed_ <-& (AND_u8_u8_2983_Update)
        // Target expression
        // sdhcRegisters[36 ]
        $T[array_obj_ref_2980_sample_start_] 
        $T[array_obj_ref_2980_sample_completed_] 
        $T[array_obj_ref_2980_update_start_] 
        $T[array_obj_ref_2980_update_completed_] 
        $T[array_obj_ref_2980_word_address_calculated] 
        $T[array_obj_ref_2980_root_address_calculated] 
        array_obj_ref_2980_word_address_calculated <-& (array_obj_ref_2980_root_address_calculated)
        ;;[array_obj_ref_2980_Sample] 
        {
          ;;[array_obj_ref_2980_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_2980_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_2980_sample_start_ <-& (array_obj_ref_2980_word_address_calculated)
        array_obj_ref_2980_sample_start_ &-> (array_obj_ref_2980_Sample)
        array_obj_ref_2980_sample_completed_ <-& (array_obj_ref_2980_Sample)
        array_obj_ref_2980_sample_completed_ &-> ($null)
        array_obj_ref_2980_update_start_ &-> (array_obj_ref_2980_Update)
        array_obj_ref_2980_update_completed_ <-& (array_obj_ref_2980_Update)
        // start: Forward dependencies from (presentState0Var & _hf9 ) to transition array_obj_ref_2980_sample_start_
        array_obj_ref_2980_sample_start_ <-& (AND_u8_u8_2983_update_completed_)
        // done: Forward dependencies from (presentState0Var & _hf9 ) to transition array_obj_ref_2980_sample_start_
        // end:  			sdhcRegisters[36 ] := (presentState0Var & _hf9 ) $buffering 1// bits of buffering = 8. 
        // start:  			transferComplete := (ZERO_8 | _h02 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1008
        // constant! 
        // transferComplete
        // write to interface object
        // end:  			transferComplete := (ZERO_8 | _h02 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  array_obj_ref_2980 store
      }
      assign_stmt_2984_to_assign_stmt_2989__entry__ |-> (assign_stmt_2984_to_assign_stmt_2989)
      assign_stmt_2984_to_assign_stmt_2989__exit__ <-| (assign_stmt_2984_to_assign_stmt_2989)
      assign_stmt_2984_to_assign_stmt_2989__entry__ <-| (if_stmt_2975_if_link)
      assign_stmt_2984_to_assign_stmt_2989__exit__ |-> (if_stmt_2975__exit__)
      if_stmt_2975__exit__ <-| (if_stmt_2975_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 999
      ;;[merge_stmt_2962_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2962__entry__ |-> (merge_stmt_2962_dead_link)
      merge_stmt_2962__exit__ <-| (merge_stmt_2962_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 999  --------------------------
      ||[merge_stmt_2962__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_2962__entry__ |-> (merge_stmt_2962__entry___PhiReq)
      ||[waitloop_PhiReq] 
      {
        // no phi statements in merge..
      }
      waitloop |-> (waitloop_PhiReq)
      $P [merge_stmt_2962_PhiReqMerge] 
      merge_stmt_2962_PhiReqMerge <-| ( merge_stmt_2962__entry___PhiReq  waitloop_PhiReq )
      ||[merge_stmt_2962_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_2962_PhiReqMerge |-> (merge_stmt_2962_PhiAck)
      merge_stmt_2962__exit__  <-| (merge_stmt_2962_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 999  --------------------------
      if_stmt_2355__entry__ <-| (branch_block_stmt_2354__entry__)
      assign_stmt_2936_to_assign_stmt_2942__entry__ <-| (if_stmt_2355__exit__)
      if_stmt_2943__entry__ <-| (assign_stmt_2936_to_assign_stmt_2942__exit__)
      merge_stmt_2962__entry__ <-| (if_stmt_2943__exit__)
      assign_stmt_2965__entry__ <-| (merge_stmt_2962__exit__)
      if_stmt_2966__entry__ <-| (assign_stmt_2965__exit__)
      assign_stmt_2974__entry__ <-| (if_stmt_2966__exit__)
      if_stmt_2975__entry__ <-| (assign_stmt_2974__exit__)
      if_stmt_2975__exit__ |-> (branch_block_stmt_2354__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dataTx%data%dat_store_4%
    //  file .Aa/sdhc.opt.aa, line 839
    // constant-object-declarations for block %dataTx%data%dat_store_4
    //  file .Aa/sdhc.opt.aa, line 835
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 863
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 878
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 893
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 908
    // constant-object-declarations for block %dataTx%data%senddata
    //  file .Aa/sdhc.opt.aa, line 922
    // constant-object-declarations for block %dataTx%data%dat_store%
    //  file .Aa/sdhc.opt.aa, line 933
    // constant-object-declarations for block %dataTx%data%dat_store
    //  file .Aa/sdhc.opt.aa, line 931
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 947
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 965
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 977
    // constant-object-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 999
    // constant-object-declarations for block %dataTx%data
    //  file .Aa/sdhc.opt.aa, line 832
    // constant-object-declarations for block %dataTx
    //  file .Aa/sdhc.opt.aa, line 827
    // constant-declarations for block %dataTx%data
    //  file .Aa/sdhc.opt.aa, line 832
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 834
    // sdhcRegisters[40 ]
    $constant $W[array_obj_ref_2357_word_address_0] : $pointer<memory_space_8> := _b0101000
    // 1 
    $constant $W[konst_2358_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %dataTx%data%dat_store_4
    //  file .Aa/sdhc.opt.aa, line 835
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 837
    // 512 
    $constant $W[konst_2465_wire_constant] : $int<10> := _b1000000000// 512
    // constant-declarations for block %dataTx%data%dat_store_4%
    //  file .Aa/sdhc.opt.aa, line 839
    // constant-declarations for phi:  				$phi i := 				  ($bitcast ($uint<10>) 0  ) $on   $entry 				  next_i $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 840
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_2367_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  				$phi dat0 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 842
    // ($bitcast ($uint<1024>) 0  )
    $constant $W[type_cast_2372_wire_constant] : $int<1024> := _b
    // constant-declarations for phi:  				$phi dat1 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 844
    // ($bitcast ($uint<1024>) 0  )
    $constant $W[type_cast_2377_wire_constant] : $int<1024> := _b
    // constant-declarations for phi:  				$phi dat2 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 846
    // ($bitcast ($uint<1024>) 0  )
    $constant $W[type_cast_2382_wire_constant] : $int<1024> := _b
    // constant-declarations for phi:  				$phi dat3 := 				  next_data3 $on   $loopback 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 848
    // ($bitcast ($uint<1024>) 0  )
    $constant $W[type_cast_2387_wire_constant] : $int<1024> := _b
    // 2 
    $constant $W[konst_2394_wire_constant] : $int<1024> := _b
    // ($bitcast ($uint<1022>) 0  )
    $constant $W[type_cast_2398_wire_constant] : $int<1022> := _b
    // 7 
    $constant $W[konst_2400_wire_constant] : $int<8> := _b00000111// 7
    // 3 
    $constant $W[konst_2405_wire_constant] : $int<8> := _b00000011// 3
    // 2 
    $constant $W[konst_2412_wire_constant] : $int<1024> := _b
    // ($bitcast ($uint<1022>) 0  )
    $constant $W[type_cast_2415_wire_constant] : $int<1022> := _b
    // 6 
    $constant $W[konst_2417_wire_constant] : $int<8> := _b00000110// 6
    // 2 
    $constant $W[konst_2421_wire_constant] : $int<8> := _b00000010// 2
    // 2 
    $constant $W[konst_2428_wire_constant] : $int<1024> := _b
    // ($bitcast ($uint<1022>) 0  )
    $constant $W[type_cast_2431_wire_constant] : $int<1022> := _b
    // 5 
    $constant $W[konst_2433_wire_constant] : $int<8> := _b00000101// 5
    // 1 
    $constant $W[konst_2437_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_2444_wire_constant] : $int<1024> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010// 2
    // ($bitcast ($uint<1022>) 0  )
    $constant $W[type_cast_2447_wire_constant] : $int<1022> := _b
    // 4 
    $constant $W[konst_2449_wire_constant] : $int<8> := _b00000100// 4
    // 0 
    $constant $W[konst_2453_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_2460_wire_constant] : $int<10> := _b0000000001// 1
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_2470_wire_constant] : $int<10> := _b0000000000// 0
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_2468_word_address_0] : $pointer<memory_space_9> := _b0
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 861
    // 1024 
    $constant $W[konst_2534_wire_constant] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 863
    // constant-declarations for phi:  			$phi j_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 864
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2478_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_DAT0 := 			  nextCRC16_DAT0 $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 866
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2482_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempDataD0 := 			  nextTempDataD0 $on   $loopback 			  dat0 $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 868
    // 1023 
    $constant $W[konst_2491_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_2494_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_2502_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_2511_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_2524_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_2529_wire_constant] : $int<11> := _b00000000001// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 876
    // 1024 
    $constant $W[konst_2598_wire_constant] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 878
    // constant-declarations for phi:  			$phi j_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 879
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2541_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_DAT1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 881
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2546_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempDataD1 := 			  dat1 $on   $entry 			  nextTempDataD1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 883
    // 1023 
    $constant $W[konst_2555_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_2558_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_2566_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_2575_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_2588_wire_constant] : $int<1024> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001// 1
    // 1 
    $constant $W[konst_2593_wire_constant] : $int<11> := _b00000000001// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 891
    // 1024 
    $constant $W[konst_2662_wire_constant] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 893
    // constant-declarations for phi:  			$phi j_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 894
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2605_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_DAT2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 896
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2610_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempDataD2 := 			  dat2 $on   $entry 			  nextTempDataD2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 898
    // 1023 
    $constant $W[konst_2619_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_2622_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_2630_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_2639_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_2652_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_2657_wire_constant] : $int<11> := _b00000000001// 1
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 906
    // 1024 
    $constant $W[konst_2726_wire_constant] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 908
    // constant-declarations for phi:  			$phi j_3 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_3 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 909
    // ($bitcast ($uint<11>) 0  )
    $constant $W[type_cast_2669_wire_constant] : $int<11> := _b00000000000// 0
    // constant-declarations for phi:  			$phi CRC_16_DAT3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 911
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2674_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi tempDataD3 := 			  dat3 $on   $entry 			  nextTempDataD3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 913
    // 1023 
    $constant $W[konst_2683_wire_constant] : $int<1024> := _b
    // 15 
    $constant $W[konst_2686_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_2694_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_2703_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_2716_wire_constant] : $int<1024> := _b
    // 1 
    $constant $W[konst_2721_wire_constant] : $int<11> := _b00000000001// 1
    // ONE_1
    $constant $W[R_ONE_1_2729_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %dataTx%data%senddata
    //  file .Aa/sdhc.opt.aa, line 922
    // 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
    //  file .Aa/sdhc.opt.aa, line 924
    // 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
    //  file .Aa/sdhc.opt.aa, line 925
    // 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
    //  file .Aa/sdhc.opt.aa, line 926
    // 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
    //  file .Aa/sdhc.opt.aa, line 927
    // ZERO_1
    $constant $W[R_ZERO_1_2746_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %dataTx%data%dat_store
    //  file .Aa/sdhc.opt.aa, line 931
    // constant-declarations for block %dataTx%data%dat_store%
    //  file .Aa/sdhc.opt.aa, line 933
    // constant-declarations for phi:  					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 934
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_2754_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 936
    // ($bitcast ($uint<4096>) 0  )
    $constant $W[type_cast_2759_wire_constant] : $int<4096> := _b
    // 8 
    $constant $W[konst_2764_wire_constant] : $int<4096> := _b
    // ($bitcast ($uint<4088>) 0  )
    $constant $W[type_cast_2767_wire_constant] : $int<4088> := _b
    // 1 
    $constant $W[konst_2774_wire_constant] : $int<10> := _b0000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 512 
    $constant $W[konst_2779_wire_constant] : $int<10> := _b1000000000// 512
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_2786_wire_constant] : $int<10> := _b0000000000// 0
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_2784_word_address_0] : $pointer<memory_space_9> := _b0
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 947
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 948
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_2792_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 950
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_2797_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 952
    // 4095 
    $constant $W[konst_2806_wire_constant] : $int<4096> := _b
    // 15 
    $constant $W[konst_2809_wire_constant] : $int<16> := _b0000000000001111// 15
    // 11 
    $constant $W[konst_2817_wire_constant] : $int<16> := _b0000000000001011// 11
    // 4 
    $constant $W[konst_2826_wire_constant] : $int<16> := _b0000000000000100// 4
    // 1 
    $constant $W[konst_2839_wire_constant] : $int<4096> := _b
    // 1 
    $constant $W[konst_2844_wire_constant] : $int<13> := _b0000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4096 
    $constant $W[konst_2849_wire_constant] : $int<13> := _b1000000000000// 4096
    // ONE_1
    $constant $W[R_ONE_1_2858_wire_constant] : $int<1> := _b1// 1
    // ZERO_1
    $constant $W[R_ZERO_1_2861_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 965
    // constant-declarations for phi:  				$phi K := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_K $on   dataloop 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 966
    // ($bitcast ($uint<13>) 0  )
    $constant $W[type_cast_2867_wire_constant] : $int<13> := _b0000000000000// 0
    // constant-declarations for phi:  				$phi dat0bit := 				  dat $on   $entry 				  nextbit $on   dataloop 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 968
    // 4095 
    $constant $W[konst_2876_wire_constant] : $int<4096> := _b
    // 1 
    $constant $W[konst_2881_wire_constant] : $int<4096> := _b
    // 1 
    $constant $W[konst_2886_wire_constant] : $int<13> := _b0000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4096 
    $constant $W[konst_2891_wire_constant] : $int<13> := _b1000000000000// 4096
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 977
    // constant-declarations for phi:  				$phi L := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_L $on   crcloop 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 978
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_2899_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for phi:  				$phi dat0crc := 				  nextCRC16 $on   $entry 				  nextbitcrc $on   crcloop 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 980
    // 15 
    $constant $W[konst_2908_wire_constant] : $int<16> := _b0000000000001111// 15
    // 1 
    $constant $W[konst_2913_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_2918_wire_constant] : $int<5> := _b00001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 16 
    $constant $W[konst_2923_wire_constant] : $int<5> := _b10000// 16
    // ONE_1
    $constant $W[R_ONE_1_2928_wire_constant] : $int<1> := _b1// 1
    // ZERO_1
    $constant $W[R_ZERO_1_2931_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_2935_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_2940_wire_constant] : $int<16> := _b0000000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_2945_wire_constant] : $int<1> := _b1// 1
    // sdhcRegisters[37 ]
    $constant $W[array_obj_ref_2949_word_address_0] : $pointer<memory_space_8> := _b0100101
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_2953_word_address_0] : $pointer<memory_space_8> := _b0100100
    // _hfe 
    $constant $W[konst_2958_wire_constant] : $int<8> := _b11111110// 254
    // sdhcRegisters[37 ]
    $constant $W[array_obj_ref_2956_word_address_0] : $pointer<memory_space_8> := _b0100101
    // constant-declarations for block %dataTx%data%
    //  file .Aa/sdhc.opt.aa, line 999
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // ZERO_1
    $constant $W[R_ZERO_1_2968_wire_constant] : $int<1> := _b0// 0
    // ZERO_1
    $constant $W[R_ZERO_1_2973_wire_constant] : $int<1> := _b0// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_2977_wire_constant] : $int<1> := _b1// 1
    // _hf9 
    $constant $W[konst_2982_wire_constant] : $int<8> := _b11111001// 249
    // sdhcRegisters[36 ]
    $constant $W[array_obj_ref_2980_word_address_0] : $pointer<memory_space_8> := _b0100100
    // 			transferComplete := (ZERO_8 | _h02 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1008
    // block %dataTx%data
    //  file .Aa/sdhc.opt.aa, line 832
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 834
    // sdhcRegisters[40 ]
    $W[array_obj_ref_2357_data_0] : $int<8>
    $W[array_obj_ref_2357_wire] : $int<8>
    // (sdhcRegisters[40 ] [] 1 )
    $intermediate $W[BITSEL_u8_u1_2359_wire] : $int<1>
    // block %dataTx%data%dat_store_4
    //  file .Aa/sdhc.opt.aa, line 835
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 837
    // (next_i < 512 )
    $intermediate $W[ULT_u10_u1_2466_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 839
    // 				$phi i := 				  ($bitcast ($uint<10>) 0  ) $on   $entry 				  next_i $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 840
    $W[next_i_2462_2365_buffered] : $int<10>
    // i
    $W[i_2363] : $int<10>
    // 				$phi dat0 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 842
    $W[next_data0_2457_2370_buffered] : $int<1024>
    // dat0
    $W[dat0_2368] : $int<1024>
    // 				$phi dat1 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 844
    $W[next_data1_2441_2375_buffered] : $int<1024>
    // dat1
    $W[dat1_2373] : $int<1024>
    // 				$phi dat2 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 846
    $W[next_data2_2425_2380_buffered] : $int<1024>
    // dat2
    $W[dat2_2378] : $int<1024>
    // 				$phi dat3 := 				  next_data3 $on   $loopback 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 848
    $W[next_data3_2409_2385_buffered] : $int<1024>
    // dat3
    $W[dat3_2383] : $int<1024>
    // 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 851
    // tempBuffer
    $W[tempBuffer_2391] : $int<8>
    // 				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 852
    // (dat3 << 2 )
    $intermediate $W[SHL_u1024_u1024_2395_wire] : $int<1024>
    // (tempBuffer [] 7 )
    $intermediate $W[BITSEL_u8_u1_2401_wire] : $int<1>
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 ))
    $intermediate $W[CONCAT_u1022_u1023_2402_wire] : $int<1023>
    // (tempBuffer [] 3 )
    $intermediate $W[BITSEL_u8_u1_2406_wire] : $int<1>
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))
    $intermediate $W[CONCAT_u1023_u1024_2407_wire] : $int<1024>
    // next_data3
    $W[next_data3_2409] : $int<1024>
    // 				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 853
    // (dat2 << 2 )
    $intermediate $W[SHL_u1024_u1024_2413_wire] : $int<1024>
    // (tempBuffer [] 6 )
    $intermediate $W[BITSEL_u8_u1_2418_wire] : $int<1>
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 ))
    $intermediate $W[CONCAT_u1022_u1023_2419_wire] : $int<1023>
    // (tempBuffer [] 2 )
    $intermediate $W[BITSEL_u8_u1_2422_wire] : $int<1>
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))
    $intermediate $W[CONCAT_u1023_u1024_2423_wire] : $int<1024>
    // next_data2
    $W[next_data2_2425] : $int<1024>
    // 				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 854
    // (dat1 << 2 )
    $intermediate $W[SHL_u1024_u1024_2429_wire] : $int<1024>
    // (tempBuffer [] 5 )
    $intermediate $W[BITSEL_u8_u1_2434_wire] : $int<1>
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 ))
    $intermediate $W[CONCAT_u1022_u1023_2435_wire] : $int<1023>
    // (tempBuffer [] 1 )
    $intermediate $W[BITSEL_u8_u1_2438_wire] : $int<1>
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))
    $intermediate $W[CONCAT_u1023_u1024_2439_wire] : $int<1024>
    // next_data1
    $W[next_data1_2441] : $int<1024>
    // 				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 855
    // (dat0 << 2 )
    $intermediate $W[SHL_u1024_u1024_2445_wire] : $int<1024>
    // (tempBuffer [] 4 )
    $intermediate $W[BITSEL_u8_u1_2450_wire] : $int<1>
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 ))
    $intermediate $W[CONCAT_u1022_u1023_2451_wire] : $int<1023>
    // (tempBuffer [] 0 )
    $intermediate $W[BITSEL_u8_u1_2454_wire] : $int<1>
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))
    $intermediate $W[CONCAT_u1023_u1024_2455_wire] : $int<1024>
    // next_data0
    $W[next_data0_2457] : $int<1024>
    // 				$volatile next_i := (i + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 856
    // next_i
    $W[next_i_2462] : $int<10>
    // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 860
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_2468_word_address_0] : $pointer<memory_space_9> := _b0
    $W[STORE_txBufferPointer_2468_data_0] : $int<10>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 861
    // (next_j_0 < 1024 )
    $intermediate $W[ULT_u11_u1_2535_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 863
    // 			$phi j_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 864
    $W[next_j_0_2531_2476_buffered] : $int<11>
    // j_0
    $W[j_0_2474] : $int<11>
    // 			$phi CRC_16_DAT0 := 			  nextCRC16_DAT0 $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 866
    $W[nextCRC16_DAT0_2521_2483_buffered] : $int<16>
    // CRC_16_DAT0
    $W[CRC_16_DAT0_2479] : $int<16>
    // 			$phi tempDataD0 := 			  nextTempDataD0 $on   $loopback 			  dat0 $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 868
    $W[nextTempDataD0_2526_2486_buffered] : $int<1024>
    $W[next_data0_2457_2487_buffered] : $int<1024>
    // tempDataD0
    $W[tempDataD0_2484] : $int<1024>
    // 			$volatile invd0 := ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 871
    // (tempDataD0 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_2492_wire] : $int<1>
    // (CRC_16_DAT0 [] 15 )
    $intermediate $W[BITSEL_u16_u1_2495_wire] : $int<1>
    // invd0
    $W[invd0_2497] : $int<1>
    // 			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 872
    // ( $slice CRC_16_DAT0 14 12 ) 
    $intermediate $W[slice_2500_wire] : $int<3>
    // (CRC_16_DAT0 [] 11 )
    $intermediate $W[BITSEL_u16_u1_2503_wire] : $int<1>
    // ((CRC_16_DAT0 [] 11 ) ^ invd0)
    $intermediate $W[XOR_u1_u1_2505_wire] : $int<1>
    // (( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0))
    $intermediate $W[CONCAT_u3_u4_2506_wire] : $int<4>
    // ( $slice CRC_16_DAT0 10 5 ) 
    $intermediate $W[slice_2508_wire] : $int<6>
    // ((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_2509_wire] : $int<10>
    // (CRC_16_DAT0 [] 4 )
    $intermediate $W[BITSEL_u16_u1_2512_wire] : $int<1>
    // ((CRC_16_DAT0 [] 4 ) ^ invd0)
    $intermediate $W[XOR_u1_u1_2514_wire] : $int<1>
    // ( $slice CRC_16_DAT0 3 0 ) 
    $intermediate $W[slice_2516_wire] : $int<4>
    // (((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_2517_wire] : $int<5>
    // ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)
    $intermediate $W[CONCAT_u5_u6_2519_wire] : $int<6>
    // nextCRC16_DAT0
    $W[nextCRC16_DAT0_2521] : $int<16>
    // 			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 873
    // nextTempDataD0
    $W[nextTempDataD0_2526] : $int<1024>
    // 			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 874
    // next_j_0
    $W[next_j_0_2531] : $int<11>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 876
    // (next_j_1 < 1024 )
    $intermediate $W[ULT_u11_u1_2599_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 878
    // 			$phi j_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 879
    $W[next_j_1_2595_2542_buffered] : $int<11>
    // j_1
    $W[j_1_2538] : $int<11>
    // 			$phi CRC_16_DAT1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 881
    $W[nextCRC16_DAT1_2585_2547_buffered] : $int<16>
    // CRC_16_DAT1
    $W[CRC_16_DAT1_2543] : $int<16>
    // 			$phi tempDataD1 := 			  dat1 $on   $entry 			  nextTempDataD1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 883
    $W[next_data1_2441_2550_buffered] : $int<1024>
    $W[nextTempDataD1_2590_2551_buffered] : $int<1024>
    // tempDataD1
    $W[tempDataD1_2548] : $int<1024>
    // 			$volatile invd1 := ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 886
    // (tempDataD1 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_2556_wire] : $int<1>
    // (CRC_16_DAT1 [] 15 )
    $intermediate $W[BITSEL_u16_u1_2559_wire] : $int<1>
    // invd1
    $W[invd1_2561] : $int<1>
    // 			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 887
    // ( $slice CRC_16_DAT1 14 12 ) 
    $intermediate $W[slice_2564_wire] : $int<3>
    // (CRC_16_DAT1 [] 11 )
    $intermediate $W[BITSEL_u16_u1_2567_wire] : $int<1>
    // ((CRC_16_DAT1 [] 11 ) ^ invd1)
    $intermediate $W[XOR_u1_u1_2569_wire] : $int<1>
    // (( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1))
    $intermediate $W[CONCAT_u3_u4_2570_wire] : $int<4>
    // ( $slice CRC_16_DAT1 10 5 ) 
    $intermediate $W[slice_2572_wire] : $int<6>
    // ((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_2573_wire] : $int<10>
    // (CRC_16_DAT1 [] 4 )
    $intermediate $W[BITSEL_u16_u1_2576_wire] : $int<1>
    // ((CRC_16_DAT1 [] 4 ) ^ invd1)
    $intermediate $W[XOR_u1_u1_2578_wire] : $int<1>
    // ( $slice CRC_16_DAT1 3 0 ) 
    $intermediate $W[slice_2580_wire] : $int<4>
    // (((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_2581_wire] : $int<5>
    // ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)
    $intermediate $W[CONCAT_u5_u6_2583_wire] : $int<6>
    // nextCRC16_DAT1
    $W[nextCRC16_DAT1_2585] : $int<16>
    // 			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 888
    // nextTempDataD1
    $W[nextTempDataD1_2590] : $int<1024>
    // 			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 889
    // next_j_1
    $W[next_j_1_2595] : $int<11>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 891
    // (next_j_2 < 1024 )
    $intermediate $W[ULT_u11_u1_2663_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 893
    // 			$phi j_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 894
    $W[next_j_2_2659_2606_buffered] : $int<11>
    // j_2
    $W[j_2_2602] : $int<11>
    // 			$phi CRC_16_DAT2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 896
    $W[nextCRC16_DAT2_2649_2611_buffered] : $int<16>
    // CRC_16_DAT2
    $W[CRC_16_DAT2_2607] : $int<16>
    // 			$phi tempDataD2 := 			  dat2 $on   $entry 			  nextTempDataD2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 898
    $W[next_data2_2425_2614_buffered] : $int<1024>
    $W[nextTempDataD2_2654_2615_buffered] : $int<1024>
    // tempDataD2
    $W[tempDataD2_2612] : $int<1024>
    // 			$volatile invd2 := ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 901
    // (tempDataD2 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_2620_wire] : $int<1>
    // (CRC_16_DAT2 [] 15 )
    $intermediate $W[BITSEL_u16_u1_2623_wire] : $int<1>
    // invd2
    $W[invd2_2625] : $int<1>
    // 			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 902
    // ( $slice CRC_16_DAT2 14 12 ) 
    $intermediate $W[slice_2628_wire] : $int<3>
    // (CRC_16_DAT2 [] 11 )
    $intermediate $W[BITSEL_u16_u1_2631_wire] : $int<1>
    // ((CRC_16_DAT2 [] 11 ) ^ invd2)
    $intermediate $W[XOR_u1_u1_2633_wire] : $int<1>
    // (( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2))
    $intermediate $W[CONCAT_u3_u4_2634_wire] : $int<4>
    // ( $slice CRC_16_DAT2 10 5 ) 
    $intermediate $W[slice_2636_wire] : $int<6>
    // ((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_2637_wire] : $int<10>
    // (CRC_16_DAT2 [] 4 )
    $intermediate $W[BITSEL_u16_u1_2640_wire] : $int<1>
    // ((CRC_16_DAT2 [] 4 ) ^ invd2)
    $intermediate $W[XOR_u1_u1_2642_wire] : $int<1>
    // ( $slice CRC_16_DAT2 3 0 ) 
    $intermediate $W[slice_2644_wire] : $int<4>
    // (((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_2645_wire] : $int<5>
    // ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)
    $intermediate $W[CONCAT_u5_u6_2647_wire] : $int<6>
    // nextCRC16_DAT2
    $W[nextCRC16_DAT2_2649] : $int<16>
    // 			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 903
    // nextTempDataD2
    $W[nextTempDataD2_2654] : $int<1024>
    // 			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 904
    // next_j_2
    $W[next_j_2_2659] : $int<11>
    // do-while statement  
    //  file .Aa/sdhc.opt.aa, line 906
    // (next_j_3 < 1024 )
    $intermediate $W[ULT_u11_u1_2727_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 908
    // 			$phi j_3 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_3 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 909
    $W[next_j_3_2723_2670_buffered] : $int<11>
    // j_3
    $W[j_3_2666] : $int<11>
    // 			$phi CRC_16_DAT3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 911
    $W[nextCRC16_DAT3_2713_2675_buffered] : $int<16>
    // CRC_16_DAT3
    $W[CRC_16_DAT3_2671] : $int<16>
    // 			$phi tempDataD3 := 			  dat3 $on   $entry 			  nextTempDataD3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 913
    $W[next_data3_2409_2678_buffered] : $int<1024>
    $W[nextTempDataD3_2718_2679_buffered] : $int<1024>
    // tempDataD3
    $W[tempDataD3_2676] : $int<1024>
    // 			$volatile invd3 := ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 916
    // (tempDataD3 [] 1023 )
    $intermediate $W[BITSEL_u1024_u1_2684_wire] : $int<1>
    // (CRC_16_DAT3 [] 15 )
    $intermediate $W[BITSEL_u16_u1_2687_wire] : $int<1>
    // invd3
    $W[invd3_2689] : $int<1>
    // 			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 917
    // ( $slice CRC_16_DAT3 14 12 ) 
    $intermediate $W[slice_2692_wire] : $int<3>
    // (CRC_16_DAT3 [] 11 )
    $intermediate $W[BITSEL_u16_u1_2695_wire] : $int<1>
    // ((CRC_16_DAT3 [] 11 ) ^ invd3)
    $intermediate $W[XOR_u1_u1_2697_wire] : $int<1>
    // (( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3))
    $intermediate $W[CONCAT_u3_u4_2698_wire] : $int<4>
    // ( $slice CRC_16_DAT3 10 5 ) 
    $intermediate $W[slice_2700_wire] : $int<6>
    // ((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_2701_wire] : $int<10>
    // (CRC_16_DAT3 [] 4 )
    $intermediate $W[BITSEL_u16_u1_2704_wire] : $int<1>
    // ((CRC_16_DAT3 [] 4 ) ^ invd3)
    $intermediate $W[XOR_u1_u1_2706_wire] : $int<1>
    // ( $slice CRC_16_DAT3 3 0 ) 
    $intermediate $W[slice_2708_wire] : $int<4>
    // (((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_2709_wire] : $int<5>
    // ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)
    $intermediate $W[CONCAT_u5_u6_2711_wire] : $int<6>
    // nextCRC16_DAT3
    $W[nextCRC16_DAT3_2713] : $int<16>
    // 			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 918
    // nextTempDataD3
    $W[nextTempDataD3_2718] : $int<1024>
    // 			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 919
    // next_j_3
    $W[next_j_3_2723] : $int<11>
    // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 921
    // oe
    // block %dataTx%data%senddata
    //  file .Aa/sdhc.opt.aa, line 922
    // 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
    //  file .Aa/sdhc.opt.aa, line 924
    // 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
    //  file .Aa/sdhc.opt.aa, line 925
    // 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
    //  file .Aa/sdhc.opt.aa, line 926
    // 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
    //  file .Aa/sdhc.opt.aa, line 927
    // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 929
    // oe
    // block %dataTx%data%dat_store
    //  file .Aa/sdhc.opt.aa, line 931
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 933
    // 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 934
    $W[next_I_2776_2755_buffered] : $int<10>
    // I
    $W[I_2751] : $int<10>
    // 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 936
    $W[next_data_2771_2760_buffered] : $int<4096>
    // dat
    $W[dat_2756] : $int<4096>
    // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx)) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 939
    // (dat << 8 )
    $intermediate $W[SHL_u4096_u4096_2765_wire] : $int<4096>
    // dataBufferTx
    $W[RPIPE_dataBufferTx_2768_wire] : $int<8>
    // (($bitcast ($uint<4088>) 0  ) && dataBufferTx)
    $intermediate $W[CONCAT_u4088_u4096_2769_wire] : $int<4096>
    // next_data
    $W[next_data_2771] : $int<4096>
    // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 940
    // next_I
    $W[next_I_2776] : $int<10>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 512 )
    $intermediate $W[ULT_u10_u1_2780_wire] : $int<1>
    // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 946
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_2784_word_address_0] : $pointer<memory_space_9> := _b0
    $W[STORE_txBufferPointer_2784_data_0] : $int<10>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 947
    // 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 948
    $W[next_J_2846_2793_buffered] : $int<13>
    // J
    $W[J_2789] : $int<13>
    // 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 950
    $W[nextCRC16_2836_2798_buffered] : $int<16>
    // CRC_16
    $W[CRC_16_2794] : $int<16>
    // 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 952
    $W[next_data_2771_2801_buffered] : $int<4096>
    $W[nextTempData_2841_2802_buffered] : $int<4096>
    // tempData
    $W[tempData_2799] : $int<4096>
    // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 955
    // (tempData [] 4095 )
    $intermediate $W[BITSEL_u4096_u1_2807_wire] : $int<1>
    // (CRC_16 [] 15 )
    $intermediate $W[BITSEL_u16_u1_2810_wire] : $int<1>
    // inv
    $W[inv_2812] : $int<1>
    // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 956
    // ( $slice CRC_16 14 12 ) 
    $intermediate $W[slice_2815_wire] : $int<3>
    // (CRC_16 [] 11 )
    $intermediate $W[BITSEL_u16_u1_2818_wire] : $int<1>
    // ((CRC_16 [] 11 ) ^ inv)
    $intermediate $W[XOR_u1_u1_2820_wire] : $int<1>
    // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
    $intermediate $W[CONCAT_u3_u4_2821_wire] : $int<4>
    // ( $slice CRC_16 10 5 ) 
    $intermediate $W[slice_2823_wire] : $int<6>
    // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
    $intermediate $W[CONCAT_u4_u10_2824_wire] : $int<10>
    // (CRC_16 [] 4 )
    $intermediate $W[BITSEL_u16_u1_2827_wire] : $int<1>
    // ((CRC_16 [] 4 ) ^ inv)
    $intermediate $W[XOR_u1_u1_2829_wire] : $int<1>
    // ( $slice CRC_16 3 0 ) 
    $intermediate $W[slice_2831_wire] : $int<4>
    // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
    $intermediate $W[CONCAT_u1_u5_2832_wire] : $int<5>
    // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
    $intermediate $W[CONCAT_u5_u6_2834_wire] : $int<6>
    // nextCRC16
    $W[nextCRC16_2836] : $int<16>
    // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 957
    // nextTempData
    $W[nextTempData_2841] : $int<4096>
    // 			$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 958
    // next_J
    $W[next_J_2846] : $int<13>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_J < 4096 )
    $intermediate $W[ULT_u13_u1_2850_wire] : $int<1>
    // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 963
    // oe
    // 			DAT0Tx := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 964
    // DAT0Tx
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 965
    // 				$phi K := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_K $on   dataloop 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 966
    $W[next_K_2888_2868_buffered] : $int<13>
    // K
    $W[K_2864] : $int<13>
    // 				$phi dat0bit := 				  dat $on   $entry 				  nextbit $on   dataloop 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 968
    $W[next_data_2771_2871_buffered] : $int<4096>
    $W[nextbit_2883_2872_buffered] : $int<4096>
    // dat0bit
    $W[dat0bit_2869] : $int<4096>
    // 			DAT0Tx := (dat0bit [] 4095 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 971
    // (dat0bit [] 4095 )
    $intermediate $W[BITSEL_u4096_u1_2877_wire] : $int<1>
    // DAT0Tx
    // 			nextbit := (dat0bit << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 972
    // nextbit
    $W[nextbit_2883] : $int<4096>
    // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 13. 
    //  file .Aa/sdhc.opt.aa, line 973
    // next_K
    $W[next_K_2888] : $int<13>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_K < 4096 )
    $intermediate $W[ULT_u13_u1_2892_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 977
    // 				$phi L := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_L $on   crcloop 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 978
    $W[next_L_2920_2900_buffered] : $int<5>
    // L
    $W[L_2896] : $int<5>
    // 				$phi dat0crc := 				  nextCRC16 $on   $entry 				  nextbitcrc $on   crcloop 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 980
    $W[nextCRC16_2836_2903_buffered] : $int<16>
    $W[nextbitcrc_2915_2904_buffered] : $int<16>
    // dat0crc
    $W[dat0crc_2901] : $int<16>
    // 			DAT0Tx := (dat0crc [] 15 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 983
    // (dat0crc [] 15 )
    $intermediate $W[BITSEL_u16_u1_2909_wire] : $int<1>
    // DAT0Tx
    // 			nextbitcrc := (dat0crc << 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 984
    // nextbitcrc
    $W[nextbitcrc_2915] : $int<16>
    // 			next_L := (L + 1 ) $buffering 1// bits of buffering = 5. 
    //  file .Aa/sdhc.opt.aa, line 985
    // next_L
    $W[next_L_2920] : $int<5>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_L < 16 )
    $intermediate $W[ULT_u5_u1_2924_wire] : $int<1>
    // 			DAT0Tx := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 989
    // DAT0Tx
    // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 990
    // oe
    // 		busy := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 992
    // busy
    // 		$guard (blockCountEnable) blockCountNext := (blockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 993
    // blockCountNext
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (lastBlock == 1 )
    $intermediate $W[EQ_u1_u1_2946_wire] : $int<1>
    // 			presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 995
    // sdhcRegisters[37 ]
    $W[array_obj_ref_2949_data_0] : $int<8>
    // presentState1Var
    $W[presentState1Var_2950] : $int<8>
    // 			presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 996
    // sdhcRegisters[36 ]
    $W[array_obj_ref_2953_data_0] : $int<8>
    // presentState0Var
    $W[presentState0Var_2954] : $int<8>
    // 			sdhcRegisters[37 ] := (presentState1Var & _hfe ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 997
    // (presentState1Var & _hfe )
    $intermediate $W[AND_u8_u8_2959_wire] : $int<8>
    // sdhcRegisters[37 ]
    $W[array_obj_ref_2956_data_0] : $int<8>
    // 		wait := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1001
    // wait
    $W[wait_2965] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (wait == ZERO_1)
    $intermediate $W[EQ_u1_u1_2969_wire] : $int<1>
    // 		busy := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1005
    // busy
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (lastBlock == 1 )
    $intermediate $W[EQ_u1_u1_2978_wire] : $int<1>
    // 			sdhcRegisters[36 ] := (presentState0Var & _hf9 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1007
    // (presentState0Var & _hf9 )
    $intermediate $W[AND_u8_u8_2983_wire] : $int<8>
    // sdhcRegisters[36 ]
    $W[array_obj_ref_2980_data_0] : $int<8>
    // datapath-instances for block %dataTx%data
    //  file .Aa/sdhc.opt.aa, line 832
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 834
    // sdhcRegisters[40 ]
    $load [array_obj_ref_2357_load_0] $from memory_space_8 (array_obj_ref_2357_word_address_0) (array_obj_ref_2357_data_0) 
    $delay array_obj_ref_2357_load_0 5
    &/ [array_obj_ref_2357_gather_scatter] (array_obj_ref_2357_data_0) (array_obj_ref_2357_wire) 
    $flowthrough 
    // (sdhcRegisters[40 ] [] 1 )
    [][BITSEL_u8_u1_2359_inst] (array_obj_ref_2357_wire konst_2358_wire_constant) (BITSEL_u8_u1_2359_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2359_inst 0
    ==0? [if_stmt_2355_branch] (BITSEL_u8_u1_2359_wire)
    // datapath-instances for block %dataTx%data%dat_store_4
    //  file .Aa/sdhc.opt.aa, line 835
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 837
    // (next_i < 512 )
    <[ULT_u10_u1_2466_inst] (next_i_2462 konst_2465_wire_constant) (ULT_u10_u1_2466_wire)   $flowthrough 
    $delay ULT_u10_u1_2466_inst 0
    ==0? [do_while_stmt_2361_branch] (ULT_u10_u1_2466_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 839
    // 				$phi i := 				  ($bitcast ($uint<10>) 0  ) $on   $entry 				  next_i $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 840
    # := [next_i_2462_2365_buf] (next_i_2462) (next_i_2462_2365_buffered)     $fullrate
    $buffering $out next_i_2462_2365_buf next_i_2462_2365_buffered  1
    # $phi [phi_stmt_2363] (next_i_2462_2365_buffered type_cast_2367_wire_constant) ( i_2363 ) $fullrate
    // $buffering  $out phi_stmt_2363 i_2363 2
    // 				$phi dat0 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data0 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 842
    # := [next_data0_2457_2370_buf] (next_data0_2457) (next_data0_2457_2370_buffered)     $fullrate
    $buffering $out next_data0_2457_2370_buf next_data0_2457_2370_buffered  1
    # $phi [phi_stmt_2368] (next_data0_2457_2370_buffered type_cast_2372_wire_constant) ( dat0_2368 ) $fullrate
    // $buffering  $out phi_stmt_2368 dat0_2368 2
    // 				$phi dat1 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 844
    # := [next_data1_2441_2375_buf] (next_data1_2441) (next_data1_2441_2375_buffered)     $fullrate
    $buffering $out next_data1_2441_2375_buf next_data1_2441_2375_buffered  1
    # $phi [phi_stmt_2373] (next_data1_2441_2375_buffered type_cast_2377_wire_constant) ( dat1_2373 ) $fullrate
    // $buffering  $out phi_stmt_2373 dat1_2373 2
    // 				$phi dat2 := 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 				  next_data2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 846
    # := [next_data2_2425_2380_buf] (next_data2_2425) (next_data2_2425_2380_buffered)     $fullrate
    $buffering $out next_data2_2425_2380_buf next_data2_2425_2380_buffered  1
    # $phi [phi_stmt_2378] (next_data2_2425_2380_buffered type_cast_2382_wire_constant) ( dat2_2378 ) $fullrate
    // $buffering  $out phi_stmt_2378 dat2_2378 2
    // 				$phi dat3 := 				  next_data3 $on   $loopback 				  ($bitcast ($uint<1024>) 0  ) $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 848
    # := [next_data3_2409_2385_buf] (next_data3_2409) (next_data3_2409_2385_buffered)     $fullrate
    $buffering $out next_data3_2409_2385_buf next_data3_2409_2385_buffered  1
    # $phi [phi_stmt_2383] (next_data3_2409_2385_buffered type_cast_2387_wire_constant) ( dat3_2383 ) $fullrate
    // $buffering  $out phi_stmt_2383 dat3_2383 2
    // 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 851
    // dataBufferTx
    $ioport $in [RPIPE_dataBufferTx_2390_inst] (dataBufferTx) (tempBuffer_2391)  $fullrate 
    $buffering $out RPIPE_dataBufferTx_2390_inst tempBuffer_2391 1
    // 				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 852
    // (dat3 << 2 )
    <<[SHL_u1024_u1024_2395_inst] (dat3_2383 konst_2394_wire_constant) (SHL_u1024_u1024_2395_wire)   $flowthrough 
    $delay SHL_u1024_u1024_2395_inst 0
    // (tempBuffer [] 7 )
    [][BITSEL_u8_u1_2401_inst] (tempBuffer_2391 konst_2400_wire_constant) (BITSEL_u8_u1_2401_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2401_inst 0
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 ))
    &&[CONCAT_u1022_u1023_2402_inst] (type_cast_2398_wire_constant BITSEL_u8_u1_2401_wire) (CONCAT_u1022_u1023_2402_wire)   $flowthrough 
    $delay CONCAT_u1022_u1023_2402_inst 0
    // (tempBuffer [] 3 )
    [][BITSEL_u8_u1_2406_inst] (tempBuffer_2391 konst_2405_wire_constant) (BITSEL_u8_u1_2406_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2406_inst 0
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))
    &&[CONCAT_u1023_u1024_2407_inst] (CONCAT_u1022_u1023_2402_wire BITSEL_u8_u1_2406_wire) (CONCAT_u1023_u1024_2407_wire)   $flowthrough 
    $delay CONCAT_u1023_u1024_2407_inst 0
    // ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 )))
    |[OR_u1024_u1024_2408_inst] (SHL_u1024_u1024_2395_wire CONCAT_u1023_u1024_2407_wire) (next_data3_2409)   $flowthrough 
    $delay OR_u1024_u1024_2408_inst 0
    // 				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 853
    // (dat2 << 2 )
    <<[SHL_u1024_u1024_2413_inst] (dat2_2378 konst_2412_wire_constant) (SHL_u1024_u1024_2413_wire)   $flowthrough 
    $delay SHL_u1024_u1024_2413_inst 0
    // (tempBuffer [] 6 )
    [][BITSEL_u8_u1_2418_inst] (tempBuffer_2391 konst_2417_wire_constant) (BITSEL_u8_u1_2418_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2418_inst 0
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 ))
    &&[CONCAT_u1022_u1023_2419_inst] (type_cast_2415_wire_constant BITSEL_u8_u1_2418_wire) (CONCAT_u1022_u1023_2419_wire)   $flowthrough 
    $delay CONCAT_u1022_u1023_2419_inst 0
    // (tempBuffer [] 2 )
    [][BITSEL_u8_u1_2422_inst] (tempBuffer_2391 konst_2421_wire_constant) (BITSEL_u8_u1_2422_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2422_inst 0
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))
    &&[CONCAT_u1023_u1024_2423_inst] (CONCAT_u1022_u1023_2419_wire BITSEL_u8_u1_2422_wire) (CONCAT_u1023_u1024_2423_wire)   $flowthrough 
    $delay CONCAT_u1023_u1024_2423_inst 0
    // ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 )))
    |[OR_u1024_u1024_2424_inst] (SHL_u1024_u1024_2413_wire CONCAT_u1023_u1024_2423_wire) (next_data2_2425)   $flowthrough 
    $delay OR_u1024_u1024_2424_inst 0
    // 				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 854
    // (dat1 << 2 )
    <<[SHL_u1024_u1024_2429_inst] (dat1_2373 konst_2428_wire_constant) (SHL_u1024_u1024_2429_wire)   $flowthrough 
    $delay SHL_u1024_u1024_2429_inst 0
    // (tempBuffer [] 5 )
    [][BITSEL_u8_u1_2434_inst] (tempBuffer_2391 konst_2433_wire_constant) (BITSEL_u8_u1_2434_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2434_inst 0
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 ))
    &&[CONCAT_u1022_u1023_2435_inst] (type_cast_2431_wire_constant BITSEL_u8_u1_2434_wire) (CONCAT_u1022_u1023_2435_wire)   $flowthrough 
    $delay CONCAT_u1022_u1023_2435_inst 0
    // (tempBuffer [] 1 )
    [][BITSEL_u8_u1_2438_inst] (tempBuffer_2391 konst_2437_wire_constant) (BITSEL_u8_u1_2438_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2438_inst 0
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))
    &&[CONCAT_u1023_u1024_2439_inst] (CONCAT_u1022_u1023_2435_wire BITSEL_u8_u1_2438_wire) (CONCAT_u1023_u1024_2439_wire)   $flowthrough 
    $delay CONCAT_u1023_u1024_2439_inst 0
    // ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 )))
    |[OR_u1024_u1024_2440_inst] (SHL_u1024_u1024_2429_wire CONCAT_u1023_u1024_2439_wire) (next_data1_2441)   $flowthrough 
    $delay OR_u1024_u1024_2440_inst 0
    // 				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 855
    // (dat0 << 2 )
    <<[SHL_u1024_u1024_2445_inst] (dat0_2368 konst_2444_wire_constant) (SHL_u1024_u1024_2445_wire)   $flowthrough 
    $delay SHL_u1024_u1024_2445_inst 0
    // (tempBuffer [] 4 )
    [][BITSEL_u8_u1_2450_inst] (tempBuffer_2391 konst_2449_wire_constant) (BITSEL_u8_u1_2450_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2450_inst 0
    // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 ))
    &&[CONCAT_u1022_u1023_2451_inst] (type_cast_2447_wire_constant BITSEL_u8_u1_2450_wire) (CONCAT_u1022_u1023_2451_wire)   $flowthrough 
    $delay CONCAT_u1022_u1023_2451_inst 0
    // (tempBuffer [] 0 )
    [][BITSEL_u8_u1_2454_inst] (tempBuffer_2391 konst_2453_wire_constant) (BITSEL_u8_u1_2454_wire)   $flowthrough 
    $delay BITSEL_u8_u1_2454_inst 0
    // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))
    &&[CONCAT_u1023_u1024_2455_inst] (CONCAT_u1022_u1023_2451_wire BITSEL_u8_u1_2454_wire) (CONCAT_u1023_u1024_2455_wire)   $flowthrough 
    $delay CONCAT_u1023_u1024_2455_inst 0
    // ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 )))
    |[OR_u1024_u1024_2456_inst] (SHL_u1024_u1024_2445_wire CONCAT_u1023_u1024_2455_wire) (next_data0_2457)   $flowthrough 
    $delay OR_u1024_u1024_2456_inst 0
    // 				$volatile next_i := (i + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 856
    // (i + 1 )
    +[ADD_u10_u10_2461_inst] (i_2363 konst_2460_wire_constant) (next_i_2462)   $flowthrough 
    $delay ADD_u10_u10_2461_inst 0
    // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 860
    // txBufferPointer
    $store [STORE_txBufferPointer_2468_store_0] $to memory_space_9 (STORE_txBufferPointer_2468_word_address_0 STORE_txBufferPointer_2468_data_0) 
    $delay STORE_txBufferPointer_2468_store_0 5
    &/ [STORE_txBufferPointer_2468_gather_scatter] (type_cast_2470_wire_constant) (STORE_txBufferPointer_2468_data_0) 
    $flowthrough 
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 861
    // (next_j_0 < 1024 )
    <[ULT_u11_u1_2535_inst] (next_j_0_2531 konst_2534_wire_constant) (ULT_u11_u1_2535_wire)   $flowthrough 
    $delay ULT_u11_u1_2535_inst 0
    ==0? [do_while_stmt_2472_branch] (ULT_u11_u1_2535_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 863
    // 			$phi j_0 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_0 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 864
    # := [next_j_0_2531_2476_buf] (next_j_0_2531) (next_j_0_2531_2476_buffered)     $fullrate
    $buffering $out next_j_0_2531_2476_buf next_j_0_2531_2476_buffered  1
    # $phi [phi_stmt_2474] (next_j_0_2531_2476_buffered type_cast_2478_wire_constant) ( j_0_2474 ) $fullrate
    // $buffering  $out phi_stmt_2474 j_0_2474 2
    // 			$phi CRC_16_DAT0 := 			  nextCRC16_DAT0 $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 866
    # := [nextCRC16_DAT0_2521_2483_buf] (nextCRC16_DAT0_2521) (nextCRC16_DAT0_2521_2483_buffered)     $fullrate
    $buffering $out nextCRC16_DAT0_2521_2483_buf nextCRC16_DAT0_2521_2483_buffered  1
    # $phi [phi_stmt_2479] (type_cast_2482_wire_constant nextCRC16_DAT0_2521_2483_buffered) ( CRC_16_DAT0_2479 ) $fullrate
    // $buffering  $out phi_stmt_2479 CRC_16_DAT0_2479 2
    // 			$phi tempDataD0 := 			  nextTempDataD0 $on   $loopback 			  dat0 $on   $entry 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 868
    # := [nextTempDataD0_2526_2486_buf] (nextTempDataD0_2526) (nextTempDataD0_2526_2486_buffered)     $fullrate
    $buffering $out nextTempDataD0_2526_2486_buf nextTempDataD0_2526_2486_buffered  1
    # := [next_data0_2457_2487_buf] (next_data0_2457) (next_data0_2457_2487_buffered)     $fullrate
    $buffering $out next_data0_2457_2487_buf next_data0_2457_2487_buffered  1
    # $phi [phi_stmt_2484] (nextTempDataD0_2526_2486_buffered next_data0_2457_2487_buffered) ( tempDataD0_2484 ) $fullrate
    // $buffering  $out phi_stmt_2484 tempDataD0_2484 2
    // 			$volatile invd0 := ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 871
    // (tempDataD0 [] 1023 )
    [][BITSEL_u1024_u1_2492_inst] (tempDataD0_2484 konst_2491_wire_constant) (BITSEL_u1024_u1_2492_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_2492_inst 0
    // (CRC_16_DAT0 [] 15 )
    [][BITSEL_u16_u1_2495_inst] (CRC_16_DAT0_2479 konst_2494_wire_constant) (BITSEL_u16_u1_2495_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2495_inst 0
    // ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 ))
    ^[XOR_u1_u1_2496_inst] (BITSEL_u1024_u1_2492_wire BITSEL_u16_u1_2495_wire) (invd0_2497)   $flowthrough 
    $delay XOR_u1_u1_2496_inst 0
    // 			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 872
    // ( $slice CRC_16_DAT0 14 12 ) 
    [:] [slice_2500_inst] (CRC_16_DAT0_2479 14 12) (slice_2500_wire)  $flowthrough
    $delay slice_2500_inst 0
    // (CRC_16_DAT0 [] 11 )
    [][BITSEL_u16_u1_2503_inst] (CRC_16_DAT0_2479 konst_2502_wire_constant) (BITSEL_u16_u1_2503_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2503_inst 0
    // ((CRC_16_DAT0 [] 11 ) ^ invd0)
    ^[XOR_u1_u1_2505_inst] (BITSEL_u16_u1_2503_wire invd0_2497) (XOR_u1_u1_2505_wire)   $flowthrough 
    $delay XOR_u1_u1_2505_inst 0
    // (( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0))
    &&[CONCAT_u3_u4_2506_inst] (slice_2500_wire XOR_u1_u1_2505_wire) (CONCAT_u3_u4_2506_wire)   $flowthrough 
    $delay CONCAT_u3_u4_2506_inst 0
    // ( $slice CRC_16_DAT0 10 5 ) 
    [:] [slice_2508_inst] (CRC_16_DAT0_2479 10 5) (slice_2508_wire)  $flowthrough
    $delay slice_2508_inst 0
    // ((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) )
    &&[CONCAT_u4_u10_2509_inst] (CONCAT_u3_u4_2506_wire slice_2508_wire) (CONCAT_u4_u10_2509_wire)   $flowthrough 
    $delay CONCAT_u4_u10_2509_inst 0
    // (CRC_16_DAT0 [] 4 )
    [][BITSEL_u16_u1_2512_inst] (CRC_16_DAT0_2479 konst_2511_wire_constant) (BITSEL_u16_u1_2512_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2512_inst 0
    // ((CRC_16_DAT0 [] 4 ) ^ invd0)
    ^[XOR_u1_u1_2514_inst] (BITSEL_u16_u1_2512_wire invd0_2497) (XOR_u1_u1_2514_wire)   $flowthrough 
    $delay XOR_u1_u1_2514_inst 0
    // ( $slice CRC_16_DAT0 3 0 ) 
    [:] [slice_2516_inst] (CRC_16_DAT0_2479 3 0) (slice_2516_wire)  $flowthrough
    $delay slice_2516_inst 0
    // (((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) )
    &&[CONCAT_u1_u5_2517_inst] (XOR_u1_u1_2514_wire slice_2516_wire) (CONCAT_u1_u5_2517_wire)   $flowthrough 
    $delay CONCAT_u1_u5_2517_inst 0
    // ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)
    &&[CONCAT_u5_u6_2519_inst] (CONCAT_u1_u5_2517_wire invd0_2497) (CONCAT_u5_u6_2519_wire)   $flowthrough 
    $delay CONCAT_u5_u6_2519_inst 0
    // (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0))
    &&[CONCAT_u10_u16_2520_inst] (CONCAT_u4_u10_2509_wire CONCAT_u5_u6_2519_wire) (nextCRC16_DAT0_2521)   $flowthrough 
    $delay CONCAT_u10_u16_2520_inst 0
    // 			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 873
    // (tempDataD0 << 1 )
    <<[SHL_u1024_u1024_2525_inst] (tempDataD0_2484 konst_2524_wire_constant) (nextTempDataD0_2526)   $flowthrough 
    $delay SHL_u1024_u1024_2525_inst 0
    // 			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 874
    // (j_0 + 1 )
    +[ADD_u11_u11_2530_inst] (j_0_2474 konst_2529_wire_constant) (next_j_0_2531)   $flowthrough 
    $delay ADD_u11_u11_2530_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 876
    // (next_j_1 < 1024 )
    <[ULT_u11_u1_2599_inst] (next_j_1_2595 konst_2598_wire_constant) (ULT_u11_u1_2599_wire)   $flowthrough 
    $delay ULT_u11_u1_2599_inst 0
    ==0? [do_while_stmt_2536_branch] (ULT_u11_u1_2599_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 878
    // 			$phi j_1 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_1 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 879
    # := [next_j_1_2595_2542_buf] (next_j_1_2595) (next_j_1_2595_2542_buffered)     $fullrate
    $buffering $out next_j_1_2595_2542_buf next_j_1_2595_2542_buffered  1
    # $phi [phi_stmt_2538] (type_cast_2541_wire_constant next_j_1_2595_2542_buffered) ( j_1_2538 ) $fullrate
    // $buffering  $out phi_stmt_2538 j_1_2538 2
    // 			$phi CRC_16_DAT1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT1 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 881
    # := [nextCRC16_DAT1_2585_2547_buf] (nextCRC16_DAT1_2585) (nextCRC16_DAT1_2585_2547_buffered)     $fullrate
    $buffering $out nextCRC16_DAT1_2585_2547_buf nextCRC16_DAT1_2585_2547_buffered  1
    # $phi [phi_stmt_2543] (type_cast_2546_wire_constant nextCRC16_DAT1_2585_2547_buffered) ( CRC_16_DAT1_2543 ) $fullrate
    // $buffering  $out phi_stmt_2543 CRC_16_DAT1_2543 2
    // 			$phi tempDataD1 := 			  dat1 $on   $entry 			  nextTempDataD1 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 883
    # := [next_data1_2441_2550_buf] (next_data1_2441) (next_data1_2441_2550_buffered)     $fullrate
    $buffering $out next_data1_2441_2550_buf next_data1_2441_2550_buffered  1
    # := [nextTempDataD1_2590_2551_buf] (nextTempDataD1_2590) (nextTempDataD1_2590_2551_buffered)     $fullrate
    $buffering $out nextTempDataD1_2590_2551_buf nextTempDataD1_2590_2551_buffered  1
    # $phi [phi_stmt_2548] (next_data1_2441_2550_buffered nextTempDataD1_2590_2551_buffered) ( tempDataD1_2548 ) $fullrate
    // $buffering  $out phi_stmt_2548 tempDataD1_2548 2
    // 			$volatile invd1 := ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 886
    // (tempDataD1 [] 1023 )
    [][BITSEL_u1024_u1_2556_inst] (tempDataD1_2548 konst_2555_wire_constant) (BITSEL_u1024_u1_2556_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_2556_inst 0
    // (CRC_16_DAT1 [] 15 )
    [][BITSEL_u16_u1_2559_inst] (CRC_16_DAT1_2543 konst_2558_wire_constant) (BITSEL_u16_u1_2559_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2559_inst 0
    // ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 ))
    ^[XOR_u1_u1_2560_inst] (BITSEL_u1024_u1_2556_wire BITSEL_u16_u1_2559_wire) (invd1_2561)   $flowthrough 
    $delay XOR_u1_u1_2560_inst 0
    // 			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 887
    // ( $slice CRC_16_DAT1 14 12 ) 
    [:] [slice_2564_inst] (CRC_16_DAT1_2543 14 12) (slice_2564_wire)  $flowthrough
    $delay slice_2564_inst 0
    // (CRC_16_DAT1 [] 11 )
    [][BITSEL_u16_u1_2567_inst] (CRC_16_DAT1_2543 konst_2566_wire_constant) (BITSEL_u16_u1_2567_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2567_inst 0
    // ((CRC_16_DAT1 [] 11 ) ^ invd1)
    ^[XOR_u1_u1_2569_inst] (BITSEL_u16_u1_2567_wire invd1_2561) (XOR_u1_u1_2569_wire)   $flowthrough 
    $delay XOR_u1_u1_2569_inst 0
    // (( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1))
    &&[CONCAT_u3_u4_2570_inst] (slice_2564_wire XOR_u1_u1_2569_wire) (CONCAT_u3_u4_2570_wire)   $flowthrough 
    $delay CONCAT_u3_u4_2570_inst 0
    // ( $slice CRC_16_DAT1 10 5 ) 
    [:] [slice_2572_inst] (CRC_16_DAT1_2543 10 5) (slice_2572_wire)  $flowthrough
    $delay slice_2572_inst 0
    // ((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) )
    &&[CONCAT_u4_u10_2573_inst] (CONCAT_u3_u4_2570_wire slice_2572_wire) (CONCAT_u4_u10_2573_wire)   $flowthrough 
    $delay CONCAT_u4_u10_2573_inst 0
    // (CRC_16_DAT1 [] 4 )
    [][BITSEL_u16_u1_2576_inst] (CRC_16_DAT1_2543 konst_2575_wire_constant) (BITSEL_u16_u1_2576_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2576_inst 0
    // ((CRC_16_DAT1 [] 4 ) ^ invd1)
    ^[XOR_u1_u1_2578_inst] (BITSEL_u16_u1_2576_wire invd1_2561) (XOR_u1_u1_2578_wire)   $flowthrough 
    $delay XOR_u1_u1_2578_inst 0
    // ( $slice CRC_16_DAT1 3 0 ) 
    [:] [slice_2580_inst] (CRC_16_DAT1_2543 3 0) (slice_2580_wire)  $flowthrough
    $delay slice_2580_inst 0
    // (((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) )
    &&[CONCAT_u1_u5_2581_inst] (XOR_u1_u1_2578_wire slice_2580_wire) (CONCAT_u1_u5_2581_wire)   $flowthrough 
    $delay CONCAT_u1_u5_2581_inst 0
    // ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)
    &&[CONCAT_u5_u6_2583_inst] (CONCAT_u1_u5_2581_wire invd1_2561) (CONCAT_u5_u6_2583_wire)   $flowthrough 
    $delay CONCAT_u5_u6_2583_inst 0
    // (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1))
    &&[CONCAT_u10_u16_2584_inst] (CONCAT_u4_u10_2573_wire CONCAT_u5_u6_2583_wire) (nextCRC16_DAT1_2585)   $flowthrough 
    $delay CONCAT_u10_u16_2584_inst 0
    // 			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 888
    // (tempDataD1 << 1 )
    <<[SHL_u1024_u1024_2589_inst] (tempDataD1_2548 konst_2588_wire_constant) (nextTempDataD1_2590)   $flowthrough 
    $delay SHL_u1024_u1024_2589_inst 0
    // 			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 889
    // (j_1 + 1 )
    +[ADD_u11_u11_2594_inst] (j_1_2538 konst_2593_wire_constant) (next_j_1_2595)   $flowthrough 
    $delay ADD_u11_u11_2594_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 891
    // (next_j_2 < 1024 )
    <[ULT_u11_u1_2663_inst] (next_j_2_2659 konst_2662_wire_constant) (ULT_u11_u1_2663_wire)   $flowthrough 
    $delay ULT_u11_u1_2663_inst 0
    ==0? [do_while_stmt_2600_branch] (ULT_u11_u1_2663_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 893
    // 			$phi j_2 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_2 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 894
    # := [next_j_2_2659_2606_buf] (next_j_2_2659) (next_j_2_2659_2606_buffered)     $fullrate
    $buffering $out next_j_2_2659_2606_buf next_j_2_2659_2606_buffered  1
    # $phi [phi_stmt_2602] (type_cast_2605_wire_constant next_j_2_2659_2606_buffered) ( j_2_2602 ) $fullrate
    // $buffering  $out phi_stmt_2602 j_2_2602 2
    // 			$phi CRC_16_DAT2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT2 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 896
    # := [nextCRC16_DAT2_2649_2611_buf] (nextCRC16_DAT2_2649) (nextCRC16_DAT2_2649_2611_buffered)     $fullrate
    $buffering $out nextCRC16_DAT2_2649_2611_buf nextCRC16_DAT2_2649_2611_buffered  1
    # $phi [phi_stmt_2607] (type_cast_2610_wire_constant nextCRC16_DAT2_2649_2611_buffered) ( CRC_16_DAT2_2607 ) $fullrate
    // $buffering  $out phi_stmt_2607 CRC_16_DAT2_2607 2
    // 			$phi tempDataD2 := 			  dat2 $on   $entry 			  nextTempDataD2 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 898
    # := [next_data2_2425_2614_buf] (next_data2_2425) (next_data2_2425_2614_buffered)     $fullrate
    $buffering $out next_data2_2425_2614_buf next_data2_2425_2614_buffered  1
    # := [nextTempDataD2_2654_2615_buf] (nextTempDataD2_2654) (nextTempDataD2_2654_2615_buffered)     $fullrate
    $buffering $out nextTempDataD2_2654_2615_buf nextTempDataD2_2654_2615_buffered  1
    # $phi [phi_stmt_2612] (next_data2_2425_2614_buffered nextTempDataD2_2654_2615_buffered) ( tempDataD2_2612 ) $fullrate
    // $buffering  $out phi_stmt_2612 tempDataD2_2612 2
    // 			$volatile invd2 := ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 901
    // (tempDataD2 [] 1023 )
    [][BITSEL_u1024_u1_2620_inst] (tempDataD2_2612 konst_2619_wire_constant) (BITSEL_u1024_u1_2620_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_2620_inst 0
    // (CRC_16_DAT2 [] 15 )
    [][BITSEL_u16_u1_2623_inst] (CRC_16_DAT2_2607 konst_2622_wire_constant) (BITSEL_u16_u1_2623_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2623_inst 0
    // ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 ))
    ^[XOR_u1_u1_2624_inst] (BITSEL_u1024_u1_2620_wire BITSEL_u16_u1_2623_wire) (invd2_2625)   $flowthrough 
    $delay XOR_u1_u1_2624_inst 0
    // 			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 902
    // ( $slice CRC_16_DAT2 14 12 ) 
    [:] [slice_2628_inst] (CRC_16_DAT2_2607 14 12) (slice_2628_wire)  $flowthrough
    $delay slice_2628_inst 0
    // (CRC_16_DAT2 [] 11 )
    [][BITSEL_u16_u1_2631_inst] (CRC_16_DAT2_2607 konst_2630_wire_constant) (BITSEL_u16_u1_2631_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2631_inst 0
    // ((CRC_16_DAT2 [] 11 ) ^ invd2)
    ^[XOR_u1_u1_2633_inst] (BITSEL_u16_u1_2631_wire invd2_2625) (XOR_u1_u1_2633_wire)   $flowthrough 
    $delay XOR_u1_u1_2633_inst 0
    // (( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2))
    &&[CONCAT_u3_u4_2634_inst] (slice_2628_wire XOR_u1_u1_2633_wire) (CONCAT_u3_u4_2634_wire)   $flowthrough 
    $delay CONCAT_u3_u4_2634_inst 0
    // ( $slice CRC_16_DAT2 10 5 ) 
    [:] [slice_2636_inst] (CRC_16_DAT2_2607 10 5) (slice_2636_wire)  $flowthrough
    $delay slice_2636_inst 0
    // ((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) )
    &&[CONCAT_u4_u10_2637_inst] (CONCAT_u3_u4_2634_wire slice_2636_wire) (CONCAT_u4_u10_2637_wire)   $flowthrough 
    $delay CONCAT_u4_u10_2637_inst 0
    // (CRC_16_DAT2 [] 4 )
    [][BITSEL_u16_u1_2640_inst] (CRC_16_DAT2_2607 konst_2639_wire_constant) (BITSEL_u16_u1_2640_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2640_inst 0
    // ((CRC_16_DAT2 [] 4 ) ^ invd2)
    ^[XOR_u1_u1_2642_inst] (BITSEL_u16_u1_2640_wire invd2_2625) (XOR_u1_u1_2642_wire)   $flowthrough 
    $delay XOR_u1_u1_2642_inst 0
    // ( $slice CRC_16_DAT2 3 0 ) 
    [:] [slice_2644_inst] (CRC_16_DAT2_2607 3 0) (slice_2644_wire)  $flowthrough
    $delay slice_2644_inst 0
    // (((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) )
    &&[CONCAT_u1_u5_2645_inst] (XOR_u1_u1_2642_wire slice_2644_wire) (CONCAT_u1_u5_2645_wire)   $flowthrough 
    $delay CONCAT_u1_u5_2645_inst 0
    // ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)
    &&[CONCAT_u5_u6_2647_inst] (CONCAT_u1_u5_2645_wire invd2_2625) (CONCAT_u5_u6_2647_wire)   $flowthrough 
    $delay CONCAT_u5_u6_2647_inst 0
    // (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2))
    &&[CONCAT_u10_u16_2648_inst] (CONCAT_u4_u10_2637_wire CONCAT_u5_u6_2647_wire) (nextCRC16_DAT2_2649)   $flowthrough 
    $delay CONCAT_u10_u16_2648_inst 0
    // 			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 903
    // (tempDataD2 << 1 )
    <<[SHL_u1024_u1024_2653_inst] (tempDataD2_2612 konst_2652_wire_constant) (nextTempDataD2_2654)   $flowthrough 
    $delay SHL_u1024_u1024_2653_inst 0
    // 			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 904
    // (j_2 + 1 )
    +[ADD_u11_u11_2658_inst] (j_2_2602 konst_2657_wire_constant) (next_j_2_2659)   $flowthrough 
    $delay ADD_u11_u11_2658_inst 0
    // datapath-instances for do-while  
    //  file .Aa/sdhc.opt.aa, line 906
    // (next_j_3 < 1024 )
    <[ULT_u11_u1_2727_inst] (next_j_3_2723 konst_2726_wire_constant) (ULT_u11_u1_2727_wire)   $flowthrough 
    $delay ULT_u11_u1_2727_inst 0
    ==0? [do_while_stmt_2664_branch] (ULT_u11_u1_2727_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 908
    // 			$phi j_3 := 			  ($bitcast ($uint<11>) 0  ) $on   $entry 			  next_j_3 $on   $loopback 
    // type of target is $uint<11>
    //  file .Aa/sdhc.opt.aa, line 909
    # := [next_j_3_2723_2670_buf] (next_j_3_2723) (next_j_3_2723_2670_buffered)     $fullrate
    $buffering $out next_j_3_2723_2670_buf next_j_3_2723_2670_buffered  1
    # $phi [phi_stmt_2666] (type_cast_2669_wire_constant next_j_3_2723_2670_buffered) ( j_3_2666 ) $fullrate
    // $buffering  $out phi_stmt_2666 j_3_2666 2
    // 			$phi CRC_16_DAT3 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nextCRC16_DAT3 $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 911
    # := [nextCRC16_DAT3_2713_2675_buf] (nextCRC16_DAT3_2713) (nextCRC16_DAT3_2713_2675_buffered)     $fullrate
    $buffering $out nextCRC16_DAT3_2713_2675_buf nextCRC16_DAT3_2713_2675_buffered  1
    # $phi [phi_stmt_2671] (type_cast_2674_wire_constant nextCRC16_DAT3_2713_2675_buffered) ( CRC_16_DAT3_2671 ) $fullrate
    // $buffering  $out phi_stmt_2671 CRC_16_DAT3_2671 2
    // 			$phi tempDataD3 := 			  dat3 $on   $entry 			  nextTempDataD3 $on   $loopback 
    // type of target is $uint<1024>
    //  file .Aa/sdhc.opt.aa, line 913
    # := [next_data3_2409_2678_buf] (next_data3_2409) (next_data3_2409_2678_buffered)     $fullrate
    $buffering $out next_data3_2409_2678_buf next_data3_2409_2678_buffered  1
    # := [nextTempDataD3_2718_2679_buf] (nextTempDataD3_2718) (nextTempDataD3_2718_2679_buffered)     $fullrate
    $buffering $out nextTempDataD3_2718_2679_buf nextTempDataD3_2718_2679_buffered  1
    # $phi [phi_stmt_2676] (next_data3_2409_2678_buffered nextTempDataD3_2718_2679_buffered) ( tempDataD3_2676 ) $fullrate
    // $buffering  $out phi_stmt_2676 tempDataD3_2676 2
    // 			$volatile invd3 := ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 916
    // (tempDataD3 [] 1023 )
    [][BITSEL_u1024_u1_2684_inst] (tempDataD3_2676 konst_2683_wire_constant) (BITSEL_u1024_u1_2684_wire)   $flowthrough 
    $delay BITSEL_u1024_u1_2684_inst 0
    // (CRC_16_DAT3 [] 15 )
    [][BITSEL_u16_u1_2687_inst] (CRC_16_DAT3_2671 konst_2686_wire_constant) (BITSEL_u16_u1_2687_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2687_inst 0
    // ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 ))
    ^[XOR_u1_u1_2688_inst] (BITSEL_u1024_u1_2684_wire BITSEL_u16_u1_2687_wire) (invd3_2689)   $flowthrough 
    $delay XOR_u1_u1_2688_inst 0
    // 			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 917
    // ( $slice CRC_16_DAT3 14 12 ) 
    [:] [slice_2692_inst] (CRC_16_DAT3_2671 14 12) (slice_2692_wire)  $flowthrough
    $delay slice_2692_inst 0
    // (CRC_16_DAT3 [] 11 )
    [][BITSEL_u16_u1_2695_inst] (CRC_16_DAT3_2671 konst_2694_wire_constant) (BITSEL_u16_u1_2695_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2695_inst 0
    // ((CRC_16_DAT3 [] 11 ) ^ invd3)
    ^[XOR_u1_u1_2697_inst] (BITSEL_u16_u1_2695_wire invd3_2689) (XOR_u1_u1_2697_wire)   $flowthrough 
    $delay XOR_u1_u1_2697_inst 0
    // (( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3))
    &&[CONCAT_u3_u4_2698_inst] (slice_2692_wire XOR_u1_u1_2697_wire) (CONCAT_u3_u4_2698_wire)   $flowthrough 
    $delay CONCAT_u3_u4_2698_inst 0
    // ( $slice CRC_16_DAT3 10 5 ) 
    [:] [slice_2700_inst] (CRC_16_DAT3_2671 10 5) (slice_2700_wire)  $flowthrough
    $delay slice_2700_inst 0
    // ((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) )
    &&[CONCAT_u4_u10_2701_inst] (CONCAT_u3_u4_2698_wire slice_2700_wire) (CONCAT_u4_u10_2701_wire)   $flowthrough 
    $delay CONCAT_u4_u10_2701_inst 0
    // (CRC_16_DAT3 [] 4 )
    [][BITSEL_u16_u1_2704_inst] (CRC_16_DAT3_2671 konst_2703_wire_constant) (BITSEL_u16_u1_2704_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2704_inst 0
    // ((CRC_16_DAT3 [] 4 ) ^ invd3)
    ^[XOR_u1_u1_2706_inst] (BITSEL_u16_u1_2704_wire invd3_2689) (XOR_u1_u1_2706_wire)   $flowthrough 
    $delay XOR_u1_u1_2706_inst 0
    // ( $slice CRC_16_DAT3 3 0 ) 
    [:] [slice_2708_inst] (CRC_16_DAT3_2671 3 0) (slice_2708_wire)  $flowthrough
    $delay slice_2708_inst 0
    // (((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) )
    &&[CONCAT_u1_u5_2709_inst] (XOR_u1_u1_2706_wire slice_2708_wire) (CONCAT_u1_u5_2709_wire)   $flowthrough 
    $delay CONCAT_u1_u5_2709_inst 0
    // ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)
    &&[CONCAT_u5_u6_2711_inst] (CONCAT_u1_u5_2709_wire invd3_2689) (CONCAT_u5_u6_2711_wire)   $flowthrough 
    $delay CONCAT_u5_u6_2711_inst 0
    // (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3))
    &&[CONCAT_u10_u16_2712_inst] (CONCAT_u4_u10_2701_wire CONCAT_u5_u6_2711_wire) (nextCRC16_DAT3_2713)   $flowthrough 
    $delay CONCAT_u10_u16_2712_inst 0
    // 			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 918
    // (tempDataD3 << 1 )
    <<[SHL_u1024_u1024_2717_inst] (tempDataD3_2676 konst_2716_wire_constant) (nextTempDataD3_2718)   $flowthrough 
    $delay SHL_u1024_u1024_2717_inst 0
    // 			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 919
    // (j_3 + 1 )
    +[ADD_u11_u11_2722_inst] (j_3_2666 konst_2721_wire_constant) (next_j_3_2723)   $flowthrough 
    $delay ADD_u11_u11_2722_inst 0
    // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 921
    // oe
    $ioport $out [WPIPE_oe_2728_inst]  (R_ONE_1_2729_wire_constant) (oe) 
    // datapath-instances for block %dataTx%data%senddata
    //  file .Aa/sdhc.opt.aa, line 922
    // 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
    //  file .Aa/sdhc.opt.aa, line 924
    $call [call_stmt_2734_call] $module sendDAT0(next_data0_2457 nextCRC16_DAT0_2521) ()  
    $delay call_stmt_2734_call 4
    $buffering  $in call_stmt_2734_call next_data0_2457 1
    $buffering  $in call_stmt_2734_call nextCRC16_DAT0_2521 1
    // 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
    //  file .Aa/sdhc.opt.aa, line 925
    $call [call_stmt_2737_call] $module sendDAT1(next_data1_2441 nextCRC16_DAT1_2585) ()  
    $delay call_stmt_2737_call 4
    $buffering  $in call_stmt_2737_call next_data1_2441 1
    $buffering  $in call_stmt_2737_call nextCRC16_DAT1_2585 1
    // 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
    //  file .Aa/sdhc.opt.aa, line 926
    $call [call_stmt_2740_call] $module sendDAT2(next_data2_2425 nextCRC16_DAT2_2649) ()  
    $delay call_stmt_2740_call 4
    $buffering  $in call_stmt_2740_call next_data2_2425 1
    $buffering  $in call_stmt_2740_call nextCRC16_DAT2_2649 1
    // 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
    //  file .Aa/sdhc.opt.aa, line 927
    $call [call_stmt_2743_call] $module sendDAT3(next_data3_2409 nextCRC16_DAT3_2713) ()  
    $delay call_stmt_2743_call 4
    $buffering  $in call_stmt_2743_call next_data3_2409 1
    $buffering  $in call_stmt_2743_call nextCRC16_DAT3_2713 1
    // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 929
    // oe
    $ioport $out [WPIPE_oe_2745_inst]  (R_ZERO_1_2746_wire_constant) (oe) 
    // datapath-instances for block %dataTx%data%dat_store
    //  file .Aa/sdhc.opt.aa, line 931
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 933
    // 					$phi I := 					  ($bitcast ($uint<10>) 0  ) $on   $entry 					  next_I $on   loopback1 
    // type of target is $uint<10>
    //  file .Aa/sdhc.opt.aa, line 934
    # := [next_I_2776_2755_buf] (next_I_2776) (next_I_2776_2755_buffered)    
    $phi [phi_stmt_2751] (type_cast_2754_wire_constant next_I_2776_2755_buffered) ( I_2751 ) 
    // 					$phi dat := 					  ($bitcast ($uint<4096>) 0  ) $on   $entry 					  next_data $on   loopback1 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 936
    # := [next_data_2771_2760_buf] (next_data_2771) (next_data_2771_2760_buffered)    
    $phi [phi_stmt_2756] (type_cast_2759_wire_constant next_data_2771_2760_buffered) ( dat_2756 ) 
    // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx)) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 939
    // (dat << 8 )
    <<[SHL_u4096_u4096_2765_inst] (dat_2756 konst_2764_wire_constant) (SHL_u4096_u4096_2765_wire)   $flowthrough 
    $delay SHL_u4096_u4096_2765_inst 0
    // dataBufferTx
    $ioport $in [RPIPE_dataBufferTx_2768_inst] (dataBufferTx) (RPIPE_dataBufferTx_2768_wire) 
    $buffering $out RPIPE_dataBufferTx_2768_inst RPIPE_dataBufferTx_2768_wire 1
    // (($bitcast ($uint<4088>) 0  ) && dataBufferTx)
    &&[CONCAT_u4088_u4096_2769_inst] (type_cast_2767_wire_constant RPIPE_dataBufferTx_2768_wire) (CONCAT_u4088_u4096_2769_wire)   $flowthrough 
    $delay CONCAT_u4088_u4096_2769_inst 0
    // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx))
    |[OR_u4096_u4096_2770_inst] (SHL_u4096_u4096_2765_wire CONCAT_u4088_u4096_2769_wire) (next_data_2771)   
    $buffering  $out OR_u4096_u4096_2770_inst next_data_2771 1
    $delay OR_u4096_u4096_2770_inst 1
    // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 940
    // (I + 1 )
    +[ADD_u10_u10_2775_inst] (I_2751 konst_2774_wire_constant) (next_I_2776)   
    $buffering  $out ADD_u10_u10_2775_inst next_I_2776 1
    $delay ADD_u10_u10_2775_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 512 )
    <[ULT_u10_u1_2780_inst] (next_I_2776 konst_2779_wire_constant) (ULT_u10_u1_2780_wire)   $flowthrough 
    $delay ULT_u10_u1_2780_inst 0
    ==0? [if_stmt_2777_branch] (ULT_u10_u1_2780_wire)
    // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 946
    // txBufferPointer
    $store [STORE_txBufferPointer_2784_store_0] $to memory_space_9 (STORE_txBufferPointer_2784_word_address_0 STORE_txBufferPointer_2784_data_0) 
    $delay STORE_txBufferPointer_2784_store_0 5
    &/ [STORE_txBufferPointer_2784_gather_scatter] (type_cast_2786_wire_constant) (STORE_txBufferPointer_2784_data_0) 
    $flowthrough 
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 947
    // 				$phi J := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_J $on   loopback 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 948
    # := [next_J_2846_2793_buf] (next_J_2846) (next_J_2846_2793_buffered)    
    $phi [phi_stmt_2789] (type_cast_2792_wire_constant next_J_2846_2793_buffered) ( J_2789 ) 
    // 				$phi CRC_16 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  nextCRC16 $on   loopback 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 950
    # := [nextCRC16_2836_2798_buf] (nextCRC16_2836) (nextCRC16_2836_2798_buffered)    
    $phi [phi_stmt_2794] (type_cast_2797_wire_constant nextCRC16_2836_2798_buffered) ( CRC_16_2794 ) 
    // 				$phi tempData := 				  dat $on   $entry 				  nextTempData $on   loopback 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 952
    # := [next_data_2771_2801_buf] (next_data_2771) (next_data_2771_2801_buffered)    
    # := [nextTempData_2841_2802_buf] (nextTempData_2841) (nextTempData_2841_2802_buffered)    
    $phi [phi_stmt_2799] (next_data_2771_2801_buffered nextTempData_2841_2802_buffered) ( tempData_2799 ) 
    // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 955
    // (tempData [] 4095 )
    [][BITSEL_u4096_u1_2807_inst] (tempData_2799 konst_2806_wire_constant) (BITSEL_u4096_u1_2807_wire)   $flowthrough 
    $delay BITSEL_u4096_u1_2807_inst 0
    // (CRC_16 [] 15 )
    [][BITSEL_u16_u1_2810_inst] (CRC_16_2794 konst_2809_wire_constant) (BITSEL_u16_u1_2810_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2810_inst 0
    // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
    ^[XOR_u1_u1_2811_inst] (BITSEL_u4096_u1_2807_wire BITSEL_u16_u1_2810_wire) (inv_2812)   
    $buffering  $out XOR_u1_u1_2811_inst inv_2812 1
    $delay XOR_u1_u1_2811_inst 1
    // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 956
    // ( $slice CRC_16 14 12 ) 
    [:] [slice_2815_inst] (CRC_16_2794 14 12) (slice_2815_wire)  $flowthrough
    $delay slice_2815_inst 0
    // (CRC_16 [] 11 )
    [][BITSEL_u16_u1_2818_inst] (CRC_16_2794 konst_2817_wire_constant) (BITSEL_u16_u1_2818_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2818_inst 0
    // ((CRC_16 [] 11 ) ^ inv)
    ^[XOR_u1_u1_2820_inst] (BITSEL_u16_u1_2818_wire inv_2812) (XOR_u1_u1_2820_wire)   $flowthrough 
    $delay XOR_u1_u1_2820_inst 0
    // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
    &&[CONCAT_u3_u4_2821_inst] (slice_2815_wire XOR_u1_u1_2820_wire) (CONCAT_u3_u4_2821_wire)   $flowthrough 
    $delay CONCAT_u3_u4_2821_inst 0
    // ( $slice CRC_16 10 5 ) 
    [:] [slice_2823_inst] (CRC_16_2794 10 5) (slice_2823_wire)  $flowthrough
    $delay slice_2823_inst 0
    // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
    &&[CONCAT_u4_u10_2824_inst] (CONCAT_u3_u4_2821_wire slice_2823_wire) (CONCAT_u4_u10_2824_wire)   $flowthrough 
    $delay CONCAT_u4_u10_2824_inst 0
    // (CRC_16 [] 4 )
    [][BITSEL_u16_u1_2827_inst] (CRC_16_2794 konst_2826_wire_constant) (BITSEL_u16_u1_2827_wire)   $flowthrough 
    $delay BITSEL_u16_u1_2827_inst 0
    // ((CRC_16 [] 4 ) ^ inv)
    ^[XOR_u1_u1_2829_inst] (BITSEL_u16_u1_2827_wire inv_2812) (XOR_u1_u1_2829_wire)   $flowthrough 
    $delay XOR_u1_u1_2829_inst 0
    // ( $slice CRC_16 3 0 ) 
    [:] [slice_2831_inst] (CRC_16_2794 3 0) (slice_2831_wire)  $flowthrough
    $delay slice_2831_inst 0
    // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
    &&[CONCAT_u1_u5_2832_inst] (XOR_u1_u1_2829_wire slice_2831_wire) (CONCAT_u1_u5_2832_wire)   $flowthrough 
    $delay CONCAT_u1_u5_2832_inst 0
    // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
    &&[CONCAT_u5_u6_2834_inst] (CONCAT_u1_u5_2832_wire inv_2812) (CONCAT_u5_u6_2834_wire)   $flowthrough 
    $delay CONCAT_u5_u6_2834_inst 0
    // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
    &&[CONCAT_u10_u16_2835_inst] (CONCAT_u4_u10_2824_wire CONCAT_u5_u6_2834_wire) (nextCRC16_2836)   
    $buffering  $out CONCAT_u10_u16_2835_inst nextCRC16_2836 1
    $delay CONCAT_u10_u16_2835_inst 1
    // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 957
    // (tempData << 1 )
    <<[SHL_u4096_u4096_2840_inst] (tempData_2799 konst_2839_wire_constant) (nextTempData_2841)   
    $buffering  $out SHL_u4096_u4096_2840_inst nextTempData_2841 1
    $delay SHL_u4096_u4096_2840_inst 1
    // 			$volatile next_J := (J + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 958
    // (J + 1 )
    +[ADD_u13_u13_2845_inst] (J_2789 konst_2844_wire_constant) (next_J_2846)   $flowthrough 
    $delay ADD_u13_u13_2845_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_J < 4096 )
    <[ULT_u13_u1_2850_inst] (next_J_2846 konst_2849_wire_constant) (ULT_u13_u1_2850_wire)   $flowthrough 
    $delay ULT_u13_u1_2850_inst 0
    ==0? [if_stmt_2847_branch] (ULT_u13_u1_2850_wire)
    // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 963
    // oe
    $ioport $out [WPIPE_oe_2857_inst]  (R_ONE_1_2858_wire_constant) (oe) 
    // 			DAT0Tx := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 964
    // DAT0Tx
    $ioport $out [WPIPE_DAT0Tx_2860_inst]  (R_ZERO_1_2861_wire_constant) (DAT0Tx) 
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 965
    // 				$phi K := 				  ($bitcast ($uint<13>) 0  ) $on   $entry 				  next_K $on   dataloop 
    // type of target is $uint<13>
    //  file .Aa/sdhc.opt.aa, line 966
    # := [next_K_2888_2868_buf] (next_K_2888) (next_K_2888_2868_buffered)    
    $phi [phi_stmt_2864] (type_cast_2867_wire_constant next_K_2888_2868_buffered) ( K_2864 ) 
    // 				$phi dat0bit := 				  dat $on   $entry 				  nextbit $on   dataloop 
    // type of target is $uint<4096>
    //  file .Aa/sdhc.opt.aa, line 968
    # := [next_data_2771_2871_buf] (next_data_2771) (next_data_2771_2871_buffered)    
    # := [nextbit_2883_2872_buf] (nextbit_2883) (nextbit_2883_2872_buffered)    
    $phi [phi_stmt_2869] (next_data_2771_2871_buffered nextbit_2883_2872_buffered) ( dat0bit_2869 ) 
    // 			DAT0Tx := (dat0bit [] 4095 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 971
    // (dat0bit [] 4095 )
    [][BITSEL_u4096_u1_2877_inst] (dat0bit_2869 konst_2876_wire_constant) (BITSEL_u4096_u1_2877_wire)   
    $buffering  $out BITSEL_u4096_u1_2877_inst BITSEL_u4096_u1_2877_wire 1
    $delay BITSEL_u4096_u1_2877_inst 1
    // DAT0Tx
    $ioport $out [WPIPE_DAT0Tx_2874_inst]  (BITSEL_u4096_u1_2877_wire) (DAT0Tx) 
    // 			nextbit := (dat0bit << 1 ) $buffering 1// bits of buffering = 4096. 
    //  file .Aa/sdhc.opt.aa, line 972
    // (dat0bit << 1 )
    <<[SHL_u4096_u4096_2882_inst] (dat0bit_2869 konst_2881_wire_constant) (nextbit_2883)   
    $buffering  $out SHL_u4096_u4096_2882_inst nextbit_2883 1
    $delay SHL_u4096_u4096_2882_inst 1
    // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 13. 
    //  file .Aa/sdhc.opt.aa, line 973
    // (K + 1 )
    +[ADD_u13_u13_2887_inst] (K_2864 konst_2886_wire_constant) (next_K_2888)   
    $buffering  $out ADD_u13_u13_2887_inst next_K_2888 1
    $delay ADD_u13_u13_2887_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_K < 4096 )
    <[ULT_u13_u1_2892_inst] (next_K_2888 konst_2891_wire_constant) (ULT_u13_u1_2892_wire)   $flowthrough 
    $delay ULT_u13_u1_2892_inst 0
    ==0? [if_stmt_2889_branch] (ULT_u13_u1_2892_wire)
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 977
    // 				$phi L := 				  ($bitcast ($uint<5>) 0  ) $on   $entry 				  next_L $on   crcloop 
    // type of target is $uint<5>
    //  file .Aa/sdhc.opt.aa, line 978
    # := [next_L_2920_2900_buf] (next_L_2920) (next_L_2920_2900_buffered)    
    $phi [phi_stmt_2896] (type_cast_2899_wire_constant next_L_2920_2900_buffered) ( L_2896 ) 
    // 				$phi dat0crc := 				  nextCRC16 $on   $entry 				  nextbitcrc $on   crcloop 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 980
    # := [nextCRC16_2836_2903_buf] (nextCRC16_2836) (nextCRC16_2836_2903_buffered)    
    # := [nextbitcrc_2915_2904_buf] (nextbitcrc_2915) (nextbitcrc_2915_2904_buffered)    
    $phi [phi_stmt_2901] (nextCRC16_2836_2903_buffered nextbitcrc_2915_2904_buffered) ( dat0crc_2901 ) 
    // 			DAT0Tx := (dat0crc [] 15 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 983
    // (dat0crc [] 15 )
    [][BITSEL_u16_u1_2909_inst] (dat0crc_2901 konst_2908_wire_constant) (BITSEL_u16_u1_2909_wire)   
    $buffering  $out BITSEL_u16_u1_2909_inst BITSEL_u16_u1_2909_wire 1
    $delay BITSEL_u16_u1_2909_inst 1
    // DAT0Tx
    $ioport $out [WPIPE_DAT0Tx_2906_inst]  (BITSEL_u16_u1_2909_wire) (DAT0Tx) 
    // 			nextbitcrc := (dat0crc << 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 984
    // (dat0crc << 1 )
    <<[SHL_u16_u16_2914_inst] (dat0crc_2901 konst_2913_wire_constant) (nextbitcrc_2915)   
    $buffering  $out SHL_u16_u16_2914_inst nextbitcrc_2915 1
    $delay SHL_u16_u16_2914_inst 1
    // 			next_L := (L + 1 ) $buffering 1// bits of buffering = 5. 
    //  file .Aa/sdhc.opt.aa, line 985
    // (L + 1 )
    +[ADD_u5_u5_2919_inst] (L_2896 konst_2918_wire_constant) (next_L_2920)   
    $buffering  $out ADD_u5_u5_2919_inst next_L_2920 1
    $delay ADD_u5_u5_2919_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_L < 16 )
    <[ULT_u5_u1_2924_inst] (next_L_2920 konst_2923_wire_constant) (ULT_u5_u1_2924_wire)   $flowthrough 
    $delay ULT_u5_u1_2924_inst 0
    ==0? [if_stmt_2921_branch] (ULT_u5_u1_2924_wire)
    // 			DAT0Tx := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 989
    // DAT0Tx
    $ioport $out [WPIPE_DAT0Tx_2927_inst]  (R_ONE_1_2928_wire_constant) (DAT0Tx) 
    // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 990
    // oe
    $ioport $out [WPIPE_oe_2930_inst]  (R_ZERO_1_2931_wire_constant) (oe) 
    // 		busy := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 992
    // busy
    $ioport $out [WPIPE_busy_2934_inst]  (R_ONE_1_2935_wire_constant) (busy) 
    // 		$guard (blockCountEnable) blockCountNext := (blockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 993
    // (blockCount - 1 )
    -[SUB_u16_u16_2941_inst] (blockCount konst_2940_wire_constant) (blockCountNext) $guard ( blockCountEnable )   
    $buffering  $out SUB_u16_u16_2941_inst blockCountNext 1
    $delay SUB_u16_u16_2941_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (lastBlock == 1 )
    ==[EQ_u1_u1_2946_inst] (lastBlock konst_2945_wire_constant) (EQ_u1_u1_2946_wire)   $flowthrough 
    $delay EQ_u1_u1_2946_inst 0
    ==0? [if_stmt_2943_branch] (EQ_u1_u1_2946_wire)
    // 			presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 995
    // sdhcRegisters[37 ]
    $load [array_obj_ref_2949_load_0] $from memory_space_8 (array_obj_ref_2949_word_address_0) (array_obj_ref_2949_data_0) 
    $delay array_obj_ref_2949_load_0 5
    &/ [array_obj_ref_2949_gather_scatter] (array_obj_ref_2949_data_0) (presentState1Var_2950) 
    $flowthrough 
    // 			presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 996
    // sdhcRegisters[36 ]
    $load [array_obj_ref_2953_load_0] $from memory_space_8 (array_obj_ref_2953_word_address_0) (array_obj_ref_2953_data_0) 
    $delay array_obj_ref_2953_load_0 5
    &/ [array_obj_ref_2953_gather_scatter] (array_obj_ref_2953_data_0) (presentState0Var_2954) 
    $flowthrough 
    // 			sdhcRegisters[37 ] := (presentState1Var & _hfe ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 997
    // (presentState1Var & _hfe )
    &[AND_u8_u8_2959_inst] (presentState1Var_2950 konst_2958_wire_constant) (AND_u8_u8_2959_wire)   
    $buffering  $out AND_u8_u8_2959_inst AND_u8_u8_2959_wire 1
    $delay AND_u8_u8_2959_inst 1
    // sdhcRegisters[37 ]
    $store [array_obj_ref_2956_store_0] $to memory_space_8 (array_obj_ref_2956_word_address_0 array_obj_ref_2956_data_0) 
    $delay array_obj_ref_2956_store_0 5
    &/ [array_obj_ref_2956_gather_scatter] (AND_u8_u8_2959_wire) (array_obj_ref_2956_data_0) 
    $flowthrough 
    // 		wait := DAT0Rx $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1001
    // DAT0Rx
    $ioport $in [RPIPE_DAT0Rx_2964_inst] (DAT0Rx) (wait_2965) 
    $buffering $out RPIPE_DAT0Rx_2964_inst wait_2965 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (wait == ZERO_1)
    ==[EQ_u1_u1_2969_inst] (wait_2965 R_ZERO_1_2968_wire_constant) (EQ_u1_u1_2969_wire)   $flowthrough 
    $delay EQ_u1_u1_2969_inst 0
    ==0? [if_stmt_2966_branch] (EQ_u1_u1_2969_wire)
    // 		busy := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1005
    // busy
    $ioport $out [WPIPE_busy_2972_inst]  (R_ZERO_1_2973_wire_constant) (busy) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (lastBlock == 1 )
    ==[EQ_u1_u1_2978_inst] (lastBlock konst_2977_wire_constant) (EQ_u1_u1_2978_wire)   $flowthrough 
    $delay EQ_u1_u1_2978_inst 0
    ==0? [if_stmt_2975_branch] (EQ_u1_u1_2978_wire)
    // 			sdhcRegisters[36 ] := (presentState0Var & _hf9 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1007
    // (presentState0Var & _hf9 )
    &[AND_u8_u8_2983_inst] (presentState0Var_2954 konst_2982_wire_constant) (AND_u8_u8_2983_wire)   
    $buffering  $out AND_u8_u8_2983_inst AND_u8_u8_2983_wire 1
    $delay AND_u8_u8_2983_inst 1
    // sdhcRegisters[36 ]
    $store [array_obj_ref_2980_store_0] $to memory_space_8 (array_obj_ref_2980_word_address_0 array_obj_ref_2980_data_0) 
    $delay array_obj_ref_2980_store_0 5
    &/ [array_obj_ref_2980_gather_scatter] (AND_u8_u8_2983_wire) (array_obj_ref_2980_data_0) 
    $flowthrough 
  }
  // end data-path
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 834
  // sdhcRegisters[40 ]
  array_obj_ref_2357_gather_scatter <=> (branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/merge_req) (branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/merge_ack)
  array_obj_ref_2357_load_0 <=> (branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/word_access/word_access_0_sample/rr branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/word_access/word_access_0_update/cr) (branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/word_access/word_access_0_sample/ra branch_block_stmt_2354/if_stmt_2355_eval_test/BITSEL_u8_u1_2359/BITSEL_u8_u1_2359_inputs/array_obj_ref_2357/array_obj_ref_2357_read/word_access/word_access_0_update/ca)
  // (sdhcRegisters[40 ] [] 1 )
  if_stmt_2355_branch <=> (branch_block_stmt_2354/if_stmt_2355_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2355_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2355_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_2361
  //  file .Aa/sdhc.opt.aa, line 837
  phi_stmt_2363 <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2363_loopback_sample_req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2363_entry_sample_req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2363_phi_mux_ack)
  next_i_2462_2365_buf <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_i_2365_Sample/req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_i_2365_Update/req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_i_2365_Sample/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_i_2365_Update/ack)
  phi_stmt_2368 <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2368_loopback_sample_req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2368_entry_sample_req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2368_phi_mux_ack)
  next_data0_2457_2370_buf <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data0_2370_Sample/req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data0_2370_Update/req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data0_2370_Sample/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data0_2370_Update/ack)
  phi_stmt_2373 <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2373_loopback_sample_req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2373_entry_sample_req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2373_phi_mux_ack)
  next_data1_2441_2375_buf <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data1_2375_Sample/req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data1_2375_Update/req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data1_2375_Sample/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data1_2375_Update/ack)
  phi_stmt_2378 <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2378_loopback_sample_req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2378_entry_sample_req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2378_phi_mux_ack)
  next_data2_2425_2380_buf <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data2_2380_Sample/req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data2_2380_Update/req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data2_2380_Sample/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data2_2380_Update/ack)
  phi_stmt_2383 <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2383_loopback_sample_req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2383_entry_sample_req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/phi_stmt_2383_phi_mux_ack)
  next_data3_2409_2385_buf <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data3_2385_Sample/req branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data3_2385_Update/req) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data3_2385_Sample/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/R_next_data3_2385_Update/ack)
  // 				tempBuffer := dataBufferTx $buffering 2// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 851
  // dataBufferTx
  RPIPE_dataBufferTx_2390_inst <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/RPIPE_dataBufferTx_2390_Sample/rr branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/RPIPE_dataBufferTx_2390_Update/cr) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/RPIPE_dataBufferTx_2390_Sample/ra branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/RPIPE_dataBufferTx_2390_Update/ca)
  // 				$volatile next_data3 := ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 852
  // ((dat3 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 )))
  // (dat3 << 2 )
  // dat3
  // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 )) && (tempBuffer [] 3 ))
  // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 7 ))
  // (tempBuffer [] 7 )
  // tempBuffer
  // (tempBuffer [] 3 )
  // tempBuffer
  // 				$volatile next_data2 := ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 853
  // ((dat2 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 )))
  // (dat2 << 2 )
  // dat2
  // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 )) && (tempBuffer [] 2 ))
  // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 6 ))
  // (tempBuffer [] 6 )
  // tempBuffer
  // (tempBuffer [] 2 )
  // tempBuffer
  // 				$volatile next_data1 := ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 854
  // ((dat1 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 )))
  // (dat1 << 2 )
  // dat1
  // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 )) && (tempBuffer [] 1 ))
  // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 5 ))
  // (tempBuffer [] 5 )
  // tempBuffer
  // (tempBuffer [] 1 )
  // tempBuffer
  // 				$volatile next_data0 := ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 855
  // ((dat0 << 2 ) | ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 )))
  // (dat0 << 2 )
  // dat0
  // ((($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 )) && (tempBuffer [] 0 ))
  // (($bitcast ($uint<1022>) 0  ) && (tempBuffer [] 4 ))
  // (tempBuffer [] 4 )
  // tempBuffer
  // (tempBuffer [] 0 )
  // tempBuffer
  // 				$volatile next_i := (i + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 856
  // (i + 1 )
  // i
  // (next_i < 512 )
  // next_i
  do_while_stmt_2361_branch <=> (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/do_while_stmt_2361_loop_body/condition_evaluated) (branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/loop_exit/ack branch_block_stmt_2354/branch_block_stmt_2360/do_while_stmt_2361/loop_taken/ack)
  // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 860
  // txBufferPointer
  STORE_txBufferPointer_2468_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Sample/STORE_txBufferPointer_2468_Split/split_req) (branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Sample/STORE_txBufferPointer_2468_Split/split_ack)
  STORE_txBufferPointer_2468_store_0 <=> (branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2471/STORE_txBufferPointer_2468_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_2472
  //  file .Aa/sdhc.opt.aa, line 861
  phi_stmt_2474 <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2474_loopback_sample_req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2474_entry_sample_req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2474_phi_mux_ack)
  next_j_0_2531_2476_buf <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_next_j_0_2476_Sample/req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_next_j_0_2476_Update/req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_next_j_0_2476_Sample/ack branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_next_j_0_2476_Update/ack)
  phi_stmt_2479 <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2479_entry_sample_req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2479_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2479_phi_mux_ack)
  nextCRC16_DAT0_2521_2483_buf <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextCRC16_DAT0_2483_Sample/req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextCRC16_DAT0_2483_Update/req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextCRC16_DAT0_2483_Sample/ack branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextCRC16_DAT0_2483_Update/ack)
  phi_stmt_2484 <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2484_loopback_sample_req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2484_entry_sample_req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/phi_stmt_2484_phi_mux_ack)
  nextTempDataD0_2526_2486_buf <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextTempDataD0_2486_Sample/req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextTempDataD0_2486_Update/req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextTempDataD0_2486_Sample/ack branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_nextTempDataD0_2486_Update/ack)
  next_data0_2457_2487_buf <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_dat0_2487_Sample/req branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_dat0_2487_Update/req) (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_dat0_2487_Sample/ack branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/R_dat0_2487_Update/ack)
  // 			$volatile invd0 := ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 871
  // ((tempDataD0 [] 1023 ) ^ (CRC_16_DAT0 [] 15 ))
  // (tempDataD0 [] 1023 )
  // tempDataD0
  // (CRC_16_DAT0 [] 15 )
  // CRC_16_DAT0
  // 			$volatile nextCRC16_DAT0 := (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 872
  // (((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) ) && ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0))
  // ((( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0)) && ( $slice CRC_16_DAT0 10 5 ) )
  // (( $slice CRC_16_DAT0 14 12 )  && ((CRC_16_DAT0 [] 11 ) ^ invd0))
  // CRC_16_DAT0
  // ((CRC_16_DAT0 [] 11 ) ^ invd0)
  // (CRC_16_DAT0 [] 11 )
  // CRC_16_DAT0
  // invd0
  // CRC_16_DAT0
  // ((((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) ) && invd0)
  // (((CRC_16_DAT0 [] 4 ) ^ invd0) && ( $slice CRC_16_DAT0 3 0 ) )
  // ((CRC_16_DAT0 [] 4 ) ^ invd0)
  // (CRC_16_DAT0 [] 4 )
  // CRC_16_DAT0
  // invd0
  // CRC_16_DAT0
  // invd0
  // 			$volatile nextTempDataD0 := (tempDataD0 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 873
  // (tempDataD0 << 1 )
  // tempDataD0
  // 			$volatile next_j_0 := (j_0 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 874
  // (j_0 + 1 )
  // j_0
  // (next_j_0 < 1024 )
  // next_j_0
  do_while_stmt_2472_branch <=> (branch_block_stmt_2354/do_while_stmt_2472/do_while_stmt_2472_loop_body/condition_evaluated) (branch_block_stmt_2354/do_while_stmt_2472/loop_exit/ack branch_block_stmt_2354/do_while_stmt_2472/loop_taken/ack)
  // CP-DP links for do-while  do_while_stmt_2536
  //  file .Aa/sdhc.opt.aa, line 876
  phi_stmt_2538 <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2538_entry_sample_req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2538_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2538_phi_mux_ack)
  next_j_1_2595_2542_buf <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_next_j_1_2542_Sample/req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_next_j_1_2542_Update/req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_next_j_1_2542_Sample/ack branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_next_j_1_2542_Update/ack)
  phi_stmt_2543 <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2543_entry_sample_req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2543_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2543_phi_mux_ack)
  nextCRC16_DAT1_2585_2547_buf <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextCRC16_DAT1_2547_Sample/req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextCRC16_DAT1_2547_Update/req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextCRC16_DAT1_2547_Sample/ack branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextCRC16_DAT1_2547_Update/ack)
  phi_stmt_2548 <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2548_entry_sample_req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2548_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/phi_stmt_2548_phi_mux_ack)
  next_data1_2441_2550_buf <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_dat1_2550_Sample/req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_dat1_2550_Update/req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_dat1_2550_Sample/ack branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_dat1_2550_Update/ack)
  nextTempDataD1_2590_2551_buf <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextTempDataD1_2551_Sample/req branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextTempDataD1_2551_Update/req) (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextTempDataD1_2551_Sample/ack branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/R_nextTempDataD1_2551_Update/ack)
  // 			$volatile invd1 := ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 886
  // ((tempDataD1 [] 1023 ) ^ (CRC_16_DAT1 [] 15 ))
  // (tempDataD1 [] 1023 )
  // tempDataD1
  // (CRC_16_DAT1 [] 15 )
  // CRC_16_DAT1
  // 			$volatile nextCRC16_DAT1 := (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 887
  // (((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) ) && ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1))
  // ((( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1)) && ( $slice CRC_16_DAT1 10 5 ) )
  // (( $slice CRC_16_DAT1 14 12 )  && ((CRC_16_DAT1 [] 11 ) ^ invd1))
  // CRC_16_DAT1
  // ((CRC_16_DAT1 [] 11 ) ^ invd1)
  // (CRC_16_DAT1 [] 11 )
  // CRC_16_DAT1
  // invd1
  // CRC_16_DAT1
  // ((((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) ) && invd1)
  // (((CRC_16_DAT1 [] 4 ) ^ invd1) && ( $slice CRC_16_DAT1 3 0 ) )
  // ((CRC_16_DAT1 [] 4 ) ^ invd1)
  // (CRC_16_DAT1 [] 4 )
  // CRC_16_DAT1
  // invd1
  // CRC_16_DAT1
  // invd1
  // 			$volatile nextTempDataD1 := (tempDataD1 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 888
  // (tempDataD1 << 1 )
  // tempDataD1
  // 			$volatile next_j_1 := (j_1 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 889
  // (j_1 + 1 )
  // j_1
  // (next_j_1 < 1024 )
  // next_j_1
  do_while_stmt_2536_branch <=> (branch_block_stmt_2354/do_while_stmt_2536/do_while_stmt_2536_loop_body/condition_evaluated) (branch_block_stmt_2354/do_while_stmt_2536/loop_exit/ack branch_block_stmt_2354/do_while_stmt_2536/loop_taken/ack)
  // CP-DP links for do-while  do_while_stmt_2600
  //  file .Aa/sdhc.opt.aa, line 891
  phi_stmt_2602 <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2602_entry_sample_req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2602_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2602_phi_mux_ack)
  next_j_2_2659_2606_buf <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_next_j_2_2606_Sample/req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_next_j_2_2606_Update/req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_next_j_2_2606_Sample/ack branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_next_j_2_2606_Update/ack)
  phi_stmt_2607 <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2607_entry_sample_req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2607_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2607_phi_mux_ack)
  nextCRC16_DAT2_2649_2611_buf <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextCRC16_DAT2_2611_Sample/req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextCRC16_DAT2_2611_Update/req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextCRC16_DAT2_2611_Sample/ack branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextCRC16_DAT2_2611_Update/ack)
  phi_stmt_2612 <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2612_entry_sample_req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2612_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/phi_stmt_2612_phi_mux_ack)
  next_data2_2425_2614_buf <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_dat2_2614_Sample/req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_dat2_2614_Update/req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_dat2_2614_Sample/ack branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_dat2_2614_Update/ack)
  nextTempDataD2_2654_2615_buf <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextTempDataD2_2615_Sample/req branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextTempDataD2_2615_Update/req) (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextTempDataD2_2615_Sample/ack branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/R_nextTempDataD2_2615_Update/ack)
  // 			$volatile invd2 := ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 901
  // ((tempDataD2 [] 1023 ) ^ (CRC_16_DAT2 [] 15 ))
  // (tempDataD2 [] 1023 )
  // tempDataD2
  // (CRC_16_DAT2 [] 15 )
  // CRC_16_DAT2
  // 			$volatile nextCRC16_DAT2 := (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 902
  // (((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) ) && ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2))
  // ((( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2)) && ( $slice CRC_16_DAT2 10 5 ) )
  // (( $slice CRC_16_DAT2 14 12 )  && ((CRC_16_DAT2 [] 11 ) ^ invd2))
  // CRC_16_DAT2
  // ((CRC_16_DAT2 [] 11 ) ^ invd2)
  // (CRC_16_DAT2 [] 11 )
  // CRC_16_DAT2
  // invd2
  // CRC_16_DAT2
  // ((((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) ) && invd2)
  // (((CRC_16_DAT2 [] 4 ) ^ invd2) && ( $slice CRC_16_DAT2 3 0 ) )
  // ((CRC_16_DAT2 [] 4 ) ^ invd2)
  // (CRC_16_DAT2 [] 4 )
  // CRC_16_DAT2
  // invd2
  // CRC_16_DAT2
  // invd2
  // 			$volatile nextTempDataD2 := (tempDataD2 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 903
  // (tempDataD2 << 1 )
  // tempDataD2
  // 			$volatile next_j_2 := (j_2 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 904
  // (j_2 + 1 )
  // j_2
  // (next_j_2 < 1024 )
  // next_j_2
  do_while_stmt_2600_branch <=> (branch_block_stmt_2354/do_while_stmt_2600/do_while_stmt_2600_loop_body/condition_evaluated) (branch_block_stmt_2354/do_while_stmt_2600/loop_exit/ack branch_block_stmt_2354/do_while_stmt_2600/loop_taken/ack)
  // CP-DP links for do-while  do_while_stmt_2664
  //  file .Aa/sdhc.opt.aa, line 906
  phi_stmt_2666 <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2666_entry_sample_req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2666_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2666_phi_mux_ack)
  next_j_3_2723_2670_buf <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_next_j_3_2670_Sample/req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_next_j_3_2670_Update/req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_next_j_3_2670_Sample/ack branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_next_j_3_2670_Update/ack)
  phi_stmt_2671 <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2671_entry_sample_req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2671_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2671_phi_mux_ack)
  nextCRC16_DAT3_2713_2675_buf <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextCRC16_DAT3_2675_Sample/req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextCRC16_DAT3_2675_Update/req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextCRC16_DAT3_2675_Sample/ack branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextCRC16_DAT3_2675_Update/ack)
  phi_stmt_2676 <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2676_entry_sample_req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2676_loopback_sample_req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/phi_stmt_2676_phi_mux_ack)
  next_data3_2409_2678_buf <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_dat3_2678_Sample/req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_dat3_2678_Update/req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_dat3_2678_Sample/ack branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_dat3_2678_Update/ack)
  nextTempDataD3_2718_2679_buf <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextTempDataD3_2679_Sample/req branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextTempDataD3_2679_Update/req) (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextTempDataD3_2679_Sample/ack branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/R_nextTempDataD3_2679_Update/ack)
  // 			$volatile invd3 := ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 916
  // ((tempDataD3 [] 1023 ) ^ (CRC_16_DAT3 [] 15 ))
  // (tempDataD3 [] 1023 )
  // tempDataD3
  // (CRC_16_DAT3 [] 15 )
  // CRC_16_DAT3
  // 			$volatile nextCRC16_DAT3 := (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 917
  // (((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) ) && ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3))
  // ((( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3)) && ( $slice CRC_16_DAT3 10 5 ) )
  // (( $slice CRC_16_DAT3 14 12 )  && ((CRC_16_DAT3 [] 11 ) ^ invd3))
  // CRC_16_DAT3
  // ((CRC_16_DAT3 [] 11 ) ^ invd3)
  // (CRC_16_DAT3 [] 11 )
  // CRC_16_DAT3
  // invd3
  // CRC_16_DAT3
  // ((((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) ) && invd3)
  // (((CRC_16_DAT3 [] 4 ) ^ invd3) && ( $slice CRC_16_DAT3 3 0 ) )
  // ((CRC_16_DAT3 [] 4 ) ^ invd3)
  // (CRC_16_DAT3 [] 4 )
  // CRC_16_DAT3
  // invd3
  // CRC_16_DAT3
  // invd3
  // 			$volatile nextTempDataD3 := (tempDataD3 << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 918
  // (tempDataD3 << 1 )
  // tempDataD3
  // 			$volatile next_j_3 := (j_3 + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 919
  // (j_3 + 1 )
  // j_3
  // (next_j_3 < 1024 )
  // next_j_3
  do_while_stmt_2664_branch <=> (branch_block_stmt_2354/do_while_stmt_2664/do_while_stmt_2664_loop_body/condition_evaluated) (branch_block_stmt_2354/do_while_stmt_2664/loop_exit/ack branch_block_stmt_2354/do_while_stmt_2664/loop_taken/ack)
  // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 921
  // oe
  WPIPE_oe_2728_inst <=> (branch_block_stmt_2354/assign_stmt_2730/WPIPE_oe_2728_Sample/req branch_block_stmt_2354/assign_stmt_2730/WPIPE_oe_2728_Update/req) (branch_block_stmt_2354/assign_stmt_2730/WPIPE_oe_2728_Sample/ack branch_block_stmt_2354/assign_stmt_2730/WPIPE_oe_2728_Update/ack)
  // 				$call sendDAT0 (dat0 nextCRC16_DAT0 ) () 
  //  file .Aa/sdhc.opt.aa, line 924
  // dat0
  // nextCRC16_DAT0
  call_stmt_2734_call <=> (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2734/call_stmt_2734_Sample/crr branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2734/call_stmt_2734_Update/ccr) (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2734/call_stmt_2734_Sample/cra branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2734/call_stmt_2734_Update/cca)
  // 				$call sendDAT1 (dat1 nextCRC16_DAT1 ) () 
  //  file .Aa/sdhc.opt.aa, line 925
  // dat1
  // nextCRC16_DAT1
  call_stmt_2737_call <=> (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2737/call_stmt_2737_Sample/crr branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2737/call_stmt_2737_Update/ccr) (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2737/call_stmt_2737_Sample/cra branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2737/call_stmt_2737_Update/cca)
  // 				$call sendDAT2 (dat2 nextCRC16_DAT2 ) () 
  //  file .Aa/sdhc.opt.aa, line 926
  // dat2
  // nextCRC16_DAT2
  call_stmt_2740_call <=> (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2740/call_stmt_2740_Sample/crr branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2740/call_stmt_2740_Update/ccr) (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2740/call_stmt_2740_Sample/cra branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2740/call_stmt_2740_Update/cca)
  // 				$call sendDAT3 (dat3 nextCRC16_DAT3 ) () 
  //  file .Aa/sdhc.opt.aa, line 927
  // dat3
  // nextCRC16_DAT3
  call_stmt_2743_call <=> (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2743/call_stmt_2743_Sample/crr branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2743/call_stmt_2743_Update/ccr) (branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2743/call_stmt_2743_Sample/cra branch_block_stmt_2354/parallel_block_stmt_2731/call_stmt_2743/call_stmt_2743_Update/cca)
  // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 929
  // oe
  WPIPE_oe_2745_inst <=> (branch_block_stmt_2354/assign_stmt_2747/WPIPE_oe_2745_Sample/req branch_block_stmt_2354/assign_stmt_2747/WPIPE_oe_2745_Update/req) (branch_block_stmt_2354/assign_stmt_2747/WPIPE_oe_2745_Sample/ack branch_block_stmt_2354/assign_stmt_2747/WPIPE_oe_2745_Update/ack)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 933
  next_I_2776_2755_buf <=> (branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2751/phi_stmt_2751_sources/Interlock/Sample/req branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2751/phi_stmt_2751_sources/Interlock/Update/req) (branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2751/phi_stmt_2751_sources/Interlock/Sample/ack branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2751/phi_stmt_2751_sources/Interlock/Update/ack)
  phi_stmt_2751 <=> (branch_block_stmt_2354/branch_block_stmt_2749/merge_stmt_2750__entry___PhiReq/phi_stmt_2751/phi_stmt_2751_req branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2751/phi_stmt_2751_req) (branch_block_stmt_2354/branch_block_stmt_2749/merge_stmt_2750_PhiAck/phi_stmt_2751_ack)
  next_data_2771_2760_buf <=> (branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2756/phi_stmt_2756_sources/Interlock/Sample/req branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2756/phi_stmt_2756_sources/Interlock/Update/req) (branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2756/phi_stmt_2756_sources/Interlock/Sample/ack branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2756/phi_stmt_2756_sources/Interlock/Update/ack)
  phi_stmt_2756 <=> (branch_block_stmt_2354/branch_block_stmt_2749/merge_stmt_2750__entry___PhiReq/phi_stmt_2756/phi_stmt_2756_req branch_block_stmt_2354/branch_block_stmt_2749/loopback1_PhiReq/phi_stmt_2756/phi_stmt_2756_req) (branch_block_stmt_2354/branch_block_stmt_2749/merge_stmt_2750_PhiAck/phi_stmt_2756_ack)
  // 				next_data := ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx)) $buffering 1// bits of buffering = 4096. 
  //  file .Aa/sdhc.opt.aa, line 939
  // ((dat << 8 ) | (($bitcast ($uint<4088>) 0  ) && dataBufferTx))
  // (dat << 8 )
  // dat
  // (($bitcast ($uint<4088>) 0  ) && dataBufferTx)
  // dataBufferTx
  RPIPE_dataBufferTx_2768_inst <=> (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/RPIPE_dataBufferTx_2768_Sample/rr branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/RPIPE_dataBufferTx_2768_Update/cr) (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/RPIPE_dataBufferTx_2768_Sample/ra branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/RPIPE_dataBufferTx_2768_Update/ca)
  OR_u4096_u4096_2770_inst <=> (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/OR_u4096_u4096_2770_Sample/rr branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/OR_u4096_u4096_2770_Update/cr) (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/OR_u4096_u4096_2770_Sample/ra branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/OR_u4096_u4096_2770_Update/ca)
  // 				next_I := (I + 1 ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 940
  // (I + 1 )
  // I
  ADD_u10_u10_2775_inst <=> (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/ADD_u10_u10_2775_Sample/rr branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/ADD_u10_u10_2775_Update/cr) (branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/ADD_u10_u10_2775_Sample/ra branch_block_stmt_2354/branch_block_stmt_2749/assign_stmt_2771_to_assign_stmt_2776/ADD_u10_u10_2775_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_I < 512 )
  if_stmt_2777_branch <=> (branch_block_stmt_2354/branch_block_stmt_2749/if_stmt_2777_eval_test/branch_req) (branch_block_stmt_2354/branch_block_stmt_2749/if_stmt_2777_else_link/else_choice_transition branch_block_stmt_2354/branch_block_stmt_2749/if_stmt_2777_if_link/if_choice_transition)
  // 			txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 946
  // txBufferPointer
  STORE_txBufferPointer_2784_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Sample/STORE_txBufferPointer_2784_Split/split_req) (branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Sample/STORE_txBufferPointer_2784_Split/split_ack)
  STORE_txBufferPointer_2784_store_0 <=> (branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2787/STORE_txBufferPointer_2784_Update/word_access_complete/word_0/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 947
  next_J_2846_2793_buf <=> (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2789/phi_stmt_2789_sources/Interlock/Sample/req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2789/phi_stmt_2789_sources/Interlock/Update/req) (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2789/phi_stmt_2789_sources/Interlock/Sample/ack branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2789/phi_stmt_2789_sources/Interlock/Update/ack)
  phi_stmt_2789 <=> (branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2789/phi_stmt_2789_req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2789/phi_stmt_2789_req) (branch_block_stmt_2354/merge_stmt_2788_PhiAck/phi_stmt_2789_ack)
  nextCRC16_2836_2798_buf <=> (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2794/phi_stmt_2794_sources/Interlock/Sample/req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2794/phi_stmt_2794_sources/Interlock/Update/req) (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2794/phi_stmt_2794_sources/Interlock/Sample/ack branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2794/phi_stmt_2794_sources/Interlock/Update/ack)
  phi_stmt_2794 <=> (branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2794/phi_stmt_2794_req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2794/phi_stmt_2794_req) (branch_block_stmt_2354/merge_stmt_2788_PhiAck/phi_stmt_2794_ack)
  next_data_2771_2801_buf <=> (branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Sample/req branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Update/req) (branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Sample/ack branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Update/ack)
  nextTempData_2841_2802_buf <=> (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Sample/req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Update/req) (branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Sample/ack branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2799/phi_stmt_2799_sources/Interlock/Update/ack)
  phi_stmt_2799 <=> (branch_block_stmt_2354/merge_stmt_2788__entry___PhiReq/phi_stmt_2799/phi_stmt_2799_req branch_block_stmt_2354/loopback_PhiReq/phi_stmt_2799/phi_stmt_2799_req) (branch_block_stmt_2354/merge_stmt_2788_PhiAck/phi_stmt_2799_ack)
  // 			inv := ((tempData [] 4095 ) ^ (CRC_16 [] 15 )) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 955
  // ((tempData [] 4095 ) ^ (CRC_16 [] 15 ))
  // (tempData [] 4095 )
  // tempData
  // (CRC_16 [] 15 )
  // CRC_16
  XOR_u1_u1_2811_inst <=> (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/XOR_u1_u1_2811_Sample/rr branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/XOR_u1_u1_2811_Update/cr) (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/XOR_u1_u1_2811_Sample/ra branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/XOR_u1_u1_2811_Update/ca)
  // 			nextCRC16 := (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 956
  // (((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) ) && ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv))
  // ((( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv)) && ( $slice CRC_16 10 5 ) )
  // (( $slice CRC_16 14 12 )  && ((CRC_16 [] 11 ) ^ inv))
  // CRC_16
  // ((CRC_16 [] 11 ) ^ inv)
  // (CRC_16 [] 11 )
  // CRC_16
  // inv
  // CRC_16
  // ((((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) ) && inv)
  // (((CRC_16 [] 4 ) ^ inv) && ( $slice CRC_16 3 0 ) )
  // ((CRC_16 [] 4 ) ^ inv)
  // (CRC_16 [] 4 )
  // CRC_16
  // inv
  // CRC_16
  // inv
  CONCAT_u10_u16_2835_inst <=> (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/CONCAT_u10_u16_2835_Sample/rr branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/CONCAT_u10_u16_2835_Update/cr) (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/CONCAT_u10_u16_2835_Sample/ra branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/CONCAT_u10_u16_2835_Update/ca)
  // 			nextTempData := (tempData << 1 ) $buffering 1// bits of buffering = 4096. 
  //  file .Aa/sdhc.opt.aa, line 957
  // (tempData << 1 )
  // tempData
  SHL_u4096_u4096_2840_inst <=> (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/SHL_u4096_u4096_2840_Sample/rr branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/SHL_u4096_u4096_2840_Update/cr) (branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/SHL_u4096_u4096_2840_Sample/ra branch_block_stmt_2354/assign_stmt_2812_to_assign_stmt_2846/SHL_u4096_u4096_2840_Update/ca)
  // 			$volatile next_J := (J + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 958
  // (J + 1 )
  // J
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_J < 4096 )
  if_stmt_2847_branch <=> (branch_block_stmt_2354/if_stmt_2847_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2847_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2847_if_link/if_choice_transition)
  // 			oe := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 963
  // oe
  WPIPE_oe_2857_inst <=> (branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_oe_2857_Sample/req branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_oe_2857_Update/req) (branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_oe_2857_Sample/ack branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_oe_2857_Update/ack)
  // 			DAT0Tx := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 964
  // DAT0Tx
  WPIPE_DAT0Tx_2860_inst <=> (branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_DAT0Tx_2860_Sample/req branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_DAT0Tx_2860_Update/req) (branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_DAT0Tx_2860_Sample/ack branch_block_stmt_2354/assign_stmt_2859_to_assign_stmt_2862/WPIPE_DAT0Tx_2860_Update/ack)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 965
  next_K_2888_2868_buf <=> (branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2864/phi_stmt_2864_sources/Interlock/Sample/req branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2864/phi_stmt_2864_sources/Interlock/Update/req) (branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2864/phi_stmt_2864_sources/Interlock/Sample/ack branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2864/phi_stmt_2864_sources/Interlock/Update/ack)
  phi_stmt_2864 <=> (branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2864/phi_stmt_2864_req branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2864/phi_stmt_2864_req) (branch_block_stmt_2354/merge_stmt_2863_PhiAck/phi_stmt_2864_ack)
  next_data_2771_2871_buf <=> (branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Sample/req branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Update/req) (branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Sample/ack branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Update/ack)
  nextbit_2883_2872_buf <=> (branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Sample/req branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Update/req) (branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Sample/ack branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2869/phi_stmt_2869_sources/Interlock/Update/ack)
  phi_stmt_2869 <=> (branch_block_stmt_2354/merge_stmt_2863__entry___PhiReq/phi_stmt_2869/phi_stmt_2869_req branch_block_stmt_2354/dataloop_PhiReq/phi_stmt_2869/phi_stmt_2869_req) (branch_block_stmt_2354/merge_stmt_2863_PhiAck/phi_stmt_2869_ack)
  // 			DAT0Tx := (dat0bit [] 4095 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 971
  // (dat0bit [] 4095 )
  // dat0bit
  BITSEL_u4096_u1_2877_inst <=> (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/BITSEL_u4096_u1_2877_Sample/rr branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/BITSEL_u4096_u1_2877_Update/cr) (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/BITSEL_u4096_u1_2877_Sample/ra branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/BITSEL_u4096_u1_2877_Update/ca)
  // DAT0Tx
  WPIPE_DAT0Tx_2874_inst <=> (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/WPIPE_DAT0Tx_2874_Sample/req branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/WPIPE_DAT0Tx_2874_Update/req) (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/WPIPE_DAT0Tx_2874_Sample/ack branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/WPIPE_DAT0Tx_2874_Update/ack)
  // 			nextbit := (dat0bit << 1 ) $buffering 1// bits of buffering = 4096. 
  //  file .Aa/sdhc.opt.aa, line 972
  // (dat0bit << 1 )
  // dat0bit
  SHL_u4096_u4096_2882_inst <=> (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/SHL_u4096_u4096_2882_Sample/rr branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/SHL_u4096_u4096_2882_Update/cr) (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/SHL_u4096_u4096_2882_Sample/ra branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/SHL_u4096_u4096_2882_Update/ca)
  // 			next_K := (K + 1 ) $buffering 1// bits of buffering = 13. 
  //  file .Aa/sdhc.opt.aa, line 973
  // (K + 1 )
  // K
  ADD_u13_u13_2887_inst <=> (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/ADD_u13_u13_2887_Sample/rr branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/ADD_u13_u13_2887_Update/cr) (branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/ADD_u13_u13_2887_Sample/ra branch_block_stmt_2354/assign_stmt_2878_to_assign_stmt_2888/ADD_u13_u13_2887_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_K < 4096 )
  if_stmt_2889_branch <=> (branch_block_stmt_2354/if_stmt_2889_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2889_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2889_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 977
  next_L_2920_2900_buf <=> (branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2896/phi_stmt_2896_sources/Interlock/Sample/req branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2896/phi_stmt_2896_sources/Interlock/Update/req) (branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2896/phi_stmt_2896_sources/Interlock/Sample/ack branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2896/phi_stmt_2896_sources/Interlock/Update/ack)
  phi_stmt_2896 <=> (branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2896/phi_stmt_2896_req branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2896/phi_stmt_2896_req) (branch_block_stmt_2354/merge_stmt_2895_PhiAck/phi_stmt_2896_ack)
  nextCRC16_2836_2903_buf <=> (branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Sample/req branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Update/req) (branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Sample/ack branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Update/ack)
  nextbitcrc_2915_2904_buf <=> (branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Sample/req branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Update/req) (branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Sample/ack branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2901/phi_stmt_2901_sources/Interlock/Update/ack)
  phi_stmt_2901 <=> (branch_block_stmt_2354/merge_stmt_2895__entry___PhiReq/phi_stmt_2901/phi_stmt_2901_req branch_block_stmt_2354/crcloop_PhiReq/phi_stmt_2901/phi_stmt_2901_req) (branch_block_stmt_2354/merge_stmt_2895_PhiAck/phi_stmt_2901_ack)
  // 			DAT0Tx := (dat0crc [] 15 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 983
  // (dat0crc [] 15 )
  // dat0crc
  BITSEL_u16_u1_2909_inst <=> (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/BITSEL_u16_u1_2909_Sample/rr branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/BITSEL_u16_u1_2909_Update/cr) (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/BITSEL_u16_u1_2909_Sample/ra branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/BITSEL_u16_u1_2909_Update/ca)
  // DAT0Tx
  WPIPE_DAT0Tx_2906_inst <=> (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/WPIPE_DAT0Tx_2906_Sample/req branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/WPIPE_DAT0Tx_2906_Update/req) (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/WPIPE_DAT0Tx_2906_Sample/ack branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/WPIPE_DAT0Tx_2906_Update/ack)
  // 			nextbitcrc := (dat0crc << 1 ) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 984
  // (dat0crc << 1 )
  // dat0crc
  SHL_u16_u16_2914_inst <=> (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/SHL_u16_u16_2914_Sample/rr branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/SHL_u16_u16_2914_Update/cr) (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/SHL_u16_u16_2914_Sample/ra branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/SHL_u16_u16_2914_Update/ca)
  // 			next_L := (L + 1 ) $buffering 1// bits of buffering = 5. 
  //  file .Aa/sdhc.opt.aa, line 985
  // (L + 1 )
  // L
  ADD_u5_u5_2919_inst <=> (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/ADD_u5_u5_2919_Sample/rr branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/ADD_u5_u5_2919_Update/cr) (branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/ADD_u5_u5_2919_Sample/ra branch_block_stmt_2354/assign_stmt_2910_to_assign_stmt_2920/ADD_u5_u5_2919_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_L < 16 )
  if_stmt_2921_branch <=> (branch_block_stmt_2354/if_stmt_2921_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2921_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2921_if_link/if_choice_transition)
  // 			DAT0Tx := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 989
  // DAT0Tx
  WPIPE_DAT0Tx_2927_inst <=> (branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_DAT0Tx_2927_Sample/req branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_DAT0Tx_2927_Update/req) (branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_DAT0Tx_2927_Sample/ack branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_DAT0Tx_2927_Update/ack)
  // 			oe := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 990
  // oe
  WPIPE_oe_2930_inst <=> (branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_oe_2930_Sample/req branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_oe_2930_Update/req) (branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_oe_2930_Sample/ack branch_block_stmt_2354/assign_stmt_2929_to_assign_stmt_2932/WPIPE_oe_2930_Update/ack)
  // 		busy := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 992
  // busy
  WPIPE_busy_2934_inst <=> (branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/WPIPE_busy_2934_Sample/req branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/WPIPE_busy_2934_Update/req) (branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/WPIPE_busy_2934_Sample/ack branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/WPIPE_busy_2934_Update/ack)
  // 		$guard (blockCountEnable) blockCountNext := (blockCount - 1 ) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 993
  // (blockCount - 1 )
  // blockCount
  SUB_u16_u16_2941_inst <=> (branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/SUB_u16_u16_2941_Sample/rr branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/SUB_u16_u16_2941_Update/cr) (branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/SUB_u16_u16_2941_Sample/ra branch_block_stmt_2354/assign_stmt_2936_to_assign_stmt_2942/SUB_u16_u16_2941_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (lastBlock == 1 )
  if_stmt_2943_branch <=> (branch_block_stmt_2354/if_stmt_2943_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2943_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2943_if_link/if_choice_transition)
  // 			presentState1Var := sdhcRegisters[37 ] $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 995
  // sdhcRegisters[37 ]
  array_obj_ref_2949_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Update/array_obj_ref_2949_Merge/merge_req) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Update/array_obj_ref_2949_Merge/merge_ack)
  array_obj_ref_2949_load_0 <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2949_Update/word_access_complete/word_0/ca)
  // 			presentState0Var := sdhcRegisters[36 ] $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 996
  // sdhcRegisters[36 ]
  array_obj_ref_2953_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Update/array_obj_ref_2953_Merge/merge_req) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Update/array_obj_ref_2953_Merge/merge_ack)
  array_obj_ref_2953_load_0 <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2953_Update/word_access_complete/word_0/ca)
  // 			sdhcRegisters[37 ] := (presentState1Var & _hfe ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 997
  // (presentState1Var & _hfe )
  // presentState1Var
  AND_u8_u8_2959_inst <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/AND_u8_u8_2959_Sample/rr branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/AND_u8_u8_2959_Update/cr) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/AND_u8_u8_2959_Sample/ra branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/AND_u8_u8_2959_Update/ca)
  array_obj_ref_2956_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Sample/array_obj_ref_2956_Split/split_req) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Sample/array_obj_ref_2956_Split/split_ack)
  array_obj_ref_2956_store_0 <=> (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2950_to_assign_stmt_2960/array_obj_ref_2956_Update/word_access_complete/word_0/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 999
  // 		wait := DAT0Rx $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1001
  // DAT0Rx
  RPIPE_DAT0Rx_2964_inst <=> (branch_block_stmt_2354/assign_stmt_2965/RPIPE_DAT0Rx_2964_Sample/rr branch_block_stmt_2354/assign_stmt_2965/RPIPE_DAT0Rx_2964_Update/cr) (branch_block_stmt_2354/assign_stmt_2965/RPIPE_DAT0Rx_2964_Sample/ra branch_block_stmt_2354/assign_stmt_2965/RPIPE_DAT0Rx_2964_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (wait == ZERO_1)
  if_stmt_2966_branch <=> (branch_block_stmt_2354/if_stmt_2966_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2966_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2966_if_link/if_choice_transition)
  // 		busy := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1005
  // busy
  WPIPE_busy_2972_inst <=> (branch_block_stmt_2354/assign_stmt_2974/WPIPE_busy_2972_Sample/req branch_block_stmt_2354/assign_stmt_2974/WPIPE_busy_2972_Update/req) (branch_block_stmt_2354/assign_stmt_2974/WPIPE_busy_2972_Sample/ack branch_block_stmt_2354/assign_stmt_2974/WPIPE_busy_2972_Update/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (lastBlock == 1 )
  if_stmt_2975_branch <=> (branch_block_stmt_2354/if_stmt_2975_eval_test/branch_req) (branch_block_stmt_2354/if_stmt_2975_else_link/else_choice_transition branch_block_stmt_2354/if_stmt_2975_if_link/if_choice_transition)
  // 			sdhcRegisters[36 ] := (presentState0Var & _hf9 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1007
  // (presentState0Var & _hf9 )
  // presentState0Var
  AND_u8_u8_2983_inst <=> (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/AND_u8_u8_2983_Sample/rr branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/AND_u8_u8_2983_Update/cr) (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/AND_u8_u8_2983_Sample/ra branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/AND_u8_u8_2983_Update/ca)
  array_obj_ref_2980_gather_scatter <=> (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Sample/array_obj_ref_2980_Split/split_req) (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Sample/array_obj_ref_2980_Split/split_ack)
  array_obj_ref_2980_store_0 <=> (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Sample/word_access_start/word_0/rr branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Update/word_access_complete/word_0/cr) (branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Sample/word_access_start/word_0/ra branch_block_stmt_2354/assign_stmt_2984_to_assign_stmt_2989/array_obj_ref_2980_Update/word_access_complete/word_0/ca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/sdhc.opt.aa, line 1013
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/sdhc.opt.aa, line 1013
  }
  // end data-path
}
$module [resetRegisters] 
{
  $in resetCondition:$int<2>
  // can point into 
  // pipe-declarations for block %resetRegisters
  //  file .Aa/sdhc.opt.aa, line 1020
  // pipe-declarations for block %resetRegisters%resetRegister
  //  file .Aa/sdhc.opt.aa, line 1034
  // pipe-declarations for block %resetRegisters%resetRegister%
  //  file .Aa/sdhc.opt.aa, line 1036
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_3004_to_call_stmt_3028] 
    {
      // start: 	$call writeSDHCRegisters (64  _h8A  ) () 
      //  file .Aa/sdhc.opt.aa, line 1025
      $T[call_stmt_3004_sample_start_] 
      $T[call_stmt_3004_sample_completed_] 
      $T[call_stmt_3004_update_start_] 
      $T[call_stmt_3004_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3004_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3004_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3004_sample_start_ &-> (call_stmt_3004_Sample)
      call_stmt_3004_sample_completed_ <-& (call_stmt_3004_Sample)
      call_stmt_3004_sample_completed_ &-> ($null)
      call_stmt_3004_update_start_ &-> (call_stmt_3004_Update)
      call_stmt_3004_update_completed_ <-& (call_stmt_3004_Update)
      // end: 	$call writeSDHCRegisters (64  _h8A  ) () 
      // start: 	$call writeSDHCRegisters (65  _h64  ) () 
      //  file .Aa/sdhc.opt.aa, line 1026
      $T[call_stmt_3007_sample_start_] 
      $T[call_stmt_3007_sample_completed_] 
      $T[call_stmt_3007_update_start_] 
      $T[call_stmt_3007_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3007_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3007_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3007_sample_start_ &-> (call_stmt_3007_Sample)
      call_stmt_3007_sample_completed_ <-& (call_stmt_3007_Sample)
      call_stmt_3007_sample_completed_ &-> ($null)
      call_stmt_3007_update_start_ &-> (call_stmt_3007_Update)
      call_stmt_3007_update_completed_ <-& (call_stmt_3007_Update)
      // end: 	$call writeSDHCRegisters (65  _h64  ) () 
      // start: 	$call writeSDHCRegisters (66  _h20  ) () 
      //  file .Aa/sdhc.opt.aa, line 1027
      $T[call_stmt_3010_sample_start_] 
      $T[call_stmt_3010_sample_completed_] 
      $T[call_stmt_3010_update_start_] 
      $T[call_stmt_3010_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3010_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3010_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3010_sample_start_ &-> (call_stmt_3010_Sample)
      call_stmt_3010_sample_completed_ <-& (call_stmt_3010_Sample)
      call_stmt_3010_sample_completed_ &-> ($null)
      call_stmt_3010_update_start_ &-> (call_stmt_3010_Update)
      call_stmt_3010_update_completed_ <-& (call_stmt_3010_Update)
      // end: 	$call writeSDHCRegisters (66  _h20  ) () 
      // start: 	$call writeSDHCRegisters (67  _h05  ) () 
      //  file .Aa/sdhc.opt.aa, line 1028
      $T[call_stmt_3013_sample_start_] 
      $T[call_stmt_3013_sample_completed_] 
      $T[call_stmt_3013_update_start_] 
      $T[call_stmt_3013_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3013_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3013_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3013_sample_start_ &-> (call_stmt_3013_Sample)
      call_stmt_3013_sample_completed_ <-& (call_stmt_3013_Sample)
      call_stmt_3013_sample_completed_ &-> ($null)
      call_stmt_3013_update_start_ &-> (call_stmt_3013_Update)
      call_stmt_3013_update_completed_ <-& (call_stmt_3013_Update)
      // end: 	$call writeSDHCRegisters (67  _h05  ) () 
      // start: 	$call writeSDHCRegisters (68  _h31  ) () 
      //  file .Aa/sdhc.opt.aa, line 1029
      $T[call_stmt_3016_sample_start_] 
      $T[call_stmt_3016_sample_completed_] 
      $T[call_stmt_3016_update_start_] 
      $T[call_stmt_3016_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3016_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3016_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3016_sample_start_ &-> (call_stmt_3016_Sample)
      call_stmt_3016_sample_completed_ <-& (call_stmt_3016_Sample)
      call_stmt_3016_sample_completed_ &-> ($null)
      call_stmt_3016_update_start_ &-> (call_stmt_3016_Update)
      call_stmt_3016_update_completed_ <-& (call_stmt_3016_Update)
      // end: 	$call writeSDHCRegisters (68  _h31  ) () 
      // start: 	$call writeSDHCRegisters (69  ZERO_8 ) () 
      //  file .Aa/sdhc.opt.aa, line 1030
      $T[call_stmt_3019_sample_start_] 
      $T[call_stmt_3019_sample_completed_] 
      $T[call_stmt_3019_update_start_] 
      $T[call_stmt_3019_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3019_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3019_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3019_sample_start_ &-> (call_stmt_3019_Sample)
      call_stmt_3019_sample_completed_ <-& (call_stmt_3019_Sample)
      call_stmt_3019_sample_completed_ &-> ($null)
      call_stmt_3019_update_start_ &-> (call_stmt_3019_Update)
      call_stmt_3019_update_completed_ <-& (call_stmt_3019_Update)
      // end: 	$call writeSDHCRegisters (69  ZERO_8 ) () 
      // start: 	$call writeSDHCRegisters (70  ZERO_8 ) () 
      //  file .Aa/sdhc.opt.aa, line 1031
      $T[call_stmt_3022_sample_start_] 
      $T[call_stmt_3022_sample_completed_] 
      $T[call_stmt_3022_update_start_] 
      $T[call_stmt_3022_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3022_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3022_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3022_sample_start_ &-> (call_stmt_3022_Sample)
      call_stmt_3022_sample_completed_ <-& (call_stmt_3022_Sample)
      call_stmt_3022_sample_completed_ &-> ($null)
      call_stmt_3022_update_start_ &-> (call_stmt_3022_Update)
      call_stmt_3022_update_completed_ <-& (call_stmt_3022_Update)
      // end: 	$call writeSDHCRegisters (70  ZERO_8 ) () 
      // start: 	$call writeSDHCRegisters (71  ZERO_8 ) () 
      //  file .Aa/sdhc.opt.aa, line 1032
      $T[call_stmt_3025_sample_start_] 
      $T[call_stmt_3025_sample_completed_] 
      $T[call_stmt_3025_update_start_] 
      $T[call_stmt_3025_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3025_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3025_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3025_sample_start_ &-> (call_stmt_3025_Sample)
      call_stmt_3025_sample_completed_ <-& (call_stmt_3025_Sample)
      call_stmt_3025_sample_completed_ &-> ($null)
      call_stmt_3025_update_start_ &-> (call_stmt_3025_Update)
      call_stmt_3025_update_completed_ <-& (call_stmt_3025_Update)
      // end: 	$call writeSDHCRegisters (71  ZERO_8 ) () 
      // start: 	$call writeSDHCRegisters (45  _h7D  ) () 
      //  file .Aa/sdhc.opt.aa, line 1033
      $T[call_stmt_3028_sample_start_] 
      $T[call_stmt_3028_sample_completed_] 
      $T[call_stmt_3028_update_start_] 
      $T[call_stmt_3028_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      ;;[call_stmt_3028_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3028_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3028_sample_start_ &-> (call_stmt_3028_Sample)
      call_stmt_3028_sample_completed_ <-& (call_stmt_3028_Sample)
      call_stmt_3028_sample_completed_ &-> ($null)
      call_stmt_3028_update_start_ &-> (call_stmt_3028_Update)
      call_stmt_3028_update_completed_ <-& (call_stmt_3028_Update)
      // end: 	$call writeSDHCRegisters (45  _h7D  ) () 
      // load-store dependencies..
      // memory-space  memory_space_8
      //  call_stmt_3004 store
      //  call_stmt_3007 store
      $T [call_stmt_3004_call_stmt_3007_delay] $delay
      // call_stmt_3004(store) -> call_stmt_3007(store)
      call_stmt_3007_sample_start_ <-& (call_stmt_3004_call_stmt_3007_delay)
      call_stmt_3004_call_stmt_3007_delay <-& (call_stmt_3004_update_completed_)
      //  call_stmt_3010 store
      $T [call_stmt_3007_call_stmt_3010_delay] $delay
      // call_stmt_3007(store) -> call_stmt_3010(store)
      call_stmt_3010_sample_start_ <-& (call_stmt_3007_call_stmt_3010_delay)
      call_stmt_3007_call_stmt_3010_delay <-& (call_stmt_3007_update_completed_)
      //  call_stmt_3013 store
      $T [call_stmt_3010_call_stmt_3013_delay] $delay
      // call_stmt_3010(store) -> call_stmt_3013(store)
      call_stmt_3013_sample_start_ <-& (call_stmt_3010_call_stmt_3013_delay)
      call_stmt_3010_call_stmt_3013_delay <-& (call_stmt_3010_update_completed_)
      //  call_stmt_3016 store
      $T [call_stmt_3013_call_stmt_3016_delay] $delay
      // call_stmt_3013(store) -> call_stmt_3016(store)
      call_stmt_3016_sample_start_ <-& (call_stmt_3013_call_stmt_3016_delay)
      call_stmt_3013_call_stmt_3016_delay <-& (call_stmt_3013_update_completed_)
      //  call_stmt_3019 store
      $T [call_stmt_3016_call_stmt_3019_delay] $delay
      // call_stmt_3016(store) -> call_stmt_3019(store)
      call_stmt_3019_sample_start_ <-& (call_stmt_3016_call_stmt_3019_delay)
      call_stmt_3016_call_stmt_3019_delay <-& (call_stmt_3016_update_completed_)
      //  call_stmt_3022 store
      $T [call_stmt_3019_call_stmt_3022_delay] $delay
      // call_stmt_3019(store) -> call_stmt_3022(store)
      call_stmt_3022_sample_start_ <-& (call_stmt_3019_call_stmt_3022_delay)
      call_stmt_3019_call_stmt_3022_delay <-& (call_stmt_3019_update_completed_)
      //  call_stmt_3025 store
      $T [call_stmt_3022_call_stmt_3025_delay] $delay
      // call_stmt_3022(store) -> call_stmt_3025(store)
      call_stmt_3025_sample_start_ <-& (call_stmt_3022_call_stmt_3025_delay)
      call_stmt_3022_call_stmt_3025_delay <-& (call_stmt_3022_update_completed_)
      //  call_stmt_3028 store
      $T [call_stmt_3025_call_stmt_3028_delay] $delay
      // call_stmt_3025(store) -> call_stmt_3028(store)
      call_stmt_3028_sample_start_ <-& (call_stmt_3025_call_stmt_3028_delay)
      call_stmt_3025_call_stmt_3028_delay <-& (call_stmt_3025_update_completed_)
    }
    <>[branch_block_stmt_3029] // Branch Block  file .Aa/sdhc.opt.aa, line 1034
    {
      $P [branch_block_stmt_3029__entry__]
      branch_block_stmt_3029__entry__ <-| ($entry)
      $P [branch_block_stmt_3029__exit__]
      branch_block_stmt_3029__exit__ |-> ($exit)
      $P [merge_stmt_3030__entry__] 
      $P [merge_stmt_3030__exit__] 
      $P [call_stmt_3039_to_assign_stmt_3056__entry__] 
      $P [call_stmt_3039_to_assign_stmt_3056__exit__] 
      $P [if_stmt_3057__entry__] 
      $P [if_stmt_3057__exit__] 
      $P [assign_stmt_3142__entry__] 
      $P [assign_stmt_3142__exit__] 
      $P [if_stmt_3143__entry__] 
      $P [if_stmt_3143__exit__] 
      $P [if_stmt_3149__entry__] 
      $P [if_stmt_3149__exit__] 
      $P [if_stmt_3159__entry__] 
      $P [if_stmt_3159__exit__] 
      ::[call_stmt_3039_to_assign_stmt_3056] 
      {
        // start: 		$call readSDHCRegisters (I ) (current_register_value ) 
        //  file .Aa/sdhc.opt.aa, line 1040
        $T[call_stmt_3039_sample_start_] 
        $T[call_stmt_3039_sample_completed_] 
        $T[call_stmt_3039_update_start_] 
        $T[call_stmt_3039_update_completed_] 
        // Call input argument 0
        // I
        // start: Forward dependencies from I to transition call_stmt_3039_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3039_sample_start_
        ;;[call_stmt_3039_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3039_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3039_sample_start_ &-> (call_stmt_3039_Sample)
        call_stmt_3039_sample_completed_ <-& (call_stmt_3039_Sample)
        call_stmt_3039_sample_completed_ &-> ($null)
        call_stmt_3039_update_start_ &-> (call_stmt_3039_Update)
        call_stmt_3039_update_completed_ <-& (call_stmt_3039_Update)
        // Call output argument 0
        // (as target) current_register_value
        // start: WAR dependencies for current_register_value
        // done: WAR dependencies for current_register_value
        // end: 		$call readSDHCRegisters (I ) (current_register_value ) 
        // start: 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
        //  file .Aa/sdhc.opt.aa, line 1041
        $T[call_stmt_3042_sample_start_] 
        $T[call_stmt_3042_sample_completed_] 
        $T[call_stmt_3042_update_start_] 
        $T[call_stmt_3042_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3042_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3042_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3042_sample_start_ &-> (call_stmt_3042_Sample)
        call_stmt_3042_sample_completed_ <-& (call_stmt_3042_Sample)
        call_stmt_3042_sample_completed_ &-> ($null)
        call_stmt_3042_update_start_ &-> (call_stmt_3042_Update)
        call_stmt_3042_update_completed_ <-& (call_stmt_3042_Update)
        // Call output argument 0
        // (as target) current_softwarereset_register_value
        // start: WAR dependencies for current_softwarereset_register_value
        // done: WAR dependencies for current_softwarereset_register_value
        // end: 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
        // start: WAR dependencies for condition
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for condition
        // start:  		$volatile condition := ((I >= 64 ) & (I < 72 )) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1042
        // volatile! 
        // Source expression
        // ((I >= 64 ) & (I < 72 ))
        // (I >= 64 )
        // I
        // (I < 72 )
        // I
        // Target expression
        // (as target) condition
        // start: WAR dependencies for condition
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for condition
        // end:  		$volatile condition := ((I >= 64 ) & (I < 72 )) $buffering 1
        // start: WAR dependencies for condition5
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for condition5
        // start:  		$volatile condition5 := (I == 45 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1043
        // volatile! 
        // Source expression
        // (I == 45 )
        // I
        // Target expression
        // (as target) condition5
        // start: WAR dependencies for condition5
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for condition5
        // end:  		$volatile condition5 := (I == 45 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3039 load
        //  call_stmt_3042 load
      }
      call_stmt_3039_to_assign_stmt_3056__entry__ |-> (call_stmt_3039_to_assign_stmt_3056)
      call_stmt_3039_to_assign_stmt_3056__exit__ <-| (call_stmt_3039_to_assign_stmt_3056)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1044
      ;;[if_stmt_3057_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3057__entry__ |-> (if_stmt_3057_dead_link)
      if_stmt_3057__exit__ <-| (if_stmt_3057_dead_link)
      ;;[if_stmt_3057_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (condition | condition5)
        ;;[OR_u1_u1_3060] 
        {
          // binary expression 
          ||[OR_u1_u1_3060_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3057__entry__ |-> (if_stmt_3057_eval_test)
      $P [OR_u1_u1_3060_place]
      OR_u1_u1_3060_place <-| (if_stmt_3057_eval_test)
      ;;[if_stmt_3057_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3057_else_link] 
      {
        $T [else_choice_transition] 
      }
      OR_u1_u1_3060_place |-> (if_stmt_3057_if_link if_stmt_3057_else_link)
      $P[if_stmt_3057_if_link_to_if_stmt_3057__exit__] 
      if_stmt_3057_if_link_to_if_stmt_3057__exit__ <-| (if_stmt_3057_if_link)
      if_stmt_3057_if_link_to_if_stmt_3057__exit__ |-> (if_stmt_3057__exit__)
      $P [if_stmt_3063__entry__] 
      $P [if_stmt_3063__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1047
      ;;[if_stmt_3063_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3063__entry__ |-> (if_stmt_3063_dead_link)
      if_stmt_3063__exit__ <-| (if_stmt_3063_dead_link)
      ;;[if_stmt_3063_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (resetCondition == ZERO_2)
        ;;[EQ_u2_u1_3066] 
        {
          // binary expression 
          ||[EQ_u2_u1_3066_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3063__entry__ |-> (if_stmt_3063_eval_test)
      $P [EQ_u2_u1_3066_place]
      EQ_u2_u1_3066_place <-| (if_stmt_3063_eval_test)
      ;;[if_stmt_3063_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3063_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_3066_place |-> (if_stmt_3063_if_link if_stmt_3063_else_link)
      $P [call_stmt_3069__entry__] 
      $P [call_stmt_3069__exit__] 
      ::[call_stmt_3069] 
      {
        // start: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1048
        $T[call_stmt_3069_sample_start_] 
        $T[call_stmt_3069_sample_completed_] 
        $T[call_stmt_3069_update_start_] 
        $T[call_stmt_3069_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // start: Forward dependencies from I to transition call_stmt_3069_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3069_sample_start_
        ;;[call_stmt_3069_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3069_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3069_sample_start_ &-> (call_stmt_3069_Sample)
        call_stmt_3069_sample_completed_ <-& (call_stmt_3069_Sample)
        call_stmt_3069_sample_completed_ &-> ($null)
        call_stmt_3069_update_start_ &-> (call_stmt_3069_Update)
        call_stmt_3069_update_completed_ <-& (call_stmt_3069_Update)
        // end: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3069 store
      }
      call_stmt_3069__entry__ |-> (call_stmt_3069)
      call_stmt_3069__exit__ <-| (call_stmt_3069)
      call_stmt_3069__entry__ <-| (if_stmt_3063_if_link)
      call_stmt_3069__exit__ |-> (if_stmt_3063__exit__)
      $P [if_stmt_3071__entry__] 
      $P [if_stmt_3071__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1050
      ;;[if_stmt_3071_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3071__entry__ |-> (if_stmt_3071_dead_link)
      if_stmt_3071__exit__ <-| (if_stmt_3071_dead_link)
      ;;[if_stmt_3071_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((resetCondition == ONE_2) & ((I == 36 ) | (I == 48 )))
        ;;[AND_u1_u1_3082] 
        {
          // binary expression 
          ||[AND_u1_u1_3082_inputs] 
          {
            // (resetCondition == ONE_2)
            ;;[EQ_u2_u1_3074] 
            {
              // binary expression 
              ||[EQ_u2_u1_3074_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // ((I == 36 ) | (I == 48 ))
            ;;[OR_u1_u1_3081] 
            {
              // binary expression 
              ||[OR_u1_u1_3081_inputs] 
              {
                // (I == 36 )
                ;;[EQ_u8_u1_3077] 
                {
                  // binary expression 
                  ||[EQ_u8_u1_3077_inputs] 
                  {
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca]
                    }
                  }
                }
                // (I == 48 )
                ;;[EQ_u8_u1_3080] 
                {
                  // binary expression 
                  ||[EQ_u8_u1_3080_inputs] 
                  {
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca]
                    }
                  }
                }
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3071__entry__ |-> (if_stmt_3071_eval_test)
      $P [AND_u1_u1_3082_place]
      AND_u1_u1_3082_place <-| (if_stmt_3071_eval_test)
      ;;[if_stmt_3071_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3071_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_3082_place |-> (if_stmt_3071_if_link if_stmt_3071_else_link)
      $P [call_stmt_3087__entry__] 
      $P [call_stmt_3087__exit__] 
      ::[call_stmt_3087] 
      {
        // start: 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1051
        $T[call_stmt_3087_sample_start_] 
        $T[call_stmt_3087_sample_completed_] 
        $T[call_stmt_3087_update_start_] 
        $T[call_stmt_3087_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // (current_register_value & _hfe )
        // current_register_value
        // start: Forward dependencies from I to transition call_stmt_3087_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3087_sample_start_
        // start: Forward dependencies from (current_register_value & _hfe ) to transition call_stmt_3087_sample_start_
        // done: Forward dependencies from (current_register_value & _hfe ) to transition call_stmt_3087_sample_start_
        ;;[call_stmt_3087_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3087_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3087_sample_start_ &-> (call_stmt_3087_Sample)
        call_stmt_3087_sample_completed_ <-& (call_stmt_3087_Sample)
        call_stmt_3087_sample_completed_ &-> ($null)
        call_stmt_3087_update_start_ &-> (call_stmt_3087_Update)
        call_stmt_3087_update_completed_ <-& (call_stmt_3087_Update)
        // end: 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3087 store
      }
      call_stmt_3087__entry__ |-> (call_stmt_3087)
      call_stmt_3087__exit__ <-| (call_stmt_3087)
      call_stmt_3087__entry__ <-| (if_stmt_3071_if_link)
      call_stmt_3087__exit__ |-> (if_stmt_3071__exit__)
      $P [if_stmt_3089__entry__] 
      $P [if_stmt_3089__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3089_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3089__entry__ |-> (if_stmt_3089_dead_link)
      if_stmt_3089__exit__ <-| (if_stmt_3089_dead_link)
      ;;[if_stmt_3089_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (resetCondition == ($bitcast ($uint<2>) 2  ))
        ;;[EQ_u2_u1_3093] 
        {
          // binary expression 
          ||[EQ_u2_u1_3093_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3089__entry__ |-> (if_stmt_3089_eval_test)
      $P [EQ_u2_u1_3093_place]
      EQ_u2_u1_3093_place <-| (if_stmt_3089_eval_test)
      ;;[if_stmt_3089_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3089_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_3093_place |-> (if_stmt_3089_if_link if_stmt_3089_else_link)
      $P [if_stmt_3094__entry__] 
      $P [if_stmt_3094__exit__] 
      $P [if_stmt_3106__entry__] 
      $P [if_stmt_3106__exit__] 
      $P [if_stmt_3116__entry__] 
      $P [if_stmt_3116__exit__] 
      $P [if_stmt_3124__entry__] 
      $P [if_stmt_3124__exit__] 
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3094_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3094__entry__ |-> (if_stmt_3094_dead_link)
      if_stmt_3094__exit__ <-| (if_stmt_3094_dead_link)
      ;;[if_stmt_3094_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((I >= 32 ) & (I < 36 ))
        ;;[AND_u1_u1_3101] 
        {
          // binary expression 
          ||[AND_u1_u1_3101_inputs] 
          {
            // (I >= 32 )
            ;;[UGE_u8_u1_3097] 
            {
              // binary expression 
              ||[UGE_u8_u1_3097_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // (I < 36 )
            ;;[ULT_u8_u1_3100] 
            {
              // binary expression 
              ||[ULT_u8_u1_3100_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3094__entry__ |-> (if_stmt_3094_eval_test)
      $P [AND_u1_u1_3101_place]
      AND_u1_u1_3101_place <-| (if_stmt_3094_eval_test)
      ;;[if_stmt_3094_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3094_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_3101_place |-> (if_stmt_3094_if_link if_stmt_3094_else_link)
      $P [call_stmt_3104__entry__] 
      $P [call_stmt_3104__exit__] 
      ::[call_stmt_3104] 
      {
        // start: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1055
        $T[call_stmt_3104_sample_start_] 
        $T[call_stmt_3104_sample_completed_] 
        $T[call_stmt_3104_update_start_] 
        $T[call_stmt_3104_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // start: Forward dependencies from I to transition call_stmt_3104_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3104_sample_start_
        ;;[call_stmt_3104_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3104_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3104_sample_start_ &-> (call_stmt_3104_Sample)
        call_stmt_3104_sample_completed_ <-& (call_stmt_3104_Sample)
        call_stmt_3104_sample_completed_ &-> ($null)
        call_stmt_3104_update_start_ &-> (call_stmt_3104_Update)
        call_stmt_3104_update_completed_ <-& (call_stmt_3104_Update)
        // end: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3104 store
      }
      call_stmt_3104__entry__ |-> (call_stmt_3104)
      call_stmt_3104__exit__ <-| (call_stmt_3104)
      call_stmt_3104__entry__ <-| (if_stmt_3094_if_link)
      call_stmt_3104__exit__ |-> (if_stmt_3094__exit__)
      if_stmt_3094__exit__ <-| (if_stmt_3094_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3106_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3106__entry__ |-> (if_stmt_3106_dead_link)
      if_stmt_3106__exit__ <-| (if_stmt_3106_dead_link)
      ;;[if_stmt_3106_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (I == 36 )
        ;;[EQ_u8_u1_3109] 
        {
          // binary expression 
          ||[EQ_u8_u1_3109_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3106__entry__ |-> (if_stmt_3106_eval_test)
      $P [EQ_u8_u1_3109_place]
      EQ_u8_u1_3109_place <-| (if_stmt_3106_eval_test)
      ;;[if_stmt_3106_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3106_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_3109_place |-> (if_stmt_3106_if_link if_stmt_3106_else_link)
      $P [call_stmt_3114__entry__] 
      $P [call_stmt_3114__exit__] 
      ::[call_stmt_3114] 
      {
        // start: 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1058
        $T[call_stmt_3114_sample_start_] 
        $T[call_stmt_3114_sample_completed_] 
        $T[call_stmt_3114_update_start_] 
        $T[call_stmt_3114_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // (current_register_value & _h09 )
        // current_register_value
        // start: Forward dependencies from I to transition call_stmt_3114_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3114_sample_start_
        // start: Forward dependencies from (current_register_value & _h09 ) to transition call_stmt_3114_sample_start_
        // done: Forward dependencies from (current_register_value & _h09 ) to transition call_stmt_3114_sample_start_
        ;;[call_stmt_3114_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3114_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3114_sample_start_ &-> (call_stmt_3114_Sample)
        call_stmt_3114_sample_completed_ <-& (call_stmt_3114_Sample)
        call_stmt_3114_sample_completed_ &-> ($null)
        call_stmt_3114_update_start_ &-> (call_stmt_3114_Update)
        call_stmt_3114_update_completed_ <-& (call_stmt_3114_Update)
        // end: 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3114 store
      }
      call_stmt_3114__entry__ |-> (call_stmt_3114)
      call_stmt_3114__exit__ <-| (call_stmt_3114)
      call_stmt_3114__entry__ <-| (if_stmt_3106_if_link)
      call_stmt_3114__exit__ |-> (if_stmt_3106__exit__)
      if_stmt_3106__exit__ <-| (if_stmt_3106_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3116_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3116__entry__ |-> (if_stmt_3116_dead_link)
      if_stmt_3116__exit__ <-| (if_stmt_3116_dead_link)
      ;;[if_stmt_3116_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (I == 37 )
        ;;[EQ_u8_u1_3119] 
        {
          // binary expression 
          ||[EQ_u8_u1_3119_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3116__entry__ |-> (if_stmt_3116_eval_test)
      $P [EQ_u8_u1_3119_place]
      EQ_u8_u1_3119_place <-| (if_stmt_3116_eval_test)
      ;;[if_stmt_3116_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3116_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_3119_place |-> (if_stmt_3116_if_link if_stmt_3116_else_link)
      $P [call_stmt_3122__entry__] 
      $P [call_stmt_3122__exit__] 
      ::[call_stmt_3122] 
      {
        // start: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1061
        $T[call_stmt_3122_sample_start_] 
        $T[call_stmt_3122_sample_completed_] 
        $T[call_stmt_3122_update_start_] 
        $T[call_stmt_3122_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // start: Forward dependencies from I to transition call_stmt_3122_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3122_sample_start_
        ;;[call_stmt_3122_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3122_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3122_sample_start_ &-> (call_stmt_3122_Sample)
        call_stmt_3122_sample_completed_ <-& (call_stmt_3122_Sample)
        call_stmt_3122_sample_completed_ &-> ($null)
        call_stmt_3122_update_start_ &-> (call_stmt_3122_Update)
        call_stmt_3122_update_completed_ <-& (call_stmt_3122_Update)
        // end: 			$call writeSDHCRegisters (I ZERO_8 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3122 store
      }
      call_stmt_3122__entry__ |-> (call_stmt_3122)
      call_stmt_3122__exit__ <-| (call_stmt_3122)
      call_stmt_3122__entry__ <-| (if_stmt_3116_if_link)
      call_stmt_3122__exit__ |-> (if_stmt_3116__exit__)
      if_stmt_3116__exit__ <-| (if_stmt_3116_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3124_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3124__entry__ |-> (if_stmt_3124_dead_link)
      if_stmt_3124__exit__ <-| (if_stmt_3124_dead_link)
      ;;[if_stmt_3124_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (I == 48 )
        ;;[EQ_u8_u1_3127] 
        {
          // binary expression 
          ||[EQ_u8_u1_3127_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3124__entry__ |-> (if_stmt_3124_eval_test)
      $P [EQ_u8_u1_3127_place]
      EQ_u8_u1_3127_place <-| (if_stmt_3124_eval_test)
      ;;[if_stmt_3124_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3124_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_3127_place |-> (if_stmt_3124_if_link if_stmt_3124_else_link)
      $P [call_stmt_3132__entry__] 
      $P [call_stmt_3132__exit__] 
      ::[call_stmt_3132] 
      {
        // start: 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1064
        $T[call_stmt_3132_sample_start_] 
        $T[call_stmt_3132_sample_completed_] 
        $T[call_stmt_3132_update_start_] 
        $T[call_stmt_3132_update_completed_] 
        // Call input argument 0
        // I
        // Call input argument 1
        // (current_register_value & _hC1 )
        // current_register_value
        // start: Forward dependencies from I to transition call_stmt_3132_sample_start_
        // done: Forward dependencies from I to transition call_stmt_3132_sample_start_
        // start: Forward dependencies from (current_register_value & _hC1 ) to transition call_stmt_3132_sample_start_
        // done: Forward dependencies from (current_register_value & _hC1 ) to transition call_stmt_3132_sample_start_
        ;;[call_stmt_3132_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3132_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3132_sample_start_ &-> (call_stmt_3132_Sample)
        call_stmt_3132_sample_completed_ <-& (call_stmt_3132_Sample)
        call_stmt_3132_sample_completed_ &-> ($null)
        call_stmt_3132_update_start_ &-> (call_stmt_3132_Update)
        call_stmt_3132_update_completed_ <-& (call_stmt_3132_Update)
        // end: 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3132 store
      }
      call_stmt_3132__entry__ |-> (call_stmt_3132)
      call_stmt_3132__exit__ <-| (call_stmt_3132)
      call_stmt_3132__entry__ <-| (if_stmt_3124_if_link)
      call_stmt_3132__exit__ |-> (if_stmt_3124__exit__)
      if_stmt_3124__exit__ <-| (if_stmt_3124_else_link)
      if_stmt_3094__entry__ <-| (if_stmt_3089_if_link)
      if_stmt_3106__entry__ <-| (if_stmt_3094__exit__)
      if_stmt_3116__entry__ <-| (if_stmt_3106__exit__)
      if_stmt_3124__entry__ <-| (if_stmt_3116__exit__)
      if_stmt_3124__exit__ |-> (if_stmt_3089__exit__)
      if_stmt_3089__exit__ <-| (if_stmt_3089_else_link)
      if_stmt_3089__entry__ <-| (if_stmt_3071_else_link)
      if_stmt_3089__exit__ |-> (if_stmt_3071__exit__)
      if_stmt_3071__entry__ <-| (if_stmt_3063_else_link)
      if_stmt_3071__exit__ |-> (if_stmt_3063__exit__)
      if_stmt_3063__entry__ <-| (if_stmt_3057_else_link)
      if_stmt_3063__exit__ |-> (if_stmt_3057__exit__)
      ::[assign_stmt_3142] 
      {
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for next_I
        // start:  		$volatile next_I := (I + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1070
        // volatile! 
        // Source expression
        // (I + 1 )
        // I
        // Target expression
        // (as target) next_I
        // start: WAR dependencies for next_I
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for next_I
        // end:  		$volatile next_I := (I + 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_3142__entry__ |-> (assign_stmt_3142)
      assign_stmt_3142__exit__ <-| (assign_stmt_3142)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3143_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3143__entry__ |-> (if_stmt_3143_dead_link)
      if_stmt_3143__exit__ <-| (if_stmt_3143_dead_link)
      ;;[if_stmt_3143_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_I < 72 )
        ;;[ULT_u8_u1_3146] 
        {
          // binary expression 
          ||[ULT_u8_u1_3146_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3143__entry__ |-> (if_stmt_3143_eval_test)
      $P [ULT_u8_u1_3146_place]
      ULT_u8_u1_3146_place <-| (if_stmt_3143_eval_test)
      ;;[if_stmt_3143_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3143_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_3146_place |-> (if_stmt_3143_if_link if_stmt_3143_else_link)
      $P [loopback]
      loopback <-| (if_stmt_3143_if_link)
      if_stmt_3143__exit__ <-| (if_stmt_3143_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3149_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3149__entry__ |-> (if_stmt_3149_dead_link)
      if_stmt_3149__exit__ <-| (if_stmt_3149_dead_link)
      ;;[if_stmt_3149_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (resetCondition == ONE_2)
        ;;[EQ_u2_u1_3152] 
        {
          // binary expression 
          ||[EQ_u2_u1_3152_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3149__entry__ |-> (if_stmt_3149_eval_test)
      $P [EQ_u2_u1_3152_place]
      EQ_u2_u1_3152_place <-| (if_stmt_3149_eval_test)
      ;;[if_stmt_3149_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3149_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_3152_place |-> (if_stmt_3149_if_link if_stmt_3149_else_link)
      $P [call_stmt_3157__entry__] 
      $P [call_stmt_3157__exit__] 
      ::[call_stmt_3157] 
      {
        // start: 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1075
        $T[call_stmt_3157_sample_start_] 
        $T[call_stmt_3157_sample_completed_] 
        $T[call_stmt_3157_update_start_] 
        $T[call_stmt_3157_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (current_softwarereset_register_value & _hfd )
        // current_softwarereset_register_value
        // start: Forward dependencies from (current_softwarereset_register_value & _hfd ) to transition call_stmt_3157_sample_start_
        // done: Forward dependencies from (current_softwarereset_register_value & _hfd ) to transition call_stmt_3157_sample_start_
        ;;[call_stmt_3157_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3157_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3157_sample_start_ &-> (call_stmt_3157_Sample)
        call_stmt_3157_sample_completed_ <-& (call_stmt_3157_Sample)
        call_stmt_3157_sample_completed_ &-> ($null)
        call_stmt_3157_update_start_ &-> (call_stmt_3157_Update)
        call_stmt_3157_update_completed_ <-& (call_stmt_3157_Update)
        // end: 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3157 store
      }
      call_stmt_3157__entry__ |-> (call_stmt_3157)
      call_stmt_3157__exit__ <-| (call_stmt_3157)
      call_stmt_3157__entry__ <-| (if_stmt_3149_if_link)
      call_stmt_3157__exit__ |-> (if_stmt_3149__exit__)
      if_stmt_3149__exit__ <-| (if_stmt_3149_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3159_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3159__entry__ |-> (if_stmt_3159_dead_link)
      if_stmt_3159__exit__ <-| (if_stmt_3159_dead_link)
      ;;[if_stmt_3159_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (resetCondition == ($bitcast ($uint<2>) 2  ))
        ;;[EQ_u2_u1_3163] 
        {
          // binary expression 
          ||[EQ_u2_u1_3163_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3159__entry__ |-> (if_stmt_3159_eval_test)
      $P [EQ_u2_u1_3163_place]
      EQ_u2_u1_3163_place <-| (if_stmt_3159_eval_test)
      ;;[if_stmt_3159_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3159_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u2_u1_3163_place |-> (if_stmt_3159_if_link if_stmt_3159_else_link)
      $P [call_stmt_3168__entry__] 
      $P [call_stmt_3168__exit__] 
      ::[call_stmt_3168] 
      {
        // start: 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1078
        $T[call_stmt_3168_sample_start_] 
        $T[call_stmt_3168_sample_completed_] 
        $T[call_stmt_3168_update_start_] 
        $T[call_stmt_3168_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (current_softwarereset_register_value & _hfb )
        // current_softwarereset_register_value
        // start: Forward dependencies from (current_softwarereset_register_value & _hfb ) to transition call_stmt_3168_sample_start_
        // done: Forward dependencies from (current_softwarereset_register_value & _hfb ) to transition call_stmt_3168_sample_start_
        ;;[call_stmt_3168_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3168_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3168_sample_start_ &-> (call_stmt_3168_Sample)
        call_stmt_3168_sample_completed_ <-& (call_stmt_3168_Sample)
        call_stmt_3168_sample_completed_ &-> ($null)
        call_stmt_3168_update_start_ &-> (call_stmt_3168_Update)
        call_stmt_3168_update_completed_ <-& (call_stmt_3168_Update)
        // end: 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3168 store
      }
      call_stmt_3168__entry__ |-> (call_stmt_3168)
      call_stmt_3168__exit__ <-| (call_stmt_3168)
      call_stmt_3168__entry__ <-| (if_stmt_3159_if_link)
      call_stmt_3168__exit__ |-> (if_stmt_3159__exit__)
      if_stmt_3159__exit__ <-| (if_stmt_3159_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1036
      ;;[merge_stmt_3030_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3030__entry__ |-> (merge_stmt_3030_dead_link)
      merge_stmt_3030__exit__ <-| (merge_stmt_3030_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1036  --------------------------
      ||[merge_stmt_3030__entry___PhiReq] 
      {
        ;;[phi_stmt_3031] 
        {
          ||[phi_stmt_3031_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_3034_konst_delay_trans] $delay
          }
          $T [phi_stmt_3031_req] 
        }
      }
      merge_stmt_3030__entry__ |-> (merge_stmt_3030__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_3031] 
        {
          ||[phi_stmt_3031_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3031_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_3030_PhiReqMerge] 
      merge_stmt_3030_PhiReqMerge <-| ( merge_stmt_3030__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_3030_PhiAck] 
      {
        $T [phi_stmt_3031_ack] 
      }
      merge_stmt_3030_PhiReqMerge |-> (merge_stmt_3030_PhiAck)
      merge_stmt_3030__exit__  <-| (merge_stmt_3030_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1036  --------------------------
      merge_stmt_3030__entry__ <-| (branch_block_stmt_3029__entry__)
      call_stmt_3039_to_assign_stmt_3056__entry__ <-| (merge_stmt_3030__exit__)
      if_stmt_3057__entry__ <-| (call_stmt_3039_to_assign_stmt_3056__exit__)
      assign_stmt_3142__entry__ <-| (if_stmt_3057__exit__)
      if_stmt_3143__entry__ <-| (assign_stmt_3142__exit__)
      if_stmt_3149__entry__ <-| (if_stmt_3143__exit__)
      if_stmt_3159__entry__ <-| (if_stmt_3149__exit__)
      if_stmt_3159__exit__ |-> (branch_block_stmt_3029__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %resetRegisters%resetRegister%
    //  file .Aa/sdhc.opt.aa, line 1036
    // constant-object-declarations for block %resetRegisters%resetRegister
    //  file .Aa/sdhc.opt.aa, line 1034
    // constant-object-declarations for block %resetRegisters
    //  file .Aa/sdhc.opt.aa, line 1020
    // 	$call writeSDHCRegisters (64  _h8A  ) () 
    //  file .Aa/sdhc.opt.aa, line 1025
    // 64 
    $constant $W[konst_3002_wire_constant] : $int<8> := _b01000000// 64
    // _h8A 
    $constant $W[konst_3003_wire_constant] : $int<8> := _b10001010// 138
    // 	$call writeSDHCRegisters (65  _h64  ) () 
    //  file .Aa/sdhc.opt.aa, line 1026
    // 65 
    $constant $W[konst_3005_wire_constant] : $int<8> := _b01000001// 65
    // _h64 
    $constant $W[konst_3006_wire_constant] : $int<8> := _b01100100// 100
    // 	$call writeSDHCRegisters (66  _h20  ) () 
    //  file .Aa/sdhc.opt.aa, line 1027
    // 66 
    $constant $W[konst_3008_wire_constant] : $int<8> := _b01000010// 66
    // _h20 
    $constant $W[konst_3009_wire_constant] : $int<8> := _b00100000// 32
    // 	$call writeSDHCRegisters (67  _h05  ) () 
    //  file .Aa/sdhc.opt.aa, line 1028
    // 67 
    $constant $W[konst_3011_wire_constant] : $int<8> := _b01000011// 67
    // _h05 
    $constant $W[konst_3012_wire_constant] : $int<8> := _b00000101// 5
    // 	$call writeSDHCRegisters (68  _h31  ) () 
    //  file .Aa/sdhc.opt.aa, line 1029
    // 68 
    $constant $W[konst_3014_wire_constant] : $int<8> := _b01000100// 68
    // _h31 
    $constant $W[konst_3015_wire_constant] : $int<8> := _b00110001// 49
    // 	$call writeSDHCRegisters (69  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1030
    // 69 
    $constant $W[konst_3017_wire_constant] : $int<8> := _b01000101// 69
    // ZERO_8
    $constant $W[R_ZERO_8_3018_wire_constant] : $int<8> := _b00000000// 0
    // 	$call writeSDHCRegisters (70  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1031
    // 70 
    $constant $W[konst_3020_wire_constant] : $int<8> := _b01000110// 70
    // ZERO_8
    $constant $W[R_ZERO_8_3021_wire_constant] : $int<8> := _b00000000// 0
    // 	$call writeSDHCRegisters (71  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1032
    // 71 
    $constant $W[konst_3023_wire_constant] : $int<8> := _b01000111// 71
    // ZERO_8
    $constant $W[R_ZERO_8_3024_wire_constant] : $int<8> := _b00000000// 0
    // 	$call writeSDHCRegisters (45  _h7D  ) () 
    //  file .Aa/sdhc.opt.aa, line 1033
    // 45 
    $constant $W[konst_3026_wire_constant] : $int<8> := _b00101101// 45
    // _h7D 
    $constant $W[konst_3027_wire_constant] : $int<8> := _b01111101// 125
    // constant-declarations for block %resetRegisters%resetRegister
    //  file .Aa/sdhc.opt.aa, line 1034
    // constant-declarations for block %resetRegisters%resetRegister%
    //  file .Aa/sdhc.opt.aa, line 1036
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1037
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_3034_wire_constant] : $int<8> := _b00000000// 0
    // 		$call readSDHCRegisters (I ) (current_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1040
    // 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1041
    // 47 
    $constant $W[konst_3040_wire_constant] : $int<8> := _b00101111// 47
    // 64 
    $constant $W[konst_3045_wire_constant] : $int<8> := _b01000000// 64
    // 72 
    $constant $W[konst_3048_wire_constant] : $int<8> := _b01001000// 72
    // 45 
    $constant $W[konst_3054_wire_constant] : $int<8> := _b00101101// 45
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1044
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1047
    // ZERO_2
    $constant $W[R_ZERO_2_3065_wire_constant] : $int<2> := _b00// 0
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1048
    // ZERO_8
    $constant $W[R_ZERO_8_3068_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1050
    // ONE_2
    $constant $W[R_ONE_2_3073_wire_constant] : $int<2> := _b01// 1
    // 36 
    $constant $W[konst_3076_wire_constant] : $int<8> := _b00100100// 36
    // 48 
    $constant $W[konst_3079_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1051
    // _hfe 
    $constant $W[konst_3085_wire_constant] : $int<8> := _b11111110// 254
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // ($bitcast ($uint<2>) 2  )
    $constant $W[type_cast_3092_wire_constant] : $int<2> := _b10// 2
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 32 
    $constant $W[konst_3096_wire_constant] : $int<8> := _b00100000// 32
    // 36 
    $constant $W[konst_3099_wire_constant] : $int<8> := _b00100100// 36
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1055
    // ZERO_8
    $constant $W[R_ZERO_8_3103_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 36 
    $constant $W[konst_3108_wire_constant] : $int<8> := _b00100100// 36
    // 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1058
    // _h09 
    $constant $W[konst_3112_wire_constant] : $int<8> := _b00001001// 9
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 37 
    $constant $W[konst_3118_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1061
    // ZERO_8
    $constant $W[R_ZERO_8_3121_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 48 
    $constant $W[konst_3126_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1064
    // _hC1 
    $constant $W[konst_3130_wire_constant] : $int<8> := _b11000001// 193
    // 1 
    $constant $W[konst_3140_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 72 
    $constant $W[konst_3145_wire_constant] : $int<8> := _b01001000// 72
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // ONE_2
    $constant $W[R_ONE_2_3151_wire_constant] : $int<2> := _b01// 1
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1075
    // 47 
    $constant $W[konst_3153_wire_constant] : $int<8> := _b00101111// 47
    // _hfd 
    $constant $W[konst_3155_wire_constant] : $int<8> := _b11111101// 253
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // ($bitcast ($uint<2>) 2  )
    $constant $W[type_cast_3162_wire_constant] : $int<2> := _b10// 2
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1078
    // 47 
    $constant $W[konst_3164_wire_constant] : $int<8> := _b00101111// 47
    // _hfb 
    $constant $W[konst_3166_wire_constant] : $int<8> := _b11111011// 251
    // 	$call writeSDHCRegisters (64  _h8A  ) () 
    //  file .Aa/sdhc.opt.aa, line 1025
    // 	$call writeSDHCRegisters (65  _h64  ) () 
    //  file .Aa/sdhc.opt.aa, line 1026
    // 	$call writeSDHCRegisters (66  _h20  ) () 
    //  file .Aa/sdhc.opt.aa, line 1027
    // 	$call writeSDHCRegisters (67  _h05  ) () 
    //  file .Aa/sdhc.opt.aa, line 1028
    // 	$call writeSDHCRegisters (68  _h31  ) () 
    //  file .Aa/sdhc.opt.aa, line 1029
    // 	$call writeSDHCRegisters (69  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1030
    // 	$call writeSDHCRegisters (70  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1031
    // 	$call writeSDHCRegisters (71  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1032
    // 	$call writeSDHCRegisters (45  _h7D  ) () 
    //  file .Aa/sdhc.opt.aa, line 1033
    // block %resetRegisters%resetRegister
    //  file .Aa/sdhc.opt.aa, line 1034
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1036
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1037
    $W[next_I_3142_3035_buffered] : $int<8>
    // I
    $W[I_3031] : $int<8>
    // 		$call readSDHCRegisters (I ) (current_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1040
    // current_register_value
    $W[current_register_value_3039] : $int<8>
    // 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1041
    // current_softwarereset_register_value
    $W[current_softwarereset_register_value_3042] : $int<8>
    // 		$volatile condition := ((I >= 64 ) & (I < 72 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1042
    // (I >= 64 )
    $intermediate $W[UGE_u8_u1_3046_wire] : $int<1>
    // (I < 72 )
    $intermediate $W[ULT_u8_u1_3049_wire] : $int<1>
    // condition
    $W[condition_3051] : $int<1>
    // 		$volatile condition5 := (I == 45 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1043
    // condition5
    $W[condition5_3056] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1044
    // (condition | condition5)
    $intermediate $W[OR_u1_u1_3060_wire] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1047
    // (resetCondition == ZERO_2)
    $intermediate $W[EQ_u2_u1_3066_wire] : $int<1>
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1048
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1050
    // (resetCondition == ONE_2)
    $intermediate $W[EQ_u2_u1_3074_wire] : $int<1>
    // (I == 36 )
    $intermediate $W[EQ_u8_u1_3077_wire] : $int<1>
    // (I == 48 )
    $intermediate $W[EQ_u8_u1_3080_wire] : $int<1>
    // ((I == 36 ) | (I == 48 ))
    $intermediate $W[OR_u1_u1_3081_wire] : $int<1>
    // ((resetCondition == ONE_2) & ((I == 36 ) | (I == 48 )))
    $intermediate $W[AND_u1_u1_3082_wire] : $int<1>
    // 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1051
    // (current_register_value & _hfe )
    $intermediate $W[AND_u8_u8_3086_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ($bitcast ($uint<2>) 2  ))
    $intermediate $W[EQ_u2_u1_3093_wire] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I >= 32 )
    $intermediate $W[UGE_u8_u1_3097_wire] : $int<1>
    // (I < 36 )
    $intermediate $W[ULT_u8_u1_3100_wire] : $int<1>
    // ((I >= 32 ) & (I < 36 ))
    $intermediate $W[AND_u1_u1_3101_wire] : $int<1>
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1055
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 36 )
    $intermediate $W[EQ_u8_u1_3109_wire] : $int<1>
    // 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1058
    // (current_register_value & _h09 )
    $intermediate $W[AND_u8_u8_3113_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 37 )
    $intermediate $W[EQ_u8_u1_3119_wire] : $int<1>
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1061
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 48 )
    $intermediate $W[EQ_u8_u1_3127_wire] : $int<1>
    // 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1064
    // (current_register_value & _hC1 )
    $intermediate $W[AND_u8_u8_3131_wire] : $int<8>
    // 		$volatile next_I := (I + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1070
    // next_I
    $W[next_I_3142] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 72 )
    $intermediate $W[ULT_u8_u1_3146_wire] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ONE_2)
    $intermediate $W[EQ_u2_u1_3152_wire] : $int<1>
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1075
    // (current_softwarereset_register_value & _hfd )
    $intermediate $W[AND_u8_u8_3156_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ($bitcast ($uint<2>) 2  ))
    $intermediate $W[EQ_u2_u1_3163_wire] : $int<1>
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1078
    // (current_softwarereset_register_value & _hfb )
    $intermediate $W[AND_u8_u8_3167_wire] : $int<8>
    // 	$call writeSDHCRegisters (64  _h8A  ) () 
    //  file .Aa/sdhc.opt.aa, line 1025
    $call [call_stmt_3004_call] $module writeSDHCRegisters(konst_3002_wire_constant konst_3003_wire_constant) ()  
    $delay call_stmt_3004_call 4
    $buffering  $in call_stmt_3004_call konst_3002_wire_constant 1
    $buffering  $in call_stmt_3004_call konst_3003_wire_constant 1
    // 	$call writeSDHCRegisters (65  _h64  ) () 
    //  file .Aa/sdhc.opt.aa, line 1026
    $call [call_stmt_3007_call] $module writeSDHCRegisters(konst_3005_wire_constant konst_3006_wire_constant) ()  
    $delay call_stmt_3007_call 4
    $buffering  $in call_stmt_3007_call konst_3005_wire_constant 1
    $buffering  $in call_stmt_3007_call konst_3006_wire_constant 1
    // 	$call writeSDHCRegisters (66  _h20  ) () 
    //  file .Aa/sdhc.opt.aa, line 1027
    $call [call_stmt_3010_call] $module writeSDHCRegisters(konst_3008_wire_constant konst_3009_wire_constant) ()  
    $delay call_stmt_3010_call 4
    $buffering  $in call_stmt_3010_call konst_3008_wire_constant 1
    $buffering  $in call_stmt_3010_call konst_3009_wire_constant 1
    // 	$call writeSDHCRegisters (67  _h05  ) () 
    //  file .Aa/sdhc.opt.aa, line 1028
    $call [call_stmt_3013_call] $module writeSDHCRegisters(konst_3011_wire_constant konst_3012_wire_constant) ()  
    $delay call_stmt_3013_call 4
    $buffering  $in call_stmt_3013_call konst_3011_wire_constant 1
    $buffering  $in call_stmt_3013_call konst_3012_wire_constant 1
    // 	$call writeSDHCRegisters (68  _h31  ) () 
    //  file .Aa/sdhc.opt.aa, line 1029
    $call [call_stmt_3016_call] $module writeSDHCRegisters(konst_3014_wire_constant konst_3015_wire_constant) ()  
    $delay call_stmt_3016_call 4
    $buffering  $in call_stmt_3016_call konst_3014_wire_constant 1
    $buffering  $in call_stmt_3016_call konst_3015_wire_constant 1
    // 	$call writeSDHCRegisters (69  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1030
    $call [call_stmt_3019_call] $module writeSDHCRegisters(konst_3017_wire_constant R_ZERO_8_3018_wire_constant) ()  
    $delay call_stmt_3019_call 4
    $buffering  $in call_stmt_3019_call konst_3017_wire_constant 1
    $buffering  $in call_stmt_3019_call R_ZERO_8_3018_wire_constant 1
    // 	$call writeSDHCRegisters (70  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1031
    $call [call_stmt_3022_call] $module writeSDHCRegisters(konst_3020_wire_constant R_ZERO_8_3021_wire_constant) ()  
    $delay call_stmt_3022_call 4
    $buffering  $in call_stmt_3022_call konst_3020_wire_constant 1
    $buffering  $in call_stmt_3022_call R_ZERO_8_3021_wire_constant 1
    // 	$call writeSDHCRegisters (71  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1032
    $call [call_stmt_3025_call] $module writeSDHCRegisters(konst_3023_wire_constant R_ZERO_8_3024_wire_constant) ()  
    $delay call_stmt_3025_call 4
    $buffering  $in call_stmt_3025_call konst_3023_wire_constant 1
    $buffering  $in call_stmt_3025_call R_ZERO_8_3024_wire_constant 1
    // 	$call writeSDHCRegisters (45  _h7D  ) () 
    //  file .Aa/sdhc.opt.aa, line 1033
    $call [call_stmt_3028_call] $module writeSDHCRegisters(konst_3026_wire_constant konst_3027_wire_constant) ()  
    $delay call_stmt_3028_call 4
    $buffering  $in call_stmt_3028_call konst_3026_wire_constant 1
    $buffering  $in call_stmt_3028_call konst_3027_wire_constant 1
    // datapath-instances for block %resetRegisters%resetRegister
    //  file .Aa/sdhc.opt.aa, line 1034
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1036
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_I $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1037
    # := [next_I_3142_3035_buf] (next_I_3142) (next_I_3142_3035_buffered)    
    $phi [phi_stmt_3031] (type_cast_3034_wire_constant next_I_3142_3035_buffered) ( I_3031 ) 
    // 		$call readSDHCRegisters (I ) (current_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1040
    $call [call_stmt_3039_call] $module readSDHCRegisters(I_3031) (current_register_value_3039)  
    $delay call_stmt_3039_call 4
    $buffering  $in call_stmt_3039_call I_3031 1
    $buffering  $out call_stmt_3039_call current_register_value_3039 1
    // 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
    //  file .Aa/sdhc.opt.aa, line 1041
    $call [call_stmt_3042_call] $module readSDHCRegisters(konst_3040_wire_constant) (current_softwarereset_register_value_3042)  
    $delay call_stmt_3042_call 4
    $buffering  $in call_stmt_3042_call konst_3040_wire_constant 1
    $buffering  $out call_stmt_3042_call current_softwarereset_register_value_3042 1
    // 		$volatile condition := ((I >= 64 ) & (I < 72 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1042
    // (I >= 64 )
    >=[UGE_u8_u1_3046_inst] (I_3031 konst_3045_wire_constant) (UGE_u8_u1_3046_wire)   $flowthrough 
    $delay UGE_u8_u1_3046_inst 0
    // (I < 72 )
    <[ULT_u8_u1_3049_inst] (I_3031 konst_3048_wire_constant) (ULT_u8_u1_3049_wire)   $flowthrough 
    $delay ULT_u8_u1_3049_inst 0
    // ((I >= 64 ) & (I < 72 ))
    &[AND_u1_u1_3050_inst] (UGE_u8_u1_3046_wire ULT_u8_u1_3049_wire) (condition_3051)   $flowthrough 
    $delay AND_u1_u1_3050_inst 0
    // 		$volatile condition5 := (I == 45 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1043
    // (I == 45 )
    ==[EQ_u8_u1_3055_inst] (I_3031 konst_3054_wire_constant) (condition5_3056)   $flowthrough 
    $delay EQ_u8_u1_3055_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1044
    // (condition | condition5)
    |[OR_u1_u1_3060_inst] (condition_3051 condition5_3056) (OR_u1_u1_3060_wire)   $flowthrough 
    $delay OR_u1_u1_3060_inst 0
    ==0? [if_stmt_3057_branch] (OR_u1_u1_3060_wire)
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1047
    // (resetCondition == ZERO_2)
    ==[EQ_u2_u1_3066_inst] (resetCondition R_ZERO_2_3065_wire_constant) (EQ_u2_u1_3066_wire)   $flowthrough 
    $delay EQ_u2_u1_3066_inst 0
    ==0? [if_stmt_3063_branch] (EQ_u2_u1_3066_wire)
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1048
    $call [call_stmt_3069_call] $module writeSDHCRegisters(I_3031 R_ZERO_8_3068_wire_constant) ()  
    $delay call_stmt_3069_call 4
    $buffering  $in call_stmt_3069_call I_3031 1
    $buffering  $in call_stmt_3069_call R_ZERO_8_3068_wire_constant 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1050
    // (resetCondition == ONE_2)
    ==[EQ_u2_u1_3074_inst] (resetCondition R_ONE_2_3073_wire_constant) (EQ_u2_u1_3074_wire)   $flowthrough 
    $delay EQ_u2_u1_3074_inst 0
    // (I == 36 )
    ==[EQ_u8_u1_3077_inst] (I_3031 konst_3076_wire_constant) (EQ_u8_u1_3077_wire)   $flowthrough 
    $delay EQ_u8_u1_3077_inst 0
    // (I == 48 )
    ==[EQ_u8_u1_3080_inst] (I_3031 konst_3079_wire_constant) (EQ_u8_u1_3080_wire)   $flowthrough 
    $delay EQ_u8_u1_3080_inst 0
    // ((I == 36 ) | (I == 48 ))
    |[OR_u1_u1_3081_inst] (EQ_u8_u1_3077_wire EQ_u8_u1_3080_wire) (OR_u1_u1_3081_wire)   $flowthrough 
    $delay OR_u1_u1_3081_inst 0
    // ((resetCondition == ONE_2) & ((I == 36 ) | (I == 48 )))
    &[AND_u1_u1_3082_inst] (EQ_u2_u1_3074_wire OR_u1_u1_3081_wire) (AND_u1_u1_3082_wire)   $flowthrough 
    $delay AND_u1_u1_3082_inst 0
    ==0? [if_stmt_3071_branch] (AND_u1_u1_3082_wire)
    // 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1051
    // (current_register_value & _hfe )
    &[AND_u8_u8_3086_inst] (current_register_value_3039 konst_3085_wire_constant) (AND_u8_u8_3086_wire)   $flowthrough 
    $delay AND_u8_u8_3086_inst 0
    $call [call_stmt_3087_call] $module writeSDHCRegisters(I_3031 AND_u8_u8_3086_wire) ()  
    $delay call_stmt_3087_call 4
    $buffering  $in call_stmt_3087_call I_3031 1
    $buffering  $in call_stmt_3087_call AND_u8_u8_3086_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ($bitcast ($uint<2>) 2  ))
    ==[EQ_u2_u1_3093_inst] (resetCondition type_cast_3092_wire_constant) (EQ_u2_u1_3093_wire)   $flowthrough 
    $delay EQ_u2_u1_3093_inst 0
    ==0? [if_stmt_3089_branch] (EQ_u2_u1_3093_wire)
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I >= 32 )
    >=[UGE_u8_u1_3097_inst] (I_3031 konst_3096_wire_constant) (UGE_u8_u1_3097_wire)   $flowthrough 
    $delay UGE_u8_u1_3097_inst 0
    // (I < 36 )
    <[ULT_u8_u1_3100_inst] (I_3031 konst_3099_wire_constant) (ULT_u8_u1_3100_wire)   $flowthrough 
    $delay ULT_u8_u1_3100_inst 0
    // ((I >= 32 ) & (I < 36 ))
    &[AND_u1_u1_3101_inst] (UGE_u8_u1_3097_wire ULT_u8_u1_3100_wire) (AND_u1_u1_3101_wire)   $flowthrough 
    $delay AND_u1_u1_3101_inst 0
    ==0? [if_stmt_3094_branch] (AND_u1_u1_3101_wire)
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1055
    $call [call_stmt_3104_call] $module writeSDHCRegisters(I_3031 R_ZERO_8_3103_wire_constant) ()  
    $delay call_stmt_3104_call 4
    $buffering  $in call_stmt_3104_call I_3031 1
    $buffering  $in call_stmt_3104_call R_ZERO_8_3103_wire_constant 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 36 )
    ==[EQ_u8_u1_3109_inst] (I_3031 konst_3108_wire_constant) (EQ_u8_u1_3109_wire)   $flowthrough 
    $delay EQ_u8_u1_3109_inst 0
    ==0? [if_stmt_3106_branch] (EQ_u8_u1_3109_wire)
    // 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1058
    // (current_register_value & _h09 )
    &[AND_u8_u8_3113_inst] (current_register_value_3039 konst_3112_wire_constant) (AND_u8_u8_3113_wire)   $flowthrough 
    $delay AND_u8_u8_3113_inst 0
    $call [call_stmt_3114_call] $module writeSDHCRegisters(I_3031 AND_u8_u8_3113_wire) ()  
    $delay call_stmt_3114_call 4
    $buffering  $in call_stmt_3114_call I_3031 1
    $buffering  $in call_stmt_3114_call AND_u8_u8_3113_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 37 )
    ==[EQ_u8_u1_3119_inst] (I_3031 konst_3118_wire_constant) (EQ_u8_u1_3119_wire)   $flowthrough 
    $delay EQ_u8_u1_3119_inst 0
    ==0? [if_stmt_3116_branch] (EQ_u8_u1_3119_wire)
    // 			$call writeSDHCRegisters (I ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1061
    $call [call_stmt_3122_call] $module writeSDHCRegisters(I_3031 R_ZERO_8_3121_wire_constant) ()  
    $delay call_stmt_3122_call 4
    $buffering  $in call_stmt_3122_call I_3031 1
    $buffering  $in call_stmt_3122_call R_ZERO_8_3121_wire_constant 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (I == 48 )
    ==[EQ_u8_u1_3127_inst] (I_3031 konst_3126_wire_constant) (EQ_u8_u1_3127_wire)   $flowthrough 
    $delay EQ_u8_u1_3127_inst 0
    ==0? [if_stmt_3124_branch] (EQ_u8_u1_3127_wire)
    // 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1064
    // (current_register_value & _hC1 )
    &[AND_u8_u8_3131_inst] (current_register_value_3039 konst_3130_wire_constant) (AND_u8_u8_3131_wire)   $flowthrough 
    $delay AND_u8_u8_3131_inst 0
    $call [call_stmt_3132_call] $module writeSDHCRegisters(I_3031 AND_u8_u8_3131_wire) ()  
    $delay call_stmt_3132_call 4
    $buffering  $in call_stmt_3132_call I_3031 1
    $buffering  $in call_stmt_3132_call AND_u8_u8_3131_wire 1
    // 		$volatile next_I := (I + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1070
    // (I + 1 )
    +[ADD_u8_u8_3141_inst] (I_3031 konst_3140_wire_constant) (next_I_3142)   $flowthrough 
    $delay ADD_u8_u8_3141_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_I < 72 )
    <[ULT_u8_u1_3146_inst] (next_I_3142 konst_3145_wire_constant) (ULT_u8_u1_3146_wire)   $flowthrough 
    $delay ULT_u8_u1_3146_inst 0
    ==0? [if_stmt_3143_branch] (ULT_u8_u1_3146_wire)
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ONE_2)
    ==[EQ_u2_u1_3152_inst] (resetCondition R_ONE_2_3151_wire_constant) (EQ_u2_u1_3152_wire)   $flowthrough 
    $delay EQ_u2_u1_3152_inst 0
    ==0? [if_stmt_3149_branch] (EQ_u2_u1_3152_wire)
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1075
    // (current_softwarereset_register_value & _hfd )
    &[AND_u8_u8_3156_inst] (current_softwarereset_register_value_3042 konst_3155_wire_constant) (AND_u8_u8_3156_wire)   $flowthrough 
    $delay AND_u8_u8_3156_inst 0
    $call [call_stmt_3157_call] $module writeSDHCRegisters(konst_3153_wire_constant AND_u8_u8_3156_wire) ()  
    $delay call_stmt_3157_call 4
    $buffering  $in call_stmt_3157_call konst_3153_wire_constant 1
    $buffering  $in call_stmt_3157_call AND_u8_u8_3156_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (resetCondition == ($bitcast ($uint<2>) 2  ))
    ==[EQ_u2_u1_3163_inst] (resetCondition type_cast_3162_wire_constant) (EQ_u2_u1_3163_wire)   $flowthrough 
    $delay EQ_u2_u1_3163_inst 0
    ==0? [if_stmt_3159_branch] (EQ_u2_u1_3163_wire)
    // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1078
    // (current_softwarereset_register_value & _hfb )
    &[AND_u8_u8_3167_inst] (current_softwarereset_register_value_3042 konst_3166_wire_constant) (AND_u8_u8_3167_wire)   $flowthrough 
    $delay AND_u8_u8_3167_inst 0
    $call [call_stmt_3168_call] $module writeSDHCRegisters(konst_3164_wire_constant AND_u8_u8_3167_wire) ()  
    $delay call_stmt_3168_call 4
    $buffering  $in call_stmt_3168_call konst_3164_wire_constant 1
    $buffering  $in call_stmt_3168_call AND_u8_u8_3167_wire 1
  }
  // end data-path
  // 	$call writeSDHCRegisters (64  _h8A  ) () 
  //  file .Aa/sdhc.opt.aa, line 1025
  call_stmt_3004_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3004_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3004_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3004_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3004_Update/cca)
  // 	$call writeSDHCRegisters (65  _h64  ) () 
  //  file .Aa/sdhc.opt.aa, line 1026
  call_stmt_3007_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3007_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3007_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3007_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3007_Update/cca)
  // 	$call writeSDHCRegisters (66  _h20  ) () 
  //  file .Aa/sdhc.opt.aa, line 1027
  call_stmt_3010_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3010_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3010_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3010_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3010_Update/cca)
  // 	$call writeSDHCRegisters (67  _h05  ) () 
  //  file .Aa/sdhc.opt.aa, line 1028
  call_stmt_3013_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3013_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3013_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3013_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3013_Update/cca)
  // 	$call writeSDHCRegisters (68  _h31  ) () 
  //  file .Aa/sdhc.opt.aa, line 1029
  call_stmt_3016_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3016_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3016_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3016_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3016_Update/cca)
  // 	$call writeSDHCRegisters (69  ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1030
  call_stmt_3019_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3019_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3019_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3019_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3019_Update/cca)
  // 	$call writeSDHCRegisters (70  ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1031
  call_stmt_3022_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3022_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3022_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3022_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3022_Update/cca)
  // 	$call writeSDHCRegisters (71  ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1032
  call_stmt_3025_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3025_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3025_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3025_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3025_Update/cca)
  // 	$call writeSDHCRegisters (45  _h7D  ) () 
  //  file .Aa/sdhc.opt.aa, line 1033
  call_stmt_3028_call <=> (call_stmt_3004_to_call_stmt_3028/call_stmt_3028_Sample/crr call_stmt_3004_to_call_stmt_3028/call_stmt_3028_Update/ccr) (call_stmt_3004_to_call_stmt_3028/call_stmt_3028_Sample/cra call_stmt_3004_to_call_stmt_3028/call_stmt_3028_Update/cca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1036
  next_I_3142_3035_buf <=> (branch_block_stmt_3029/loopback_PhiReq/phi_stmt_3031/phi_stmt_3031_sources/Interlock/Sample/req branch_block_stmt_3029/loopback_PhiReq/phi_stmt_3031/phi_stmt_3031_sources/Interlock/Update/req) (branch_block_stmt_3029/loopback_PhiReq/phi_stmt_3031/phi_stmt_3031_sources/Interlock/Sample/ack branch_block_stmt_3029/loopback_PhiReq/phi_stmt_3031/phi_stmt_3031_sources/Interlock/Update/ack)
  phi_stmt_3031 <=> (branch_block_stmt_3029/merge_stmt_3030__entry___PhiReq/phi_stmt_3031/phi_stmt_3031_req branch_block_stmt_3029/loopback_PhiReq/phi_stmt_3031/phi_stmt_3031_req) (branch_block_stmt_3029/merge_stmt_3030_PhiAck/phi_stmt_3031_ack)
  // 		$call readSDHCRegisters (I ) (current_register_value ) 
  //  file .Aa/sdhc.opt.aa, line 1040
  // I
  call_stmt_3039_call <=> (branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3039_Sample/crr branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3039_Update/ccr) (branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3039_Sample/cra branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3039_Update/cca)
  // 		$call readSDHCRegisters (47  ) (current_softwarereset_register_value ) 
  //  file .Aa/sdhc.opt.aa, line 1041
  call_stmt_3042_call <=> (branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3042_Sample/crr branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3042_Update/ccr) (branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3042_Sample/cra branch_block_stmt_3029/call_stmt_3039_to_assign_stmt_3056/call_stmt_3042_Update/cca)
  // 		$volatile condition := ((I >= 64 ) & (I < 72 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1042
  // ((I >= 64 ) & (I < 72 ))
  // (I >= 64 )
  // I
  // (I < 72 )
  // I
  // 		$volatile condition5 := (I == 45 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1043
  // (I == 45 )
  // I
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1044
  // (condition | condition5)
  if_stmt_3057_branch <=> (branch_block_stmt_3029/if_stmt_3057_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3057_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3057_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1047
  // (resetCondition == ZERO_2)
  if_stmt_3063_branch <=> (branch_block_stmt_3029/if_stmt_3063_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3063_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3063_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1048
  // I
  call_stmt_3069_call <=> (branch_block_stmt_3029/call_stmt_3069/call_stmt_3069_Sample/crr branch_block_stmt_3029/call_stmt_3069/call_stmt_3069_Update/ccr) (branch_block_stmt_3029/call_stmt_3069/call_stmt_3069_Sample/cra branch_block_stmt_3029/call_stmt_3069/call_stmt_3069_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1050
  // (resetCondition == ONE_2)
  // (I == 36 )
  // (I == 48 )
  // ((I == 36 ) | (I == 48 ))
  // ((resetCondition == ONE_2) & ((I == 36 ) | (I == 48 )))
  if_stmt_3071_branch <=> (branch_block_stmt_3029/if_stmt_3071_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3071_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3071_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I (current_register_value & _hfe ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1051
  // I
  // (current_register_value & _hfe )
  // current_register_value
  call_stmt_3087_call <=> (branch_block_stmt_3029/call_stmt_3087/call_stmt_3087_Sample/crr branch_block_stmt_3029/call_stmt_3087/call_stmt_3087_Update/ccr) (branch_block_stmt_3029/call_stmt_3087/call_stmt_3087_Sample/cra branch_block_stmt_3029/call_stmt_3087/call_stmt_3087_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (resetCondition == ($bitcast ($uint<2>) 2  ))
  if_stmt_3089_branch <=> (branch_block_stmt_3029/if_stmt_3089_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3089_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3089_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (I >= 32 )
  // (I < 36 )
  // ((I >= 32 ) & (I < 36 ))
  if_stmt_3094_branch <=> (branch_block_stmt_3029/if_stmt_3094_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3094_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3094_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1055
  // I
  call_stmt_3104_call <=> (branch_block_stmt_3029/call_stmt_3104/call_stmt_3104_Sample/crr branch_block_stmt_3029/call_stmt_3104/call_stmt_3104_Update/ccr) (branch_block_stmt_3029/call_stmt_3104/call_stmt_3104_Sample/cra branch_block_stmt_3029/call_stmt_3104/call_stmt_3104_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (I == 36 )
  if_stmt_3106_branch <=> (branch_block_stmt_3029/if_stmt_3106_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3106_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3106_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I (current_register_value & _h09 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1058
  // I
  // (current_register_value & _h09 )
  // current_register_value
  call_stmt_3114_call <=> (branch_block_stmt_3029/call_stmt_3114/call_stmt_3114_Sample/crr branch_block_stmt_3029/call_stmt_3114/call_stmt_3114_Update/ccr) (branch_block_stmt_3029/call_stmt_3114/call_stmt_3114_Sample/cra branch_block_stmt_3029/call_stmt_3114/call_stmt_3114_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (I == 37 )
  if_stmt_3116_branch <=> (branch_block_stmt_3029/if_stmt_3116_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3116_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3116_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1061
  // I
  call_stmt_3122_call <=> (branch_block_stmt_3029/call_stmt_3122/call_stmt_3122_Sample/crr branch_block_stmt_3029/call_stmt_3122/call_stmt_3122_Update/ccr) (branch_block_stmt_3029/call_stmt_3122/call_stmt_3122_Sample/cra branch_block_stmt_3029/call_stmt_3122/call_stmt_3122_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (I == 48 )
  if_stmt_3124_branch <=> (branch_block_stmt_3029/if_stmt_3124_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3124_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3124_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (I (current_register_value & _hC1 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1064
  // I
  // (current_register_value & _hC1 )
  // current_register_value
  call_stmt_3132_call <=> (branch_block_stmt_3029/call_stmt_3132/call_stmt_3132_Sample/crr branch_block_stmt_3029/call_stmt_3132/call_stmt_3132_Update/ccr) (branch_block_stmt_3029/call_stmt_3132/call_stmt_3132_Sample/cra branch_block_stmt_3029/call_stmt_3132/call_stmt_3132_Update/cca)
  // 		$volatile next_I := (I + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1070
  // (I + 1 )
  // I
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_I < 72 )
  if_stmt_3143_branch <=> (branch_block_stmt_3029/if_stmt_3143_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3143_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3143_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (resetCondition == ONE_2)
  if_stmt_3149_branch <=> (branch_block_stmt_3029/if_stmt_3149_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3149_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3149_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfd ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1075
  // (current_softwarereset_register_value & _hfd )
  // current_softwarereset_register_value
  call_stmt_3157_call <=> (branch_block_stmt_3029/call_stmt_3157/call_stmt_3157_Sample/crr branch_block_stmt_3029/call_stmt_3157/call_stmt_3157_Update/ccr) (branch_block_stmt_3029/call_stmt_3157/call_stmt_3157_Sample/cra branch_block_stmt_3029/call_stmt_3157/call_stmt_3157_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (resetCondition == ($bitcast ($uint<2>) 2  ))
  if_stmt_3159_branch <=> (branch_block_stmt_3029/if_stmt_3159_eval_test/branch_req) (branch_block_stmt_3029/if_stmt_3159_else_link/else_choice_transition branch_block_stmt_3029/if_stmt_3159_if_link/if_choice_transition)
  // 			$call writeSDHCRegisters (47  (current_softwarereset_register_value & _hfb ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1078
  // (current_softwarereset_register_value & _hfb )
  // current_softwarereset_register_value
  call_stmt_3168_call <=> (branch_block_stmt_3029/call_stmt_3168/call_stmt_3168_Sample/crr branch_block_stmt_3029/call_stmt_3168/call_stmt_3168_Update/ccr) (branch_block_stmt_3029/call_stmt_3168/call_stmt_3168_Sample/cra branch_block_stmt_3029/call_stmt_3168/call_stmt_3168_Update/cca)
}
$module [sdhc_register_write] 
{
  $in address:$int<8>
  // can point into 
  data:$int<8>
  // can point into 
  // pipe-declarations for block %sdhc_register_write
  //  file .Aa/sdhc.opt.aa, line 1082
  // pipe-declarations for block %sdhc_register_write%write_register
  //  file .Aa/sdhc.opt.aa, line 1087
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_3175] // Branch Block  file .Aa/sdhc.opt.aa, line 1087
    {
      $P [branch_block_stmt_3175__entry__]
      branch_block_stmt_3175__entry__ <-| ($entry)
      $P [branch_block_stmt_3175__exit__]
      branch_block_stmt_3175__exit__ |-> ($exit)
      $P [switch_stmt_3176__entry__] 
      $P [switch_stmt_3176__exit__] 
      // control-path for switch  
      //  file .Aa/sdhc.opt.aa, line 1089
      ;;[switch_stmt_3176_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      switch_stmt_3176__entry__ |-> (switch_stmt_3176_dead_link)
      switch_stmt_3176__exit__ <-| (switch_stmt_3176_dead_link)
      //---------------------    switch statement  file .Aa/sdhc.opt.aa, line 1089  --------------------------
      $P [switch_stmt_3176__condition_check_place__] 
      switch_stmt_3176__entry__ |-> (switch_stmt_3176__condition_check_place__)
      ||[switch_stmt_3176__condition_check__] 
      {
        // condition computation
        ;;[condition_0] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_1] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_2] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_3] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_4] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_5] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_6] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_7] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_8] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_9] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_10] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_11] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_12] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_13] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_14] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_15] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_16] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_17] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_18] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_19] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_20] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_21] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_22] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_23] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_24] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_25] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_26] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_27] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_28] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_29] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_30] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_31] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_32] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_33] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_34] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_35] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_36] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_37] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_38] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_39] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_40] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_41] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_42] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
        ;;[condition_43] 
        {
          || [SplitProtocol] 
          {
            ;; [Sample] 
            {
              $T[rr] $T[ra]
            }
            ;; [Update] 
            {
              $T [cr] $T [ca] 
            }
          }
          $T [cmp] // cmp will trigger choice comparison
        }
      }
      switch_stmt_3176__condition_check_place__ |-> (switch_stmt_3176__condition_check__)
      $P [switch_stmt_3176__select__] 
      switch_stmt_3176__select__ <-| (switch_stmt_3176__condition_check__)
      // switch choice 0
      ;;[switch_stmt_3176_choice_0] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3183__entry__] 
      $P [call_stmt_3183__exit__] 
      ::[call_stmt_3183] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1091
        $T[call_stmt_3183_sample_start_] 
        $T[call_stmt_3183_sample_completed_] 
        $T[call_stmt_3183_update_start_] 
        $T[call_stmt_3183_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h7f )
        // data
        // start: Forward dependencies from address to transition call_stmt_3183_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3183_sample_start_
        // start: Forward dependencies from (data & _h7f ) to transition call_stmt_3183_sample_start_
        // done: Forward dependencies from (data & _h7f ) to transition call_stmt_3183_sample_start_
        ;;[call_stmt_3183_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3183_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3183_sample_start_ &-> (call_stmt_3183_Sample)
        call_stmt_3183_sample_completed_ <-& (call_stmt_3183_Sample)
        call_stmt_3183_sample_completed_ &-> ($null)
        call_stmt_3183_update_start_ &-> (call_stmt_3183_Update)
        call_stmt_3183_update_completed_ <-& (call_stmt_3183_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3183 store
      }
      call_stmt_3183__entry__ |-> (call_stmt_3183)
      call_stmt_3183__exit__ <-| (call_stmt_3183)
      call_stmt_3183__entry__ <-| (switch_stmt_3176_choice_0)
      call_stmt_3183__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 1
      ;;[switch_stmt_3176_choice_1] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3190__entry__] 
      $P [call_stmt_3190__exit__] 
      ::[call_stmt_3190] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1093
        $T[call_stmt_3190_sample_start_] 
        $T[call_stmt_3190_sample_completed_] 
        $T[call_stmt_3190_update_start_] 
        $T[call_stmt_3190_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h3f )
        // data
        // start: Forward dependencies from address to transition call_stmt_3190_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3190_sample_start_
        // start: Forward dependencies from (data & _h3f ) to transition call_stmt_3190_sample_start_
        // done: Forward dependencies from (data & _h3f ) to transition call_stmt_3190_sample_start_
        ;;[call_stmt_3190_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3190_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3190_sample_start_ &-> (call_stmt_3190_Sample)
        call_stmt_3190_sample_completed_ <-& (call_stmt_3190_Sample)
        call_stmt_3190_sample_completed_ &-> ($null)
        call_stmt_3190_update_start_ &-> (call_stmt_3190_Update)
        call_stmt_3190_update_completed_ <-& (call_stmt_3190_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3190 store
      }
      call_stmt_3190__entry__ |-> (call_stmt_3190)
      call_stmt_3190__exit__ <-| (call_stmt_3190)
      call_stmt_3190__entry__ <-| (switch_stmt_3176_choice_1)
      call_stmt_3190__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 2
      ;;[switch_stmt_3176_choice_2] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3195__entry__] 
      $P [call_stmt_3195__exit__] 
      ::[call_stmt_3195] 
      {
        // start: 			$call writeSDHCRegisters (address ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1095
        $T[call_stmt_3195_sample_start_] 
        $T[call_stmt_3195_sample_completed_] 
        $T[call_stmt_3195_update_start_] 
        $T[call_stmt_3195_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // start: Forward dependencies from address to transition call_stmt_3195_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3195_sample_start_
        ;;[call_stmt_3195_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3195_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3195_sample_start_ &-> (call_stmt_3195_Sample)
        call_stmt_3195_sample_completed_ <-& (call_stmt_3195_Sample)
        call_stmt_3195_sample_completed_ &-> ($null)
        call_stmt_3195_update_start_ &-> (call_stmt_3195_Update)
        call_stmt_3195_update_completed_ <-& (call_stmt_3195_Update)
        // end: 			$call writeSDHCRegisters (address ZERO_8 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3195 store
      }
      call_stmt_3195__entry__ |-> (call_stmt_3195)
      call_stmt_3195__exit__ <-| (call_stmt_3195)
      call_stmt_3195__entry__ <-| (switch_stmt_3176_choice_2)
      call_stmt_3195__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 3
      ;;[switch_stmt_3176_choice_3] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3202__entry__] 
      $P [call_stmt_3202__exit__] 
      ::[call_stmt_3202] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1097
        $T[call_stmt_3202_sample_start_] 
        $T[call_stmt_3202_sample_completed_] 
        $T[call_stmt_3202_update_start_] 
        $T[call_stmt_3202_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _hfb )
        // data
        // start: Forward dependencies from address to transition call_stmt_3202_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3202_sample_start_
        // start: Forward dependencies from (data & _hfb ) to transition call_stmt_3202_sample_start_
        // done: Forward dependencies from (data & _hfb ) to transition call_stmt_3202_sample_start_
        ;;[call_stmt_3202_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3202_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3202_sample_start_ &-> (call_stmt_3202_Sample)
        call_stmt_3202_sample_completed_ <-& (call_stmt_3202_Sample)
        call_stmt_3202_sample_completed_ &-> ($null)
        call_stmt_3202_update_start_ &-> (call_stmt_3202_Update)
        call_stmt_3202_update_completed_ <-& (call_stmt_3202_Update)
        // end: 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3202 store
      }
      call_stmt_3202__entry__ |-> (call_stmt_3202)
      call_stmt_3202__exit__ <-| (call_stmt_3202)
      call_stmt_3202__entry__ <-| (switch_stmt_3176_choice_3)
      call_stmt_3202__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 4
      ;;[switch_stmt_3176_choice_4] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3209__entry__] 
      $P [call_stmt_3209__exit__] 
      ::[call_stmt_3209] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1099
        $T[call_stmt_3209_sample_start_] 
        $T[call_stmt_3209_sample_completed_] 
        $T[call_stmt_3209_update_start_] 
        $T[call_stmt_3209_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h3f )
        // data
        // start: Forward dependencies from address to transition call_stmt_3209_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3209_sample_start_
        // start: Forward dependencies from (data & _h3f ) to transition call_stmt_3209_sample_start_
        // done: Forward dependencies from (data & _h3f ) to transition call_stmt_3209_sample_start_
        ;;[call_stmt_3209_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3209_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3209_sample_start_ &-> (call_stmt_3209_Sample)
        call_stmt_3209_sample_completed_ <-& (call_stmt_3209_Sample)
        call_stmt_3209_sample_completed_ &-> ($null)
        call_stmt_3209_update_start_ &-> (call_stmt_3209_Update)
        call_stmt_3209_update_completed_ <-& (call_stmt_3209_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3209 store
      }
      call_stmt_3209__entry__ |-> (call_stmt_3209)
      call_stmt_3209__exit__ <-| (call_stmt_3209)
      call_stmt_3209__entry__ <-| (switch_stmt_3176_choice_4)
      call_stmt_3209__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 5
      ;;[switch_stmt_3176_choice_5] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_5_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_5_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_5)
      switch_stmt_3176_choice_5_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 6
      ;;[switch_stmt_3176_choice_6] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_6_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_6_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_6)
      switch_stmt_3176_choice_6_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 7
      ;;[switch_stmt_3176_choice_7] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_7_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_7_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_7)
      switch_stmt_3176_choice_7_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 8
      ;;[switch_stmt_3176_choice_8] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_8_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_8_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_8)
      switch_stmt_3176_choice_8_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 9
      ;;[switch_stmt_3176_choice_9] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_9_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_9_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_9)
      switch_stmt_3176_choice_9_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 10
      ;;[switch_stmt_3176_choice_10] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_10_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_10_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_10)
      switch_stmt_3176_choice_10_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 11
      ;;[switch_stmt_3176_choice_11] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_11_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_11_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_11)
      switch_stmt_3176_choice_11_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 12
      ;;[switch_stmt_3176_choice_12] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_12_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_12_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_12)
      switch_stmt_3176_choice_12_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 13
      ;;[switch_stmt_3176_choice_13] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_13_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_13_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_13)
      switch_stmt_3176_choice_13_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 14
      ;;[switch_stmt_3176_choice_14] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_14_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_14_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_14)
      switch_stmt_3176_choice_14_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 15
      ;;[switch_stmt_3176_choice_15] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_15_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_15_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_15)
      switch_stmt_3176_choice_15_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 16
      ;;[switch_stmt_3176_choice_16] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_16_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_16_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_16)
      switch_stmt_3176_choice_16_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 17
      ;;[switch_stmt_3176_choice_17] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_17_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_17_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_17)
      switch_stmt_3176_choice_17_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 18
      ;;[switch_stmt_3176_choice_18] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_18_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_18_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_18)
      switch_stmt_3176_choice_18_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 19
      ;;[switch_stmt_3176_choice_19] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_19_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_19_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_19)
      switch_stmt_3176_choice_19_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 20
      ;;[switch_stmt_3176_choice_20] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_20_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_20_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_20)
      switch_stmt_3176_choice_20_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 21
      ;;[switch_stmt_3176_choice_21] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_21_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_21_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_21)
      switch_stmt_3176_choice_21_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 22
      ;;[switch_stmt_3176_choice_22] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_22_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_22_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_22)
      switch_stmt_3176_choice_22_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 23
      ;;[switch_stmt_3176_choice_23] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_23_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_23_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_23)
      switch_stmt_3176_choice_23_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 24
      ;;[switch_stmt_3176_choice_24] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_24_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_24_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_24)
      switch_stmt_3176_choice_24_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 25
      ;;[switch_stmt_3176_choice_25] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3276__entry__] 
      $P [call_stmt_3276__exit__] 
      ::[call_stmt_3276] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1141
        $T[call_stmt_3276_sample_start_] 
        $T[call_stmt_3276_sample_completed_] 
        $T[call_stmt_3276_update_start_] 
        $T[call_stmt_3276_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h05 )
        // data
        // start: Forward dependencies from address to transition call_stmt_3276_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3276_sample_start_
        // start: Forward dependencies from (data & _h05 ) to transition call_stmt_3276_sample_start_
        // done: Forward dependencies from (data & _h05 ) to transition call_stmt_3276_sample_start_
        ;;[call_stmt_3276_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3276_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3276_sample_start_ &-> (call_stmt_3276_Sample)
        call_stmt_3276_sample_completed_ <-& (call_stmt_3276_Sample)
        call_stmt_3276_sample_completed_ &-> ($null)
        call_stmt_3276_update_start_ &-> (call_stmt_3276_Update)
        call_stmt_3276_update_completed_ <-& (call_stmt_3276_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3276 store
      }
      call_stmt_3276__entry__ |-> (call_stmt_3276)
      call_stmt_3276__exit__ <-| (call_stmt_3276)
      call_stmt_3276__entry__ <-| (switch_stmt_3176_choice_25)
      call_stmt_3276__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 26
      ;;[switch_stmt_3176_choice_26] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3283__entry__] 
      $P [call_stmt_3283__exit__] 
      ::[call_stmt_3283] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1143
        $T[call_stmt_3283_sample_start_] 
        $T[call_stmt_3283_sample_completed_] 
        $T[call_stmt_3283_update_start_] 
        $T[call_stmt_3283_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h7 )
        // data
        // start: Forward dependencies from address to transition call_stmt_3283_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3283_sample_start_
        // start: Forward dependencies from (data & _h7 ) to transition call_stmt_3283_sample_start_
        // done: Forward dependencies from (data & _h7 ) to transition call_stmt_3283_sample_start_
        ;;[call_stmt_3283_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3283_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3283_sample_start_ &-> (call_stmt_3283_Sample)
        call_stmt_3283_sample_completed_ <-& (call_stmt_3283_Sample)
        call_stmt_3283_sample_completed_ &-> ($null)
        call_stmt_3283_update_start_ &-> (call_stmt_3283_Update)
        call_stmt_3283_update_completed_ <-& (call_stmt_3283_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3283 store
      }
      call_stmt_3283__entry__ |-> (call_stmt_3283)
      call_stmt_3283__exit__ <-| (call_stmt_3283)
      call_stmt_3283__entry__ <-| (switch_stmt_3176_choice_26)
      call_stmt_3283__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 27
      ;;[switch_stmt_3176_choice_27] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3288__entry__] 
      $P [call_stmt_3288__exit__] 
      ::[call_stmt_3288] 
      {
        // start: 			$call RW1C (data address ) () 
        //  file .Aa/sdhc.opt.aa, line 1145
        $T[call_stmt_3288_sample_start_] 
        $T[call_stmt_3288_sample_completed_] 
        $T[call_stmt_3288_update_start_] 
        $T[call_stmt_3288_update_completed_] 
        // Call input argument 0
        // data
        // Call input argument 1
        // address
        // start: Forward dependencies from data to transition call_stmt_3288_sample_start_
        // done: Forward dependencies from data to transition call_stmt_3288_sample_start_
        // start: Forward dependencies from address to transition call_stmt_3288_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3288_sample_start_
        ;;[call_stmt_3288_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3288_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3288_sample_start_ &-> (call_stmt_3288_Sample)
        call_stmt_3288_sample_completed_ <-& (call_stmt_3288_Sample)
        call_stmt_3288_sample_completed_ &-> ($null)
        call_stmt_3288_update_start_ &-> (call_stmt_3288_Update)
        call_stmt_3288_update_completed_ <-& (call_stmt_3288_Update)
        // end: 			$call RW1C (data address ) () 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  call_stmt_3288 store
        // memory-space  memory_space_4
        //  call_stmt_3288 store
        // memory-space  memory_space_5
        //  call_stmt_3288 store
        // memory-space  memory_space_6
        //  call_stmt_3288 store
        // memory-space  memory_space_8
        //  call_stmt_3288 store
      }
      call_stmt_3288__entry__ |-> (call_stmt_3288)
      call_stmt_3288__exit__ <-| (call_stmt_3288)
      call_stmt_3288__entry__ <-| (switch_stmt_3176_choice_27)
      call_stmt_3288__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 28
      ;;[switch_stmt_3176_choice_28] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_28_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_28_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_28)
      switch_stmt_3176_choice_28_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 29
      ;;[switch_stmt_3176_choice_29] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3296__entry__] 
      $P [call_stmt_3296__exit__] 
      ::[call_stmt_3296] 
      {
        // start: 			$call RW1C (data address ) () 
        //  file .Aa/sdhc.opt.aa, line 1149
        $T[call_stmt_3296_sample_start_] 
        $T[call_stmt_3296_sample_completed_] 
        $T[call_stmt_3296_update_start_] 
        $T[call_stmt_3296_update_completed_] 
        // Call input argument 0
        // data
        // Call input argument 1
        // address
        // start: Forward dependencies from data to transition call_stmt_3296_sample_start_
        // done: Forward dependencies from data to transition call_stmt_3296_sample_start_
        // start: Forward dependencies from address to transition call_stmt_3296_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3296_sample_start_
        ;;[call_stmt_3296_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3296_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3296_sample_start_ &-> (call_stmt_3296_Sample)
        call_stmt_3296_sample_completed_ <-& (call_stmt_3296_Sample)
        call_stmt_3296_sample_completed_ &-> ($null)
        call_stmt_3296_update_start_ &-> (call_stmt_3296_Update)
        call_stmt_3296_update_completed_ <-& (call_stmt_3296_Update)
        // end: 			$call RW1C (data address ) () 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  call_stmt_3296 store
        // memory-space  memory_space_4
        //  call_stmt_3296 store
        // memory-space  memory_space_5
        //  call_stmt_3296 store
        // memory-space  memory_space_6
        //  call_stmt_3296 store
        // memory-space  memory_space_8
        //  call_stmt_3296 store
      }
      call_stmt_3296__entry__ |-> (call_stmt_3296)
      call_stmt_3296__exit__ <-| (call_stmt_3296)
      call_stmt_3296__entry__ <-| (switch_stmt_3176_choice_29)
      call_stmt_3296__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 30
      ;;[switch_stmt_3176_choice_30] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3301__entry__] 
      $P [call_stmt_3301__exit__] 
      ::[call_stmt_3301] 
      {
        // start: 			$call RW1C (data address ) () 
        //  file .Aa/sdhc.opt.aa, line 1151
        $T[call_stmt_3301_sample_start_] 
        $T[call_stmt_3301_sample_completed_] 
        $T[call_stmt_3301_update_start_] 
        $T[call_stmt_3301_update_completed_] 
        // Call input argument 0
        // data
        // Call input argument 1
        // address
        // start: Forward dependencies from data to transition call_stmt_3301_sample_start_
        // done: Forward dependencies from data to transition call_stmt_3301_sample_start_
        // start: Forward dependencies from address to transition call_stmt_3301_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3301_sample_start_
        ;;[call_stmt_3301_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3301_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3301_sample_start_ &-> (call_stmt_3301_Sample)
        call_stmt_3301_sample_completed_ <-& (call_stmt_3301_Sample)
        call_stmt_3301_sample_completed_ &-> ($null)
        call_stmt_3301_update_start_ &-> (call_stmt_3301_Update)
        call_stmt_3301_update_completed_ <-& (call_stmt_3301_Update)
        // end: 			$call RW1C (data address ) () 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  call_stmt_3301 store
        // memory-space  memory_space_4
        //  call_stmt_3301 store
        // memory-space  memory_space_5
        //  call_stmt_3301 store
        // memory-space  memory_space_6
        //  call_stmt_3301 store
        // memory-space  memory_space_8
        //  call_stmt_3301 store
      }
      call_stmt_3301__entry__ |-> (call_stmt_3301)
      call_stmt_3301__exit__ <-| (call_stmt_3301)
      call_stmt_3301__entry__ <-| (switch_stmt_3176_choice_30)
      call_stmt_3301__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 31
      ;;[switch_stmt_3176_choice_31] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3308__entry__] 
      $P [call_stmt_3308__exit__] 
      ::[call_stmt_3308] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1153
        $T[call_stmt_3308_sample_start_] 
        $T[call_stmt_3308_sample_completed_] 
        $T[call_stmt_3308_update_start_] 
        $T[call_stmt_3308_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h1f )
        // data
        // start: Forward dependencies from address to transition call_stmt_3308_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3308_sample_start_
        // start: Forward dependencies from (data & _h1f ) to transition call_stmt_3308_sample_start_
        // done: Forward dependencies from (data & _h1f ) to transition call_stmt_3308_sample_start_
        ;;[call_stmt_3308_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3308_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3308_sample_start_ &-> (call_stmt_3308_Sample)
        call_stmt_3308_sample_completed_ <-& (call_stmt_3308_Sample)
        call_stmt_3308_sample_completed_ &-> ($null)
        call_stmt_3308_update_start_ &-> (call_stmt_3308_Update)
        call_stmt_3308_update_completed_ <-& (call_stmt_3308_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3308 store
      }
      call_stmt_3308__entry__ |-> (call_stmt_3308)
      call_stmt_3308__exit__ <-| (call_stmt_3308)
      call_stmt_3308__entry__ <-| (switch_stmt_3176_choice_31)
      call_stmt_3308__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 32
      ;;[switch_stmt_3176_choice_32] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3315__entry__] 
      $P [call_stmt_3315__exit__] 
      ::[call_stmt_3315] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1155
        $T[call_stmt_3315_sample_start_] 
        $T[call_stmt_3315_sample_completed_] 
        $T[call_stmt_3315_update_start_] 
        $T[call_stmt_3315_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _hf7 )
        // data
        // start: Forward dependencies from address to transition call_stmt_3315_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3315_sample_start_
        // start: Forward dependencies from (data & _hf7 ) to transition call_stmt_3315_sample_start_
        // done: Forward dependencies from (data & _hf7 ) to transition call_stmt_3315_sample_start_
        ;;[call_stmt_3315_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3315_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3315_sample_start_ &-> (call_stmt_3315_Sample)
        call_stmt_3315_sample_completed_ <-& (call_stmt_3315_Sample)
        call_stmt_3315_sample_completed_ &-> ($null)
        call_stmt_3315_update_start_ &-> (call_stmt_3315_Update)
        call_stmt_3315_update_completed_ <-& (call_stmt_3315_Update)
        // end: 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3315 store
      }
      call_stmt_3315__entry__ |-> (call_stmt_3315)
      call_stmt_3315__exit__ <-| (call_stmt_3315)
      call_stmt_3315__entry__ <-| (switch_stmt_3176_choice_32)
      call_stmt_3315__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 33
      ;;[switch_stmt_3176_choice_33] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3322__entry__] 
      $P [call_stmt_3322__exit__] 
      ::[call_stmt_3322] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1157
        $T[call_stmt_3322_sample_start_] 
        $T[call_stmt_3322_sample_completed_] 
        $T[call_stmt_3322_update_start_] 
        $T[call_stmt_3322_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _h1f )
        // data
        // start: Forward dependencies from address to transition call_stmt_3322_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3322_sample_start_
        // start: Forward dependencies from (data & _h1f ) to transition call_stmt_3322_sample_start_
        // done: Forward dependencies from (data & _h1f ) to transition call_stmt_3322_sample_start_
        ;;[call_stmt_3322_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3322_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3322_sample_start_ &-> (call_stmt_3322_Sample)
        call_stmt_3322_sample_completed_ <-& (call_stmt_3322_Sample)
        call_stmt_3322_sample_completed_ &-> ($null)
        call_stmt_3322_update_start_ &-> (call_stmt_3322_Update)
        call_stmt_3322_update_completed_ <-& (call_stmt_3322_Update)
        // end: 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3322 store
      }
      call_stmt_3322__entry__ |-> (call_stmt_3322)
      call_stmt_3322__exit__ <-| (call_stmt_3322)
      call_stmt_3322__entry__ <-| (switch_stmt_3176_choice_33)
      call_stmt_3322__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 34
      ;;[switch_stmt_3176_choice_34] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3329__entry__] 
      $P [call_stmt_3329__exit__] 
      ::[call_stmt_3329] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1159
        $T[call_stmt_3329_sample_start_] 
        $T[call_stmt_3329_sample_completed_] 
        $T[call_stmt_3329_update_start_] 
        $T[call_stmt_3329_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _hf7 )
        // data
        // start: Forward dependencies from address to transition call_stmt_3329_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3329_sample_start_
        // start: Forward dependencies from (data & _hf7 ) to transition call_stmt_3329_sample_start_
        // done: Forward dependencies from (data & _hf7 ) to transition call_stmt_3329_sample_start_
        ;;[call_stmt_3329_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3329_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3329_sample_start_ &-> (call_stmt_3329_Sample)
        call_stmt_3329_sample_completed_ <-& (call_stmt_3329_Sample)
        call_stmt_3329_sample_completed_ &-> ($null)
        call_stmt_3329_update_start_ &-> (call_stmt_3329_Update)
        call_stmt_3329_update_completed_ <-& (call_stmt_3329_Update)
        // end: 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3329 store
      }
      call_stmt_3329__entry__ |-> (call_stmt_3329)
      call_stmt_3329__exit__ <-| (call_stmt_3329)
      call_stmt_3329__entry__ <-| (switch_stmt_3176_choice_34)
      call_stmt_3329__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 35
      ;;[switch_stmt_3176_choice_35] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3336__entry__] 
      $P [call_stmt_3336__exit__] 
      ::[call_stmt_3336] 
      {
        // start: 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1161
        $T[call_stmt_3336_sample_start_] 
        $T[call_stmt_3336_sample_completed_] 
        $T[call_stmt_3336_update_start_] 
        $T[call_stmt_3336_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // (data & _hC0 )
        // data
        // start: Forward dependencies from address to transition call_stmt_3336_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3336_sample_start_
        // start: Forward dependencies from (data & _hC0 ) to transition call_stmt_3336_sample_start_
        // done: Forward dependencies from (data & _hC0 ) to transition call_stmt_3336_sample_start_
        ;;[call_stmt_3336_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3336_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3336_sample_start_ &-> (call_stmt_3336_Sample)
        call_stmt_3336_sample_completed_ <-& (call_stmt_3336_Sample)
        call_stmt_3336_sample_completed_ &-> ($null)
        call_stmt_3336_update_start_ &-> (call_stmt_3336_Update)
        call_stmt_3336_update_completed_ <-& (call_stmt_3336_Update)
        // end: 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3336 store
      }
      call_stmt_3336__entry__ |-> (call_stmt_3336)
      call_stmt_3336__exit__ <-| (call_stmt_3336)
      call_stmt_3336__entry__ <-| (switch_stmt_3176_choice_35)
      call_stmt_3336__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 36
      ;;[switch_stmt_3176_choice_36] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_36_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_36_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_36)
      switch_stmt_3176_choice_36_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 37
      ;;[switch_stmt_3176_choice_37] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_37_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_37_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_37)
      switch_stmt_3176_choice_37_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 38
      ;;[switch_stmt_3176_choice_38] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_38_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_38_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_38)
      switch_stmt_3176_choice_38_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 39
      ;;[switch_stmt_3176_choice_39] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_39_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_39_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_39)
      switch_stmt_3176_choice_39_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 40
      ;;[switch_stmt_3176_choice_40] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_40_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_40_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_40)
      switch_stmt_3176_choice_40_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 41
      ;;[switch_stmt_3176_choice_41] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_41_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_41_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_41)
      switch_stmt_3176_choice_41_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 42
      ;;[switch_stmt_3176_choice_42] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P[switch_stmt_3176_choice_42_to_switch_stmt_3176__exit__] 
      switch_stmt_3176_choice_42_to_switch_stmt_3176__exit__ <-| (switch_stmt_3176_choice_42)
      switch_stmt_3176_choice_42_to_switch_stmt_3176__exit__ |-> (switch_stmt_3176__exit__)
      // switch choice 43
      ;;[switch_stmt_3176_choice_43] 
      {
        $T [ack1]  // ack0 will be ignored..
      }
      $P [call_stmt_3362__entry__] 
      $P [call_stmt_3362__exit__] 
      ::[call_stmt_3362] 
      {
        // start: 			$call writeSDHCRegisters (address ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1177
        $T[call_stmt_3362_sample_start_] 
        $T[call_stmt_3362_sample_completed_] 
        $T[call_stmt_3362_update_start_] 
        $T[call_stmt_3362_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // start: Forward dependencies from address to transition call_stmt_3362_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3362_sample_start_
        ;;[call_stmt_3362_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3362_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3362_sample_start_ &-> (call_stmt_3362_Sample)
        call_stmt_3362_sample_completed_ <-& (call_stmt_3362_Sample)
        call_stmt_3362_sample_completed_ &-> ($null)
        call_stmt_3362_update_start_ &-> (call_stmt_3362_Update)
        call_stmt_3362_update_completed_ <-& (call_stmt_3362_Update)
        // end: 			$call writeSDHCRegisters (address ZERO_8 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3362 store
      }
      call_stmt_3362__entry__ |-> (call_stmt_3362)
      call_stmt_3362__exit__ <-| (call_stmt_3362)
      call_stmt_3362__entry__ <-| (switch_stmt_3176_choice_43)
      call_stmt_3362__exit__ |-> (switch_stmt_3176__exit__)
      ;;[switch_stmt_3176_choice_default] 
      {
        $T [ack0] // ack1 will be ignored..
      }
      // switch default choice 
      $P [call_stmt_3366__entry__] 
      $P [call_stmt_3366__exit__] 
      ::[call_stmt_3366] 
      {
        // start: 			$call writeSDHCRegisters (address data ) () 
        //  file .Aa/sdhc.opt.aa, line 1179
        $T[call_stmt_3366_sample_start_] 
        $T[call_stmt_3366_sample_completed_] 
        $T[call_stmt_3366_update_start_] 
        $T[call_stmt_3366_update_completed_] 
        // Call input argument 0
        // address
        // Call input argument 1
        // data
        // start: Forward dependencies from address to transition call_stmt_3366_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3366_sample_start_
        // start: Forward dependencies from data to transition call_stmt_3366_sample_start_
        // done: Forward dependencies from data to transition call_stmt_3366_sample_start_
        ;;[call_stmt_3366_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3366_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3366_sample_start_ &-> (call_stmt_3366_Sample)
        call_stmt_3366_sample_completed_ <-& (call_stmt_3366_Sample)
        call_stmt_3366_sample_completed_ &-> ($null)
        call_stmt_3366_update_start_ &-> (call_stmt_3366_Update)
        call_stmt_3366_update_completed_ <-& (call_stmt_3366_Update)
        // end: 			$call writeSDHCRegisters (address data ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3366 store
      }
      call_stmt_3366__entry__ |-> (call_stmt_3366)
      call_stmt_3366__exit__ <-| (call_stmt_3366)
      call_stmt_3366__entry__ <-| (switch_stmt_3176_choice_default)
      call_stmt_3366__exit__ |-> (switch_stmt_3176__exit__)
      switch_stmt_3176__select__ |-> (switch_stmt_3176_choice_0 switch_stmt_3176_choice_1 switch_stmt_3176_choice_2 switch_stmt_3176_choice_3 switch_stmt_3176_choice_4 switch_stmt_3176_choice_5 switch_stmt_3176_choice_6 switch_stmt_3176_choice_7 switch_stmt_3176_choice_8 switch_stmt_3176_choice_9 switch_stmt_3176_choice_10 switch_stmt_3176_choice_11 switch_stmt_3176_choice_12 switch_stmt_3176_choice_13 switch_stmt_3176_choice_14 switch_stmt_3176_choice_15 switch_stmt_3176_choice_16 switch_stmt_3176_choice_17 switch_stmt_3176_choice_18 switch_stmt_3176_choice_19 switch_stmt_3176_choice_20 switch_stmt_3176_choice_21 switch_stmt_3176_choice_22 switch_stmt_3176_choice_23 switch_stmt_3176_choice_24 switch_stmt_3176_choice_25 switch_stmt_3176_choice_26 switch_stmt_3176_choice_27 switch_stmt_3176_choice_28 switch_stmt_3176_choice_29 switch_stmt_3176_choice_30 switch_stmt_3176_choice_31 switch_stmt_3176_choice_32 switch_stmt_3176_choice_33 switch_stmt_3176_choice_34 switch_stmt_3176_choice_35 switch_stmt_3176_choice_36 switch_stmt_3176_choice_37 switch_stmt_3176_choice_38 switch_stmt_3176_choice_39 switch_stmt_3176_choice_40 switch_stmt_3176_choice_41 switch_stmt_3176_choice_42 switch_stmt_3176_choice_43 switch_stmt_3176_choice_default)
      //---------------------   end of switch statement  file .Aa/sdhc.opt.aa, line 1089  --------------------------
      switch_stmt_3176__entry__ <-| (branch_block_stmt_3175__entry__)
      switch_stmt_3176__exit__ |-> (branch_block_stmt_3175__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sdhc_register_write%write_register
    //  file .Aa/sdhc.opt.aa, line 1087
    // constant-object-declarations for block %sdhc_register_write
    //  file .Aa/sdhc.opt.aa, line 1082
    // constant-declarations for block %sdhc_register_write%write_register
    //  file .Aa/sdhc.opt.aa, line 1087
    // constant-declarations  for switch  
    //  file .Aa/sdhc.opt.aa, line 1089
    // 5 
    $constant $W[konst_3178_wire_constant] : $int<8> := _b00000101// 5
    // 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1091
    // _h7f 
    $constant $W[konst_3181_wire_constant] : $int<8> := _b01111111// 127
    // 12 
    $constant $W[konst_3185_wire_constant] : $int<8> := _b00001100// 12
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1093
    // _h3f 
    $constant $W[konst_3188_wire_constant] : $int<8> := _b00111111// 63
    // 13 
    $constant $W[konst_3192_wire_constant] : $int<8> := _b00001101// 13
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1095
    // ZERO_8
    $constant $W[R_ZERO_8_3194_wire_constant] : $int<8> := _b00000000// 0
    // 14 
    $constant $W[konst_3197_wire_constant] : $int<8> := _b00001110// 14
    // 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1097
    // _hfb 
    $constant $W[konst_3200_wire_constant] : $int<8> := _b11111011// 251
    // 15 
    $constant $W[konst_3204_wire_constant] : $int<8> := _b00001111// 15
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1099
    // _h3f 
    $constant $W[konst_3207_wire_constant] : $int<8> := _b00111111// 63
    // 16 
    $constant $W[konst_3211_wire_constant] : $int<8> := _b00010000// 16
    // 17 
    $constant $W[konst_3214_wire_constant] : $int<8> := _b00010001// 17
    // 18 
    $constant $W[konst_3217_wire_constant] : $int<8> := _b00010010// 18
    // 19 
    $constant $W[konst_3220_wire_constant] : $int<8> := _b00010011// 19
    // 20 
    $constant $W[konst_3223_wire_constant] : $int<8> := _b00010100// 20
    // 21 
    $constant $W[konst_3226_wire_constant] : $int<8> := _b00010101// 21
    // 22 
    $constant $W[konst_3229_wire_constant] : $int<8> := _b00010110// 22
    // 23 
    $constant $W[konst_3232_wire_constant] : $int<8> := _b00010111// 23
    // 24 
    $constant $W[konst_3235_wire_constant] : $int<8> := _b00011000// 24
    // 25 
    $constant $W[konst_3238_wire_constant] : $int<8> := _b00011001// 25
    // 26 
    $constant $W[konst_3241_wire_constant] : $int<8> := _b00011010// 26
    // 27 
    $constant $W[konst_3244_wire_constant] : $int<8> := _b00011011// 27
    // 28 
    $constant $W[konst_3247_wire_constant] : $int<8> := _b00011100// 28
    // 29 
    $constant $W[konst_3250_wire_constant] : $int<8> := _b00011101// 29
    // 30 
    $constant $W[konst_3253_wire_constant] : $int<8> := _b00011110// 30
    // 31 
    $constant $W[konst_3256_wire_constant] : $int<8> := _b00011111// 31
    // 36 
    $constant $W[konst_3259_wire_constant] : $int<8> := _b00100100// 36
    // 37 
    $constant $W[konst_3262_wire_constant] : $int<8> := _b00100101// 37
    // 38 
    $constant $W[konst_3265_wire_constant] : $int<8> := _b00100110// 38
    // 39 
    $constant $W[konst_3268_wire_constant] : $int<8> := _b00100111// 39
    // 44 
    $constant $W[konst_3271_wire_constant] : $int<8> := _b00101100// 44
    // 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1141
    // _h05 
    $constant $W[konst_3274_wire_constant] : $int<8> := _b00000101// 5
    // 47 
    $constant $W[konst_3278_wire_constant] : $int<8> := _b00101111// 47
    // 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1143
    // _h7 
    $constant $W[konst_3281_wire_constant] : $int<8> := _b00000111// 7
    // 48 
    $constant $W[konst_3285_wire_constant] : $int<8> := _b00110000// 48
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1145
    // 49 
    $constant $W[konst_3290_wire_constant] : $int<8> := _b00110001// 49
    // 50 
    $constant $W[konst_3293_wire_constant] : $int<8> := _b00110010// 50
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1149
    // 51 
    $constant $W[konst_3298_wire_constant] : $int<8> := _b00110011// 51
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1151
    // 53 
    $constant $W[konst_3303_wire_constant] : $int<8> := _b00110101// 53
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1153
    // _h1f 
    $constant $W[konst_3306_wire_constant] : $int<8> := _b00011111// 31
    // 55 
    $constant $W[konst_3310_wire_constant] : $int<8> := _b00110111// 55
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1155
    // _hf7 
    $constant $W[konst_3313_wire_constant] : $int<8> := _b11110111// 247
    // 57 
    $constant $W[konst_3317_wire_constant] : $int<8> := _b00111001// 57
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1157
    // _h1f 
    $constant $W[konst_3320_wire_constant] : $int<8> := _b00011111// 31
    // 59 
    $constant $W[konst_3324_wire_constant] : $int<8> := _b00111011// 59
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1159
    // _hf7 
    $constant $W[konst_3327_wire_constant] : $int<8> := _b11110111// 247
    // 63 
    $constant $W[konst_3331_wire_constant] : $int<8> := _b00111111// 63
    // 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1161
    // _hC0 
    $constant $W[konst_3334_wire_constant] : $int<8> := _b11000000// 192
    // 64 
    $constant $W[konst_3338_wire_constant] : $int<8> := _b01000000// 64
    // 65 
    $constant $W[konst_3341_wire_constant] : $int<8> := _b01000001// 65
    // 66 
    $constant $W[konst_3344_wire_constant] : $int<8> := _b01000010// 66
    // 67 
    $constant $W[konst_3347_wire_constant] : $int<8> := _b01000011// 67
    // 68 
    $constant $W[konst_3350_wire_constant] : $int<8> := _b01000100// 68
    // 69 
    $constant $W[konst_3353_wire_constant] : $int<8> := _b01000101// 69
    // 70 
    $constant $W[konst_3356_wire_constant] : $int<8> := _b01000110// 70
    // 71 
    $constant $W[konst_3359_wire_constant] : $int<8> := _b01000111// 71
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1177
    // ZERO_8
    $constant $W[R_ZERO_8_3361_wire_constant] : $int<8> := _b00000000// 0
    // 			$call writeSDHCRegisters (address data ) () 
    //  file .Aa/sdhc.opt.aa, line 1179
    // block %sdhc_register_write%write_register
    //  file .Aa/sdhc.opt.aa, line 1087
    // switch-statement  
    //  file .Aa/sdhc.opt.aa, line 1089
    $W[konst_3178_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1091
    // (data & _h7f )
    $intermediate $W[AND_u8_u8_3182_wire] : $int<8>
    $W[konst_3185_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1093
    // (data & _h3f )
    $intermediate $W[AND_u8_u8_3189_wire] : $int<8>
    $W[konst_3192_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1095
    $W[konst_3197_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1097
    // (data & _hfb )
    $intermediate $W[AND_u8_u8_3201_wire] : $int<8>
    $W[konst_3204_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1099
    // (data & _h3f )
    $intermediate $W[AND_u8_u8_3208_wire] : $int<8>
    $W[konst_3211_wire_constant_cmp] : $int<1>
    $W[konst_3214_wire_constant_cmp] : $int<1>
    $W[konst_3217_wire_constant_cmp] : $int<1>
    $W[konst_3220_wire_constant_cmp] : $int<1>
    $W[konst_3223_wire_constant_cmp] : $int<1>
    $W[konst_3226_wire_constant_cmp] : $int<1>
    $W[konst_3229_wire_constant_cmp] : $int<1>
    $W[konst_3232_wire_constant_cmp] : $int<1>
    $W[konst_3235_wire_constant_cmp] : $int<1>
    $W[konst_3238_wire_constant_cmp] : $int<1>
    $W[konst_3241_wire_constant_cmp] : $int<1>
    $W[konst_3244_wire_constant_cmp] : $int<1>
    $W[konst_3247_wire_constant_cmp] : $int<1>
    $W[konst_3250_wire_constant_cmp] : $int<1>
    $W[konst_3253_wire_constant_cmp] : $int<1>
    $W[konst_3256_wire_constant_cmp] : $int<1>
    $W[konst_3259_wire_constant_cmp] : $int<1>
    $W[konst_3262_wire_constant_cmp] : $int<1>
    $W[konst_3265_wire_constant_cmp] : $int<1>
    $W[konst_3268_wire_constant_cmp] : $int<1>
    $W[konst_3271_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1141
    // (data & _h05 )
    $intermediate $W[AND_u8_u8_3275_wire] : $int<8>
    $W[konst_3278_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1143
    // (data & _h7 )
    $intermediate $W[AND_u8_u8_3282_wire] : $int<8>
    $W[konst_3285_wire_constant_cmp] : $int<1>
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1145
    $W[konst_3290_wire_constant_cmp] : $int<1>
    $W[konst_3293_wire_constant_cmp] : $int<1>
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1149
    $W[konst_3298_wire_constant_cmp] : $int<1>
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1151
    $W[konst_3303_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1153
    // (data & _h1f )
    $intermediate $W[AND_u8_u8_3307_wire] : $int<8>
    $W[konst_3310_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1155
    // (data & _hf7 )
    $intermediate $W[AND_u8_u8_3314_wire] : $int<8>
    $W[konst_3317_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1157
    // (data & _h1f )
    $intermediate $W[AND_u8_u8_3321_wire] : $int<8>
    $W[konst_3324_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1159
    // (data & _hf7 )
    $intermediate $W[AND_u8_u8_3328_wire] : $int<8>
    $W[konst_3331_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1161
    // (data & _hC0 )
    $intermediate $W[AND_u8_u8_3335_wire] : $int<8>
    $W[konst_3338_wire_constant_cmp] : $int<1>
    $W[konst_3341_wire_constant_cmp] : $int<1>
    $W[konst_3344_wire_constant_cmp] : $int<1>
    $W[konst_3347_wire_constant_cmp] : $int<1>
    $W[konst_3350_wire_constant_cmp] : $int<1>
    $W[konst_3353_wire_constant_cmp] : $int<1>
    $W[konst_3356_wire_constant_cmp] : $int<1>
    $W[konst_3359_wire_constant_cmp] : $int<1>
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1177
    // 			$call writeSDHCRegisters (address data ) () 
    //  file .Aa/sdhc.opt.aa, line 1179
    // datapath-instances for block %sdhc_register_write%write_register
    //  file .Aa/sdhc.opt.aa, line 1087
    // datapath-instances  for switch  
    //  file .Aa/sdhc.opt.aa, line 1089
    ==[switch_stmt_3176_select_expr_0] (address konst_3178_wire_constant) (konst_3178_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_0] (konst_3178_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1091
    // (data & _h7f )
    &[AND_u8_u8_3182_inst] (data konst_3181_wire_constant) (AND_u8_u8_3182_wire)   $flowthrough 
    $delay AND_u8_u8_3182_inst 0
    $call [call_stmt_3183_call] $module writeSDHCRegisters(address AND_u8_u8_3182_wire) ()  
    $delay call_stmt_3183_call 4
    $buffering  $in call_stmt_3183_call address 1
    $buffering  $in call_stmt_3183_call AND_u8_u8_3182_wire 1
    ==[switch_stmt_3176_select_expr_1] (address konst_3185_wire_constant) (konst_3185_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_1] (konst_3185_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1093
    // (data & _h3f )
    &[AND_u8_u8_3189_inst] (data konst_3188_wire_constant) (AND_u8_u8_3189_wire)   $flowthrough 
    $delay AND_u8_u8_3189_inst 0
    $call [call_stmt_3190_call] $module writeSDHCRegisters(address AND_u8_u8_3189_wire) ()  
    $delay call_stmt_3190_call 4
    $buffering  $in call_stmt_3190_call address 1
    $buffering  $in call_stmt_3190_call AND_u8_u8_3189_wire 1
    ==[switch_stmt_3176_select_expr_2] (address konst_3192_wire_constant) (konst_3192_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_2] (konst_3192_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1095
    $call [call_stmt_3195_call] $module writeSDHCRegisters(address R_ZERO_8_3194_wire_constant) ()  
    $delay call_stmt_3195_call 4
    $buffering  $in call_stmt_3195_call address 1
    $buffering  $in call_stmt_3195_call R_ZERO_8_3194_wire_constant 1
    ==[switch_stmt_3176_select_expr_3] (address konst_3197_wire_constant) (konst_3197_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_3] (konst_3197_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1097
    // (data & _hfb )
    &[AND_u8_u8_3201_inst] (data konst_3200_wire_constant) (AND_u8_u8_3201_wire)   $flowthrough 
    $delay AND_u8_u8_3201_inst 0
    $call [call_stmt_3202_call] $module writeSDHCRegisters(address AND_u8_u8_3201_wire) ()  
    $delay call_stmt_3202_call 4
    $buffering  $in call_stmt_3202_call address 1
    $buffering  $in call_stmt_3202_call AND_u8_u8_3201_wire 1
    ==[switch_stmt_3176_select_expr_4] (address konst_3204_wire_constant) (konst_3204_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_4] (konst_3204_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1099
    // (data & _h3f )
    &[AND_u8_u8_3208_inst] (data konst_3207_wire_constant) (AND_u8_u8_3208_wire)   $flowthrough 
    $delay AND_u8_u8_3208_inst 0
    $call [call_stmt_3209_call] $module writeSDHCRegisters(address AND_u8_u8_3208_wire) ()  
    $delay call_stmt_3209_call 4
    $buffering  $in call_stmt_3209_call address 1
    $buffering  $in call_stmt_3209_call AND_u8_u8_3208_wire 1
    ==[switch_stmt_3176_select_expr_5] (address konst_3211_wire_constant) (konst_3211_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_5] (konst_3211_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_6] (address konst_3214_wire_constant) (konst_3214_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_6] (konst_3214_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_7] (address konst_3217_wire_constant) (konst_3217_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_7] (konst_3217_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_8] (address konst_3220_wire_constant) (konst_3220_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_8] (konst_3220_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_9] (address konst_3223_wire_constant) (konst_3223_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_9] (konst_3223_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_10] (address konst_3226_wire_constant) (konst_3226_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_10] (konst_3226_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_11] (address konst_3229_wire_constant) (konst_3229_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_11] (konst_3229_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_12] (address konst_3232_wire_constant) (konst_3232_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_12] (konst_3232_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_13] (address konst_3235_wire_constant) (konst_3235_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_13] (konst_3235_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_14] (address konst_3238_wire_constant) (konst_3238_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_14] (konst_3238_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_15] (address konst_3241_wire_constant) (konst_3241_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_15] (konst_3241_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_16] (address konst_3244_wire_constant) (konst_3244_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_16] (konst_3244_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_17] (address konst_3247_wire_constant) (konst_3247_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_17] (konst_3247_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_18] (address konst_3250_wire_constant) (konst_3250_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_18] (konst_3250_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_19] (address konst_3253_wire_constant) (konst_3253_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_19] (konst_3253_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_20] (address konst_3256_wire_constant) (konst_3256_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_20] (konst_3256_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_21] (address konst_3259_wire_constant) (konst_3259_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_21] (konst_3259_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_22] (address konst_3262_wire_constant) (konst_3262_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_22] (konst_3262_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_23] (address konst_3265_wire_constant) (konst_3265_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_23] (konst_3265_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_24] (address konst_3268_wire_constant) (konst_3268_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_24] (konst_3268_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_25] (address konst_3271_wire_constant) (konst_3271_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_25] (konst_3271_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1141
    // (data & _h05 )
    &[AND_u8_u8_3275_inst] (data konst_3274_wire_constant) (AND_u8_u8_3275_wire)   $flowthrough 
    $delay AND_u8_u8_3275_inst 0
    $call [call_stmt_3276_call] $module writeSDHCRegisters(address AND_u8_u8_3275_wire) ()  
    $delay call_stmt_3276_call 4
    $buffering  $in call_stmt_3276_call address 1
    $buffering  $in call_stmt_3276_call AND_u8_u8_3275_wire 1
    ==[switch_stmt_3176_select_expr_26] (address konst_3278_wire_constant) (konst_3278_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_26] (konst_3278_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1143
    // (data & _h7 )
    &[AND_u8_u8_3282_inst] (data konst_3281_wire_constant) (AND_u8_u8_3282_wire)   $flowthrough 
    $delay AND_u8_u8_3282_inst 0
    $call [call_stmt_3283_call] $module writeSDHCRegisters(address AND_u8_u8_3282_wire) ()  
    $delay call_stmt_3283_call 4
    $buffering  $in call_stmt_3283_call address 1
    $buffering  $in call_stmt_3283_call AND_u8_u8_3282_wire 1
    ==[switch_stmt_3176_select_expr_27] (address konst_3285_wire_constant) (konst_3285_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_27] (konst_3285_wire_constant_cmp)
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1145
    $call [call_stmt_3288_call] $module RW1C(data address) ()  
    $delay call_stmt_3288_call 4
    $buffering  $in call_stmt_3288_call data 1
    $buffering  $in call_stmt_3288_call address 1
    ==[switch_stmt_3176_select_expr_28] (address konst_3290_wire_constant) (konst_3290_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_28] (konst_3290_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_29] (address konst_3293_wire_constant) (konst_3293_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_29] (konst_3293_wire_constant_cmp)
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1149
    $call [call_stmt_3296_call] $module RW1C(data address) ()  
    $delay call_stmt_3296_call 4
    $buffering  $in call_stmt_3296_call data 1
    $buffering  $in call_stmt_3296_call address 1
    ==[switch_stmt_3176_select_expr_30] (address konst_3298_wire_constant) (konst_3298_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_30] (konst_3298_wire_constant_cmp)
    // 			$call RW1C (data address ) () 
    //  file .Aa/sdhc.opt.aa, line 1151
    $call [call_stmt_3301_call] $module RW1C(data address) ()  
    $delay call_stmt_3301_call 4
    $buffering  $in call_stmt_3301_call data 1
    $buffering  $in call_stmt_3301_call address 1
    ==[switch_stmt_3176_select_expr_31] (address konst_3303_wire_constant) (konst_3303_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_31] (konst_3303_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1153
    // (data & _h1f )
    &[AND_u8_u8_3307_inst] (data konst_3306_wire_constant) (AND_u8_u8_3307_wire)   $flowthrough 
    $delay AND_u8_u8_3307_inst 0
    $call [call_stmt_3308_call] $module writeSDHCRegisters(address AND_u8_u8_3307_wire) ()  
    $delay call_stmt_3308_call 4
    $buffering  $in call_stmt_3308_call address 1
    $buffering  $in call_stmt_3308_call AND_u8_u8_3307_wire 1
    ==[switch_stmt_3176_select_expr_32] (address konst_3310_wire_constant) (konst_3310_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_32] (konst_3310_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1155
    // (data & _hf7 )
    &[AND_u8_u8_3314_inst] (data konst_3313_wire_constant) (AND_u8_u8_3314_wire)   $flowthrough 
    $delay AND_u8_u8_3314_inst 0
    $call [call_stmt_3315_call] $module writeSDHCRegisters(address AND_u8_u8_3314_wire) ()  
    $delay call_stmt_3315_call 4
    $buffering  $in call_stmt_3315_call address 1
    $buffering  $in call_stmt_3315_call AND_u8_u8_3314_wire 1
    ==[switch_stmt_3176_select_expr_33] (address konst_3317_wire_constant) (konst_3317_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_33] (konst_3317_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1157
    // (data & _h1f )
    &[AND_u8_u8_3321_inst] (data konst_3320_wire_constant) (AND_u8_u8_3321_wire)   $flowthrough 
    $delay AND_u8_u8_3321_inst 0
    $call [call_stmt_3322_call] $module writeSDHCRegisters(address AND_u8_u8_3321_wire) ()  
    $delay call_stmt_3322_call 4
    $buffering  $in call_stmt_3322_call address 1
    $buffering  $in call_stmt_3322_call AND_u8_u8_3321_wire 1
    ==[switch_stmt_3176_select_expr_34] (address konst_3324_wire_constant) (konst_3324_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_34] (konst_3324_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1159
    // (data & _hf7 )
    &[AND_u8_u8_3328_inst] (data konst_3327_wire_constant) (AND_u8_u8_3328_wire)   $flowthrough 
    $delay AND_u8_u8_3328_inst 0
    $call [call_stmt_3329_call] $module writeSDHCRegisters(address AND_u8_u8_3328_wire) ()  
    $delay call_stmt_3329_call 4
    $buffering  $in call_stmt_3329_call address 1
    $buffering  $in call_stmt_3329_call AND_u8_u8_3328_wire 1
    ==[switch_stmt_3176_select_expr_35] (address konst_3331_wire_constant) (konst_3331_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_35] (konst_3331_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1161
    // (data & _hC0 )
    &[AND_u8_u8_3335_inst] (data konst_3334_wire_constant) (AND_u8_u8_3335_wire)   $flowthrough 
    $delay AND_u8_u8_3335_inst 0
    $call [call_stmt_3336_call] $module writeSDHCRegisters(address AND_u8_u8_3335_wire) ()  
    $delay call_stmt_3336_call 4
    $buffering  $in call_stmt_3336_call address 1
    $buffering  $in call_stmt_3336_call AND_u8_u8_3335_wire 1
    ==[switch_stmt_3176_select_expr_36] (address konst_3338_wire_constant) (konst_3338_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_36] (konst_3338_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_37] (address konst_3341_wire_constant) (konst_3341_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_37] (konst_3341_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_38] (address konst_3344_wire_constant) (konst_3344_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_38] (konst_3344_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_39] (address konst_3347_wire_constant) (konst_3347_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_39] (konst_3347_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_40] (address konst_3350_wire_constant) (konst_3350_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_40] (konst_3350_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_41] (address konst_3353_wire_constant) (konst_3353_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_41] (konst_3353_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_42] (address konst_3356_wire_constant) (konst_3356_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_42] (konst_3356_wire_constant_cmp)
    ==[switch_stmt_3176_select_expr_43] (address konst_3359_wire_constant) (konst_3359_wire_constant_cmp)   
    ==0? [switch_stmt_3176_branch_43] (konst_3359_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1177
    $call [call_stmt_3362_call] $module writeSDHCRegisters(address R_ZERO_8_3361_wire_constant) ()  
    $delay call_stmt_3362_call 4
    $buffering  $in call_stmt_3362_call address 1
    $buffering  $in call_stmt_3362_call R_ZERO_8_3361_wire_constant 1
    ==0? [switch_stmt_3176_branch_default] (konst_3178_wire_constant_cmp konst_3185_wire_constant_cmp konst_3192_wire_constant_cmp konst_3197_wire_constant_cmp konst_3204_wire_constant_cmp konst_3211_wire_constant_cmp konst_3214_wire_constant_cmp konst_3217_wire_constant_cmp konst_3220_wire_constant_cmp konst_3223_wire_constant_cmp konst_3226_wire_constant_cmp konst_3229_wire_constant_cmp konst_3232_wire_constant_cmp konst_3235_wire_constant_cmp konst_3238_wire_constant_cmp konst_3241_wire_constant_cmp konst_3244_wire_constant_cmp konst_3247_wire_constant_cmp konst_3250_wire_constant_cmp konst_3253_wire_constant_cmp konst_3256_wire_constant_cmp konst_3259_wire_constant_cmp konst_3262_wire_constant_cmp konst_3265_wire_constant_cmp konst_3268_wire_constant_cmp konst_3271_wire_constant_cmp konst_3278_wire_constant_cmp konst_3285_wire_constant_cmp konst_3290_wire_constant_cmp konst_3293_wire_constant_cmp konst_3298_wire_constant_cmp konst_3303_wire_constant_cmp konst_3310_wire_constant_cmp konst_3317_wire_constant_cmp konst_3324_wire_constant_cmp konst_3331_wire_constant_cmp konst_3338_wire_constant_cmp konst_3341_wire_constant_cmp konst_3344_wire_constant_cmp konst_3347_wire_constant_cmp konst_3350_wire_constant_cmp konst_3353_wire_constant_cmp konst_3356_wire_constant_cmp konst_3359_wire_constant_cmp)
    // 			$call writeSDHCRegisters (address data ) () 
    //  file .Aa/sdhc.opt.aa, line 1179
    $call [call_stmt_3366_call] $module writeSDHCRegisters(address data) ()  
    $delay call_stmt_3366_call 4
    $buffering  $in call_stmt_3366_call address 1
    $buffering  $in call_stmt_3366_call data 1
  }
  // end data-path
  // CP-DP links for switch  
  //  file .Aa/sdhc.opt.aa, line 1089
  switch_stmt_3176_select_expr_0 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_0/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_0/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_0/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_0/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_0 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_0/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_0/ack1)
  // 			$call writeSDHCRegisters (address (data & _h7f ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1091
  // address
  // (data & _h7f )
  // data
  call_stmt_3183_call <=> (branch_block_stmt_3175/call_stmt_3183/call_stmt_3183_Sample/crr branch_block_stmt_3175/call_stmt_3183/call_stmt_3183_Update/ccr) (branch_block_stmt_3175/call_stmt_3183/call_stmt_3183_Sample/cra branch_block_stmt_3175/call_stmt_3183/call_stmt_3183_Update/cca)
  switch_stmt_3176_select_expr_1 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_1/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_1/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_1/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_1/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_1 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_1/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_1/ack1)
  // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1093
  // address
  // (data & _h3f )
  // data
  call_stmt_3190_call <=> (branch_block_stmt_3175/call_stmt_3190/call_stmt_3190_Sample/crr branch_block_stmt_3175/call_stmt_3190/call_stmt_3190_Update/ccr) (branch_block_stmt_3175/call_stmt_3190/call_stmt_3190_Sample/cra branch_block_stmt_3175/call_stmt_3190/call_stmt_3190_Update/cca)
  switch_stmt_3176_select_expr_2 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_2/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_2/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_2/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_2/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_2 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_2/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_2/ack1)
  // 			$call writeSDHCRegisters (address ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1095
  // address
  call_stmt_3195_call <=> (branch_block_stmt_3175/call_stmt_3195/call_stmt_3195_Sample/crr branch_block_stmt_3175/call_stmt_3195/call_stmt_3195_Update/ccr) (branch_block_stmt_3175/call_stmt_3195/call_stmt_3195_Sample/cra branch_block_stmt_3175/call_stmt_3195/call_stmt_3195_Update/cca)
  switch_stmt_3176_select_expr_3 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_3/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_3/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_3/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_3/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_3 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_3/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_3/ack1)
  // 			$call writeSDHCRegisters (address (data & _hfb ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1097
  // address
  // (data & _hfb )
  // data
  call_stmt_3202_call <=> (branch_block_stmt_3175/call_stmt_3202/call_stmt_3202_Sample/crr branch_block_stmt_3175/call_stmt_3202/call_stmt_3202_Update/ccr) (branch_block_stmt_3175/call_stmt_3202/call_stmt_3202_Sample/cra branch_block_stmt_3175/call_stmt_3202/call_stmt_3202_Update/cca)
  switch_stmt_3176_select_expr_4 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_4/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_4/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_4/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_4/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_4 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_4/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_4/ack1)
  // 			$call writeSDHCRegisters (address (data & _h3f ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1099
  // address
  // (data & _h3f )
  // data
  call_stmt_3209_call <=> (branch_block_stmt_3175/call_stmt_3209/call_stmt_3209_Sample/crr branch_block_stmt_3175/call_stmt_3209/call_stmt_3209_Update/ccr) (branch_block_stmt_3175/call_stmt_3209/call_stmt_3209_Sample/cra branch_block_stmt_3175/call_stmt_3209/call_stmt_3209_Update/cca)
  switch_stmt_3176_select_expr_5 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_5/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_5/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_5/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_5/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_5 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_5/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_5/ack1)
  switch_stmt_3176_select_expr_6 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_6/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_6/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_6/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_6/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_6 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_6/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_6/ack1)
  switch_stmt_3176_select_expr_7 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_7/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_7/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_7/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_7/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_7 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_7/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_7/ack1)
  switch_stmt_3176_select_expr_8 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_8/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_8/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_8/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_8/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_8 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_8/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_8/ack1)
  switch_stmt_3176_select_expr_9 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_9/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_9/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_9/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_9/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_9 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_9/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_9/ack1)
  switch_stmt_3176_select_expr_10 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_10/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_10/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_10/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_10/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_10 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_10/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_10/ack1)
  switch_stmt_3176_select_expr_11 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_11/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_11/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_11/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_11/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_11 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_11/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_11/ack1)
  switch_stmt_3176_select_expr_12 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_12/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_12/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_12/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_12/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_12 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_12/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_12/ack1)
  switch_stmt_3176_select_expr_13 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_13/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_13/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_13/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_13/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_13 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_13/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_13/ack1)
  switch_stmt_3176_select_expr_14 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_14/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_14/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_14/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_14/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_14 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_14/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_14/ack1)
  switch_stmt_3176_select_expr_15 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_15/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_15/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_15/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_15/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_15 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_15/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_15/ack1)
  switch_stmt_3176_select_expr_16 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_16/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_16/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_16/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_16/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_16 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_16/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_16/ack1)
  switch_stmt_3176_select_expr_17 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_17/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_17/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_17/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_17/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_17 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_17/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_17/ack1)
  switch_stmt_3176_select_expr_18 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_18/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_18/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_18/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_18/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_18 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_18/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_18/ack1)
  switch_stmt_3176_select_expr_19 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_19/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_19/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_19/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_19/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_19 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_19/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_19/ack1)
  switch_stmt_3176_select_expr_20 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_20/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_20/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_20/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_20/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_20 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_20/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_20/ack1)
  switch_stmt_3176_select_expr_21 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_21/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_21/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_21/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_21/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_21 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_21/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_21/ack1)
  switch_stmt_3176_select_expr_22 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_22/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_22/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_22/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_22/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_22 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_22/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_22/ack1)
  switch_stmt_3176_select_expr_23 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_23/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_23/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_23/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_23/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_23 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_23/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_23/ack1)
  switch_stmt_3176_select_expr_24 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_24/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_24/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_24/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_24/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_24 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_24/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_24/ack1)
  switch_stmt_3176_select_expr_25 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_25/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_25/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_25/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_25/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_25 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_25/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_25/ack1)
  // 			$call writeSDHCRegisters (address (data & _h05 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1141
  // address
  // (data & _h05 )
  // data
  call_stmt_3276_call <=> (branch_block_stmt_3175/call_stmt_3276/call_stmt_3276_Sample/crr branch_block_stmt_3175/call_stmt_3276/call_stmt_3276_Update/ccr) (branch_block_stmt_3175/call_stmt_3276/call_stmt_3276_Sample/cra branch_block_stmt_3175/call_stmt_3276/call_stmt_3276_Update/cca)
  switch_stmt_3176_select_expr_26 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_26/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_26/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_26/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_26/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_26 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_26/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_26/ack1)
  // 			$call writeSDHCRegisters (address (data & _h7 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1143
  // address
  // (data & _h7 )
  // data
  call_stmt_3283_call <=> (branch_block_stmt_3175/call_stmt_3283/call_stmt_3283_Sample/crr branch_block_stmt_3175/call_stmt_3283/call_stmt_3283_Update/ccr) (branch_block_stmt_3175/call_stmt_3283/call_stmt_3283_Sample/cra branch_block_stmt_3175/call_stmt_3283/call_stmt_3283_Update/cca)
  switch_stmt_3176_select_expr_27 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_27/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_27/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_27/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_27/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_27 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_27/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_27/ack1)
  // 			$call RW1C (data address ) () 
  //  file .Aa/sdhc.opt.aa, line 1145
  // data
  // address
  call_stmt_3288_call <=> (branch_block_stmt_3175/call_stmt_3288/call_stmt_3288_Sample/crr branch_block_stmt_3175/call_stmt_3288/call_stmt_3288_Update/ccr) (branch_block_stmt_3175/call_stmt_3288/call_stmt_3288_Sample/cra branch_block_stmt_3175/call_stmt_3288/call_stmt_3288_Update/cca)
  switch_stmt_3176_select_expr_28 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_28/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_28/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_28/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_28/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_28 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_28/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_28/ack1)
  switch_stmt_3176_select_expr_29 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_29/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_29/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_29/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_29/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_29 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_29/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_29/ack1)
  // 			$call RW1C (data address ) () 
  //  file .Aa/sdhc.opt.aa, line 1149
  // data
  // address
  call_stmt_3296_call <=> (branch_block_stmt_3175/call_stmt_3296/call_stmt_3296_Sample/crr branch_block_stmt_3175/call_stmt_3296/call_stmt_3296_Update/ccr) (branch_block_stmt_3175/call_stmt_3296/call_stmt_3296_Sample/cra branch_block_stmt_3175/call_stmt_3296/call_stmt_3296_Update/cca)
  switch_stmt_3176_select_expr_30 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_30/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_30/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_30/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_30/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_30 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_30/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_30/ack1)
  // 			$call RW1C (data address ) () 
  //  file .Aa/sdhc.opt.aa, line 1151
  // data
  // address
  call_stmt_3301_call <=> (branch_block_stmt_3175/call_stmt_3301/call_stmt_3301_Sample/crr branch_block_stmt_3175/call_stmt_3301/call_stmt_3301_Update/ccr) (branch_block_stmt_3175/call_stmt_3301/call_stmt_3301_Sample/cra branch_block_stmt_3175/call_stmt_3301/call_stmt_3301_Update/cca)
  switch_stmt_3176_select_expr_31 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_31/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_31/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_31/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_31/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_31 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_31/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_31/ack1)
  // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1153
  // address
  // (data & _h1f )
  // data
  call_stmt_3308_call <=> (branch_block_stmt_3175/call_stmt_3308/call_stmt_3308_Sample/crr branch_block_stmt_3175/call_stmt_3308/call_stmt_3308_Update/ccr) (branch_block_stmt_3175/call_stmt_3308/call_stmt_3308_Sample/cra branch_block_stmt_3175/call_stmt_3308/call_stmt_3308_Update/cca)
  switch_stmt_3176_select_expr_32 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_32/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_32/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_32/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_32/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_32 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_32/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_32/ack1)
  // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1155
  // address
  // (data & _hf7 )
  // data
  call_stmt_3315_call <=> (branch_block_stmt_3175/call_stmt_3315/call_stmt_3315_Sample/crr branch_block_stmt_3175/call_stmt_3315/call_stmt_3315_Update/ccr) (branch_block_stmt_3175/call_stmt_3315/call_stmt_3315_Sample/cra branch_block_stmt_3175/call_stmt_3315/call_stmt_3315_Update/cca)
  switch_stmt_3176_select_expr_33 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_33/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_33/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_33/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_33/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_33 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_33/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_33/ack1)
  // 			$call writeSDHCRegisters (address (data & _h1f ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1157
  // address
  // (data & _h1f )
  // data
  call_stmt_3322_call <=> (branch_block_stmt_3175/call_stmt_3322/call_stmt_3322_Sample/crr branch_block_stmt_3175/call_stmt_3322/call_stmt_3322_Update/ccr) (branch_block_stmt_3175/call_stmt_3322/call_stmt_3322_Sample/cra branch_block_stmt_3175/call_stmt_3322/call_stmt_3322_Update/cca)
  switch_stmt_3176_select_expr_34 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_34/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_34/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_34/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_34/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_34 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_34/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_34/ack1)
  // 			$call writeSDHCRegisters (address (data & _hf7 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1159
  // address
  // (data & _hf7 )
  // data
  call_stmt_3329_call <=> (branch_block_stmt_3175/call_stmt_3329/call_stmt_3329_Sample/crr branch_block_stmt_3175/call_stmt_3329/call_stmt_3329_Update/ccr) (branch_block_stmt_3175/call_stmt_3329/call_stmt_3329_Sample/cra branch_block_stmt_3175/call_stmt_3329/call_stmt_3329_Update/cca)
  switch_stmt_3176_select_expr_35 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_35/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_35/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_35/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_35/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_35 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_35/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_35/ack1)
  // 			$call writeSDHCRegisters (address (data & _hC0 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1161
  // address
  // (data & _hC0 )
  // data
  call_stmt_3336_call <=> (branch_block_stmt_3175/call_stmt_3336/call_stmt_3336_Sample/crr branch_block_stmt_3175/call_stmt_3336/call_stmt_3336_Update/ccr) (branch_block_stmt_3175/call_stmt_3336/call_stmt_3336_Sample/cra branch_block_stmt_3175/call_stmt_3336/call_stmt_3336_Update/cca)
  switch_stmt_3176_select_expr_36 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_36/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_36/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_36/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_36/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_36 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_36/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_36/ack1)
  switch_stmt_3176_select_expr_37 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_37/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_37/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_37/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_37/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_37 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_37/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_37/ack1)
  switch_stmt_3176_select_expr_38 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_38/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_38/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_38/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_38/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_38 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_38/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_38/ack1)
  switch_stmt_3176_select_expr_39 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_39/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_39/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_39/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_39/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_39 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_39/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_39/ack1)
  switch_stmt_3176_select_expr_40 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_40/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_40/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_40/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_40/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_40 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_40/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_40/ack1)
  switch_stmt_3176_select_expr_41 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_41/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_41/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_41/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_41/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_41 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_41/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_41/ack1)
  switch_stmt_3176_select_expr_42 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_42/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_42/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_42/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_42/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_42 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_42/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_42/ack1)
  switch_stmt_3176_select_expr_43 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_43/SplitProtocol/Sample/rr branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_43/SplitProtocol/Update/cr) (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_43/SplitProtocol/Sample/ra branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_43/SplitProtocol/Update/ca)
  switch_stmt_3176_branch_43 <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/condition_43/cmp) ($open branch_block_stmt_3175/switch_stmt_3176_choice_43/ack1)
  // 			$call writeSDHCRegisters (address ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1177
  // address
  call_stmt_3362_call <=> (branch_block_stmt_3175/call_stmt_3362/call_stmt_3362_Sample/crr branch_block_stmt_3175/call_stmt_3362/call_stmt_3362_Update/ccr) (branch_block_stmt_3175/call_stmt_3362/call_stmt_3362_Sample/cra branch_block_stmt_3175/call_stmt_3362/call_stmt_3362_Update/cca)
  switch_stmt_3176_branch_default <=> (branch_block_stmt_3175/switch_stmt_3176__condition_check__/$exit) (branch_block_stmt_3175/switch_stmt_3176_choice_default/ack0 $open)
  // 			$call writeSDHCRegisters (address data ) () 
  //  file .Aa/sdhc.opt.aa, line 1179
  // address
  // data
  call_stmt_3366_call <=> (branch_block_stmt_3175/call_stmt_3366/call_stmt_3366_Sample/crr branch_block_stmt_3175/call_stmt_3366/call_stmt_3366_Update/ccr) (branch_block_stmt_3175/call_stmt_3366/call_stmt_3366_Sample/cra branch_block_stmt_3175/call_stmt_3366/call_stmt_3366_Update/cca)
}
$module [sdhc_daemon] 
{
  // pipe-declarations for block %sdhc_daemon
  //  file .Aa/sdhc.opt.aa, line 1183
  // pipe-declarations for block %sdhc_daemon%loop
  //  file .Aa/sdhc.opt.aa, line 1202
  // pipe-declarations for block %sdhc_daemon%loop%
  //  file .Aa/sdhc.opt.aa, line 1204
  // pipe-declarations for block %sdhc_daemon%loop%
  //  file .Aa/sdhc.opt.aa, line 1364
  // memory-space 0 is written into.
  // memory-space 1 is written into.
  // memory-space 2 is written into.
  // memory-space 3 is written into.
  // memory-space 4 is written into.
  // memory-space 5 is written into.
  // memory-space 6 is written into.
  // memory-space 7 is written into.
  // memory-space 8 is written into.
  // memory-space 9 is written into.
  // memory-space 0 is read from.
  // memory-space 1 is read from.
  // memory-space 2 is read from.
  // memory-space 3 is read from.
  // memory-space 4 is read from.
  // memory-space 5 is read from.
  // memory-space 7 is read from.
  // memory-space 8 is read from.
  // memory-space 9 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_3373_to_call_stmt_3413] 
    {
      // start:  	SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1188
      // Target expression
      // (as target) SDHC_to_IRC_INT
      $T[WPIPE_SDHC_to_IRC_INT_3371_sample_start_] 
      $T[WPIPE_SDHC_to_IRC_INT_3371_sample_completed_] 
      $T[WPIPE_SDHC_to_IRC_INT_3371_update_start_] 
      $T[WPIPE_SDHC_to_IRC_INT_3371_update_completed_] 
      ;;[WPIPE_SDHC_to_IRC_INT_3371_Sample] 
      {
        // pipe write sample-start SDHC_to_IRC_INT
        $T [req] $T [ack] 
      }
      ;;[WPIPE_SDHC_to_IRC_INT_3371_Update] 
      {
        // pipe write update (complete) SDHC_to_IRC_INT
        $T [req] $T [ack] 
      }
      WPIPE_SDHC_to_IRC_INT_3371_sample_start_ &-> (WPIPE_SDHC_to_IRC_INT_3371_Sample)
      WPIPE_SDHC_to_IRC_INT_3371_sample_completed_ <-& (WPIPE_SDHC_to_IRC_INT_3371_Sample)
      WPIPE_SDHC_to_IRC_INT_3371_update_start_ <-& (WPIPE_SDHC_to_IRC_INT_3371_sample_completed_)
      WPIPE_SDHC_to_IRC_INT_3371_update_start_ &-> (WPIPE_SDHC_to_IRC_INT_3371_Update)
      WPIPE_SDHC_to_IRC_INT_3371_update_completed_ <-& (WPIPE_SDHC_to_IRC_INT_3371_Update)
      // end:  	SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
      // start:  	oe := ZERO_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1189
      // Target expression
      // (as target) oe
      $T[WPIPE_oe_3374_sample_start_] 
      $T[WPIPE_oe_3374_sample_completed_] 
      $T[WPIPE_oe_3374_update_start_] 
      $T[WPIPE_oe_3374_update_completed_] 
      ;;[WPIPE_oe_3374_Sample] 
      {
        // pipe write sample-start oe
        $T [req] $T [ack] 
      }
      ;;[WPIPE_oe_3374_Update] 
      {
        // pipe write update (complete) oe
        $T [req] $T [ack] 
      }
      WPIPE_oe_3374_sample_start_ &-> (WPIPE_oe_3374_Sample)
      WPIPE_oe_3374_sample_completed_ <-& (WPIPE_oe_3374_Sample)
      WPIPE_oe_3374_update_start_ <-& (WPIPE_oe_3374_sample_completed_)
      WPIPE_oe_3374_update_start_ &-> (WPIPE_oe_3374_Update)
      WPIPE_oe_3374_update_completed_ <-& (WPIPE_oe_3374_Update)
      // end:  	oe := ZERO_1 $buffering 1// bits of buffering = 1. 
      // start:  	busy := ZERO_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1190
      // Target expression
      // (as target) busy
      $T[WPIPE_busy_3377_sample_start_] 
      $T[WPIPE_busy_3377_sample_completed_] 
      $T[WPIPE_busy_3377_update_start_] 
      $T[WPIPE_busy_3377_update_completed_] 
      ;;[WPIPE_busy_3377_Sample] 
      {
        // pipe write sample-start busy
        $T [req] $T [ack] 
      }
      ;;[WPIPE_busy_3377_Update] 
      {
        // pipe write update (complete) busy
        $T [req] $T [ack] 
      }
      WPIPE_busy_3377_sample_start_ &-> (WPIPE_busy_3377_Sample)
      WPIPE_busy_3377_sample_completed_ <-& (WPIPE_busy_3377_Sample)
      WPIPE_busy_3377_update_start_ <-& (WPIPE_busy_3377_sample_completed_)
      WPIPE_busy_3377_update_start_ &-> (WPIPE_busy_3377_Update)
      WPIPE_busy_3377_update_completed_ <-& (WPIPE_busy_3377_Update)
      // end:  	busy := ZERO_1 $buffering 1// bits of buffering = 1. 
      // start:  	readyClockCountEnable := ONE_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1191
      // Target expression
      // (as target) readyClockCountEnable
      $T[WPIPE_readyClockCountEnable_3380_sample_start_] 
      $T[WPIPE_readyClockCountEnable_3380_sample_completed_] 
      $T[WPIPE_readyClockCountEnable_3380_update_start_] 
      $T[WPIPE_readyClockCountEnable_3380_update_completed_] 
      ;;[WPIPE_readyClockCountEnable_3380_Sample] 
      {
        // pipe write sample-start readyClockCountEnable
        $T [req] $T [ack] 
      }
      ;;[WPIPE_readyClockCountEnable_3380_Update] 
      {
        // pipe write update (complete) readyClockCountEnable
        $T [req] $T [ack] 
      }
      WPIPE_readyClockCountEnable_3380_sample_start_ &-> (WPIPE_readyClockCountEnable_3380_Sample)
      WPIPE_readyClockCountEnable_3380_sample_completed_ <-& (WPIPE_readyClockCountEnable_3380_Sample)
      WPIPE_readyClockCountEnable_3380_update_start_ <-& (WPIPE_readyClockCountEnable_3380_sample_completed_)
      WPIPE_readyClockCountEnable_3380_update_start_ &-> (WPIPE_readyClockCountEnable_3380_Update)
      WPIPE_readyClockCountEnable_3380_update_completed_ <-& (WPIPE_readyClockCountEnable_3380_Update)
      // end:  	readyClockCountEnable := ONE_1 $buffering 1// bits of buffering = 1. 
      // start:  	normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 1192
      // Target expression
      // (as target) normalInterruptFlag1
      $T[STORE_normalInterruptFlag1_3383_sample_start_] 
      $T[STORE_normalInterruptFlag1_3383_sample_completed_] 
      $T[STORE_normalInterruptFlag1_3383_update_start_] 
      $T[STORE_normalInterruptFlag1_3383_update_completed_] 
      // normalInterruptFlag1
      $T[STORE_normalInterruptFlag1_3383_word_address_calculated] 
      $T[STORE_normalInterruptFlag1_3383_root_address_calculated] 
      STORE_normalInterruptFlag1_3383_word_address_calculated <-& (STORE_normalInterruptFlag1_3383_root_address_calculated)
      ;;[STORE_normalInterruptFlag1_3383_Sample] 
      {
        ;;[STORE_normalInterruptFlag1_3383_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_normalInterruptFlag1_3383_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_normalInterruptFlag1_3383_sample_start_ <-& (STORE_normalInterruptFlag1_3383_word_address_calculated)
      STORE_normalInterruptFlag1_3383_sample_start_ &-> (STORE_normalInterruptFlag1_3383_Sample)
      STORE_normalInterruptFlag1_3383_sample_completed_ <-& (STORE_normalInterruptFlag1_3383_Sample)
      STORE_normalInterruptFlag1_3383_sample_completed_ &-> ($null)
      STORE_normalInterruptFlag1_3383_update_start_ &-> (STORE_normalInterruptFlag1_3383_Update)
      STORE_normalInterruptFlag1_3383_update_completed_ <-& (STORE_normalInterruptFlag1_3383_Update)
      // end:  	normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
      // start:  	normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 1193
      // Target expression
      // (as target) normalInterruptFlag2
      $T[STORE_normalInterruptFlag2_3386_sample_start_] 
      $T[STORE_normalInterruptFlag2_3386_sample_completed_] 
      $T[STORE_normalInterruptFlag2_3386_update_start_] 
      $T[STORE_normalInterruptFlag2_3386_update_completed_] 
      // normalInterruptFlag2
      $T[STORE_normalInterruptFlag2_3386_word_address_calculated] 
      $T[STORE_normalInterruptFlag2_3386_root_address_calculated] 
      STORE_normalInterruptFlag2_3386_word_address_calculated <-& (STORE_normalInterruptFlag2_3386_root_address_calculated)
      ;;[STORE_normalInterruptFlag2_3386_Sample] 
      {
        ;;[STORE_normalInterruptFlag2_3386_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_normalInterruptFlag2_3386_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_normalInterruptFlag2_3386_sample_start_ <-& (STORE_normalInterruptFlag2_3386_word_address_calculated)
      STORE_normalInterruptFlag2_3386_sample_start_ &-> (STORE_normalInterruptFlag2_3386_Sample)
      STORE_normalInterruptFlag2_3386_sample_completed_ <-& (STORE_normalInterruptFlag2_3386_Sample)
      STORE_normalInterruptFlag2_3386_sample_completed_ &-> ($null)
      STORE_normalInterruptFlag2_3386_update_start_ &-> (STORE_normalInterruptFlag2_3386_Update)
      STORE_normalInterruptFlag2_3386_update_completed_ <-& (STORE_normalInterruptFlag2_3386_Update)
      // end:  	normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
      // start:  	errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 1194
      // Target expression
      // (as target) errorInterruptFlag1
      $T[STORE_errorInterruptFlag1_3389_sample_start_] 
      $T[STORE_errorInterruptFlag1_3389_sample_completed_] 
      $T[STORE_errorInterruptFlag1_3389_update_start_] 
      $T[STORE_errorInterruptFlag1_3389_update_completed_] 
      // errorInterruptFlag1
      $T[STORE_errorInterruptFlag1_3389_word_address_calculated] 
      $T[STORE_errorInterruptFlag1_3389_root_address_calculated] 
      STORE_errorInterruptFlag1_3389_word_address_calculated <-& (STORE_errorInterruptFlag1_3389_root_address_calculated)
      ;;[STORE_errorInterruptFlag1_3389_Sample] 
      {
        ;;[STORE_errorInterruptFlag1_3389_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_errorInterruptFlag1_3389_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_errorInterruptFlag1_3389_sample_start_ <-& (STORE_errorInterruptFlag1_3389_word_address_calculated)
      STORE_errorInterruptFlag1_3389_sample_start_ &-> (STORE_errorInterruptFlag1_3389_Sample)
      STORE_errorInterruptFlag1_3389_sample_completed_ <-& (STORE_errorInterruptFlag1_3389_Sample)
      STORE_errorInterruptFlag1_3389_sample_completed_ &-> ($null)
      STORE_errorInterruptFlag1_3389_update_start_ &-> (STORE_errorInterruptFlag1_3389_Update)
      STORE_errorInterruptFlag1_3389_update_completed_ <-& (STORE_errorInterruptFlag1_3389_Update)
      // end:  	errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
      // start:  	errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 1195
      // Target expression
      // (as target) errorInterruptFlag2
      $T[STORE_errorInterruptFlag2_3392_sample_start_] 
      $T[STORE_errorInterruptFlag2_3392_sample_completed_] 
      $T[STORE_errorInterruptFlag2_3392_update_start_] 
      $T[STORE_errorInterruptFlag2_3392_update_completed_] 
      // errorInterruptFlag2
      $T[STORE_errorInterruptFlag2_3392_word_address_calculated] 
      $T[STORE_errorInterruptFlag2_3392_root_address_calculated] 
      STORE_errorInterruptFlag2_3392_word_address_calculated <-& (STORE_errorInterruptFlag2_3392_root_address_calculated)
      ;;[STORE_errorInterruptFlag2_3392_Sample] 
      {
        ;;[STORE_errorInterruptFlag2_3392_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_errorInterruptFlag2_3392_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_errorInterruptFlag2_3392_sample_start_ <-& (STORE_errorInterruptFlag2_3392_word_address_calculated)
      STORE_errorInterruptFlag2_3392_sample_start_ &-> (STORE_errorInterruptFlag2_3392_Sample)
      STORE_errorInterruptFlag2_3392_sample_completed_ <-& (STORE_errorInterruptFlag2_3392_Sample)
      STORE_errorInterruptFlag2_3392_sample_completed_ &-> ($null)
      STORE_errorInterruptFlag2_3392_update_start_ &-> (STORE_errorInterruptFlag2_3392_Update)
      STORE_errorInterruptFlag2_3392_update_completed_ <-& (STORE_errorInterruptFlag2_3392_Update)
      // end:  	errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
      // start:  	txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
      //  file .Aa/sdhc.opt.aa, line 1196
      // Target expression
      // (as target) txBufferPointer
      $T[STORE_txBufferPointer_3395_sample_start_] 
      $T[STORE_txBufferPointer_3395_sample_completed_] 
      $T[STORE_txBufferPointer_3395_update_start_] 
      $T[STORE_txBufferPointer_3395_update_completed_] 
      // txBufferPointer
      $T[STORE_txBufferPointer_3395_word_address_calculated] 
      $T[STORE_txBufferPointer_3395_root_address_calculated] 
      STORE_txBufferPointer_3395_word_address_calculated <-& (STORE_txBufferPointer_3395_root_address_calculated)
      ;;[STORE_txBufferPointer_3395_Sample] 
      {
        ;;[STORE_txBufferPointer_3395_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_txBufferPointer_3395_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_txBufferPointer_3395_sample_start_ <-& (STORE_txBufferPointer_3395_word_address_calculated)
      STORE_txBufferPointer_3395_sample_start_ &-> (STORE_txBufferPointer_3395_Sample)
      STORE_txBufferPointer_3395_sample_completed_ <-& (STORE_txBufferPointer_3395_Sample)
      STORE_txBufferPointer_3395_sample_completed_ &-> ($null)
      STORE_txBufferPointer_3395_update_start_ &-> (STORE_txBufferPointer_3395_Update)
      STORE_txBufferPointer_3395_update_completed_ <-& (STORE_txBufferPointer_3395_Update)
      // end:  	txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
      // start:  	rxBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
      //  file .Aa/sdhc.opt.aa, line 1197
      // Target expression
      // (as target) rxBufferPointer
      $T[STORE_rxBufferPointer_3399_sample_start_] 
      $T[STORE_rxBufferPointer_3399_sample_completed_] 
      $T[STORE_rxBufferPointer_3399_update_start_] 
      $T[STORE_rxBufferPointer_3399_update_completed_] 
      // rxBufferPointer
      $T[STORE_rxBufferPointer_3399_word_address_calculated] 
      $T[STORE_rxBufferPointer_3399_root_address_calculated] 
      STORE_rxBufferPointer_3399_word_address_calculated <-& (STORE_rxBufferPointer_3399_root_address_calculated)
      ;;[STORE_rxBufferPointer_3399_Sample] 
      {
        ;;[STORE_rxBufferPointer_3399_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_rxBufferPointer_3399_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_rxBufferPointer_3399_sample_start_ <-& (STORE_rxBufferPointer_3399_word_address_calculated)
      STORE_rxBufferPointer_3399_sample_start_ &-> (STORE_rxBufferPointer_3399_Sample)
      STORE_rxBufferPointer_3399_sample_completed_ <-& (STORE_rxBufferPointer_3399_Sample)
      STORE_rxBufferPointer_3399_sample_completed_ &-> ($null)
      STORE_rxBufferPointer_3399_update_start_ &-> (STORE_rxBufferPointer_3399_Update)
      STORE_rxBufferPointer_3399_update_completed_ <-& (STORE_rxBufferPointer_3399_Update)
      // end:  	rxBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
      // start:  	dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1198
      // Target expression
      // (as target) dataRxEnrty1
      $T[STORE_dataRxEnrty1_3403_sample_start_] 
      $T[STORE_dataRxEnrty1_3403_sample_completed_] 
      $T[STORE_dataRxEnrty1_3403_update_start_] 
      $T[STORE_dataRxEnrty1_3403_update_completed_] 
      // dataRxEnrty1
      $T[STORE_dataRxEnrty1_3403_word_address_calculated] 
      $T[STORE_dataRxEnrty1_3403_root_address_calculated] 
      STORE_dataRxEnrty1_3403_word_address_calculated <-& (STORE_dataRxEnrty1_3403_root_address_calculated)
      ;;[STORE_dataRxEnrty1_3403_Sample] 
      {
        ;;[STORE_dataRxEnrty1_3403_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_dataRxEnrty1_3403_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_dataRxEnrty1_3403_sample_start_ <-& (STORE_dataRxEnrty1_3403_word_address_calculated)
      STORE_dataRxEnrty1_3403_sample_start_ &-> (STORE_dataRxEnrty1_3403_Sample)
      STORE_dataRxEnrty1_3403_sample_completed_ <-& (STORE_dataRxEnrty1_3403_Sample)
      STORE_dataRxEnrty1_3403_sample_completed_ &-> ($null)
      STORE_dataRxEnrty1_3403_update_start_ &-> (STORE_dataRxEnrty1_3403_Update)
      STORE_dataRxEnrty1_3403_update_completed_ <-& (STORE_dataRxEnrty1_3403_Update)
      // end:  	dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
      // start:  	dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
      //  file .Aa/sdhc.opt.aa, line 1199
      // Target expression
      // (as target) dataRxEnrty2
      $T[STORE_dataRxEnrty2_3406_sample_start_] 
      $T[STORE_dataRxEnrty2_3406_sample_completed_] 
      $T[STORE_dataRxEnrty2_3406_update_start_] 
      $T[STORE_dataRxEnrty2_3406_update_completed_] 
      // dataRxEnrty2
      $T[STORE_dataRxEnrty2_3406_word_address_calculated] 
      $T[STORE_dataRxEnrty2_3406_root_address_calculated] 
      STORE_dataRxEnrty2_3406_word_address_calculated <-& (STORE_dataRxEnrty2_3406_root_address_calculated)
      ;;[STORE_dataRxEnrty2_3406_Sample] 
      {
        ;;[STORE_dataRxEnrty2_3406_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_dataRxEnrty2_3406_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_dataRxEnrty2_3406_sample_start_ <-& (STORE_dataRxEnrty2_3406_word_address_calculated)
      STORE_dataRxEnrty2_3406_sample_start_ &-> (STORE_dataRxEnrty2_3406_Sample)
      STORE_dataRxEnrty2_3406_sample_completed_ <-& (STORE_dataRxEnrty2_3406_Sample)
      STORE_dataRxEnrty2_3406_sample_completed_ &-> ($null)
      STORE_dataRxEnrty2_3406_update_start_ &-> (STORE_dataRxEnrty2_3406_Update)
      STORE_dataRxEnrty2_3406_update_completed_ <-& (STORE_dataRxEnrty2_3406_Update)
      // end:  	dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
      // start:  	dataErrorInterruptStatus := ZERO_8 $buffering 1// bits of buffering = 8. 
      //  file .Aa/sdhc.opt.aa, line 1200
      // Target expression
      // (as target) dataErrorInterruptStatus
      $T[STORE_dataErrorInterruptStatus_3409_sample_start_] 
      $T[STORE_dataErrorInterruptStatus_3409_sample_completed_] 
      $T[STORE_dataErrorInterruptStatus_3409_update_start_] 
      $T[STORE_dataErrorInterruptStatus_3409_update_completed_] 
      // dataErrorInterruptStatus
      $T[STORE_dataErrorInterruptStatus_3409_word_address_calculated] 
      $T[STORE_dataErrorInterruptStatus_3409_root_address_calculated] 
      STORE_dataErrorInterruptStatus_3409_word_address_calculated <-& (STORE_dataErrorInterruptStatus_3409_root_address_calculated)
      ;;[STORE_dataErrorInterruptStatus_3409_Sample] 
      {
        ;;[STORE_dataErrorInterruptStatus_3409_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_dataErrorInterruptStatus_3409_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_dataErrorInterruptStatus_3409_sample_start_ <-& (STORE_dataErrorInterruptStatus_3409_word_address_calculated)
      STORE_dataErrorInterruptStatus_3409_sample_start_ &-> (STORE_dataErrorInterruptStatus_3409_Sample)
      STORE_dataErrorInterruptStatus_3409_sample_completed_ <-& (STORE_dataErrorInterruptStatus_3409_Sample)
      STORE_dataErrorInterruptStatus_3409_sample_completed_ &-> ($null)
      STORE_dataErrorInterruptStatus_3409_update_start_ &-> (STORE_dataErrorInterruptStatus_3409_Update)
      STORE_dataErrorInterruptStatus_3409_update_completed_ <-& (STORE_dataErrorInterruptStatus_3409_Update)
      // end:  	dataErrorInterruptStatus := ZERO_8 $buffering 1// bits of buffering = 8. 
      // start: 	$call resetRegisters (ZERO_2 ) () 
      //  file .Aa/sdhc.opt.aa, line 1201
      $T[call_stmt_3413_sample_start_] 
      $T[call_stmt_3413_sample_completed_] 
      $T[call_stmt_3413_update_start_] 
      $T[call_stmt_3413_update_completed_] 
      // Call input argument 0
      ;;[call_stmt_3413_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_3413_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_3413_sample_start_ &-> (call_stmt_3413_Sample)
      call_stmt_3413_sample_completed_ <-& (call_stmt_3413_Sample)
      call_stmt_3413_sample_completed_ &-> ($null)
      call_stmt_3413_update_start_ &-> (call_stmt_3413_Update)
      call_stmt_3413_update_completed_ <-& (call_stmt_3413_Update)
      // end: 	$call resetRegisters (ZERO_2 ) () 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  STORE_dataErrorInterruptStatus_3409 store
      // memory-space  memory_space_1
      //  STORE_dataRxEnrty1_3403 store
      // memory-space  memory_space_2
      //  STORE_dataRxEnrty2_3406 store
      // memory-space  memory_space_3
      //  STORE_errorInterruptFlag1_3389 store
      // memory-space  memory_space_4
      //  STORE_errorInterruptFlag2_3392 store
      // memory-space  memory_space_5
      //  STORE_normalInterruptFlag1_3383 store
      // memory-space  memory_space_6
      //  STORE_normalInterruptFlag2_3386 store
      // memory-space  memory_space_7
      //  STORE_rxBufferPointer_3399 store
      // memory-space  memory_space_8
      //  call_stmt_3413 store
      // memory-space  memory_space_9
      //  STORE_txBufferPointer_3395 store
      // pipe read/write dependencies for pipe SDHC_to_IRC_INT
      // read-dependencies for pipe SDHC_to_IRC_INT
      // write-dependencies for pipe SDHC_to_IRC_INT
      // signal write dependencies for SDHC_to_IRC_INT
      // pipe read/write dependencies for pipe busy
      // read-dependencies for pipe busy
      // write-dependencies for pipe busy
      // signal write dependencies for busy
      // pipe read/write dependencies for pipe oe
      // read-dependencies for pipe oe
      // write-dependencies for pipe oe
      // signal write dependencies for oe
      // pipe read/write dependencies for pipe readyClockCountEnable
      // read-dependencies for pipe readyClockCountEnable
      // write-dependencies for pipe readyClockCountEnable
      // signal write dependencies for readyClockCountEnable
    }
    <>[branch_block_stmt_3414] // Branch Block  file .Aa/sdhc.opt.aa, line 1202
    {
      $P [branch_block_stmt_3414__entry__]
      branch_block_stmt_3414__entry__ <-| ($entry)
      $P [branch_block_stmt_3414__exit__]
      branch_block_stmt_3414__exit__ |-> ($exit)
      $P [merge_stmt_3415__entry__] 
      $P [merge_stmt_3415__exit__] 
      $P [assign_stmt_3418_to_assign_stmt_3462__entry__] 
      $P [assign_stmt_3418_to_assign_stmt_3462__exit__] 
      $P [if_stmt_3463__entry__] 
      $P [if_stmt_3463__exit__] 
      $P [assign_stmt_4020_to_assign_stmt_4034__entry__] 
      $P [assign_stmt_4020_to_assign_stmt_4034__exit__] 
      $P [merge_stmt_4035__entry__] 
      $P [merge_stmt_4035__exit__] 
      $P [call_stmt_4065_to_assign_stmt_4114__entry__] 
      $P [call_stmt_4065_to_assign_stmt_4114__exit__] 
      $P [if_stmt_4115__entry__] 
      $P [if_stmt_4115__exit__] 
      $P [assign_stmt_4124_to_assign_stmt_4192__entry__] 
      $P [assign_stmt_4124_to_assign_stmt_4192__exit__] 
      $P [if_stmt_4193__entry__] 
      $P [if_stmt_4193__exit__] 
      $P [loopback]
      ::[assign_stmt_3418_to_assign_stmt_3462] 
      {
        // start:  		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        //  file .Aa/sdhc.opt.aa, line 1206
        // Source expression
        // peripheral_bridge_to_sdhc_request
        $T[RPIPE_peripheral_bridge_to_sdhc_request_3417_sample_start_] 
        $T[RPIPE_peripheral_bridge_to_sdhc_request_3417_sample_completed_] 
        $T[RPIPE_peripheral_bridge_to_sdhc_request_3417_update_start_] 
        $T[RPIPE_peripheral_bridge_to_sdhc_request_3417_update_completed_] 
        ;;[RPIPE_peripheral_bridge_to_sdhc_request_3417_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_peripheral_bridge_to_sdhc_request_3417_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_peripheral_bridge_to_sdhc_request_3417_sample_start_ &-> (RPIPE_peripheral_bridge_to_sdhc_request_3417_Sample)
        RPIPE_peripheral_bridge_to_sdhc_request_3417_sample_completed_ <-& (RPIPE_peripheral_bridge_to_sdhc_request_3417_Sample)
        RPIPE_peripheral_bridge_to_sdhc_request_3417_update_start_ <-& (RPIPE_peripheral_bridge_to_sdhc_request_3417_sample_completed_)
        RPIPE_peripheral_bridge_to_sdhc_request_3417_update_start_ &-> (RPIPE_peripheral_bridge_to_sdhc_request_3417_Update)
        RPIPE_peripheral_bridge_to_sdhc_request_3417_update_completed_ <-& (RPIPE_peripheral_bridge_to_sdhc_request_3417_Update)
        // Target expression
        // (as target) request
        // start: WAR dependencies for request
        // done: WAR dependencies for request
        // end:  		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for rwbar
        // done: WAR dependencies for rwbar
        // start:  		$volatile rwbar := ( $slice request 63 63 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1207
        // volatile! 
        // Source expression
        // ( $slice request 63 63 ) 
        // request
        // Target expression
        // (as target) rwbar
        // start: WAR dependencies for rwbar
        // done: WAR dependencies for rwbar
        // end:  		$volatile rwbar := ( $slice request 63 63 )  $buffering 1
        // start: WAR dependencies for bytemask
        // done: WAR dependencies for bytemask
        // start:  		$volatile bytemask := ( $slice request 62 59 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1208
        // volatile! 
        // Source expression
        // ( $slice request 62 59 ) 
        // request
        // Target expression
        // (as target) bytemask
        // start: WAR dependencies for bytemask
        // done: WAR dependencies for bytemask
        // end:  		$volatile bytemask := ( $slice request 62 59 )  $buffering 1
        // start: WAR dependencies for address
        // done: WAR dependencies for address
        // start:  		$volatile address := ( $slice request 39 32 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1209
        // volatile! 
        // Source expression
        // ( $slice request 39 32 ) 
        // request
        // Target expression
        // (as target) address
        // start: WAR dependencies for address
        // done: WAR dependencies for address
        // end:  		$volatile address := ( $slice request 39 32 )  $buffering 1
        // start: WAR dependencies for data3
        // done: WAR dependencies for data3
        // start:  		$volatile data3 := ( $slice request 31 24 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1210
        // volatile! 
        // Source expression
        // ( $slice request 31 24 ) 
        // request
        // Target expression
        // (as target) data3
        // start: WAR dependencies for data3
        // done: WAR dependencies for data3
        // end:  		$volatile data3 := ( $slice request 31 24 )  $buffering 1
        // start: WAR dependencies for data2
        // done: WAR dependencies for data2
        // start:  		$volatile data2 := ( $slice request 23 16 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1211
        // volatile! 
        // Source expression
        // ( $slice request 23 16 ) 
        // request
        // Target expression
        // (as target) data2
        // start: WAR dependencies for data2
        // done: WAR dependencies for data2
        // end:  		$volatile data2 := ( $slice request 23 16 )  $buffering 1
        // start: WAR dependencies for data1
        // done: WAR dependencies for data1
        // start:  		$volatile data1 := ( $slice request 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1212
        // volatile! 
        // Source expression
        // ( $slice request 15 8 ) 
        // request
        // Target expression
        // (as target) data1
        // start: WAR dependencies for data1
        // done: WAR dependencies for data1
        // end:  		$volatile data1 := ( $slice request 15 8 )  $buffering 1
        // start: WAR dependencies for data0
        // done: WAR dependencies for data0
        // start:  		$volatile data0 := ( $slice request 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1213
        // volatile! 
        // Source expression
        // ( $slice request 7 0 ) 
        // request
        // Target expression
        // (as target) data0
        // start: WAR dependencies for data0
        // done: WAR dependencies for data0
        // end:  		$volatile data0 := ( $slice request 7 0 )  $buffering 1
        // start: WAR dependencies for b3
        // done: WAR dependencies for b3
        // start:  		$volatile b3 := ( $slice bytemask 3 3 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1214
        // volatile! 
        // Source expression
        // ( $slice bytemask 3 3 ) 
        // bytemask
        // Target expression
        // (as target) b3
        // start: WAR dependencies for b3
        // done: WAR dependencies for b3
        // end:  		$volatile b3 := ( $slice bytemask 3 3 )  $buffering 1
        // start: WAR dependencies for b2
        // done: WAR dependencies for b2
        // start:  		$volatile b2 := ( $slice bytemask 2 2 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1215
        // volatile! 
        // Source expression
        // ( $slice bytemask 2 2 ) 
        // bytemask
        // Target expression
        // (as target) b2
        // start: WAR dependencies for b2
        // done: WAR dependencies for b2
        // end:  		$volatile b2 := ( $slice bytemask 2 2 )  $buffering 1
        // start: WAR dependencies for b1
        // done: WAR dependencies for b1
        // start:  		$volatile b1 := ( $slice bytemask 1 1 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1216
        // volatile! 
        // Source expression
        // ( $slice bytemask 1 1 ) 
        // bytemask
        // Target expression
        // (as target) b1
        // start: WAR dependencies for b1
        // done: WAR dependencies for b1
        // end:  		$volatile b1 := ( $slice bytemask 1 1 )  $buffering 1
        // start: WAR dependencies for b0
        // done: WAR dependencies for b0
        // start:  		$volatile b0 := ( $slice bytemask 0 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1217
        // volatile! 
        // Source expression
        // ( $slice bytemask 0 0 ) 
        // bytemask
        // Target expression
        // (as target) b0
        // start: WAR dependencies for b0
        // done: WAR dependencies for b0
        // end:  		$volatile b0 := ( $slice bytemask 0 0 )  $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe peripheral_bridge_to_sdhc_request
        // read-dependencies for pipe peripheral_bridge_to_sdhc_request
        // write-dependencies for pipe peripheral_bridge_to_sdhc_request
        // signal write dependencies for peripheral_bridge_to_sdhc_request
      }
      assign_stmt_3418_to_assign_stmt_3462__entry__ |-> (assign_stmt_3418_to_assign_stmt_3462)
      assign_stmt_3418_to_assign_stmt_3462__exit__ <-| (assign_stmt_3418_to_assign_stmt_3462)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1218
      ;;[if_stmt_3463_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3463__entry__ |-> (if_stmt_3463_dead_link)
      if_stmt_3463__exit__ <-| (if_stmt_3463_dead_link)
      ;;[if_stmt_3463_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (rwbar == 0 )
        ;;[EQ_u1_u1_3466] 
        {
          // binary expression 
          ||[EQ_u1_u1_3466_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3463__entry__ |-> (if_stmt_3463_eval_test)
      $P [EQ_u1_u1_3466_place]
      EQ_u1_u1_3466_place <-| (if_stmt_3463_eval_test)
      ;;[if_stmt_3463_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3463_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_3466_place |-> (if_stmt_3463_if_link if_stmt_3463_else_link)
      $P [call_stmt_3470_to_assign_stmt_3491__entry__] 
      $P [call_stmt_3470_to_assign_stmt_3491__exit__] 
      $P [if_stmt_3492__entry__] 
      $P [if_stmt_3492__exit__] 
      $P [call_stmt_3526_to_assign_stmt_3549__entry__] 
      $P [call_stmt_3526_to_assign_stmt_3549__exit__] 
      $P [if_stmt_3550__entry__] 
      $P [if_stmt_3550__exit__] 
      $P [if_stmt_3588__entry__] 
      $P [if_stmt_3588__exit__] 
      $P [if_stmt_3611__entry__] 
      $P [if_stmt_3611__exit__] 
      $P [assign_stmt_3638__entry__] 
      $P [assign_stmt_3638__exit__] 
      $P [if_stmt_3639__entry__] 
      $P [if_stmt_3639__exit__] 
      ::[call_stmt_3470_to_assign_stmt_3491] 
      {
        // start: 			$guard (b3) $call sdhc_register_write (address data3 ) () 
        //  file .Aa/sdhc.opt.aa, line 1219
        $T[call_stmt_3470_sample_start_] 
        $T[call_stmt_3470_sample_completed_] 
        $T[call_stmt_3470_update_start_] 
        $T[call_stmt_3470_update_completed_] 
        // Guard expression
        // b3
        // start: Forward dependencies from b3 to transition call_stmt_3470_sample_start_
        // done: Forward dependencies from b3 to transition call_stmt_3470_sample_start_
        // Call input argument 0
        // address
        // Call input argument 1
        // data3
        // start: Forward dependencies from address to transition call_stmt_3470_sample_start_
        // done: Forward dependencies from address to transition call_stmt_3470_sample_start_
        // start: Forward dependencies from data3 to transition call_stmt_3470_sample_start_
        // done: Forward dependencies from data3 to transition call_stmt_3470_sample_start_
        ;;[call_stmt_3470_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3470_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3470_sample_start_ &-> (call_stmt_3470_Sample)
        call_stmt_3470_sample_completed_ <-& (call_stmt_3470_Sample)
        call_stmt_3470_sample_completed_ &-> ($null)
        call_stmt_3470_update_start_ &-> (call_stmt_3470_Update)
        call_stmt_3470_update_completed_ <-& (call_stmt_3470_Update)
        // end: 			$guard (b3) $call sdhc_register_write (address data3 ) () 
        // start: 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
        //  file .Aa/sdhc.opt.aa, line 1220
        $T[call_stmt_3476_sample_start_] 
        $T[call_stmt_3476_sample_completed_] 
        $T[call_stmt_3476_update_start_] 
        $T[call_stmt_3476_update_completed_] 
        // Guard expression
        // b2
        // start: Forward dependencies from b2 to transition call_stmt_3476_sample_start_
        // done: Forward dependencies from b2 to transition call_stmt_3476_sample_start_
        // Call input argument 0
        // (address + 1 )
        // address
        // Call input argument 1
        // data2
        // start: Forward dependencies from (address + 1 ) to transition call_stmt_3476_sample_start_
        // done: Forward dependencies from (address + 1 ) to transition call_stmt_3476_sample_start_
        // start: Forward dependencies from data2 to transition call_stmt_3476_sample_start_
        // done: Forward dependencies from data2 to transition call_stmt_3476_sample_start_
        ;;[call_stmt_3476_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3476_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3476_sample_start_ &-> (call_stmt_3476_Sample)
        call_stmt_3476_sample_completed_ <-& (call_stmt_3476_Sample)
        call_stmt_3476_sample_completed_ &-> ($null)
        call_stmt_3476_update_start_ &-> (call_stmt_3476_Update)
        call_stmt_3476_update_completed_ <-& (call_stmt_3476_Update)
        // end: 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
        // start: 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
        //  file .Aa/sdhc.opt.aa, line 1221
        $T[call_stmt_3482_sample_start_] 
        $T[call_stmt_3482_sample_completed_] 
        $T[call_stmt_3482_update_start_] 
        $T[call_stmt_3482_update_completed_] 
        // Guard expression
        // b1
        // start: Forward dependencies from b1 to transition call_stmt_3482_sample_start_
        // done: Forward dependencies from b1 to transition call_stmt_3482_sample_start_
        // Call input argument 0
        // (address + 2 )
        // address
        // Call input argument 1
        // data1
        // start: Forward dependencies from (address + 2 ) to transition call_stmt_3482_sample_start_
        // done: Forward dependencies from (address + 2 ) to transition call_stmt_3482_sample_start_
        // start: Forward dependencies from data1 to transition call_stmt_3482_sample_start_
        // done: Forward dependencies from data1 to transition call_stmt_3482_sample_start_
        ;;[call_stmt_3482_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3482_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3482_sample_start_ &-> (call_stmt_3482_Sample)
        call_stmt_3482_sample_completed_ <-& (call_stmt_3482_Sample)
        call_stmt_3482_sample_completed_ &-> ($null)
        call_stmt_3482_update_start_ &-> (call_stmt_3482_Update)
        call_stmt_3482_update_completed_ <-& (call_stmt_3482_Update)
        // end: 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
        // start: 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
        //  file .Aa/sdhc.opt.aa, line 1222
        $T[call_stmt_3488_sample_start_] 
        $T[call_stmt_3488_sample_completed_] 
        $T[call_stmt_3488_update_start_] 
        $T[call_stmt_3488_update_completed_] 
        // Guard expression
        // b0
        // start: Forward dependencies from b0 to transition call_stmt_3488_sample_start_
        // done: Forward dependencies from b0 to transition call_stmt_3488_sample_start_
        // Call input argument 0
        // (address + 3 )
        // address
        // Call input argument 1
        // data0
        // start: Forward dependencies from (address + 3 ) to transition call_stmt_3488_sample_start_
        // done: Forward dependencies from (address + 3 ) to transition call_stmt_3488_sample_start_
        // start: Forward dependencies from data0 to transition call_stmt_3488_sample_start_
        // done: Forward dependencies from data0 to transition call_stmt_3488_sample_start_
        ;;[call_stmt_3488_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3488_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3488_sample_start_ &-> (call_stmt_3488_Sample)
        call_stmt_3488_sample_completed_ <-& (call_stmt_3488_Sample)
        call_stmt_3488_sample_completed_ &-> ($null)
        call_stmt_3488_update_start_ &-> (call_stmt_3488_Update)
        call_stmt_3488_update_completed_ <-& (call_stmt_3488_Update)
        // end: 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
        // start:  			sdhc_to_peripheral_bridge_response := ZERO_32 $buffering 1// bits of buffering = 32. 
        //  file .Aa/sdhc.opt.aa, line 1223
        // Target expression
        // (as target) sdhc_to_peripheral_bridge_response
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3489_sample_start_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3489_sample_completed_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3489_update_start_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3489_update_completed_] 
        ;;[WPIPE_sdhc_to_peripheral_bridge_response_3489_Sample] 
        {
          // pipe write sample-start sdhc_to_peripheral_bridge_response
          $T [req] $T [ack] 
        }
        ;;[WPIPE_sdhc_to_peripheral_bridge_response_3489_Update] 
        {
          // pipe write update (complete) sdhc_to_peripheral_bridge_response
          $T [req] $T [ack] 
        }
        WPIPE_sdhc_to_peripheral_bridge_response_3489_sample_start_ &-> (WPIPE_sdhc_to_peripheral_bridge_response_3489_Sample)
        WPIPE_sdhc_to_peripheral_bridge_response_3489_sample_completed_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3489_Sample)
        WPIPE_sdhc_to_peripheral_bridge_response_3489_update_start_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3489_sample_completed_)
        WPIPE_sdhc_to_peripheral_bridge_response_3489_update_start_ &-> (WPIPE_sdhc_to_peripheral_bridge_response_3489_Update)
        WPIPE_sdhc_to_peripheral_bridge_response_3489_update_completed_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3489_Update)
        // end:  			sdhc_to_peripheral_bridge_response := ZERO_32 $buffering 1// bits of buffering = 32. 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  call_stmt_3470 store
        //  call_stmt_3476 store
        $T [call_stmt_3470_call_stmt_3476_delay] $delay
        // call_stmt_3470(store) -> call_stmt_3476(store)
        call_stmt_3476_sample_start_ <-& (call_stmt_3470_call_stmt_3476_delay)
        call_stmt_3470_call_stmt_3476_delay <-& (call_stmt_3470_update_completed_)
        //  call_stmt_3482 store
        $T [call_stmt_3476_call_stmt_3482_delay] $delay
        // call_stmt_3476(store) -> call_stmt_3482(store)
        call_stmt_3482_sample_start_ <-& (call_stmt_3476_call_stmt_3482_delay)
        call_stmt_3476_call_stmt_3482_delay <-& (call_stmt_3476_update_completed_)
        //  call_stmt_3488 store
        $T [call_stmt_3482_call_stmt_3488_delay] $delay
        // call_stmt_3482(store) -> call_stmt_3488(store)
        call_stmt_3488_sample_start_ <-& (call_stmt_3482_call_stmt_3488_delay)
        call_stmt_3482_call_stmt_3488_delay <-& (call_stmt_3482_update_completed_)
        // memory-space  memory_space_4
        //  call_stmt_3470 store
        //  call_stmt_3476 store
        $T [call_stmt_3470_call_stmt_3476_delay] $delay
        // call_stmt_3470(store) -> call_stmt_3476(store)
        call_stmt_3476_sample_start_ <-& (call_stmt_3470_call_stmt_3476_delay)
        call_stmt_3470_call_stmt_3476_delay <-& (call_stmt_3470_update_completed_)
        //  call_stmt_3482 store
        $T [call_stmt_3476_call_stmt_3482_delay] $delay
        // call_stmt_3476(store) -> call_stmt_3482(store)
        call_stmt_3482_sample_start_ <-& (call_stmt_3476_call_stmt_3482_delay)
        call_stmt_3476_call_stmt_3482_delay <-& (call_stmt_3476_update_completed_)
        //  call_stmt_3488 store
        $T [call_stmt_3482_call_stmt_3488_delay] $delay
        // call_stmt_3482(store) -> call_stmt_3488(store)
        call_stmt_3488_sample_start_ <-& (call_stmt_3482_call_stmt_3488_delay)
        call_stmt_3482_call_stmt_3488_delay <-& (call_stmt_3482_update_completed_)
        // memory-space  memory_space_5
        //  call_stmt_3470 store
        //  call_stmt_3476 store
        $T [call_stmt_3470_call_stmt_3476_delay] $delay
        // call_stmt_3470(store) -> call_stmt_3476(store)
        call_stmt_3476_sample_start_ <-& (call_stmt_3470_call_stmt_3476_delay)
        call_stmt_3470_call_stmt_3476_delay <-& (call_stmt_3470_update_completed_)
        //  call_stmt_3482 store
        $T [call_stmt_3476_call_stmt_3482_delay] $delay
        // call_stmt_3476(store) -> call_stmt_3482(store)
        call_stmt_3482_sample_start_ <-& (call_stmt_3476_call_stmt_3482_delay)
        call_stmt_3476_call_stmt_3482_delay <-& (call_stmt_3476_update_completed_)
        //  call_stmt_3488 store
        $T [call_stmt_3482_call_stmt_3488_delay] $delay
        // call_stmt_3482(store) -> call_stmt_3488(store)
        call_stmt_3488_sample_start_ <-& (call_stmt_3482_call_stmt_3488_delay)
        call_stmt_3482_call_stmt_3488_delay <-& (call_stmt_3482_update_completed_)
        // memory-space  memory_space_6
        //  call_stmt_3470 store
        //  call_stmt_3476 store
        $T [call_stmt_3470_call_stmt_3476_delay] $delay
        // call_stmt_3470(store) -> call_stmt_3476(store)
        call_stmt_3476_sample_start_ <-& (call_stmt_3470_call_stmt_3476_delay)
        call_stmt_3470_call_stmt_3476_delay <-& (call_stmt_3470_update_completed_)
        //  call_stmt_3482 store
        $T [call_stmt_3476_call_stmt_3482_delay] $delay
        // call_stmt_3476(store) -> call_stmt_3482(store)
        call_stmt_3482_sample_start_ <-& (call_stmt_3476_call_stmt_3482_delay)
        call_stmt_3476_call_stmt_3482_delay <-& (call_stmt_3476_update_completed_)
        //  call_stmt_3488 store
        $T [call_stmt_3482_call_stmt_3488_delay] $delay
        // call_stmt_3482(store) -> call_stmt_3488(store)
        call_stmt_3488_sample_start_ <-& (call_stmt_3482_call_stmt_3488_delay)
        call_stmt_3482_call_stmt_3488_delay <-& (call_stmt_3482_update_completed_)
        // memory-space  memory_space_8
        //  call_stmt_3470 store
        //  call_stmt_3476 store
        $T [call_stmt_3470_call_stmt_3476_delay] $delay
        // call_stmt_3470(store) -> call_stmt_3476(store)
        call_stmt_3476_sample_start_ <-& (call_stmt_3470_call_stmt_3476_delay)
        call_stmt_3470_call_stmt_3476_delay <-& (call_stmt_3470_update_completed_)
        //  call_stmt_3482 store
        $T [call_stmt_3476_call_stmt_3482_delay] $delay
        // call_stmt_3476(store) -> call_stmt_3482(store)
        call_stmt_3482_sample_start_ <-& (call_stmt_3476_call_stmt_3482_delay)
        call_stmt_3476_call_stmt_3482_delay <-& (call_stmt_3476_update_completed_)
        //  call_stmt_3488 store
        $T [call_stmt_3482_call_stmt_3488_delay] $delay
        // call_stmt_3482(store) -> call_stmt_3488(store)
        call_stmt_3488_sample_start_ <-& (call_stmt_3482_call_stmt_3488_delay)
        call_stmt_3482_call_stmt_3488_delay <-& (call_stmt_3482_update_completed_)
        // pipe read/write dependencies for pipe sdhc_to_peripheral_bridge_response
        // read-dependencies for pipe sdhc_to_peripheral_bridge_response
        // write-dependencies for pipe sdhc_to_peripheral_bridge_response
        // signal write dependencies for sdhc_to_peripheral_bridge_response
      }
      call_stmt_3470_to_assign_stmt_3491__entry__ |-> (call_stmt_3470_to_assign_stmt_3491)
      call_stmt_3470_to_assign_stmt_3491__exit__ <-| (call_stmt_3470_to_assign_stmt_3491)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3492_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3492__entry__ |-> (if_stmt_3492_dead_link)
      if_stmt_3492__exit__ <-| (if_stmt_3492_dead_link)
      ;;[if_stmt_3492_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((address + 3 ) == 47 )
        ;;[EQ_u8_u1_3497] 
        {
          // binary expression 
          ||[EQ_u8_u1_3497_inputs] 
          {
            // (address + 3 )
            ;;[ADD_u8_u8_3495] 
            {
              // binary expression 
              ||[ADD_u8_u8_3495_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3492__entry__ |-> (if_stmt_3492_eval_test)
      $P [EQ_u8_u1_3497_place]
      EQ_u8_u1_3497_place <-| (if_stmt_3492_eval_test)
      ;;[if_stmt_3492_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3492_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_3497_place |-> (if_stmt_3492_if_link if_stmt_3492_else_link)
      $P [call_stmt_3500__entry__] 
      $P [call_stmt_3500__exit__] 
      $P [if_stmt_3501__entry__] 
      $P [if_stmt_3501__exit__] 
      $P [if_stmt_3508__entry__] 
      $P [if_stmt_3508__exit__] 
      $P [if_stmt_3515__entry__] 
      $P [if_stmt_3515__exit__] 
      ::[call_stmt_3500] 
      {
        // start: 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
        //  file .Aa/sdhc.opt.aa, line 1225
        $T[call_stmt_3500_sample_start_] 
        $T[call_stmt_3500_sample_completed_] 
        $T[call_stmt_3500_update_start_] 
        $T[call_stmt_3500_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3500_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3500_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3500_sample_start_ &-> (call_stmt_3500_Sample)
        call_stmt_3500_sample_completed_ <-& (call_stmt_3500_Sample)
        call_stmt_3500_sample_completed_ &-> ($null)
        call_stmt_3500_update_start_ &-> (call_stmt_3500_Update)
        call_stmt_3500_update_completed_ <-& (call_stmt_3500_Update)
        // Call output argument 0
        // (as target) softwareResetVal
        // start: WAR dependencies for softwareResetVal
        // done: WAR dependencies for softwareResetVal
        // end: 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3500 load
      }
      call_stmt_3500__entry__ |-> (call_stmt_3500)
      call_stmt_3500__exit__ <-| (call_stmt_3500)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3501_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3501__entry__ |-> (if_stmt_3501_dead_link)
      if_stmt_3501__exit__ <-| (if_stmt_3501_dead_link)
      ;;[if_stmt_3501_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (softwareResetVal [] 0 )
        ;;[BITSEL_u8_u1_3504] 
        {
          // binary expression 
          ||[BITSEL_u8_u1_3504_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3501__entry__ |-> (if_stmt_3501_eval_test)
      $P [BITSEL_u8_u1_3504_place]
      BITSEL_u8_u1_3504_place <-| (if_stmt_3501_eval_test)
      ;;[if_stmt_3501_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3501_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u8_u1_3504_place |-> (if_stmt_3501_if_link if_stmt_3501_else_link)
      $P [call_stmt_3506__entry__] 
      $P [call_stmt_3506__exit__] 
      ::[call_stmt_3506] 
      {
        // start: 			$call resetRegisters (ZERO_2 ) () 
        //  file .Aa/sdhc.opt.aa, line 1227
        $T[call_stmt_3506_sample_start_] 
        $T[call_stmt_3506_sample_completed_] 
        $T[call_stmt_3506_update_start_] 
        $T[call_stmt_3506_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3506_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3506_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3506_sample_start_ &-> (call_stmt_3506_Sample)
        call_stmt_3506_sample_completed_ <-& (call_stmt_3506_Sample)
        call_stmt_3506_sample_completed_ &-> ($null)
        call_stmt_3506_update_start_ &-> (call_stmt_3506_Update)
        call_stmt_3506_update_completed_ <-& (call_stmt_3506_Update)
        // end: 			$call resetRegisters (ZERO_2 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3506 store
      }
      call_stmt_3506__entry__ |-> (call_stmt_3506)
      call_stmt_3506__exit__ <-| (call_stmt_3506)
      call_stmt_3506__entry__ <-| (if_stmt_3501_if_link)
      call_stmt_3506__exit__ |-> (if_stmt_3501__exit__)
      if_stmt_3501__exit__ <-| (if_stmt_3501_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3508_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3508__entry__ |-> (if_stmt_3508_dead_link)
      if_stmt_3508__exit__ <-| (if_stmt_3508_dead_link)
      ;;[if_stmt_3508_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (softwareResetVal [] 1 )
        ;;[BITSEL_u8_u1_3511] 
        {
          // binary expression 
          ||[BITSEL_u8_u1_3511_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3508__entry__ |-> (if_stmt_3508_eval_test)
      $P [BITSEL_u8_u1_3511_place]
      BITSEL_u8_u1_3511_place <-| (if_stmt_3508_eval_test)
      ;;[if_stmt_3508_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3508_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u8_u1_3511_place |-> (if_stmt_3508_if_link if_stmt_3508_else_link)
      $P [call_stmt_3513__entry__] 
      $P [call_stmt_3513__exit__] 
      ::[call_stmt_3513] 
      {
        // start: 			$call resetRegisters (ONE_2 ) () 
        //  file .Aa/sdhc.opt.aa, line 1230
        $T[call_stmt_3513_sample_start_] 
        $T[call_stmt_3513_sample_completed_] 
        $T[call_stmt_3513_update_start_] 
        $T[call_stmt_3513_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3513_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3513_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3513_sample_start_ &-> (call_stmt_3513_Sample)
        call_stmt_3513_sample_completed_ <-& (call_stmt_3513_Sample)
        call_stmt_3513_sample_completed_ &-> ($null)
        call_stmt_3513_update_start_ &-> (call_stmt_3513_Update)
        call_stmt_3513_update_completed_ <-& (call_stmt_3513_Update)
        // end: 			$call resetRegisters (ONE_2 ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3513 store
      }
      call_stmt_3513__entry__ |-> (call_stmt_3513)
      call_stmt_3513__exit__ <-| (call_stmt_3513)
      call_stmt_3513__entry__ <-| (if_stmt_3508_if_link)
      call_stmt_3513__exit__ |-> (if_stmt_3508__exit__)
      if_stmt_3508__exit__ <-| (if_stmt_3508_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3515_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3515__entry__ |-> (if_stmt_3515_dead_link)
      if_stmt_3515__exit__ <-| (if_stmt_3515_dead_link)
      ;;[if_stmt_3515_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (softwareResetVal [] 2 )
        ;;[BITSEL_u8_u1_3518] 
        {
          // binary expression 
          ||[BITSEL_u8_u1_3518_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3515__entry__ |-> (if_stmt_3515_eval_test)
      $P [BITSEL_u8_u1_3518_place]
      BITSEL_u8_u1_3518_place <-| (if_stmt_3515_eval_test)
      ;;[if_stmt_3515_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3515_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u8_u1_3518_place |-> (if_stmt_3515_if_link if_stmt_3515_else_link)
      $P [call_stmt_3521__entry__] 
      $P [call_stmt_3521__exit__] 
      ::[call_stmt_3521] 
      {
        // start: 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1233
        $T[call_stmt_3521_sample_start_] 
        $T[call_stmt_3521_sample_completed_] 
        $T[call_stmt_3521_update_start_] 
        $T[call_stmt_3521_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3521_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3521_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3521_sample_start_ &-> (call_stmt_3521_Sample)
        call_stmt_3521_sample_completed_ <-& (call_stmt_3521_Sample)
        call_stmt_3521_sample_completed_ &-> ($null)
        call_stmt_3521_update_start_ &-> (call_stmt_3521_Update)
        call_stmt_3521_update_completed_ <-& (call_stmt_3521_Update)
        // end: 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3521 store
      }
      call_stmt_3521__entry__ |-> (call_stmt_3521)
      call_stmt_3521__exit__ <-| (call_stmt_3521)
      call_stmt_3521__entry__ <-| (if_stmt_3515_if_link)
      call_stmt_3521__exit__ |-> (if_stmt_3515__exit__)
      if_stmt_3515__exit__ <-| (if_stmt_3515_else_link)
      call_stmt_3500__entry__ <-| (if_stmt_3492_if_link)
      if_stmt_3501__entry__ <-| (call_stmt_3500__exit__)
      if_stmt_3508__entry__ <-| (if_stmt_3501__exit__)
      if_stmt_3515__entry__ <-| (if_stmt_3508__exit__)
      if_stmt_3515__exit__ |-> (if_stmt_3492__exit__)
      if_stmt_3492__exit__ <-| (if_stmt_3492_else_link)
      ::[call_stmt_3526_to_assign_stmt_3549] 
      {
        // start: 			$call readSDHCRegisters (36  ) (presentStateVal ) 
        //  file .Aa/sdhc.opt.aa, line 1236
        $T[call_stmt_3526_sample_start_] 
        $T[call_stmt_3526_sample_completed_] 
        $T[call_stmt_3526_update_start_] 
        $T[call_stmt_3526_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3526_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3526_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3526_sample_start_ &-> (call_stmt_3526_Sample)
        call_stmt_3526_sample_completed_ <-& (call_stmt_3526_Sample)
        call_stmt_3526_sample_completed_ &-> ($null)
        call_stmt_3526_update_start_ &-> (call_stmt_3526_Update)
        call_stmt_3526_update_completed_ <-& (call_stmt_3526_Update)
        // Call output argument 0
        // (as target) presentStateVal
        // start: WAR dependencies for presentStateVal
        // done: WAR dependencies for presentStateVal
        // end: 			$call readSDHCRegisters (36  ) (presentStateVal ) 
        // start: WAR dependencies for commandInhibit_CMD
        // done: WAR dependencies for commandInhibit_CMD
        // start:  			$volatile commandInhibit_CMD := ((presentStateVal [] 0 ) == 0 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1237
        // volatile! 
        // Source expression
        // ((presentStateVal [] 0 ) == 0 )
        // (presentStateVal [] 0 )
        // presentStateVal
        // Target expression
        // (as target) commandInhibit_CMD
        // start: WAR dependencies for commandInhibit_CMD
        // done: WAR dependencies for commandInhibit_CMD
        // end:  			$volatile commandInhibit_CMD := ((presentStateVal [] 0 ) == 0 ) $buffering 1
        // start: WAR dependencies for addresscheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for addresscheck
        // start:  			$volatile addresscheck := (((address + 3 ) == _h0f ) & b0) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1238
        // volatile! 
        // Source expression
        // (((address + 3 ) == _h0f ) & b0)
        // ((address + 3 ) == _h0f )
        // (address + 3 )
        // address
        // b0
        // Target expression
        // (as target) addresscheck
        // start: WAR dependencies for addresscheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for addresscheck
        // end:  			$volatile addresscheck := (((address + 3 ) == _h0f ) & b0) $buffering 1
        // start: WAR dependencies for presentState
        // done: WAR dependencies for presentState
        // start:  			$volatile presentState := ((presentStateVal >> 1 ) << 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1239
        // volatile! 
        // Source expression
        // ((presentStateVal >> 1 ) << 1 )
        // (presentStateVal >> 1 )
        // presentStateVal
        // Target expression
        // (as target) presentState
        // start: WAR dependencies for presentState
        // done: WAR dependencies for presentState
        // end:  			$volatile presentState := ((presentStateVal >> 1 ) << 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3526 load
      }
      call_stmt_3526_to_assign_stmt_3549__entry__ |-> (call_stmt_3526_to_assign_stmt_3549)
      call_stmt_3526_to_assign_stmt_3549__exit__ <-| (call_stmt_3526_to_assign_stmt_3549)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3550_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3550__entry__ |-> (if_stmt_3550_dead_link)
      if_stmt_3550__exit__ <-| (if_stmt_3550_dead_link)
      ;;[if_stmt_3550_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (addresscheck & commandInhibit_CMD)
        ;;[AND_u1_u1_3553] 
        {
          // binary expression 
          ||[AND_u1_u1_3553_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3550__entry__ |-> (if_stmt_3550_eval_test)
      $P [AND_u1_u1_3553_place]
      AND_u1_u1_3553_place <-| (if_stmt_3550_eval_test)
      ;;[if_stmt_3550_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3550_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_3553_place |-> (if_stmt_3550_if_link if_stmt_3550_else_link)
      $P [assign_stmt_3558_to_assign_stmt_3586__entry__] 
      $P [assign_stmt_3558_to_assign_stmt_3586__exit__] 
      ::[assign_stmt_3558_to_assign_stmt_3586] 
      {
        // start: WAR dependencies for tempPresentStateHere
        // ignored out-of-scope w_root 			$call readSDHCRegisters (36  ) (presentStateVal ) 
        // done: WAR dependencies for tempPresentStateHere
        // start:  			$volatile tempPresentStateHere := (presentState | _h01 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1241
        // volatile! 
        // Source expression
        // (presentState | _h01 )
        // presentState
        // Target expression
        // (as target) tempPresentStateHere
        // start: WAR dependencies for tempPresentStateHere
        // ignored out-of-scope w_root 			$call readSDHCRegisters (36  ) (presentStateVal ) 
        // done: WAR dependencies for tempPresentStateHere
        // end:  			$volatile tempPresentStateHere := (presentState | _h01 ) $buffering 1
        // start: 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
        //  file .Aa/sdhc.opt.aa, line 1242
        $T[call_stmt_3561_sample_start_] 
        $T[call_stmt_3561_sample_completed_] 
        $T[call_stmt_3561_update_start_] 
        $T[call_stmt_3561_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // tempPresentStateHere
        // start: Forward dependencies from tempPresentStateHere to transition call_stmt_3561_sample_start_
        // done: Forward dependencies from tempPresentStateHere to transition call_stmt_3561_sample_start_
        ;;[call_stmt_3561_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3561_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3561_sample_start_ &-> (call_stmt_3561_Sample)
        call_stmt_3561_sample_completed_ <-& (call_stmt_3561_Sample)
        call_stmt_3561_sample_completed_ &-> ($null)
        call_stmt_3561_update_start_ &-> (call_stmt_3561_Update)
        call_stmt_3561_update_completed_ <-& (call_stmt_3561_Update)
        // end: 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
        // start:  			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1243
        // Target expression
        // (as target) dataRxEnrty1
        $T[STORE_dataRxEnrty1_3562_sample_start_] 
        $T[STORE_dataRxEnrty1_3562_sample_completed_] 
        $T[STORE_dataRxEnrty1_3562_update_start_] 
        $T[STORE_dataRxEnrty1_3562_update_completed_] 
        // dataRxEnrty1
        $T[STORE_dataRxEnrty1_3562_word_address_calculated] 
        $T[STORE_dataRxEnrty1_3562_root_address_calculated] 
        STORE_dataRxEnrty1_3562_word_address_calculated <-& (STORE_dataRxEnrty1_3562_root_address_calculated)
        ;;[STORE_dataRxEnrty1_3562_Sample] 
        {
          ;;[STORE_dataRxEnrty1_3562_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty1_3562_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty1_3562_sample_start_ <-& (STORE_dataRxEnrty1_3562_word_address_calculated)
        STORE_dataRxEnrty1_3562_sample_start_ &-> (STORE_dataRxEnrty1_3562_Sample)
        STORE_dataRxEnrty1_3562_sample_completed_ <-& (STORE_dataRxEnrty1_3562_Sample)
        STORE_dataRxEnrty1_3562_sample_completed_ &-> ($null)
        STORE_dataRxEnrty1_3562_update_start_ &-> (STORE_dataRxEnrty1_3562_Update)
        STORE_dataRxEnrty1_3562_update_completed_ <-& (STORE_dataRxEnrty1_3562_Update)
        // end:  			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start:  			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1244
        // Target expression
        // (as target) dataRxEnrty2
        $T[STORE_dataRxEnrty2_3565_sample_start_] 
        $T[STORE_dataRxEnrty2_3565_sample_completed_] 
        $T[STORE_dataRxEnrty2_3565_update_start_] 
        $T[STORE_dataRxEnrty2_3565_update_completed_] 
        // dataRxEnrty2
        $T[STORE_dataRxEnrty2_3565_word_address_calculated] 
        $T[STORE_dataRxEnrty2_3565_root_address_calculated] 
        STORE_dataRxEnrty2_3565_word_address_calculated <-& (STORE_dataRxEnrty2_3565_root_address_calculated)
        ;;[STORE_dataRxEnrty2_3565_Sample] 
        {
          ;;[STORE_dataRxEnrty2_3565_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty2_3565_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty2_3565_sample_start_ <-& (STORE_dataRxEnrty2_3565_word_address_calculated)
        STORE_dataRxEnrty2_3565_sample_start_ &-> (STORE_dataRxEnrty2_3565_Sample)
        STORE_dataRxEnrty2_3565_sample_completed_ <-& (STORE_dataRxEnrty2_3565_Sample)
        STORE_dataRxEnrty2_3565_sample_completed_ &-> ($null)
        STORE_dataRxEnrty2_3565_update_start_ &-> (STORE_dataRxEnrty2_3565_Update)
        STORE_dataRxEnrty2_3565_update_completed_ <-& (STORE_dataRxEnrty2_3565_Update)
        // end:  			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start: 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
        //  file .Aa/sdhc.opt.aa, line 1245
        $T[call_stmt_3574_sample_start_] 
        $T[call_stmt_3574_sample_completed_] 
        $T[call_stmt_3574_update_start_] 
        $T[call_stmt_3574_update_completed_] 
        ;;[call_stmt_3574_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3574_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3574_sample_start_ &-> (call_stmt_3574_Sample)
        call_stmt_3574_sample_completed_ <-& (call_stmt_3574_Sample)
        call_stmt_3574_sample_completed_ &-> ($null)
        call_stmt_3574_update_start_ &-> (call_stmt_3574_Update)
        call_stmt_3574_update_completed_ <-& (call_stmt_3574_Update)
        // Call output argument 0
        // (as target) normalInterruptStatusVar1
        // Call output argument 1
        // (as target) normalInterruptStatusVar2
        // Call output argument 2
        // (as target) errorInterruptStatusVar1
        // Call output argument 3
        // (as target) errorInterruptStatusVar2
        // Call output argument 4
        // (as target) dataErrorInterruptStatusVar1
        // Call output argument 5
        // (as target) dataTransferComplete
        // start: WAR dependencies for normalInterruptStatusVar1
        // done: WAR dependencies for normalInterruptStatusVar1
        // start: WAR dependencies for normalInterruptStatusVar2
        // done: WAR dependencies for normalInterruptStatusVar2
        // start: WAR dependencies for errorInterruptStatusVar1
        // done: WAR dependencies for errorInterruptStatusVar1
        // start: WAR dependencies for errorInterruptStatusVar2
        // done: WAR dependencies for errorInterruptStatusVar2
        // start: WAR dependencies for dataErrorInterruptStatusVar1
        // done: WAR dependencies for dataErrorInterruptStatusVar1
        // start: WAR dependencies for dataTransferComplete
        // done: WAR dependencies for dataTransferComplete
        // end: 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
        // start:  			normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1246
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3575_sample_start_] 
        $T[STORE_normalInterruptFlag1_3575_sample_completed_] 
        $T[STORE_normalInterruptFlag1_3575_update_start_] 
        $T[STORE_normalInterruptFlag1_3575_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3575_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_3575_root_address_calculated] 
        STORE_normalInterruptFlag1_3575_word_address_calculated <-& (STORE_normalInterruptFlag1_3575_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_3575_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_3575_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_3575_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_3575_sample_start_ <-& (STORE_normalInterruptFlag1_3575_word_address_calculated)
        STORE_normalInterruptFlag1_3575_sample_start_ &-> (STORE_normalInterruptFlag1_3575_Sample)
        STORE_normalInterruptFlag1_3575_sample_completed_ <-& (STORE_normalInterruptFlag1_3575_Sample)
        STORE_normalInterruptFlag1_3575_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_3575_update_start_ &-> (STORE_normalInterruptFlag1_3575_Update)
        STORE_normalInterruptFlag1_3575_update_completed_ <-& (STORE_normalInterruptFlag1_3575_Update)
        // end:  			normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
        // start:  			normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1247
        // Target expression
        // (as target) normalInterruptFlag2
        $T[STORE_normalInterruptFlag2_3578_sample_start_] 
        $T[STORE_normalInterruptFlag2_3578_sample_completed_] 
        $T[STORE_normalInterruptFlag2_3578_update_start_] 
        $T[STORE_normalInterruptFlag2_3578_update_completed_] 
        // normalInterruptFlag2
        $T[STORE_normalInterruptFlag2_3578_word_address_calculated] 
        $T[STORE_normalInterruptFlag2_3578_root_address_calculated] 
        STORE_normalInterruptFlag2_3578_word_address_calculated <-& (STORE_normalInterruptFlag2_3578_root_address_calculated)
        ;;[STORE_normalInterruptFlag2_3578_Sample] 
        {
          ;;[STORE_normalInterruptFlag2_3578_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag2_3578_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag2_3578_sample_start_ <-& (STORE_normalInterruptFlag2_3578_word_address_calculated)
        STORE_normalInterruptFlag2_3578_sample_start_ &-> (STORE_normalInterruptFlag2_3578_Sample)
        STORE_normalInterruptFlag2_3578_sample_completed_ <-& (STORE_normalInterruptFlag2_3578_Sample)
        STORE_normalInterruptFlag2_3578_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag2_3578_update_start_ &-> (STORE_normalInterruptFlag2_3578_Update)
        STORE_normalInterruptFlag2_3578_update_completed_ <-& (STORE_normalInterruptFlag2_3578_Update)
        // end:  			normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1248
        // Target expression
        // (as target) errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3581_sample_start_] 
        $T[STORE_errorInterruptFlag1_3581_sample_completed_] 
        $T[STORE_errorInterruptFlag1_3581_update_start_] 
        $T[STORE_errorInterruptFlag1_3581_update_completed_] 
        // errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3581_word_address_calculated] 
        $T[STORE_errorInterruptFlag1_3581_root_address_calculated] 
        STORE_errorInterruptFlag1_3581_word_address_calculated <-& (STORE_errorInterruptFlag1_3581_root_address_calculated)
        ;;[STORE_errorInterruptFlag1_3581_Sample] 
        {
          ;;[STORE_errorInterruptFlag1_3581_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag1_3581_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag1_3581_sample_start_ <-& (STORE_errorInterruptFlag1_3581_word_address_calculated)
        STORE_errorInterruptFlag1_3581_sample_start_ &-> (STORE_errorInterruptFlag1_3581_Sample)
        STORE_errorInterruptFlag1_3581_sample_completed_ <-& (STORE_errorInterruptFlag1_3581_Sample)
        STORE_errorInterruptFlag1_3581_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag1_3581_update_start_ &-> (STORE_errorInterruptFlag1_3581_Update)
        STORE_errorInterruptFlag1_3581_update_completed_ <-& (STORE_errorInterruptFlag1_3581_Update)
        // end:  			errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1249
        // Target expression
        // (as target) errorInterruptFlag2
        $T[STORE_errorInterruptFlag2_3584_sample_start_] 
        $T[STORE_errorInterruptFlag2_3584_sample_completed_] 
        $T[STORE_errorInterruptFlag2_3584_update_start_] 
        $T[STORE_errorInterruptFlag2_3584_update_completed_] 
        // errorInterruptFlag2
        $T[STORE_errorInterruptFlag2_3584_word_address_calculated] 
        $T[STORE_errorInterruptFlag2_3584_root_address_calculated] 
        STORE_errorInterruptFlag2_3584_word_address_calculated <-& (STORE_errorInterruptFlag2_3584_root_address_calculated)
        ;;[STORE_errorInterruptFlag2_3584_Sample] 
        {
          ;;[STORE_errorInterruptFlag2_3584_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag2_3584_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag2_3584_sample_start_ <-& (STORE_errorInterruptFlag2_3584_word_address_calculated)
        STORE_errorInterruptFlag2_3584_sample_start_ &-> (STORE_errorInterruptFlag2_3584_Sample)
        STORE_errorInterruptFlag2_3584_sample_completed_ <-& (STORE_errorInterruptFlag2_3584_Sample)
        STORE_errorInterruptFlag2_3584_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag2_3584_update_start_ &-> (STORE_errorInterruptFlag2_3584_Update)
        STORE_errorInterruptFlag2_3584_update_completed_ <-& (STORE_errorInterruptFlag2_3584_Update)
        // end:  			errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  STORE_dataRxEnrty1_3562 store
        //  call_stmt_3574 store
        $T [STORE_dataRxEnrty1_3562_call_stmt_3574_delay] $delay
        // STORE_dataRxEnrty1_3562(store) -> call_stmt_3574(store)
        call_stmt_3574_sample_start_ <-& (STORE_dataRxEnrty1_3562_call_stmt_3574_delay)
        STORE_dataRxEnrty1_3562_call_stmt_3574_delay <-& (STORE_dataRxEnrty1_3562_sample_completed_)
        // memory-space  memory_space_2
        //  STORE_dataRxEnrty2_3565 store
        //  call_stmt_3574 store
        $T [STORE_dataRxEnrty2_3565_call_stmt_3574_delay] $delay
        // STORE_dataRxEnrty2_3565(store) -> call_stmt_3574(store)
        call_stmt_3574_sample_start_ <-& (STORE_dataRxEnrty2_3565_call_stmt_3574_delay)
        STORE_dataRxEnrty2_3565_call_stmt_3574_delay <-& (STORE_dataRxEnrty2_3565_sample_completed_)
        // memory-space  memory_space_3
        //  STORE_errorInterruptFlag1_3581 store
        // memory-space  memory_space_4
        //  STORE_errorInterruptFlag2_3584 store
        // memory-space  memory_space_5
        //  STORE_normalInterruptFlag1_3575 store
        // memory-space  memory_space_6
        //  STORE_normalInterruptFlag2_3578 store
        // memory-space  memory_space_7
        //  call_stmt_3574 store
        // memory-space  memory_space_8
        //  call_stmt_3561 store
        //  call_stmt_3574 store
        $T [call_stmt_3561_call_stmt_3574_delay] $delay
        // call_stmt_3561(store) -> call_stmt_3574(store)
        call_stmt_3574_sample_start_ <-& (call_stmt_3561_call_stmt_3574_delay)
        call_stmt_3561_call_stmt_3574_delay <-& (call_stmt_3561_update_completed_)
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
        // pipe read/write dependencies for pipe DAT1Rx
        // read-dependencies for pipe DAT1Rx
        // write-dependencies for pipe DAT1Rx
        // signal write dependencies for DAT1Rx
        // pipe read/write dependencies for pipe DAT2Rx
        // read-dependencies for pipe DAT2Rx
        // write-dependencies for pipe DAT2Rx
        // signal write dependencies for DAT2Rx
        // pipe read/write dependencies for pipe DAT3Rx
        // read-dependencies for pipe DAT3Rx
        // write-dependencies for pipe DAT3Rx
        // signal write dependencies for DAT3Rx
        // pipe read/write dependencies for pipe busyResponse
        // read-dependencies for pipe busyResponse
        // write-dependencies for pipe busyResponse
        // signal write dependencies for busyResponse
        // pipe read/write dependencies for pipe commandTx
        // read-dependencies for pipe commandTx
        // write-dependencies for pipe commandTx
        // signal write dependencies for commandTx
        // pipe read/write dependencies for pipe bigResponseEnable
        // read-dependencies for pipe bigResponseEnable
        // write-dependencies for pipe bigResponseEnable
        // signal write dependencies for bigResponseEnable
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
        // pipe read/write dependencies for pipe dataBufferRx
        // read-dependencies for pipe dataBufferRx
        // write-dependencies for pipe dataBufferRx
        // signal write dependencies for dataBufferRx
        // pipe read/write dependencies for pipe responseEnable
        // read-dependencies for pipe responseEnable
        // write-dependencies for pipe responseEnable
        // signal write dependencies for responseEnable
        // pipe read/write dependencies for pipe responseRx
        // read-dependencies for pipe responseRx
        // write-dependencies for pipe responseRx
        // signal write dependencies for responseRx
      }
      assign_stmt_3558_to_assign_stmt_3586__entry__ |-> (assign_stmt_3558_to_assign_stmt_3586)
      assign_stmt_3558_to_assign_stmt_3586__exit__ <-| (assign_stmt_3558_to_assign_stmt_3586)
      assign_stmt_3558_to_assign_stmt_3586__entry__ <-| (if_stmt_3550_if_link)
      assign_stmt_3558_to_assign_stmt_3586__exit__ |-> (if_stmt_3550__exit__)
      if_stmt_3550__exit__ <-| (if_stmt_3550_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3588_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3588__entry__ |-> (if_stmt_3588_dead_link)
      if_stmt_3588__exit__ <-| (if_stmt_3588_dead_link)
      ;;[if_stmt_3588_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (rxBufferPointer > 0 )
        ;;[UGT_u10_u1_3591] 
        {
          // binary expression 
          ||[UGT_u10_u1_3591_inputs] 
          {
            ;;[LOAD_rxBufferPointer_3589] 
            {
              // load 
              ;;[LOAD_rxBufferPointer_3589_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3588__entry__ |-> (if_stmt_3588_eval_test)
      $P [UGT_u10_u1_3591_place]
      UGT_u10_u1_3591_place <-| (if_stmt_3588_eval_test)
      ;;[if_stmt_3588_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3588_else_link] 
      {
        $T [else_choice_transition] 
      }
      UGT_u10_u1_3591_place |-> (if_stmt_3588_if_link if_stmt_3588_else_link)
      $P [call_stmt_3594_to_assign_stmt_3609__entry__] 
      $P [call_stmt_3594_to_assign_stmt_3609__exit__] 
      ::[call_stmt_3594_to_assign_stmt_3609] 
      {
        // start: 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
        //  file .Aa/sdhc.opt.aa, line 1252
        $T[call_stmt_3594_sample_start_] 
        $T[call_stmt_3594_sample_completed_] 
        $T[call_stmt_3594_update_start_] 
        $T[call_stmt_3594_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3594_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3594_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3594_sample_start_ &-> (call_stmt_3594_Sample)
        call_stmt_3594_sample_completed_ <-& (call_stmt_3594_Sample)
        call_stmt_3594_sample_completed_ &-> ($null)
        call_stmt_3594_update_start_ &-> (call_stmt_3594_Update)
        call_stmt_3594_update_completed_ <-& (call_stmt_3594_Update)
        // Call output argument 0
        // (as target) tempPresentState_1_1
        // start: WAR dependencies for tempPresentState_1_1
        // done: WAR dependencies for tempPresentState_1_1
        // end: 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
        // start: 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1253
        $T[call_stmt_3599_sample_start_] 
        $T[call_stmt_3599_sample_completed_] 
        $T[call_stmt_3599_update_start_] 
        $T[call_stmt_3599_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (tempPresentState_1_1 | _h08 )
        // tempPresentState_1_1
        // start: Forward dependencies from (tempPresentState_1_1 | _h08 ) to transition call_stmt_3599_sample_start_
        call_stmt_3599_sample_start_ <-& (call_stmt_3594_update_completed_)
        // done: Forward dependencies from (tempPresentState_1_1 | _h08 ) to transition call_stmt_3599_sample_start_
        ;;[call_stmt_3599_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3599_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3599_sample_start_ &-> (call_stmt_3599_Sample)
        call_stmt_3599_sample_completed_ <-& (call_stmt_3599_Sample)
        call_stmt_3599_sample_completed_ &-> ($null)
        call_stmt_3599_update_start_ &-> (call_stmt_3599_Update)
        call_stmt_3599_update_completed_ <-& (call_stmt_3599_Update)
        // end: 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
        // start:  			bufferReadReady := (ZERO_8 | _h20 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1254
        // constant! 
        // end:  			bufferReadReady := (ZERO_8 | _h20 ) $buffering 1// bits of buffering = 8. 
        // start:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h20 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1255
        // Source expression
        // (normalInterruptFlag1 | _h20 )
        $T[OR_u8_u8_3608_sample_start_] 
        $T[OR_u8_u8_3608_sample_completed_] 
        $T[OR_u8_u8_3608_update_start_] 
        $T[OR_u8_u8_3608_update_completed_] 
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_3606_sample_start_] 
        $T[LOAD_normalInterruptFlag1_3606_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_3606_update_start_] 
        $T[LOAD_normalInterruptFlag1_3606_update_completed_] 
        $T[LOAD_normalInterruptFlag1_3606_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_3606_root_address_calculated] 
        LOAD_normalInterruptFlag1_3606_word_address_calculated <-& (LOAD_normalInterruptFlag1_3606_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_3606_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_3606_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_3606_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_3606_sample_start_ <-& (LOAD_normalInterruptFlag1_3606_word_address_calculated)
        LOAD_normalInterruptFlag1_3606_sample_start_ &-> (LOAD_normalInterruptFlag1_3606_Sample)
        LOAD_normalInterruptFlag1_3606_sample_completed_ <-& (LOAD_normalInterruptFlag1_3606_Sample)
        LOAD_normalInterruptFlag1_3606_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_3606_update_start_ &-> (LOAD_normalInterruptFlag1_3606_Update)
        LOAD_normalInterruptFlag1_3606_update_completed_ <-& (LOAD_normalInterruptFlag1_3606_Update)
        // start: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3608_sample_start_
        OR_u8_u8_3608_sample_start_ <-& (LOAD_normalInterruptFlag1_3606_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3608_sample_start_
        ;;[OR_u8_u8_3608_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3608_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3608_sample_start_ &-> (OR_u8_u8_3608_Sample)
        OR_u8_u8_3608_sample_completed_ <-& (OR_u8_u8_3608_Sample)
        OR_u8_u8_3608_sample_completed_ &-> ($null)
        OR_u8_u8_3608_update_start_ &-> (OR_u8_u8_3608_Update)
        OR_u8_u8_3608_update_completed_ <-& (OR_u8_u8_3608_Update)
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3605_sample_start_] 
        $T[STORE_normalInterruptFlag1_3605_sample_completed_] 
        $T[STORE_normalInterruptFlag1_3605_update_start_] 
        $T[STORE_normalInterruptFlag1_3605_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3605_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_3605_root_address_calculated] 
        STORE_normalInterruptFlag1_3605_word_address_calculated <-& (STORE_normalInterruptFlag1_3605_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_3605_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_3605_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_3605_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_3605_sample_start_ <-& (STORE_normalInterruptFlag1_3605_word_address_calculated)
        STORE_normalInterruptFlag1_3605_sample_start_ &-> (STORE_normalInterruptFlag1_3605_Sample)
        STORE_normalInterruptFlag1_3605_sample_completed_ <-& (STORE_normalInterruptFlag1_3605_Sample)
        STORE_normalInterruptFlag1_3605_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_3605_update_start_ &-> (STORE_normalInterruptFlag1_3605_Update)
        STORE_normalInterruptFlag1_3605_update_completed_ <-& (STORE_normalInterruptFlag1_3605_Update)
        // start: Forward dependencies from (normalInterruptFlag1 | _h20 ) to transition STORE_normalInterruptFlag1_3605_sample_start_
        STORE_normalInterruptFlag1_3605_sample_start_ <-& (OR_u8_u8_3608_update_completed_)
        // done: Forward dependencies from (normalInterruptFlag1 | _h20 ) to transition STORE_normalInterruptFlag1_3605_sample_start_
        // end:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h20 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_3606 load
        //  STORE_normalInterruptFlag1_3605 store
        $T [LOAD_normalInterruptFlag1_3606_STORE_normalInterruptFlag1_3605_delay] $delay
        // LOAD_normalInterruptFlag1_3606(load) -> STORE_normalInterruptFlag1_3605(store)
        STORE_normalInterruptFlag1_3605_sample_start_ <-& (LOAD_normalInterruptFlag1_3606_STORE_normalInterruptFlag1_3605_delay)
        LOAD_normalInterruptFlag1_3606_STORE_normalInterruptFlag1_3605_delay <-& (LOAD_normalInterruptFlag1_3606_sample_completed_)
        // memory-space  memory_space_8
        //  call_stmt_3594 load
        //  call_stmt_3599 store
        $T [call_stmt_3594_call_stmt_3599_delay] $delay
        // call_stmt_3594(load) -> call_stmt_3599(store)
        call_stmt_3599_sample_start_ <-& (call_stmt_3594_call_stmt_3599_delay)
        call_stmt_3594_call_stmt_3599_delay <-& (call_stmt_3594_update_completed_)
      }
      call_stmt_3594_to_assign_stmt_3609__entry__ |-> (call_stmt_3594_to_assign_stmt_3609)
      call_stmt_3594_to_assign_stmt_3609__exit__ <-| (call_stmt_3594_to_assign_stmt_3609)
      call_stmt_3594_to_assign_stmt_3609__entry__ <-| (if_stmt_3588_if_link)
      call_stmt_3594_to_assign_stmt_3609__exit__ |-> (if_stmt_3588__exit__)
      if_stmt_3588__exit__ <-| (if_stmt_3588_else_link)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3611_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3611__entry__ |-> (if_stmt_3611_dead_link)
      if_stmt_3611__exit__ <-| (if_stmt_3611_dead_link)
      ;;[if_stmt_3611_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (txBufferPointer < 512 )
        ;;[ULT_u10_u1_3614] 
        {
          // binary expression 
          ||[ULT_u10_u1_3614_inputs] 
          {
            ;;[LOAD_txBufferPointer_3612] 
            {
              // load 
              ;;[LOAD_txBufferPointer_3612_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3611__entry__ |-> (if_stmt_3611_eval_test)
      $P [ULT_u10_u1_3614_place]
      ULT_u10_u1_3614_place <-| (if_stmt_3611_eval_test)
      ;;[if_stmt_3611_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3611_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u10_u1_3614_place |-> (if_stmt_3611_if_link if_stmt_3611_else_link)
      $P [call_stmt_3617_to_assign_stmt_3632__entry__] 
      $P [call_stmt_3617_to_assign_stmt_3632__exit__] 
      ::[call_stmt_3617_to_assign_stmt_3632] 
      {
        // start: 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
        //  file .Aa/sdhc.opt.aa, line 1258
        $T[call_stmt_3617_sample_start_] 
        $T[call_stmt_3617_sample_completed_] 
        $T[call_stmt_3617_update_start_] 
        $T[call_stmt_3617_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3617_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3617_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3617_sample_start_ &-> (call_stmt_3617_Sample)
        call_stmt_3617_sample_completed_ <-& (call_stmt_3617_Sample)
        call_stmt_3617_sample_completed_ &-> ($null)
        call_stmt_3617_update_start_ &-> (call_stmt_3617_Update)
        call_stmt_3617_update_completed_ <-& (call_stmt_3617_Update)
        // Call output argument 0
        // (as target) tempPresentState_1_2
        // start: WAR dependencies for tempPresentState_1_2
        // done: WAR dependencies for tempPresentState_1_2
        // end: 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
        // start: 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1259
        $T[call_stmt_3622_sample_start_] 
        $T[call_stmt_3622_sample_completed_] 
        $T[call_stmt_3622_update_start_] 
        $T[call_stmt_3622_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (tempPresentState_1_2 | _h04 )
        // tempPresentState_1_2
        // start: Forward dependencies from (tempPresentState_1_2 | _h04 ) to transition call_stmt_3622_sample_start_
        call_stmt_3622_sample_start_ <-& (call_stmt_3617_update_completed_)
        // done: Forward dependencies from (tempPresentState_1_2 | _h04 ) to transition call_stmt_3622_sample_start_
        ;;[call_stmt_3622_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3622_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3622_sample_start_ &-> (call_stmt_3622_Sample)
        call_stmt_3622_sample_completed_ <-& (call_stmt_3622_Sample)
        call_stmt_3622_sample_completed_ &-> ($null)
        call_stmt_3622_update_start_ &-> (call_stmt_3622_Update)
        call_stmt_3622_update_completed_ <-& (call_stmt_3622_Update)
        // end: 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
        // start:  			bufferWriteReady := (ZERO_8 | _h10 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1260
        // constant! 
        // end:  			bufferWriteReady := (ZERO_8 | _h10 ) $buffering 1// bits of buffering = 8. 
        // start:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h10 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1261
        // Source expression
        // (normalInterruptFlag1 | _h10 )
        $T[OR_u8_u8_3631_sample_start_] 
        $T[OR_u8_u8_3631_sample_completed_] 
        $T[OR_u8_u8_3631_update_start_] 
        $T[OR_u8_u8_3631_update_completed_] 
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_3629_sample_start_] 
        $T[LOAD_normalInterruptFlag1_3629_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_3629_update_start_] 
        $T[LOAD_normalInterruptFlag1_3629_update_completed_] 
        $T[LOAD_normalInterruptFlag1_3629_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_3629_root_address_calculated] 
        LOAD_normalInterruptFlag1_3629_word_address_calculated <-& (LOAD_normalInterruptFlag1_3629_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_3629_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_3629_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_3629_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_3629_sample_start_ <-& (LOAD_normalInterruptFlag1_3629_word_address_calculated)
        LOAD_normalInterruptFlag1_3629_sample_start_ &-> (LOAD_normalInterruptFlag1_3629_Sample)
        LOAD_normalInterruptFlag1_3629_sample_completed_ <-& (LOAD_normalInterruptFlag1_3629_Sample)
        LOAD_normalInterruptFlag1_3629_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_3629_update_start_ &-> (LOAD_normalInterruptFlag1_3629_Update)
        LOAD_normalInterruptFlag1_3629_update_completed_ <-& (LOAD_normalInterruptFlag1_3629_Update)
        // start: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3631_sample_start_
        OR_u8_u8_3631_sample_start_ <-& (LOAD_normalInterruptFlag1_3629_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3631_sample_start_
        ;;[OR_u8_u8_3631_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3631_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3631_sample_start_ &-> (OR_u8_u8_3631_Sample)
        OR_u8_u8_3631_sample_completed_ <-& (OR_u8_u8_3631_Sample)
        OR_u8_u8_3631_sample_completed_ &-> ($null)
        OR_u8_u8_3631_update_start_ &-> (OR_u8_u8_3631_Update)
        OR_u8_u8_3631_update_completed_ <-& (OR_u8_u8_3631_Update)
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3628_sample_start_] 
        $T[STORE_normalInterruptFlag1_3628_sample_completed_] 
        $T[STORE_normalInterruptFlag1_3628_update_start_] 
        $T[STORE_normalInterruptFlag1_3628_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3628_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_3628_root_address_calculated] 
        STORE_normalInterruptFlag1_3628_word_address_calculated <-& (STORE_normalInterruptFlag1_3628_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_3628_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_3628_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_3628_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_3628_sample_start_ <-& (STORE_normalInterruptFlag1_3628_word_address_calculated)
        STORE_normalInterruptFlag1_3628_sample_start_ &-> (STORE_normalInterruptFlag1_3628_Sample)
        STORE_normalInterruptFlag1_3628_sample_completed_ <-& (STORE_normalInterruptFlag1_3628_Sample)
        STORE_normalInterruptFlag1_3628_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_3628_update_start_ &-> (STORE_normalInterruptFlag1_3628_Update)
        STORE_normalInterruptFlag1_3628_update_completed_ <-& (STORE_normalInterruptFlag1_3628_Update)
        // start: Forward dependencies from (normalInterruptFlag1 | _h10 ) to transition STORE_normalInterruptFlag1_3628_sample_start_
        STORE_normalInterruptFlag1_3628_sample_start_ <-& (OR_u8_u8_3631_update_completed_)
        // done: Forward dependencies from (normalInterruptFlag1 | _h10 ) to transition STORE_normalInterruptFlag1_3628_sample_start_
        // end:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h10 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_3629 load
        //  STORE_normalInterruptFlag1_3628 store
        $T [LOAD_normalInterruptFlag1_3629_STORE_normalInterruptFlag1_3628_delay] $delay
        // LOAD_normalInterruptFlag1_3629(load) -> STORE_normalInterruptFlag1_3628(store)
        STORE_normalInterruptFlag1_3628_sample_start_ <-& (LOAD_normalInterruptFlag1_3629_STORE_normalInterruptFlag1_3628_delay)
        LOAD_normalInterruptFlag1_3629_STORE_normalInterruptFlag1_3628_delay <-& (LOAD_normalInterruptFlag1_3629_sample_completed_)
        // memory-space  memory_space_8
        //  call_stmt_3617 load
        //  call_stmt_3622 store
        $T [call_stmt_3617_call_stmt_3622_delay] $delay
        // call_stmt_3617(load) -> call_stmt_3622(store)
        call_stmt_3622_sample_start_ <-& (call_stmt_3617_call_stmt_3622_delay)
        call_stmt_3617_call_stmt_3622_delay <-& (call_stmt_3617_update_completed_)
      }
      call_stmt_3617_to_assign_stmt_3632__entry__ |-> (call_stmt_3617_to_assign_stmt_3632)
      call_stmt_3617_to_assign_stmt_3632__exit__ <-| (call_stmt_3617_to_assign_stmt_3632)
      call_stmt_3617_to_assign_stmt_3632__entry__ <-| (if_stmt_3611_if_link)
      call_stmt_3617_to_assign_stmt_3632__exit__ |-> (if_stmt_3611__exit__)
      if_stmt_3611__exit__ <-| (if_stmt_3611_else_link)
      ::[assign_stmt_3638] 
      {
        // start: WAR dependencies for bufferDataPortCheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for bufferDataPortCheck
        // start:  			$volatile bufferDataPortCheck := (address == 32 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1263
        // volatile! 
        // Source expression
        // (address == 32 )
        // address
        // Target expression
        // (as target) bufferDataPortCheck
        // start: WAR dependencies for bufferDataPortCheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for bufferDataPortCheck
        // end:  			$volatile bufferDataPortCheck := (address == 32 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_3638__entry__ |-> (assign_stmt_3638)
      assign_stmt_3638__exit__ <-| (assign_stmt_3638)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3639_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3639__entry__ |-> (if_stmt_3639_dead_link)
      if_stmt_3639__exit__ <-| (if_stmt_3639_dead_link)
      ;;[if_stmt_3639_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((bufferDataPortCheck == 1 ) & (txBufferPointer < 512 ))
        ;;[AND_u1_u1_3646] 
        {
          // binary expression 
          ||[AND_u1_u1_3646_inputs] 
          {
            // (bufferDataPortCheck == 1 )
            ;;[EQ_u1_u1_3642] 
            {
              // binary expression 
              ||[EQ_u1_u1_3642_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // (txBufferPointer < 512 )
            ;;[ULT_u10_u1_3645] 
            {
              // binary expression 
              ||[ULT_u10_u1_3645_inputs] 
              {
                ;;[LOAD_txBufferPointer_3643] 
                {
                  // load 
                  ;;[LOAD_txBufferPointer_3643_read] 
                  {
                    ||[word_access] 
                    {
                      ;;[word_access_0_sample] 
                      {
                        $T [rr] $T [ra] 
                      }
                      ;;[word_access_0_update] 
                      {
                        $T [cr] $T [ca]
                      }
                    }
                    $T [merge_req] $T [merge_ack]
                  }
                }
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3639__entry__ |-> (if_stmt_3639_eval_test)
      $P [AND_u1_u1_3646_place]
      AND_u1_u1_3646_place <-| (if_stmt_3639_eval_test)
      ;;[if_stmt_3639_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3639_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_3646_place |-> (if_stmt_3639_if_link if_stmt_3639_else_link)
      $P [merge_stmt_3647__entry__] 
      $P [merge_stmt_3647__exit__] 
      $P [call_stmt_3658_to_assign_stmt_3666__entry__] 
      $P [call_stmt_3658_to_assign_stmt_3666__exit__] 
      $P [if_stmt_3667__entry__] 
      $P [if_stmt_3667__exit__] 
      $P [assign_stmt_3677__entry__] 
      $P [assign_stmt_3677__exit__] 
      $P [if_stmt_3678__entry__] 
      $P [if_stmt_3678__exit__] 
      ::[call_stmt_3658_to_assign_stmt_3666] 
      {
        // start: 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
        //  file .Aa/sdhc.opt.aa, line 1269
        $T[call_stmt_3658_sample_start_] 
        $T[call_stmt_3658_sample_completed_] 
        $T[call_stmt_3658_update_start_] 
        $T[call_stmt_3658_update_completed_] 
        // Call input argument 0
        // (32  + B)
        // B
        // start: Forward dependencies from (32  + B) to transition call_stmt_3658_sample_start_
        // done: Forward dependencies from (32  + B) to transition call_stmt_3658_sample_start_
        ;;[call_stmt_3658_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3658_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3658_sample_start_ &-> (call_stmt_3658_Sample)
        call_stmt_3658_sample_completed_ <-& (call_stmt_3658_Sample)
        call_stmt_3658_sample_completed_ &-> ($null)
        call_stmt_3658_update_start_ &-> (call_stmt_3658_Update)
        call_stmt_3658_update_completed_ <-& (call_stmt_3658_Update)
        // Call output argument 0
        // (as target) tempBuf
        // start: WAR dependencies for tempBuf
        // done: WAR dependencies for tempBuf
        // end: 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
        // start:  			dataBufferTx := tempBuf $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1270
        // Source expression
        // tempBuf
        // Target expression
        // (as target) dataBufferTx
        $T[WPIPE_dataBufferTx_3659_sample_start_] 
        $T[WPIPE_dataBufferTx_3659_sample_completed_] 
        $T[WPIPE_dataBufferTx_3659_update_start_] 
        $T[WPIPE_dataBufferTx_3659_update_completed_] 
        ;;[WPIPE_dataBufferTx_3659_Sample] 
        {
          // pipe write sample-start dataBufferTx
          $T [req] $T [ack] 
        }
        ;;[WPIPE_dataBufferTx_3659_Update] 
        {
          // pipe write update (complete) dataBufferTx
          $T [req] $T [ack] 
        }
        WPIPE_dataBufferTx_3659_sample_start_ &-> (WPIPE_dataBufferTx_3659_Sample)
        WPIPE_dataBufferTx_3659_sample_completed_ <-& (WPIPE_dataBufferTx_3659_Sample)
        WPIPE_dataBufferTx_3659_update_start_ <-& (WPIPE_dataBufferTx_3659_sample_completed_)
        WPIPE_dataBufferTx_3659_update_start_ &-> (WPIPE_dataBufferTx_3659_Update)
        WPIPE_dataBufferTx_3659_update_completed_ <-& (WPIPE_dataBufferTx_3659_Update)
        // start: Forward dependencies from tempBuf to transition WPIPE_dataBufferTx_3659_sample_start_
        WPIPE_dataBufferTx_3659_sample_start_ <-& (call_stmt_3658_update_completed_)
        // done: Forward dependencies from tempBuf to transition WPIPE_dataBufferTx_3659_sample_start_
        // end:  			dataBufferTx := tempBuf $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for next_B
        // ignored out-of-scope w_root 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
        // type of target is $uint<8>
        // done: WAR dependencies for next_B
        // start:  			$volatile next_B := (B + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1271
        // volatile! 
        // Source expression
        // (B + 1 )
        // B
        // Target expression
        // (as target) next_B
        // start: WAR dependencies for next_B
        // ignored out-of-scope w_root 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
        // type of target is $uint<8>
        // done: WAR dependencies for next_B
        // end:  			$volatile next_B := (B + 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3658 load
        // pipe read/write dependencies for pipe dataBufferTx
        // read-dependencies for pipe dataBufferTx
        // write-dependencies for pipe dataBufferTx
        // signal write dependencies for dataBufferTx
      }
      call_stmt_3658_to_assign_stmt_3666__entry__ |-> (call_stmt_3658_to_assign_stmt_3666)
      call_stmt_3658_to_assign_stmt_3666__exit__ <-| (call_stmt_3658_to_assign_stmt_3666)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3667_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3667__entry__ |-> (if_stmt_3667_dead_link)
      if_stmt_3667__exit__ <-| (if_stmt_3667_dead_link)
      ;;[if_stmt_3667_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_B < 4 )
        ;;[ULT_u8_u1_3670] 
        {
          // binary expression 
          ||[ULT_u8_u1_3670_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3667__entry__ |-> (if_stmt_3667_eval_test)
      $P [ULT_u8_u1_3670_place]
      ULT_u8_u1_3670_place <-| (if_stmt_3667_eval_test)
      ;;[if_stmt_3667_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3667_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_3670_place |-> (if_stmt_3667_if_link if_stmt_3667_else_link)
      $P [loopBuffer]
      loopBuffer <-| (if_stmt_3667_if_link)
      if_stmt_3667__exit__ <-| (if_stmt_3667_else_link)
      ::[assign_stmt_3677] 
      {
        // start:  			txBufferPointer := (txBufferPointer + 4 ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 1275
        // Source expression
        // (txBufferPointer + 4 )
        $T[ADD_u10_u10_3676_sample_start_] 
        $T[ADD_u10_u10_3676_sample_completed_] 
        $T[ADD_u10_u10_3676_update_start_] 
        $T[ADD_u10_u10_3676_update_completed_] 
        // txBufferPointer
        $T[LOAD_txBufferPointer_3674_sample_start_] 
        $T[LOAD_txBufferPointer_3674_sample_completed_] 
        $T[LOAD_txBufferPointer_3674_update_start_] 
        $T[LOAD_txBufferPointer_3674_update_completed_] 
        $T[LOAD_txBufferPointer_3674_word_address_calculated] 
        $T[LOAD_txBufferPointer_3674_root_address_calculated] 
        LOAD_txBufferPointer_3674_word_address_calculated <-& (LOAD_txBufferPointer_3674_root_address_calculated)
        ;;[LOAD_txBufferPointer_3674_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_txBufferPointer_3674_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_txBufferPointer_3674_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_txBufferPointer_3674_sample_start_ <-& (LOAD_txBufferPointer_3674_word_address_calculated)
        LOAD_txBufferPointer_3674_sample_start_ &-> (LOAD_txBufferPointer_3674_Sample)
        LOAD_txBufferPointer_3674_sample_completed_ <-& (LOAD_txBufferPointer_3674_Sample)
        LOAD_txBufferPointer_3674_sample_completed_ &-> ($null)
        LOAD_txBufferPointer_3674_update_start_ &-> (LOAD_txBufferPointer_3674_Update)
        LOAD_txBufferPointer_3674_update_completed_ <-& (LOAD_txBufferPointer_3674_Update)
        // start: Forward dependencies from txBufferPointer to transition ADD_u10_u10_3676_sample_start_
        ADD_u10_u10_3676_sample_start_ <-& (LOAD_txBufferPointer_3674_update_completed_)
        // done: Forward dependencies from txBufferPointer to transition ADD_u10_u10_3676_sample_start_
        ;;[ADD_u10_u10_3676_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u10_u10_3676_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u10_u10_3676_sample_start_ &-> (ADD_u10_u10_3676_Sample)
        ADD_u10_u10_3676_sample_completed_ <-& (ADD_u10_u10_3676_Sample)
        ADD_u10_u10_3676_sample_completed_ &-> ($null)
        ADD_u10_u10_3676_update_start_ &-> (ADD_u10_u10_3676_Update)
        ADD_u10_u10_3676_update_completed_ <-& (ADD_u10_u10_3676_Update)
        // Target expression
        // (as target) txBufferPointer
        $T[STORE_txBufferPointer_3673_sample_start_] 
        $T[STORE_txBufferPointer_3673_sample_completed_] 
        $T[STORE_txBufferPointer_3673_update_start_] 
        $T[STORE_txBufferPointer_3673_update_completed_] 
        // txBufferPointer
        $T[STORE_txBufferPointer_3673_word_address_calculated] 
        $T[STORE_txBufferPointer_3673_root_address_calculated] 
        STORE_txBufferPointer_3673_word_address_calculated <-& (STORE_txBufferPointer_3673_root_address_calculated)
        ;;[STORE_txBufferPointer_3673_Sample] 
        {
          ;;[STORE_txBufferPointer_3673_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_txBufferPointer_3673_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_txBufferPointer_3673_sample_start_ <-& (STORE_txBufferPointer_3673_word_address_calculated)
        STORE_txBufferPointer_3673_sample_start_ &-> (STORE_txBufferPointer_3673_Sample)
        STORE_txBufferPointer_3673_sample_completed_ <-& (STORE_txBufferPointer_3673_Sample)
        STORE_txBufferPointer_3673_sample_completed_ &-> ($null)
        STORE_txBufferPointer_3673_update_start_ &-> (STORE_txBufferPointer_3673_Update)
        STORE_txBufferPointer_3673_update_completed_ <-& (STORE_txBufferPointer_3673_Update)
        // start: Forward dependencies from (txBufferPointer + 4 ) to transition STORE_txBufferPointer_3673_sample_start_
        STORE_txBufferPointer_3673_sample_start_ <-& (ADD_u10_u10_3676_update_completed_)
        // done: Forward dependencies from (txBufferPointer + 4 ) to transition STORE_txBufferPointer_3673_sample_start_
        // end:  			txBufferPointer := (txBufferPointer + 4 ) $buffering 1// bits of buffering = 10. 
        // load-store dependencies..
        // memory-space  memory_space_9
        //  LOAD_txBufferPointer_3674 load
        //  STORE_txBufferPointer_3673 store
        $T [LOAD_txBufferPointer_3674_STORE_txBufferPointer_3673_delay] $delay
        // LOAD_txBufferPointer_3674(load) -> STORE_txBufferPointer_3673(store)
        STORE_txBufferPointer_3673_sample_start_ <-& (LOAD_txBufferPointer_3674_STORE_txBufferPointer_3673_delay)
        LOAD_txBufferPointer_3674_STORE_txBufferPointer_3673_delay <-& (LOAD_txBufferPointer_3674_sample_completed_)
      }
      assign_stmt_3677__entry__ |-> (assign_stmt_3677)
      assign_stmt_3677__exit__ <-| (assign_stmt_3677)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3678_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3678__entry__ |-> (if_stmt_3678_dead_link)
      if_stmt_3678__exit__ <-| (if_stmt_3678_dead_link)
      ;;[if_stmt_3678_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (txBufferPointer == 512 )
        ;;[EQ_u10_u1_3681] 
        {
          // binary expression 
          ||[EQ_u10_u1_3681_inputs] 
          {
            ;;[LOAD_txBufferPointer_3679] 
            {
              // load 
              ;;[LOAD_txBufferPointer_3679_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3678__entry__ |-> (if_stmt_3678_eval_test)
      $P [EQ_u10_u1_3681_place]
      EQ_u10_u1_3681_place <-| (if_stmt_3678_eval_test)
      ;;[if_stmt_3678_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3678_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u10_u1_3681_place |-> (if_stmt_3678_if_link if_stmt_3678_else_link)
      $P [call_stmt_3684_to_assign_stmt_3706__entry__] 
      $P [call_stmt_3684_to_assign_stmt_3706__exit__] 
      $P [merge_stmt_3707__entry__] 
      $P [merge_stmt_3707__exit__] 
      $P [call_stmt_3722_to_assign_stmt_3733__entry__] 
      $P [call_stmt_3722_to_assign_stmt_3733__exit__] 
      $P [if_stmt_3734__entry__] 
      $P [if_stmt_3734__exit__] 
      $P [assign_stmt_3744_to_assign_stmt_3776__entry__] 
      $P [assign_stmt_3744_to_assign_stmt_3776__exit__] 
      ::[call_stmt_3684_to_assign_stmt_3706] 
      {
        // start: 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
        //  file .Aa/sdhc.opt.aa, line 1277
        $T[call_stmt_3684_sample_start_] 
        $T[call_stmt_3684_sample_completed_] 
        $T[call_stmt_3684_update_start_] 
        $T[call_stmt_3684_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3684_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3684_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3684_sample_start_ &-> (call_stmt_3684_Sample)
        call_stmt_3684_sample_completed_ <-& (call_stmt_3684_Sample)
        call_stmt_3684_sample_completed_ &-> ($null)
        call_stmt_3684_update_start_ &-> (call_stmt_3684_Update)
        call_stmt_3684_update_completed_ <-& (call_stmt_3684_Update)
        // Call output argument 0
        // (as target) tempPresentState_1_3
        // start: WAR dependencies for tempPresentState_1_3
        // done: WAR dependencies for tempPresentState_1_3
        // end: 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
        // start: 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1278
        $T[call_stmt_3689_sample_start_] 
        $T[call_stmt_3689_sample_completed_] 
        $T[call_stmt_3689_update_start_] 
        $T[call_stmt_3689_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (tempPresentState_1_3 | _hfb )
        // tempPresentState_1_3
        // start: Forward dependencies from (tempPresentState_1_3 | _hfb ) to transition call_stmt_3689_sample_start_
        call_stmt_3689_sample_start_ <-& (call_stmt_3684_update_completed_)
        // done: Forward dependencies from (tempPresentState_1_3 | _hfb ) to transition call_stmt_3689_sample_start_
        ;;[call_stmt_3689_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3689_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3689_sample_start_ &-> (call_stmt_3689_Sample)
        call_stmt_3689_sample_completed_ <-& (call_stmt_3689_Sample)
        call_stmt_3689_sample_completed_ &-> ($null)
        call_stmt_3689_update_start_ &-> (call_stmt_3689_Update)
        call_stmt_3689_update_completed_ <-& (call_stmt_3689_Update)
        // end: 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
        // start: 			$call readSDHCRegisters (12  ) (transferRegVal ) 
        //  file .Aa/sdhc.opt.aa, line 1279
        $T[call_stmt_3692_sample_start_] 
        $T[call_stmt_3692_sample_completed_] 
        $T[call_stmt_3692_update_start_] 
        $T[call_stmt_3692_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3692_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3692_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3692_sample_start_ &-> (call_stmt_3692_Sample)
        call_stmt_3692_sample_completed_ <-& (call_stmt_3692_Sample)
        call_stmt_3692_sample_completed_ &-> ($null)
        call_stmt_3692_update_start_ &-> (call_stmt_3692_Update)
        call_stmt_3692_update_completed_ <-& (call_stmt_3692_Update)
        // Call output argument 0
        // (as target) transferRegVal
        // start: WAR dependencies for transferRegVal
        // done: WAR dependencies for transferRegVal
        // end: 			$call readSDHCRegisters (12  ) (transferRegVal ) 
        // start:  			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1280
        // Source expression
        // (  $bitreduce |  (transferRegVal & _h20 ) )
        $T[BITREDUCEOR_u8_u1_3697_sample_start_] 
        $T[BITREDUCEOR_u8_u1_3697_sample_completed_] 
        $T[BITREDUCEOR_u8_u1_3697_update_start_] 
        $T[BITREDUCEOR_u8_u1_3697_update_completed_] 
        // (transferRegVal & _h20 )
        // transferRegVal
        // start: Forward dependencies from (transferRegVal & _h20 ) to transition BITREDUCEOR_u8_u1_3697_sample_start_
        BITREDUCEOR_u8_u1_3697_sample_start_ <-& (call_stmt_3692_update_completed_)
        // done: Forward dependencies from (transferRegVal & _h20 ) to transition BITREDUCEOR_u8_u1_3697_sample_start_
        ;;[BITREDUCEOR_u8_u1_3697_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[BITREDUCEOR_u8_u1_3697_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        BITREDUCEOR_u8_u1_3697_sample_start_ &-> (BITREDUCEOR_u8_u1_3697_Sample)
        BITREDUCEOR_u8_u1_3697_sample_completed_ <-& (BITREDUCEOR_u8_u1_3697_Sample)
        BITREDUCEOR_u8_u1_3697_sample_completed_ &-> ($null)
        BITREDUCEOR_u8_u1_3697_update_start_ &-> (BITREDUCEOR_u8_u1_3697_Update)
        BITREDUCEOR_u8_u1_3697_update_completed_ <-& (BITREDUCEOR_u8_u1_3697_Update)
        // Target expression
        // (as target) singleMultipleBlock
        // start: WAR dependencies for singleMultipleBlock
        // done: WAR dependencies for singleMultipleBlock
        // end:  			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
        // start:  			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1281
        // Source expression
        // ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock)
        $T[AND_u1_u1_3705_sample_start_] 
        $T[AND_u1_u1_3705_sample_completed_] 
        $T[AND_u1_u1_3705_update_start_] 
        $T[AND_u1_u1_3705_update_completed_] 
        // (  $bitreduce |  (transferRegVal & _h02 ) )
        // (transferRegVal & _h02 )
        // transferRegVal
        // singleMultipleBlock
        // start: Forward dependencies from (  $bitreduce |  (transferRegVal & _h02 ) ) to transition AND_u1_u1_3705_sample_start_
        AND_u1_u1_3705_sample_start_ <-& (call_stmt_3692_update_completed_)
        // done: Forward dependencies from (  $bitreduce |  (transferRegVal & _h02 ) ) to transition AND_u1_u1_3705_sample_start_
        // start: Forward dependencies from singleMultipleBlock to transition AND_u1_u1_3705_sample_start_
        AND_u1_u1_3705_sample_start_ <-& (BITREDUCEOR_u8_u1_3697_update_completed_)
        // done: Forward dependencies from singleMultipleBlock to transition AND_u1_u1_3705_sample_start_
        ;;[AND_u1_u1_3705_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u1_u1_3705_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u1_u1_3705_sample_start_ &-> (AND_u1_u1_3705_Sample)
        AND_u1_u1_3705_sample_completed_ <-& (AND_u1_u1_3705_Sample)
        AND_u1_u1_3705_sample_completed_ &-> ($null)
        AND_u1_u1_3705_update_start_ &-> (AND_u1_u1_3705_Update)
        AND_u1_u1_3705_update_completed_ <-& (AND_u1_u1_3705_Update)
        // Target expression
        // (as target) blockCountEnable
        // start: WAR dependencies for blockCountEnable
        // done: WAR dependencies for blockCountEnable
        // end:  			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3684 load
        //  call_stmt_3689 store
        $T [call_stmt_3684_call_stmt_3689_delay] $delay
        // call_stmt_3684(load) -> call_stmt_3689(store)
        call_stmt_3689_sample_start_ <-& (call_stmt_3684_call_stmt_3689_delay)
        call_stmt_3684_call_stmt_3689_delay <-& (call_stmt_3684_update_completed_)
        //  call_stmt_3692 load
        $T [call_stmt_3689_call_stmt_3692_delay] $delay
        // call_stmt_3689(store) -> call_stmt_3692(load)
        call_stmt_3692_sample_start_ <-& (call_stmt_3689_call_stmt_3692_delay)
        call_stmt_3689_call_stmt_3692_delay <-& (call_stmt_3689_update_completed_)
      }
      call_stmt_3684_to_assign_stmt_3706__entry__ |-> (call_stmt_3684_to_assign_stmt_3706)
      call_stmt_3684_to_assign_stmt_3706__exit__ <-| (call_stmt_3684_to_assign_stmt_3706)
      ::[call_stmt_3722_to_assign_stmt_3733] 
      {
        // start: 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1288
        $T[call_stmt_3722_sample_start_] 
        $T[call_stmt_3722_sample_completed_] 
        $T[call_stmt_3722_update_start_] 
        $T[call_stmt_3722_update_completed_] 
        // Call input argument 0
        // (6  + C)
        // C
        // start: Forward dependencies from (6  + C) to transition call_stmt_3722_sample_start_
        // done: Forward dependencies from (6  + C) to transition call_stmt_3722_sample_start_
        ;;[call_stmt_3722_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3722_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3722_sample_start_ &-> (call_stmt_3722_Sample)
        call_stmt_3722_sample_completed_ <-& (call_stmt_3722_Sample)
        call_stmt_3722_sample_completed_ &-> ($null)
        call_stmt_3722_update_start_ &-> (call_stmt_3722_Update)
        call_stmt_3722_update_completed_ <-& (call_stmt_3722_Update)
        // Call output argument 0
        // (as target) newBlockCountTemp
        // start: WAR dependencies for newBlockCountTemp
        // done: WAR dependencies for newBlockCountTemp
        // end: 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        // start: WAR dependencies for blockCount
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // done: WAR dependencies for blockCount
        // start:  			$volatile blockCount := (( $slice newBlockCount 7 0 )  && newBlockCountTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1289
        // volatile! 
        // Source expression
        // (( $slice newBlockCount 7 0 )  && newBlockCountTemp)
        // ( $slice newBlockCount 7 0 ) 
        // newBlockCount
        // newBlockCountTemp
        // Target expression
        // (as target) blockCount
        // start: WAR dependencies for blockCount
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // done: WAR dependencies for blockCount
        // end:  			$volatile blockCount := (( $slice newBlockCount 7 0 )  && newBlockCountTemp) $buffering 1
        // start: WAR dependencies for next_C
        // ignored out-of-scope w_root 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
        // type of target is $uint<8>
        // done: WAR dependencies for next_C
        // start:  			$volatile next_C := (C - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1290
        // volatile! 
        // Source expression
        // (C - 1 )
        // C
        // Target expression
        // (as target) next_C
        // start: WAR dependencies for next_C
        // ignored out-of-scope w_root 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
        // type of target is $uint<8>
        // done: WAR dependencies for next_C
        // end:  			$volatile next_C := (C - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3722 load
      }
      call_stmt_3722_to_assign_stmt_3733__entry__ |-> (call_stmt_3722_to_assign_stmt_3733)
      call_stmt_3722_to_assign_stmt_3733__exit__ <-| (call_stmt_3722_to_assign_stmt_3733)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3734_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3734__entry__ |-> (if_stmt_3734_dead_link)
      if_stmt_3734__exit__ <-| (if_stmt_3734_dead_link)
      ;;[if_stmt_3734_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (C != 0 )
        ;;[NEQ_u8_u1_3737] 
        {
          // binary expression 
          ||[NEQ_u8_u1_3737_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3734__entry__ |-> (if_stmt_3734_eval_test)
      $P [NEQ_u8_u1_3737_place]
      NEQ_u8_u1_3737_place <-| (if_stmt_3734_eval_test)
      ;;[if_stmt_3734_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3734_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_3737_place |-> (if_stmt_3734_if_link if_stmt_3734_else_link)
      $P [loopBlock]
      loopBlock <-| (if_stmt_3734_if_link)
      if_stmt_3734__exit__ <-| (if_stmt_3734_else_link)
      ::[assign_stmt_3744_to_assign_stmt_3776] 
      {
        // start: WAR dependencies for blockCountTrue
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        // done: WAR dependencies for blockCountTrue
        // start:  			$volatile blockCountTrue := (blockCount == 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1294
        // volatile! 
        // Source expression
        // (blockCount == 1 )
        // blockCount
        // Target expression
        // (as target) blockCountTrue
        // start: WAR dependencies for blockCountTrue
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        // done: WAR dependencies for blockCountTrue
        // end:  			$volatile blockCountTrue := (blockCount == 1 ) $buffering 1
        // start: WAR dependencies for lastBlock
        // ignored out-of-scope w_root 			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        // done: WAR dependencies for lastBlock
        // start:  			$volatile lastBlock := (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue)) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1295
        // volatile! 
        // Source expression
        // (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue))
        // ( ~ singleMultipleBlock )
        // singleMultipleBlock
        // (blockCountEnable & blockCountTrue)
        // blockCountEnable
        // blockCountTrue
        // Target expression
        // (as target) lastBlock
        // start: WAR dependencies for lastBlock
        // ignored out-of-scope w_root 			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        // ignored out-of-scope w_root 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
        // done: WAR dependencies for lastBlock
        // end:  			$volatile lastBlock := (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue)) $buffering 1
        // start: 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
        //  file .Aa/sdhc.opt.aa, line 1296
        $T[call_stmt_3758_sample_start_] 
        $T[call_stmt_3758_sample_completed_] 
        $T[call_stmt_3758_update_start_] 
        $T[call_stmt_3758_update_completed_] 
        // Call input argument 0
        // lastBlock
        // Call input argument 1
        // blockCountEnable
        // Call input argument 2
        // blockCount
        // start: Forward dependencies from lastBlock to transition call_stmt_3758_sample_start_
        // done: Forward dependencies from lastBlock to transition call_stmt_3758_sample_start_
        // start: Forward dependencies from blockCountEnable to transition call_stmt_3758_sample_start_
        // done: Forward dependencies from blockCountEnable to transition call_stmt_3758_sample_start_
        // start: Forward dependencies from blockCount to transition call_stmt_3758_sample_start_
        // done: Forward dependencies from blockCount to transition call_stmt_3758_sample_start_
        ;;[call_stmt_3758_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3758_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3758_sample_start_ &-> (call_stmt_3758_Sample)
        call_stmt_3758_sample_completed_ <-& (call_stmt_3758_Sample)
        call_stmt_3758_sample_completed_ &-> ($null)
        call_stmt_3758_update_start_ &-> (call_stmt_3758_Update)
        call_stmt_3758_update_completed_ <-& (call_stmt_3758_Update)
        // Call output argument 0
        // (as target) blockCountNext
        // Call output argument 1
        // (as target) transferComplete
        // start: WAR dependencies for blockCountNext
        // done: WAR dependencies for blockCountNext
        // start: WAR dependencies for transferComplete
        // done: WAR dependencies for transferComplete
        // end: 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
        // start: 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 1297
        $T[call_stmt_3762_sample_start_] 
        $T[call_stmt_3762_sample_completed_] 
        $T[call_stmt_3762_update_start_] 
        $T[call_stmt_3762_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice blockCountNext 15 8 ) 
        // blockCountNext
        // start: Forward dependencies from ( $slice blockCountNext 15 8 )  to transition call_stmt_3762_sample_start_
        call_stmt_3762_sample_start_ <-& (call_stmt_3758_update_completed_)
        // done: Forward dependencies from ( $slice blockCountNext 15 8 )  to transition call_stmt_3762_sample_start_
        ;;[call_stmt_3762_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3762_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3762_sample_start_ &-> (call_stmt_3762_Sample)
        call_stmt_3762_sample_completed_ <-& (call_stmt_3762_Sample)
        call_stmt_3762_sample_completed_ &-> ($null)
        call_stmt_3762_update_start_ &-> (call_stmt_3762_Update)
        call_stmt_3762_update_completed_ <-& (call_stmt_3762_Update)
        // end: 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
        // start: 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 1298
        $T[call_stmt_3766_sample_start_] 
        $T[call_stmt_3766_sample_completed_] 
        $T[call_stmt_3766_update_start_] 
        $T[call_stmt_3766_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice blockCountNext 7 0 ) 
        // blockCountNext
        // start: Forward dependencies from ( $slice blockCountNext 7 0 )  to transition call_stmt_3766_sample_start_
        call_stmt_3766_sample_start_ <-& (call_stmt_3758_update_completed_)
        // done: Forward dependencies from ( $slice blockCountNext 7 0 )  to transition call_stmt_3766_sample_start_
        ;;[call_stmt_3766_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3766_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3766_sample_start_ &-> (call_stmt_3766_Sample)
        call_stmt_3766_sample_completed_ <-& (call_stmt_3766_Sample)
        call_stmt_3766_sample_completed_ &-> ($null)
        call_stmt_3766_update_start_ &-> (call_stmt_3766_Update)
        call_stmt_3766_update_completed_ <-& (call_stmt_3766_Update)
        // end: 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
        // start:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1299
        // Source expression
        // (normalInterruptFlag1 | _h02 )
        $T[OR_u8_u8_3770_sample_start_] 
        $T[OR_u8_u8_3770_sample_completed_] 
        $T[OR_u8_u8_3770_update_start_] 
        $T[OR_u8_u8_3770_update_completed_] 
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_3768_sample_start_] 
        $T[LOAD_normalInterruptFlag1_3768_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_3768_update_start_] 
        $T[LOAD_normalInterruptFlag1_3768_update_completed_] 
        $T[LOAD_normalInterruptFlag1_3768_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_3768_root_address_calculated] 
        LOAD_normalInterruptFlag1_3768_word_address_calculated <-& (LOAD_normalInterruptFlag1_3768_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_3768_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_3768_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_3768_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_3768_sample_start_ <-& (LOAD_normalInterruptFlag1_3768_word_address_calculated)
        LOAD_normalInterruptFlag1_3768_sample_start_ &-> (LOAD_normalInterruptFlag1_3768_Sample)
        LOAD_normalInterruptFlag1_3768_sample_completed_ <-& (LOAD_normalInterruptFlag1_3768_Sample)
        LOAD_normalInterruptFlag1_3768_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_3768_update_start_ &-> (LOAD_normalInterruptFlag1_3768_Update)
        LOAD_normalInterruptFlag1_3768_update_completed_ <-& (LOAD_normalInterruptFlag1_3768_Update)
        // start: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3770_sample_start_
        OR_u8_u8_3770_sample_start_ <-& (LOAD_normalInterruptFlag1_3768_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3770_sample_start_
        ;;[OR_u8_u8_3770_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3770_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3770_sample_start_ &-> (OR_u8_u8_3770_Sample)
        OR_u8_u8_3770_sample_completed_ <-& (OR_u8_u8_3770_Sample)
        OR_u8_u8_3770_sample_completed_ &-> ($null)
        OR_u8_u8_3770_update_start_ &-> (OR_u8_u8_3770_Update)
        OR_u8_u8_3770_update_completed_ <-& (OR_u8_u8_3770_Update)
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3767_sample_start_] 
        $T[STORE_normalInterruptFlag1_3767_sample_completed_] 
        $T[STORE_normalInterruptFlag1_3767_update_start_] 
        $T[STORE_normalInterruptFlag1_3767_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3767_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_3767_root_address_calculated] 
        STORE_normalInterruptFlag1_3767_word_address_calculated <-& (STORE_normalInterruptFlag1_3767_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_3767_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_3767_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_3767_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_3767_sample_start_ <-& (STORE_normalInterruptFlag1_3767_word_address_calculated)
        STORE_normalInterruptFlag1_3767_sample_start_ &-> (STORE_normalInterruptFlag1_3767_Sample)
        STORE_normalInterruptFlag1_3767_sample_completed_ <-& (STORE_normalInterruptFlag1_3767_Sample)
        STORE_normalInterruptFlag1_3767_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_3767_update_start_ &-> (STORE_normalInterruptFlag1_3767_Update)
        STORE_normalInterruptFlag1_3767_update_completed_ <-& (STORE_normalInterruptFlag1_3767_Update)
        // start: Forward dependencies from (normalInterruptFlag1 | _h02 ) to transition STORE_normalInterruptFlag1_3767_sample_start_
        STORE_normalInterruptFlag1_3767_sample_start_ <-& (OR_u8_u8_3770_update_completed_)
        // done: Forward dependencies from (normalInterruptFlag1 | _h02 ) to transition STORE_normalInterruptFlag1_3767_sample_start_
        // end:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1300
        // Source expression
        // (errorInterruptFlag1 | _h60 )
        $T[OR_u8_u8_3775_sample_start_] 
        $T[OR_u8_u8_3775_sample_completed_] 
        $T[OR_u8_u8_3775_update_start_] 
        $T[OR_u8_u8_3775_update_completed_] 
        // errorInterruptFlag1
        $T[LOAD_errorInterruptFlag1_3773_sample_start_] 
        $T[LOAD_errorInterruptFlag1_3773_sample_completed_] 
        $T[LOAD_errorInterruptFlag1_3773_update_start_] 
        $T[LOAD_errorInterruptFlag1_3773_update_completed_] 
        $T[LOAD_errorInterruptFlag1_3773_word_address_calculated] 
        $T[LOAD_errorInterruptFlag1_3773_root_address_calculated] 
        LOAD_errorInterruptFlag1_3773_word_address_calculated <-& (LOAD_errorInterruptFlag1_3773_root_address_calculated)
        ;;[LOAD_errorInterruptFlag1_3773_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag1_3773_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag1_3773_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag1_3773_sample_start_ <-& (LOAD_errorInterruptFlag1_3773_word_address_calculated)
        LOAD_errorInterruptFlag1_3773_sample_start_ &-> (LOAD_errorInterruptFlag1_3773_Sample)
        LOAD_errorInterruptFlag1_3773_sample_completed_ <-& (LOAD_errorInterruptFlag1_3773_Sample)
        LOAD_errorInterruptFlag1_3773_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag1_3773_update_start_ &-> (LOAD_errorInterruptFlag1_3773_Update)
        LOAD_errorInterruptFlag1_3773_update_completed_ <-& (LOAD_errorInterruptFlag1_3773_Update)
        // start: Forward dependencies from errorInterruptFlag1 to transition OR_u8_u8_3775_sample_start_
        OR_u8_u8_3775_sample_start_ <-& (LOAD_errorInterruptFlag1_3773_update_completed_)
        // done: Forward dependencies from errorInterruptFlag1 to transition OR_u8_u8_3775_sample_start_
        ;;[OR_u8_u8_3775_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3775_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3775_sample_start_ &-> (OR_u8_u8_3775_Sample)
        OR_u8_u8_3775_sample_completed_ <-& (OR_u8_u8_3775_Sample)
        OR_u8_u8_3775_sample_completed_ &-> ($null)
        OR_u8_u8_3775_update_start_ &-> (OR_u8_u8_3775_Update)
        OR_u8_u8_3775_update_completed_ <-& (OR_u8_u8_3775_Update)
        // Target expression
        // (as target) errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3772_sample_start_] 
        $T[STORE_errorInterruptFlag1_3772_sample_completed_] 
        $T[STORE_errorInterruptFlag1_3772_update_start_] 
        $T[STORE_errorInterruptFlag1_3772_update_completed_] 
        // errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3772_word_address_calculated] 
        $T[STORE_errorInterruptFlag1_3772_root_address_calculated] 
        STORE_errorInterruptFlag1_3772_word_address_calculated <-& (STORE_errorInterruptFlag1_3772_root_address_calculated)
        ;;[STORE_errorInterruptFlag1_3772_Sample] 
        {
          ;;[STORE_errorInterruptFlag1_3772_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag1_3772_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag1_3772_sample_start_ <-& (STORE_errorInterruptFlag1_3772_word_address_calculated)
        STORE_errorInterruptFlag1_3772_sample_start_ &-> (STORE_errorInterruptFlag1_3772_Sample)
        STORE_errorInterruptFlag1_3772_sample_completed_ <-& (STORE_errorInterruptFlag1_3772_Sample)
        STORE_errorInterruptFlag1_3772_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag1_3772_update_start_ &-> (STORE_errorInterruptFlag1_3772_Update)
        STORE_errorInterruptFlag1_3772_update_completed_ <-& (STORE_errorInterruptFlag1_3772_Update)
        // start: Forward dependencies from (errorInterruptFlag1 | _h60 ) to transition STORE_errorInterruptFlag1_3772_sample_start_
        STORE_errorInterruptFlag1_3772_sample_start_ <-& (OR_u8_u8_3775_update_completed_)
        // done: Forward dependencies from (errorInterruptFlag1 | _h60 ) to transition STORE_errorInterruptFlag1_3772_sample_start_
        // end:  			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  LOAD_errorInterruptFlag1_3773 load
        //  STORE_errorInterruptFlag1_3772 store
        $T [LOAD_errorInterruptFlag1_3773_STORE_errorInterruptFlag1_3772_delay] $delay
        // LOAD_errorInterruptFlag1_3773(load) -> STORE_errorInterruptFlag1_3772(store)
        STORE_errorInterruptFlag1_3772_sample_start_ <-& (LOAD_errorInterruptFlag1_3773_STORE_errorInterruptFlag1_3772_delay)
        LOAD_errorInterruptFlag1_3773_STORE_errorInterruptFlag1_3772_delay <-& (LOAD_errorInterruptFlag1_3773_sample_completed_)
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_3768 load
        //  STORE_normalInterruptFlag1_3767 store
        $T [LOAD_normalInterruptFlag1_3768_STORE_normalInterruptFlag1_3767_delay] $delay
        // LOAD_normalInterruptFlag1_3768(load) -> STORE_normalInterruptFlag1_3767(store)
        STORE_normalInterruptFlag1_3767_sample_start_ <-& (LOAD_normalInterruptFlag1_3768_STORE_normalInterruptFlag1_3767_delay)
        LOAD_normalInterruptFlag1_3768_STORE_normalInterruptFlag1_3767_delay <-& (LOAD_normalInterruptFlag1_3768_sample_completed_)
        // memory-space  memory_space_8
        //  call_stmt_3758 store
        //  call_stmt_3762 store
        $T [call_stmt_3758_call_stmt_3762_delay] $delay
        // call_stmt_3758(store) -> call_stmt_3762(store)
        call_stmt_3762_sample_start_ <-& (call_stmt_3758_call_stmt_3762_delay)
        call_stmt_3758_call_stmt_3762_delay <-& (call_stmt_3758_update_completed_)
        //  call_stmt_3766 store
        $T [call_stmt_3762_call_stmt_3766_delay] $delay
        // call_stmt_3762(store) -> call_stmt_3766(store)
        call_stmt_3766_sample_start_ <-& (call_stmt_3762_call_stmt_3766_delay)
        call_stmt_3762_call_stmt_3766_delay <-& (call_stmt_3762_update_completed_)
        // memory-space  memory_space_9
        //  call_stmt_3758 store
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
        // pipe read/write dependencies for pipe DAT0Tx
        // read-dependencies for pipe DAT0Tx
        // write-dependencies for pipe DAT0Tx
        // signal write dependencies for DAT0Tx
        // pipe read/write dependencies for pipe DAT1Tx
        // read-dependencies for pipe DAT1Tx
        // write-dependencies for pipe DAT1Tx
        // signal write dependencies for DAT1Tx
        // pipe read/write dependencies for pipe DAT2Tx
        // read-dependencies for pipe DAT2Tx
        // write-dependencies for pipe DAT2Tx
        // signal write dependencies for DAT2Tx
        // pipe read/write dependencies for pipe DAT3Tx
        // read-dependencies for pipe DAT3Tx
        // write-dependencies for pipe DAT3Tx
        // signal write dependencies for DAT3Tx
        // pipe read/write dependencies for pipe busy
        // read-dependencies for pipe busy
        // write-dependencies for pipe busy
        // signal write dependencies for busy
        // pipe read/write dependencies for pipe oe
        // read-dependencies for pipe oe
        // write-dependencies for pipe oe
        // signal write dependencies for oe
        // pipe read/write dependencies for pipe dataBufferTx
        // read-dependencies for pipe dataBufferTx
        // write-dependencies for pipe dataBufferTx
        // signal write dependencies for dataBufferTx
      }
      assign_stmt_3744_to_assign_stmt_3776__entry__ |-> (assign_stmt_3744_to_assign_stmt_3776)
      assign_stmt_3744_to_assign_stmt_3776__exit__ <-| (assign_stmt_3744_to_assign_stmt_3776)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1282
      ;;[merge_stmt_3707_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3707__entry__ |-> (merge_stmt_3707_dead_link)
      merge_stmt_3707__exit__ <-| (merge_stmt_3707_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1282  --------------------------
      ||[merge_stmt_3707__entry___PhiReq] 
      {
        ;;[phi_stmt_3708] 
        {
          ||[phi_stmt_3708_sources] 
          {
            // sources for 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ONE_8_3710_konst_delay_trans] $delay
          }
          $T [phi_stmt_3708_req] 
        }
        ;;[phi_stmt_3712] 
        {
          ||[phi_stmt_3712_sources] 
          {
            // sources for 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_3715_konst_delay_trans] $delay
          }
          $T [phi_stmt_3712_req] 
        }
      }
      merge_stmt_3707__entry__ |-> (merge_stmt_3707__entry___PhiReq)
      ||[loopBlock_PhiReq] 
      {
        ;;[phi_stmt_3708] 
        {
          ||[phi_stmt_3708_sources] 
          {
            // sources for 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3708_req] 
        }
        ;;[phi_stmt_3712] 
        {
          ||[phi_stmt_3712_sources] 
          {
            // sources for 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3712_req] 
        }
      }
      loopBlock |-> (loopBlock_PhiReq)
      $P [merge_stmt_3707_PhiReqMerge] 
      merge_stmt_3707_PhiReqMerge <-| ( merge_stmt_3707__entry___PhiReq  loopBlock_PhiReq )
      ||[merge_stmt_3707_PhiAck] 
      {
        $T [phi_stmt_3708_ack] 
        $T [phi_stmt_3712_ack] 
      }
      merge_stmt_3707_PhiReqMerge |-> (merge_stmt_3707_PhiAck)
      merge_stmt_3707__exit__  <-| (merge_stmt_3707_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1282  --------------------------
      call_stmt_3684_to_assign_stmt_3706__entry__ <-| (if_stmt_3678_if_link)
      merge_stmt_3707__entry__ <-| (call_stmt_3684_to_assign_stmt_3706__exit__)
      call_stmt_3722_to_assign_stmt_3733__entry__ <-| (merge_stmt_3707__exit__)
      if_stmt_3734__entry__ <-| (call_stmt_3722_to_assign_stmt_3733__exit__)
      assign_stmt_3744_to_assign_stmt_3776__entry__ <-| (if_stmt_3734__exit__)
      assign_stmt_3744_to_assign_stmt_3776__exit__ |-> (if_stmt_3678__exit__)
      if_stmt_3678__exit__ <-| (if_stmt_3678_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1265
      ;;[merge_stmt_3647_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3647__entry__ |-> (merge_stmt_3647_dead_link)
      merge_stmt_3647__exit__ <-| (merge_stmt_3647_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1265  --------------------------
      ||[merge_stmt_3647__entry___PhiReq] 
      {
        ;;[phi_stmt_3648] 
        {
          ||[phi_stmt_3648_sources] 
          {
            // sources for 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_3652_konst_delay_trans] $delay
          }
          $T [phi_stmt_3648_req] 
        }
      }
      merge_stmt_3647__entry__ |-> (merge_stmt_3647__entry___PhiReq)
      ||[loopBuffer_PhiReq] 
      {
        ;;[phi_stmt_3648] 
        {
          ||[phi_stmt_3648_sources] 
          {
            // sources for 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3648_req] 
        }
      }
      loopBuffer |-> (loopBuffer_PhiReq)
      $P [merge_stmt_3647_PhiReqMerge] 
      merge_stmt_3647_PhiReqMerge <-| ( merge_stmt_3647__entry___PhiReq  loopBuffer_PhiReq )
      ||[merge_stmt_3647_PhiAck] 
      {
        $T [phi_stmt_3648_ack] 
      }
      merge_stmt_3647_PhiReqMerge |-> (merge_stmt_3647_PhiAck)
      merge_stmt_3647__exit__  <-| (merge_stmt_3647_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1265  --------------------------
      merge_stmt_3647__entry__ <-| (if_stmt_3639_if_link)
      call_stmt_3658_to_assign_stmt_3666__entry__ <-| (merge_stmt_3647__exit__)
      if_stmt_3667__entry__ <-| (call_stmt_3658_to_assign_stmt_3666__exit__)
      assign_stmt_3677__entry__ <-| (if_stmt_3667__exit__)
      if_stmt_3678__entry__ <-| (assign_stmt_3677__exit__)
      if_stmt_3678__exit__ |-> (if_stmt_3639__exit__)
      if_stmt_3639__exit__ <-| (if_stmt_3639_else_link)
      call_stmt_3470_to_assign_stmt_3491__entry__ <-| (if_stmt_3463_if_link)
      if_stmt_3492__entry__ <-| (call_stmt_3470_to_assign_stmt_3491__exit__)
      call_stmt_3526_to_assign_stmt_3549__entry__ <-| (if_stmt_3492__exit__)
      if_stmt_3550__entry__ <-| (call_stmt_3526_to_assign_stmt_3549__exit__)
      if_stmt_3588__entry__ <-| (if_stmt_3550__exit__)
      if_stmt_3611__entry__ <-| (if_stmt_3588__exit__)
      assign_stmt_3638__entry__ <-| (if_stmt_3611__exit__)
      if_stmt_3639__entry__ <-| (assign_stmt_3638__exit__)
      if_stmt_3639__exit__ |-> (if_stmt_3463__exit__)
      $P [assign_stmt_3784__entry__] 
      $P [assign_stmt_3784__exit__] 
      $P [if_stmt_3785__entry__] 
      $P [if_stmt_3785__exit__] 
      $P [call_stmt_3951_to_assign_stmt_3999__entry__] 
      $P [call_stmt_3951_to_assign_stmt_3999__exit__] 
      ::[assign_stmt_3784] 
      {
        // start: WAR dependencies for readBufferDataPortCheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for readBufferDataPortCheck
        // start:  			$volatile readBufferDataPortCheck := (address == 32 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1304
        // volatile! 
        // Source expression
        // (address == 32 )
        // address
        // Target expression
        // (as target) readBufferDataPortCheck
        // start: WAR dependencies for readBufferDataPortCheck
        // ignored out-of-scope w_root 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
        // done: WAR dependencies for readBufferDataPortCheck
        // end:  			$volatile readBufferDataPortCheck := (address == 32 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_3784__entry__ |-> (assign_stmt_3784)
      assign_stmt_3784__exit__ <-| (assign_stmt_3784)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3785_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3785__entry__ |-> (if_stmt_3785_dead_link)
      if_stmt_3785__exit__ <-| (if_stmt_3785_dead_link)
      ;;[if_stmt_3785_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ((readBufferDataPortCheck == 1 ) & (rxBufferPointer != 0 ))
        ;;[AND_u1_u1_3792] 
        {
          // binary expression 
          ||[AND_u1_u1_3792_inputs] 
          {
            // (readBufferDataPortCheck == 1 )
            ;;[EQ_u1_u1_3788] 
            {
              // binary expression 
              ||[EQ_u1_u1_3788_inputs] 
              {
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
            // (rxBufferPointer != 0 )
            ;;[NEQ_u10_u1_3791] 
            {
              // binary expression 
              ||[NEQ_u10_u1_3791_inputs] 
              {
                ;;[LOAD_rxBufferPointer_3789] 
                {
                  // load 
                  ;;[LOAD_rxBufferPointer_3789_read] 
                  {
                    ||[word_access] 
                    {
                      ;;[word_access_0_sample] 
                      {
                        $T [rr] $T [ra] 
                      }
                      ;;[word_access_0_update] 
                      {
                        $T [cr] $T [ca]
                      }
                    }
                    $T [merge_req] $T [merge_ack]
                  }
                }
              }
              // flow-through
              ;;[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3785__entry__ |-> (if_stmt_3785_eval_test)
      $P [AND_u1_u1_3792_place]
      AND_u1_u1_3792_place <-| (if_stmt_3785_eval_test)
      ;;[if_stmt_3785_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3785_else_link] 
      {
        $T [else_choice_transition] 
      }
      AND_u1_u1_3792_place |-> (if_stmt_3785_if_link if_stmt_3785_else_link)
      $P [merge_stmt_3793__entry__] 
      $P [merge_stmt_3793__exit__] 
      $P [assign_stmt_3802_to_assign_stmt_3812__entry__] 
      $P [assign_stmt_3802_to_assign_stmt_3812__exit__] 
      $P [if_stmt_3813__entry__] 
      $P [if_stmt_3813__exit__] 
      $P [assign_stmt_3823_to_assign_stmt_3832__entry__] 
      $P [assign_stmt_3823_to_assign_stmt_3832__exit__] 
      $P [if_stmt_3833__entry__] 
      $P [if_stmt_3833__exit__] 
      ::[assign_stmt_3802_to_assign_stmt_3812] 
      {
        // start:  			tempBuf2 := dataBufferRx $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1310
        // Source expression
        // dataBufferRx
        $T[RPIPE_dataBufferRx_3801_sample_start_] 
        $T[RPIPE_dataBufferRx_3801_sample_completed_] 
        $T[RPIPE_dataBufferRx_3801_update_start_] 
        $T[RPIPE_dataBufferRx_3801_update_completed_] 
        ;;[RPIPE_dataBufferRx_3801_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_dataBufferRx_3801_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_dataBufferRx_3801_sample_start_ &-> (RPIPE_dataBufferRx_3801_Sample)
        RPIPE_dataBufferRx_3801_sample_completed_ <-& (RPIPE_dataBufferRx_3801_Sample)
        RPIPE_dataBufferRx_3801_update_start_ <-& (RPIPE_dataBufferRx_3801_sample_completed_)
        RPIPE_dataBufferRx_3801_update_start_ &-> (RPIPE_dataBufferRx_3801_Update)
        RPIPE_dataBufferRx_3801_update_completed_ <-& (RPIPE_dataBufferRx_3801_Update)
        // Target expression
        // (as target) tempBuf2
        // start: WAR dependencies for tempBuf2
        // done: WAR dependencies for tempBuf2
        // end:  			tempBuf2 := dataBufferRx $buffering 1// bits of buffering = 8. 
        // start: 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
        //  file .Aa/sdhc.opt.aa, line 1311
        $T[call_stmt_3807_sample_start_] 
        $T[call_stmt_3807_sample_completed_] 
        $T[call_stmt_3807_update_start_] 
        $T[call_stmt_3807_update_completed_] 
        // Call input argument 0
        // (32  + D)
        // D
        // Call input argument 1
        // tempBuf2
        // start: Forward dependencies from (32  + D) to transition call_stmt_3807_sample_start_
        // done: Forward dependencies from (32  + D) to transition call_stmt_3807_sample_start_
        // start: Forward dependencies from tempBuf2 to transition call_stmt_3807_sample_start_
        call_stmt_3807_sample_start_ <-& (RPIPE_dataBufferRx_3801_update_completed_)
        // done: Forward dependencies from tempBuf2 to transition call_stmt_3807_sample_start_
        ;;[call_stmt_3807_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3807_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3807_sample_start_ &-> (call_stmt_3807_Sample)
        call_stmt_3807_sample_completed_ <-& (call_stmt_3807_Sample)
        call_stmt_3807_sample_completed_ &-> ($null)
        call_stmt_3807_update_start_ &-> (call_stmt_3807_Update)
        call_stmt_3807_update_completed_ <-& (call_stmt_3807_Update)
        // end: 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
        // start: WAR dependencies for next_D
        // ignored out-of-scope w_root 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
        // type of target is $uint<8>
        // done: WAR dependencies for next_D
        // start:  			$volatile next_D := (D + 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1312
        // volatile! 
        // Source expression
        // (D + 1 )
        // D
        // Target expression
        // (as target) next_D
        // start: WAR dependencies for next_D
        // ignored out-of-scope w_root 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
        // type of target is $uint<8>
        // done: WAR dependencies for next_D
        // end:  			$volatile next_D := (D + 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3807 store
        // pipe read/write dependencies for pipe dataBufferRx
        // read-dependencies for pipe dataBufferRx
        // write-dependencies for pipe dataBufferRx
        // signal write dependencies for dataBufferRx
      }
      assign_stmt_3802_to_assign_stmt_3812__entry__ |-> (assign_stmt_3802_to_assign_stmt_3812)
      assign_stmt_3802_to_assign_stmt_3812__exit__ <-| (assign_stmt_3802_to_assign_stmt_3812)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3813_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3813__entry__ |-> (if_stmt_3813_dead_link)
      if_stmt_3813__exit__ <-| (if_stmt_3813_dead_link)
      ;;[if_stmt_3813_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (next_D < 4 )
        ;;[ULT_u8_u1_3816] 
        {
          // binary expression 
          ||[ULT_u8_u1_3816_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3813__entry__ |-> (if_stmt_3813_eval_test)
      $P [ULT_u8_u1_3816_place]
      ULT_u8_u1_3816_place <-| (if_stmt_3813_eval_test)
      ;;[if_stmt_3813_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3813_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_3816_place |-> (if_stmt_3813_if_link if_stmt_3813_else_link)
      $P [loopBufferWrite]
      loopBufferWrite <-| (if_stmt_3813_if_link)
      if_stmt_3813__exit__ <-| (if_stmt_3813_else_link)
      ::[assign_stmt_3823_to_assign_stmt_3832] 
      {
        // start:  			rxBufferPointer := (rxBufferPointer - 4 ) $buffering 1// bits of buffering = 10. 
        //  file .Aa/sdhc.opt.aa, line 1316
        // Source expression
        // (rxBufferPointer - 4 )
        $T[SUB_u10_u10_3822_sample_start_] 
        $T[SUB_u10_u10_3822_sample_completed_] 
        $T[SUB_u10_u10_3822_update_start_] 
        $T[SUB_u10_u10_3822_update_completed_] 
        // rxBufferPointer
        $T[LOAD_rxBufferPointer_3820_sample_start_] 
        $T[LOAD_rxBufferPointer_3820_sample_completed_] 
        $T[LOAD_rxBufferPointer_3820_update_start_] 
        $T[LOAD_rxBufferPointer_3820_update_completed_] 
        $T[LOAD_rxBufferPointer_3820_word_address_calculated] 
        $T[LOAD_rxBufferPointer_3820_root_address_calculated] 
        LOAD_rxBufferPointer_3820_word_address_calculated <-& (LOAD_rxBufferPointer_3820_root_address_calculated)
        ;;[LOAD_rxBufferPointer_3820_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_rxBufferPointer_3820_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_rxBufferPointer_3820_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_rxBufferPointer_3820_sample_start_ <-& (LOAD_rxBufferPointer_3820_word_address_calculated)
        LOAD_rxBufferPointer_3820_sample_start_ &-> (LOAD_rxBufferPointer_3820_Sample)
        LOAD_rxBufferPointer_3820_sample_completed_ <-& (LOAD_rxBufferPointer_3820_Sample)
        LOAD_rxBufferPointer_3820_sample_completed_ &-> ($null)
        LOAD_rxBufferPointer_3820_update_start_ &-> (LOAD_rxBufferPointer_3820_Update)
        LOAD_rxBufferPointer_3820_update_completed_ <-& (LOAD_rxBufferPointer_3820_Update)
        // start: Forward dependencies from rxBufferPointer to transition SUB_u10_u10_3822_sample_start_
        SUB_u10_u10_3822_sample_start_ <-& (LOAD_rxBufferPointer_3820_update_completed_)
        // done: Forward dependencies from rxBufferPointer to transition SUB_u10_u10_3822_sample_start_
        ;;[SUB_u10_u10_3822_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u10_u10_3822_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u10_u10_3822_sample_start_ &-> (SUB_u10_u10_3822_Sample)
        SUB_u10_u10_3822_sample_completed_ <-& (SUB_u10_u10_3822_Sample)
        SUB_u10_u10_3822_sample_completed_ &-> ($null)
        SUB_u10_u10_3822_update_start_ &-> (SUB_u10_u10_3822_Update)
        SUB_u10_u10_3822_update_completed_ <-& (SUB_u10_u10_3822_Update)
        // Target expression
        // (as target) rxBufferPointer
        $T[STORE_rxBufferPointer_3819_sample_start_] 
        $T[STORE_rxBufferPointer_3819_sample_completed_] 
        $T[STORE_rxBufferPointer_3819_update_start_] 
        $T[STORE_rxBufferPointer_3819_update_completed_] 
        // rxBufferPointer
        $T[STORE_rxBufferPointer_3819_word_address_calculated] 
        $T[STORE_rxBufferPointer_3819_root_address_calculated] 
        STORE_rxBufferPointer_3819_word_address_calculated <-& (STORE_rxBufferPointer_3819_root_address_calculated)
        ;;[STORE_rxBufferPointer_3819_Sample] 
        {
          ;;[STORE_rxBufferPointer_3819_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_rxBufferPointer_3819_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_rxBufferPointer_3819_sample_start_ <-& (STORE_rxBufferPointer_3819_word_address_calculated)
        STORE_rxBufferPointer_3819_sample_start_ &-> (STORE_rxBufferPointer_3819_Sample)
        STORE_rxBufferPointer_3819_sample_completed_ <-& (STORE_rxBufferPointer_3819_Sample)
        STORE_rxBufferPointer_3819_sample_completed_ &-> ($null)
        STORE_rxBufferPointer_3819_update_start_ &-> (STORE_rxBufferPointer_3819_Update)
        STORE_rxBufferPointer_3819_update_completed_ <-& (STORE_rxBufferPointer_3819_Update)
        // start: Forward dependencies from (rxBufferPointer - 4 ) to transition STORE_rxBufferPointer_3819_sample_start_
        STORE_rxBufferPointer_3819_sample_start_ <-& (SUB_u10_u10_3822_update_completed_)
        // done: Forward dependencies from (rxBufferPointer - 4 ) to transition STORE_rxBufferPointer_3819_sample_start_
        // end:  			rxBufferPointer := (rxBufferPointer - 4 ) $buffering 1// bits of buffering = 10. 
        // start: 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
        //  file .Aa/sdhc.opt.aa, line 1317
        $T[call_stmt_3826_sample_start_] 
        $T[call_stmt_3826_sample_completed_] 
        $T[call_stmt_3826_update_start_] 
        $T[call_stmt_3826_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3826_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3826_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3826_sample_start_ &-> (call_stmt_3826_Sample)
        call_stmt_3826_sample_completed_ <-& (call_stmt_3826_Sample)
        call_stmt_3826_sample_completed_ &-> ($null)
        call_stmt_3826_update_start_ &-> (call_stmt_3826_Update)
        call_stmt_3826_update_completed_ <-& (call_stmt_3826_Update)
        // Call output argument 0
        // (as target) transferRegVal2
        // start: WAR dependencies for transferRegVal2
        // done: WAR dependencies for transferRegVal2
        // end: 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
        // start:  			singleMultipleReadBlock := (  $bitreduce |  (transferRegVal2 & _h20 ) ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1318
        // Source expression
        // (  $bitreduce |  (transferRegVal2 & _h20 ) )
        $T[BITREDUCEOR_u8_u1_3831_sample_start_] 
        $T[BITREDUCEOR_u8_u1_3831_sample_completed_] 
        $T[BITREDUCEOR_u8_u1_3831_update_start_] 
        $T[BITREDUCEOR_u8_u1_3831_update_completed_] 
        // (transferRegVal2 & _h20 )
        // transferRegVal2
        // start: Forward dependencies from (transferRegVal2 & _h20 ) to transition BITREDUCEOR_u8_u1_3831_sample_start_
        BITREDUCEOR_u8_u1_3831_sample_start_ <-& (call_stmt_3826_update_completed_)
        // done: Forward dependencies from (transferRegVal2 & _h20 ) to transition BITREDUCEOR_u8_u1_3831_sample_start_
        ;;[BITREDUCEOR_u8_u1_3831_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[BITREDUCEOR_u8_u1_3831_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        BITREDUCEOR_u8_u1_3831_sample_start_ &-> (BITREDUCEOR_u8_u1_3831_Sample)
        BITREDUCEOR_u8_u1_3831_sample_completed_ <-& (BITREDUCEOR_u8_u1_3831_Sample)
        BITREDUCEOR_u8_u1_3831_sample_completed_ &-> ($null)
        BITREDUCEOR_u8_u1_3831_update_start_ &-> (BITREDUCEOR_u8_u1_3831_Update)
        BITREDUCEOR_u8_u1_3831_update_completed_ <-& (BITREDUCEOR_u8_u1_3831_Update)
        // Target expression
        // (as target) singleMultipleReadBlock
        // start: WAR dependencies for singleMultipleReadBlock
        // done: WAR dependencies for singleMultipleReadBlock
        // end:  			singleMultipleReadBlock := (  $bitreduce |  (transferRegVal2 & _h20 ) ) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // memory-space  memory_space_7
        //  LOAD_rxBufferPointer_3820 load
        //  STORE_rxBufferPointer_3819 store
        $T [LOAD_rxBufferPointer_3820_STORE_rxBufferPointer_3819_delay] $delay
        // LOAD_rxBufferPointer_3820(load) -> STORE_rxBufferPointer_3819(store)
        STORE_rxBufferPointer_3819_sample_start_ <-& (LOAD_rxBufferPointer_3820_STORE_rxBufferPointer_3819_delay)
        LOAD_rxBufferPointer_3820_STORE_rxBufferPointer_3819_delay <-& (LOAD_rxBufferPointer_3820_sample_completed_)
        // memory-space  memory_space_8
        //  call_stmt_3826 load
      }
      assign_stmt_3823_to_assign_stmt_3832__entry__ |-> (assign_stmt_3823_to_assign_stmt_3832)
      assign_stmt_3823_to_assign_stmt_3832__exit__ <-| (assign_stmt_3823_to_assign_stmt_3832)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3833_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3833__entry__ |-> (if_stmt_3833_dead_link)
      if_stmt_3833__exit__ <-| (if_stmt_3833_dead_link)
      ;;[if_stmt_3833_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (rxBufferPointer == 0 )
        ;;[EQ_u10_u1_3836] 
        {
          // binary expression 
          ||[EQ_u10_u1_3836_inputs] 
          {
            ;;[LOAD_rxBufferPointer_3834] 
            {
              // load 
              ;;[LOAD_rxBufferPointer_3834_read] 
              {
                ||[word_access] 
                {
                  ;;[word_access_0_sample] 
                  {
                    $T [rr] $T [ra] 
                  }
                  ;;[word_access_0_update] 
                  {
                    $T [cr] $T [ca]
                  }
                }
                $T [merge_req] $T [merge_ack]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3833__entry__ |-> (if_stmt_3833_eval_test)
      $P [EQ_u10_u1_3836_place]
      EQ_u10_u1_3836_place <-| (if_stmt_3833_eval_test)
      ;;[if_stmt_3833_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3833_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u10_u1_3836_place |-> (if_stmt_3833_if_link if_stmt_3833_else_link)
      $P [call_stmt_3839_to_call_stmt_3844__entry__] 
      $P [call_stmt_3839_to_call_stmt_3844__exit__] 
      $P [if_stmt_3845__entry__] 
      $P [if_stmt_3845__exit__] 
      ::[call_stmt_3839_to_call_stmt_3844] 
      {
        // start: 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
        //  file .Aa/sdhc.opt.aa, line 1320
        $T[call_stmt_3839_sample_start_] 
        $T[call_stmt_3839_sample_completed_] 
        $T[call_stmt_3839_update_start_] 
        $T[call_stmt_3839_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_3839_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3839_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3839_sample_start_ &-> (call_stmt_3839_Sample)
        call_stmt_3839_sample_completed_ <-& (call_stmt_3839_Sample)
        call_stmt_3839_sample_completed_ &-> ($null)
        call_stmt_3839_update_start_ &-> (call_stmt_3839_Update)
        call_stmt_3839_update_completed_ <-& (call_stmt_3839_Update)
        // Call output argument 0
        // (as target) tempPresentState_1_4
        // start: WAR dependencies for tempPresentState_1_4
        // done: WAR dependencies for tempPresentState_1_4
        // end: 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
        // start: 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
        //  file .Aa/sdhc.opt.aa, line 1321
        $T[call_stmt_3844_sample_start_] 
        $T[call_stmt_3844_sample_completed_] 
        $T[call_stmt_3844_update_start_] 
        $T[call_stmt_3844_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // (tempPresentState_1_4 & _hf7 )
        // tempPresentState_1_4
        // start: Forward dependencies from (tempPresentState_1_4 & _hf7 ) to transition call_stmt_3844_sample_start_
        call_stmt_3844_sample_start_ <-& (call_stmt_3839_update_completed_)
        // done: Forward dependencies from (tempPresentState_1_4 & _hf7 ) to transition call_stmt_3844_sample_start_
        ;;[call_stmt_3844_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3844_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3844_sample_start_ &-> (call_stmt_3844_Sample)
        call_stmt_3844_sample_completed_ <-& (call_stmt_3844_Sample)
        call_stmt_3844_sample_completed_ &-> ($null)
        call_stmt_3844_update_start_ &-> (call_stmt_3844_Update)
        call_stmt_3844_update_completed_ <-& (call_stmt_3844_Update)
        // end: 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3839 load
        //  call_stmt_3844 store
        $T [call_stmt_3839_call_stmt_3844_delay] $delay
        // call_stmt_3839(load) -> call_stmt_3844(store)
        call_stmt_3844_sample_start_ <-& (call_stmt_3839_call_stmt_3844_delay)
        call_stmt_3839_call_stmt_3844_delay <-& (call_stmt_3839_update_completed_)
      }
      call_stmt_3839_to_call_stmt_3844__entry__ |-> (call_stmt_3839_to_call_stmt_3844)
      call_stmt_3839_to_call_stmt_3844__exit__ <-| (call_stmt_3839_to_call_stmt_3844)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3845_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3845__entry__ |-> (if_stmt_3845_dead_link)
      if_stmt_3845__exit__ <-| (if_stmt_3845_dead_link)
      ;;[if_stmt_3845_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (singleMultipleReadBlock == 1 )
        ;;[EQ_u1_u1_3848] 
        {
          // binary expression 
          ||[EQ_u1_u1_3848_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3845__entry__ |-> (if_stmt_3845_eval_test)
      $P [EQ_u1_u1_3848_place]
      EQ_u1_u1_3848_place <-| (if_stmt_3845_eval_test)
      ;;[if_stmt_3845_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3845_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_3848_place |-> (if_stmt_3845_if_link if_stmt_3845_else_link)
      $P [assign_stmt_3856__entry__] 
      $P [assign_stmt_3856__exit__] 
      $P [merge_stmt_3857__entry__] 
      $P [merge_stmt_3857__exit__] 
      $P [call_stmt_3872_to_assign_stmt_3883__entry__] 
      $P [call_stmt_3872_to_assign_stmt_3883__exit__] 
      $P [if_stmt_3884__entry__] 
      $P [if_stmt_3884__exit__] 
      $P [assign_stmt_3894_to_assign_stmt_3899__entry__] 
      $P [assign_stmt_3894_to_assign_stmt_3899__exit__] 
      $P [if_stmt_3900__entry__] 
      $P [if_stmt_3900__exit__] 
      ::[assign_stmt_3856] 
      {
        // start:  			readBlockCountEnable := ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1323
        // Source expression
        // ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock)
        $T[AND_u1_u1_3855_sample_start_] 
        $T[AND_u1_u1_3855_sample_completed_] 
        $T[AND_u1_u1_3855_update_start_] 
        $T[AND_u1_u1_3855_update_completed_] 
        // (  $bitreduce |  (transferRegVal2 & _h02 ) )
        // (transferRegVal2 & _h02 )
        // transferRegVal2
        // singleMultipleBlock
        // start: Forward dependencies from (  $bitreduce |  (transferRegVal2 & _h02 ) ) to transition AND_u1_u1_3855_sample_start_
        // done: Forward dependencies from (  $bitreduce |  (transferRegVal2 & _h02 ) ) to transition AND_u1_u1_3855_sample_start_
        // start: Forward dependencies from singleMultipleBlock to transition AND_u1_u1_3855_sample_start_
        // done: Forward dependencies from singleMultipleBlock to transition AND_u1_u1_3855_sample_start_
        ;;[AND_u1_u1_3855_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u1_u1_3855_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u1_u1_3855_sample_start_ &-> (AND_u1_u1_3855_Sample)
        AND_u1_u1_3855_sample_completed_ <-& (AND_u1_u1_3855_Sample)
        AND_u1_u1_3855_sample_completed_ &-> ($null)
        AND_u1_u1_3855_update_start_ &-> (AND_u1_u1_3855_Update)
        AND_u1_u1_3855_update_completed_ <-& (AND_u1_u1_3855_Update)
        // Target expression
        // (as target) readBlockCountEnable
        // start: WAR dependencies for readBlockCountEnable
        // done: WAR dependencies for readBlockCountEnable
        // end:  			readBlockCountEnable := ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
      }
      assign_stmt_3856__entry__ |-> (assign_stmt_3856)
      assign_stmt_3856__exit__ <-| (assign_stmt_3856)
      ::[call_stmt_3872_to_assign_stmt_3883] 
      {
        // start: 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1330
        $T[call_stmt_3872_sample_start_] 
        $T[call_stmt_3872_sample_completed_] 
        $T[call_stmt_3872_update_start_] 
        $T[call_stmt_3872_update_completed_] 
        // Call input argument 0
        // (6  + E)
        // E
        // start: Forward dependencies from (6  + E) to transition call_stmt_3872_sample_start_
        // done: Forward dependencies from (6  + E) to transition call_stmt_3872_sample_start_
        ;;[call_stmt_3872_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3872_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3872_sample_start_ &-> (call_stmt_3872_Sample)
        call_stmt_3872_sample_completed_ <-& (call_stmt_3872_Sample)
        call_stmt_3872_sample_completed_ &-> ($null)
        call_stmt_3872_update_start_ &-> (call_stmt_3872_Update)
        call_stmt_3872_update_completed_ <-& (call_stmt_3872_Update)
        // Call output argument 0
        // (as target) readnewBlockCountTemp
        // start: WAR dependencies for readnewBlockCountTemp
        // done: WAR dependencies for readnewBlockCountTemp
        // end: 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
        // start: WAR dependencies for readBlockCount
        // ignored out-of-scope w_root 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
        // type of target is $uint<16>
        // done: WAR dependencies for readBlockCount
        // start:  			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1331
        // volatile! 
        // Source expression
        // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
        // ( $slice readNewBlockCount 7 0 ) 
        // readNewBlockCount
        // readnewBlockCountTemp
        // Target expression
        // (as target) readBlockCount
        // start: WAR dependencies for readBlockCount
        // ignored out-of-scope w_root 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
        // type of target is $uint<16>
        // done: WAR dependencies for readBlockCount
        // end:  			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
        // start: WAR dependencies for next_E
        // ignored out-of-scope w_root 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
        // type of target is $uint<8>
        // done: WAR dependencies for next_E
        // start:  			$volatile next_E := (E - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1332
        // volatile! 
        // Source expression
        // (E - 1 )
        // E
        // Target expression
        // (as target) next_E
        // start: WAR dependencies for next_E
        // ignored out-of-scope w_root 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
        // type of target is $uint<8>
        // done: WAR dependencies for next_E
        // end:  			$volatile next_E := (E - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3872 load
      }
      call_stmt_3872_to_assign_stmt_3883__entry__ |-> (call_stmt_3872_to_assign_stmt_3883)
      call_stmt_3872_to_assign_stmt_3883__exit__ <-| (call_stmt_3872_to_assign_stmt_3883)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3884_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3884__entry__ |-> (if_stmt_3884_dead_link)
      if_stmt_3884__exit__ <-| (if_stmt_3884_dead_link)
      ;;[if_stmt_3884_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (E != 0 )
        ;;[NEQ_u8_u1_3887] 
        {
          // binary expression 
          ||[NEQ_u8_u1_3887_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3884__entry__ |-> (if_stmt_3884_eval_test)
      $P [NEQ_u8_u1_3887_place]
      NEQ_u8_u1_3887_place <-| (if_stmt_3884_eval_test)
      ;;[if_stmt_3884_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3884_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_3887_place |-> (if_stmt_3884_if_link if_stmt_3884_else_link)
      $P [loopBlock2]
      loopBlock2 <-| (if_stmt_3884_if_link)
      if_stmt_3884__exit__ <-| (if_stmt_3884_else_link)
      ::[assign_stmt_3894_to_assign_stmt_3899] 
      {
        // start:  			readBlockCountTrue := (readBlockCount == 1 ) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1336
        // Source expression
        // (readBlockCount == 1 )
        $T[EQ_u16_u1_3893_sample_start_] 
        $T[EQ_u16_u1_3893_sample_completed_] 
        $T[EQ_u16_u1_3893_update_start_] 
        $T[EQ_u16_u1_3893_update_completed_] 
        // readBlockCount
        // start: Forward dependencies from readBlockCount to transition EQ_u16_u1_3893_sample_start_
        // done: Forward dependencies from readBlockCount to transition EQ_u16_u1_3893_sample_start_
        ;;[EQ_u16_u1_3893_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u16_u1_3893_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u16_u1_3893_sample_start_ &-> (EQ_u16_u1_3893_Sample)
        EQ_u16_u1_3893_sample_completed_ <-& (EQ_u16_u1_3893_Sample)
        EQ_u16_u1_3893_sample_completed_ &-> ($null)
        EQ_u16_u1_3893_update_start_ &-> (EQ_u16_u1_3893_Update)
        EQ_u16_u1_3893_update_completed_ <-& (EQ_u16_u1_3893_Update)
        // Target expression
        // (as target) readBlockCountTrue
        // start: WAR dependencies for readBlockCountTrue
        // done: WAR dependencies for readBlockCountTrue
        // end:  			readBlockCountTrue := (readBlockCount == 1 ) $buffering 1// bits of buffering = 1. 
        // start:  			readLastBlock := (readBlockCountEnable & readBlockCountTrue) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1337
        // Source expression
        // (readBlockCountEnable & readBlockCountTrue)
        $T[AND_u1_u1_3898_sample_start_] 
        $T[AND_u1_u1_3898_sample_completed_] 
        $T[AND_u1_u1_3898_update_start_] 
        $T[AND_u1_u1_3898_update_completed_] 
        // readBlockCountEnable
        // readBlockCountTrue
        // start: Forward dependencies from readBlockCountEnable to transition AND_u1_u1_3898_sample_start_
        // done: Forward dependencies from readBlockCountEnable to transition AND_u1_u1_3898_sample_start_
        // start: Forward dependencies from readBlockCountTrue to transition AND_u1_u1_3898_sample_start_
        AND_u1_u1_3898_sample_start_ <-& (EQ_u16_u1_3893_update_completed_)
        // done: Forward dependencies from readBlockCountTrue to transition AND_u1_u1_3898_sample_start_
        ;;[AND_u1_u1_3898_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u1_u1_3898_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u1_u1_3898_sample_start_ &-> (AND_u1_u1_3898_Sample)
        AND_u1_u1_3898_sample_completed_ <-& (AND_u1_u1_3898_Sample)
        AND_u1_u1_3898_sample_completed_ &-> ($null)
        AND_u1_u1_3898_update_start_ &-> (AND_u1_u1_3898_Update)
        AND_u1_u1_3898_update_completed_ <-& (AND_u1_u1_3898_Update)
        // Target expression
        // (as target) readLastBlock
        // start: WAR dependencies for readLastBlock
        // done: WAR dependencies for readLastBlock
        // end:  			readLastBlock := (readBlockCountEnable & readBlockCountTrue) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
      }
      assign_stmt_3894_to_assign_stmt_3899__entry__ |-> (assign_stmt_3894_to_assign_stmt_3899)
      assign_stmt_3894_to_assign_stmt_3899__exit__ <-| (assign_stmt_3894_to_assign_stmt_3899)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_3900_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_3900__entry__ |-> (if_stmt_3900_dead_link)
      if_stmt_3900__exit__ <-| (if_stmt_3900_dead_link)
      ;;[if_stmt_3900_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (readBlockCount != 0 )
        ;;[NEQ_u16_u1_3903] 
        {
          // binary expression 
          ||[NEQ_u16_u1_3903_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_3900__entry__ |-> (if_stmt_3900_eval_test)
      $P [NEQ_u16_u1_3903_place]
      NEQ_u16_u1_3903_place <-| (if_stmt_3900_eval_test)
      ;;[if_stmt_3900_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_3900_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u16_u1_3903_place |-> (if_stmt_3900_if_link if_stmt_3900_else_link)
      $P [assign_stmt_3908_to_assign_stmt_3942__entry__] 
      $P [assign_stmt_3908_to_assign_stmt_3942__exit__] 
      ::[assign_stmt_3908_to_assign_stmt_3942] 
      {
        // start:  			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
        //  file .Aa/sdhc.opt.aa, line 1339
        // Source expression
        // (readBlockCount - 1 )
        $T[SUB_u16_u16_3907_sample_start_] 
        $T[SUB_u16_u16_3907_sample_completed_] 
        $T[SUB_u16_u16_3907_update_start_] 
        $T[SUB_u16_u16_3907_update_completed_] 
        // readBlockCount
        // start: Forward dependencies from readBlockCount to transition SUB_u16_u16_3907_sample_start_
        // done: Forward dependencies from readBlockCount to transition SUB_u16_u16_3907_sample_start_
        ;;[SUB_u16_u16_3907_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[SUB_u16_u16_3907_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        SUB_u16_u16_3907_sample_start_ &-> (SUB_u16_u16_3907_Sample)
        SUB_u16_u16_3907_sample_completed_ <-& (SUB_u16_u16_3907_Sample)
        SUB_u16_u16_3907_sample_completed_ &-> ($null)
        SUB_u16_u16_3907_update_start_ &-> (SUB_u16_u16_3907_Update)
        SUB_u16_u16_3907_update_completed_ <-& (SUB_u16_u16_3907_Update)
        // Target expression
        // (as target) newReadBlockCount
        // start: WAR dependencies for newReadBlockCount
        // done: WAR dependencies for newReadBlockCount
        // end:  			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
        // start: 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
        //  file .Aa/sdhc.opt.aa, line 1340
        $T[call_stmt_3911_sample_start_] 
        $T[call_stmt_3911_sample_completed_] 
        $T[call_stmt_3911_update_start_] 
        $T[call_stmt_3911_update_completed_] 
        // Call input argument 0
        // readLastBlock
        // start: Forward dependencies from readLastBlock to transition call_stmt_3911_sample_start_
        // done: Forward dependencies from readLastBlock to transition call_stmt_3911_sample_start_
        ;;[call_stmt_3911_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3911_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3911_sample_start_ &-> (call_stmt_3911_Sample)
        call_stmt_3911_sample_completed_ <-& (call_stmt_3911_Sample)
        call_stmt_3911_sample_completed_ &-> ($null)
        call_stmt_3911_update_start_ &-> (call_stmt_3911_Update)
        call_stmt_3911_update_completed_ <-& (call_stmt_3911_Update)
        // Call output argument 0
        // (as target) dataErrorInterruptStatusVar
        // start: WAR dependencies for dataErrorInterruptStatusVar
        // done: WAR dependencies for dataErrorInterruptStatusVar
        // end: 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
        // start:  			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1341
        // Target expression
        // (as target) dataRxEnrty1
        $T[STORE_dataRxEnrty1_3912_sample_start_] 
        $T[STORE_dataRxEnrty1_3912_sample_completed_] 
        $T[STORE_dataRxEnrty1_3912_update_start_] 
        $T[STORE_dataRxEnrty1_3912_update_completed_] 
        // dataRxEnrty1
        $T[STORE_dataRxEnrty1_3912_word_address_calculated] 
        $T[STORE_dataRxEnrty1_3912_root_address_calculated] 
        STORE_dataRxEnrty1_3912_word_address_calculated <-& (STORE_dataRxEnrty1_3912_root_address_calculated)
        ;;[STORE_dataRxEnrty1_3912_Sample] 
        {
          ;;[STORE_dataRxEnrty1_3912_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty1_3912_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty1_3912_sample_start_ <-& (STORE_dataRxEnrty1_3912_word_address_calculated)
        STORE_dataRxEnrty1_3912_sample_start_ &-> (STORE_dataRxEnrty1_3912_Sample)
        STORE_dataRxEnrty1_3912_sample_completed_ <-& (STORE_dataRxEnrty1_3912_Sample)
        STORE_dataRxEnrty1_3912_sample_completed_ &-> ($null)
        STORE_dataRxEnrty1_3912_update_start_ &-> (STORE_dataRxEnrty1_3912_Update)
        STORE_dataRxEnrty1_3912_update_completed_ <-& (STORE_dataRxEnrty1_3912_Update)
        // end:  			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
        // start:  			dataRxEnrty2 := ONE_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1342
        // Target expression
        // (as target) dataRxEnrty2
        $T[STORE_dataRxEnrty2_3915_sample_start_] 
        $T[STORE_dataRxEnrty2_3915_sample_completed_] 
        $T[STORE_dataRxEnrty2_3915_update_start_] 
        $T[STORE_dataRxEnrty2_3915_update_completed_] 
        // dataRxEnrty2
        $T[STORE_dataRxEnrty2_3915_word_address_calculated] 
        $T[STORE_dataRxEnrty2_3915_root_address_calculated] 
        STORE_dataRxEnrty2_3915_word_address_calculated <-& (STORE_dataRxEnrty2_3915_root_address_calculated)
        ;;[STORE_dataRxEnrty2_3915_Sample] 
        {
          ;;[STORE_dataRxEnrty2_3915_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataRxEnrty2_3915_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataRxEnrty2_3915_sample_start_ <-& (STORE_dataRxEnrty2_3915_word_address_calculated)
        STORE_dataRxEnrty2_3915_sample_start_ &-> (STORE_dataRxEnrty2_3915_Sample)
        STORE_dataRxEnrty2_3915_sample_completed_ <-& (STORE_dataRxEnrty2_3915_Sample)
        STORE_dataRxEnrty2_3915_sample_completed_ &-> ($null)
        STORE_dataRxEnrty2_3915_update_start_ &-> (STORE_dataRxEnrty2_3915_Update)
        STORE_dataRxEnrty2_3915_update_completed_ <-& (STORE_dataRxEnrty2_3915_Update)
        // end:  			dataRxEnrty2 := ONE_1 $buffering 1// bits of buffering = 1. 
        // start: 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 1343
        $T[call_stmt_3921_sample_start_] 
        $T[call_stmt_3921_sample_completed_] 
        $T[call_stmt_3921_update_start_] 
        $T[call_stmt_3921_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice newReadBlockCount 15 8 ) 
        // newReadBlockCount
        // start: Forward dependencies from ( $slice newReadBlockCount 15 8 )  to transition call_stmt_3921_sample_start_
        call_stmt_3921_sample_start_ <-& (SUB_u16_u16_3907_update_completed_)
        // done: Forward dependencies from ( $slice newReadBlockCount 15 8 )  to transition call_stmt_3921_sample_start_
        ;;[call_stmt_3921_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3921_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3921_sample_start_ &-> (call_stmt_3921_Sample)
        call_stmt_3921_sample_completed_ <-& (call_stmt_3921_Sample)
        call_stmt_3921_sample_completed_ &-> ($null)
        call_stmt_3921_update_start_ &-> (call_stmt_3921_Update)
        call_stmt_3921_update_completed_ <-& (call_stmt_3921_Update)
        // end: 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
        // start: 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
        //  file .Aa/sdhc.opt.aa, line 1344
        $T[call_stmt_3925_sample_start_] 
        $T[call_stmt_3925_sample_completed_] 
        $T[call_stmt_3925_update_start_] 
        $T[call_stmt_3925_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // ( $slice newReadBlockCount 7 0 ) 
        // newReadBlockCount
        // start: Forward dependencies from ( $slice newReadBlockCount 7 0 )  to transition call_stmt_3925_sample_start_
        call_stmt_3925_sample_start_ <-& (SUB_u16_u16_3907_update_completed_)
        // done: Forward dependencies from ( $slice newReadBlockCount 7 0 )  to transition call_stmt_3925_sample_start_
        ;;[call_stmt_3925_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3925_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3925_sample_start_ &-> (call_stmt_3925_Sample)
        call_stmt_3925_sample_completed_ <-& (call_stmt_3925_Sample)
        call_stmt_3925_sample_completed_ &-> ($null)
        call_stmt_3925_update_start_ &-> (call_stmt_3925_Update)
        call_stmt_3925_update_completed_ <-& (call_stmt_3925_Update)
        // end: 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
        // start:  			readDataTransferComplete := ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1345
        // Source expression
        // ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
        $T[MUX_3931_sample_start_] 
        $T[MUX_3931_sample_completed_] 
        $T[MUX_3931_update_start_] 
        $T[MUX_3931_update_completed_] 
        // readLastBlock
        // start: Forward dependencies from readLastBlock to transition MUX_3931_sample_start_
        // done: Forward dependencies from readLastBlock to transition MUX_3931_sample_start_
        ;;[MUX_3931_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_3931_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_3931_sample_start_ &-> (MUX_3931_start)
        MUX_3931_sample_completed_ <-& (MUX_3931_start)
        MUX_3931_sample_completed_ &-> ($null)
        MUX_3931_update_start_ &-> (MUX_3931_complete)
        MUX_3931_update_completed_ <-& (MUX_3931_complete)
        // Target expression
        // (as target) readDataTransferComplete
        // start: WAR dependencies for readDataTransferComplete
        // done: WAR dependencies for readDataTransferComplete
        // end:  			readDataTransferComplete := ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // start:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1346
        // Source expression
        // (normalInterruptFlag1 | _h02 )
        $T[OR_u8_u8_3936_sample_start_] 
        $T[OR_u8_u8_3936_sample_completed_] 
        $T[OR_u8_u8_3936_update_start_] 
        $T[OR_u8_u8_3936_update_completed_] 
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_3934_sample_start_] 
        $T[LOAD_normalInterruptFlag1_3934_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_3934_update_start_] 
        $T[LOAD_normalInterruptFlag1_3934_update_completed_] 
        $T[LOAD_normalInterruptFlag1_3934_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_3934_root_address_calculated] 
        LOAD_normalInterruptFlag1_3934_word_address_calculated <-& (LOAD_normalInterruptFlag1_3934_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_3934_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_3934_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_3934_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_3934_sample_start_ <-& (LOAD_normalInterruptFlag1_3934_word_address_calculated)
        LOAD_normalInterruptFlag1_3934_sample_start_ &-> (LOAD_normalInterruptFlag1_3934_Sample)
        LOAD_normalInterruptFlag1_3934_sample_completed_ <-& (LOAD_normalInterruptFlag1_3934_Sample)
        LOAD_normalInterruptFlag1_3934_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_3934_update_start_ &-> (LOAD_normalInterruptFlag1_3934_Update)
        LOAD_normalInterruptFlag1_3934_update_completed_ <-& (LOAD_normalInterruptFlag1_3934_Update)
        // start: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3936_sample_start_
        OR_u8_u8_3936_sample_start_ <-& (LOAD_normalInterruptFlag1_3934_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition OR_u8_u8_3936_sample_start_
        ;;[OR_u8_u8_3936_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3936_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3936_sample_start_ &-> (OR_u8_u8_3936_Sample)
        OR_u8_u8_3936_sample_completed_ <-& (OR_u8_u8_3936_Sample)
        OR_u8_u8_3936_sample_completed_ &-> ($null)
        OR_u8_u8_3936_update_start_ &-> (OR_u8_u8_3936_Update)
        OR_u8_u8_3936_update_completed_ <-& (OR_u8_u8_3936_Update)
        // Target expression
        // (as target) normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3933_sample_start_] 
        $T[STORE_normalInterruptFlag1_3933_sample_completed_] 
        $T[STORE_normalInterruptFlag1_3933_update_start_] 
        $T[STORE_normalInterruptFlag1_3933_update_completed_] 
        // normalInterruptFlag1
        $T[STORE_normalInterruptFlag1_3933_word_address_calculated] 
        $T[STORE_normalInterruptFlag1_3933_root_address_calculated] 
        STORE_normalInterruptFlag1_3933_word_address_calculated <-& (STORE_normalInterruptFlag1_3933_root_address_calculated)
        ;;[STORE_normalInterruptFlag1_3933_Sample] 
        {
          ;;[STORE_normalInterruptFlag1_3933_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_normalInterruptFlag1_3933_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_normalInterruptFlag1_3933_sample_start_ <-& (STORE_normalInterruptFlag1_3933_word_address_calculated)
        STORE_normalInterruptFlag1_3933_sample_start_ &-> (STORE_normalInterruptFlag1_3933_Sample)
        STORE_normalInterruptFlag1_3933_sample_completed_ <-& (STORE_normalInterruptFlag1_3933_Sample)
        STORE_normalInterruptFlag1_3933_sample_completed_ &-> ($null)
        STORE_normalInterruptFlag1_3933_update_start_ &-> (STORE_normalInterruptFlag1_3933_Update)
        STORE_normalInterruptFlag1_3933_update_completed_ <-& (STORE_normalInterruptFlag1_3933_Update)
        // start: Forward dependencies from (normalInterruptFlag1 | _h02 ) to transition STORE_normalInterruptFlag1_3933_sample_start_
        STORE_normalInterruptFlag1_3933_sample_start_ <-& (OR_u8_u8_3936_update_completed_)
        // done: Forward dependencies from (normalInterruptFlag1 | _h02 ) to transition STORE_normalInterruptFlag1_3933_sample_start_
        // end:  			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1347
        // Source expression
        // (errorInterruptFlag1 | _h60 )
        $T[OR_u8_u8_3941_sample_start_] 
        $T[OR_u8_u8_3941_sample_completed_] 
        $T[OR_u8_u8_3941_update_start_] 
        $T[OR_u8_u8_3941_update_completed_] 
        // errorInterruptFlag1
        $T[LOAD_errorInterruptFlag1_3939_sample_start_] 
        $T[LOAD_errorInterruptFlag1_3939_sample_completed_] 
        $T[LOAD_errorInterruptFlag1_3939_update_start_] 
        $T[LOAD_errorInterruptFlag1_3939_update_completed_] 
        $T[LOAD_errorInterruptFlag1_3939_word_address_calculated] 
        $T[LOAD_errorInterruptFlag1_3939_root_address_calculated] 
        LOAD_errorInterruptFlag1_3939_word_address_calculated <-& (LOAD_errorInterruptFlag1_3939_root_address_calculated)
        ;;[LOAD_errorInterruptFlag1_3939_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag1_3939_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag1_3939_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag1_3939_sample_start_ <-& (LOAD_errorInterruptFlag1_3939_word_address_calculated)
        LOAD_errorInterruptFlag1_3939_sample_start_ &-> (LOAD_errorInterruptFlag1_3939_Sample)
        LOAD_errorInterruptFlag1_3939_sample_completed_ <-& (LOAD_errorInterruptFlag1_3939_Sample)
        LOAD_errorInterruptFlag1_3939_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag1_3939_update_start_ &-> (LOAD_errorInterruptFlag1_3939_Update)
        LOAD_errorInterruptFlag1_3939_update_completed_ <-& (LOAD_errorInterruptFlag1_3939_Update)
        // start: Forward dependencies from errorInterruptFlag1 to transition OR_u8_u8_3941_sample_start_
        OR_u8_u8_3941_sample_start_ <-& (LOAD_errorInterruptFlag1_3939_update_completed_)
        // done: Forward dependencies from errorInterruptFlag1 to transition OR_u8_u8_3941_sample_start_
        ;;[OR_u8_u8_3941_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_3941_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_3941_sample_start_ &-> (OR_u8_u8_3941_Sample)
        OR_u8_u8_3941_sample_completed_ <-& (OR_u8_u8_3941_Sample)
        OR_u8_u8_3941_sample_completed_ &-> ($null)
        OR_u8_u8_3941_update_start_ &-> (OR_u8_u8_3941_Update)
        OR_u8_u8_3941_update_completed_ <-& (OR_u8_u8_3941_Update)
        // Target expression
        // (as target) errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3938_sample_start_] 
        $T[STORE_errorInterruptFlag1_3938_sample_completed_] 
        $T[STORE_errorInterruptFlag1_3938_update_start_] 
        $T[STORE_errorInterruptFlag1_3938_update_completed_] 
        // errorInterruptFlag1
        $T[STORE_errorInterruptFlag1_3938_word_address_calculated] 
        $T[STORE_errorInterruptFlag1_3938_root_address_calculated] 
        STORE_errorInterruptFlag1_3938_word_address_calculated <-& (STORE_errorInterruptFlag1_3938_root_address_calculated)
        ;;[STORE_errorInterruptFlag1_3938_Sample] 
        {
          ;;[STORE_errorInterruptFlag1_3938_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_errorInterruptFlag1_3938_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_errorInterruptFlag1_3938_sample_start_ <-& (STORE_errorInterruptFlag1_3938_word_address_calculated)
        STORE_errorInterruptFlag1_3938_sample_start_ &-> (STORE_errorInterruptFlag1_3938_Sample)
        STORE_errorInterruptFlag1_3938_sample_completed_ <-& (STORE_errorInterruptFlag1_3938_Sample)
        STORE_errorInterruptFlag1_3938_sample_completed_ &-> ($null)
        STORE_errorInterruptFlag1_3938_update_start_ &-> (STORE_errorInterruptFlag1_3938_Update)
        STORE_errorInterruptFlag1_3938_update_completed_ <-& (STORE_errorInterruptFlag1_3938_Update)
        // start: Forward dependencies from (errorInterruptFlag1 | _h60 ) to transition STORE_errorInterruptFlag1_3938_sample_start_
        STORE_errorInterruptFlag1_3938_sample_start_ <-& (OR_u8_u8_3941_update_completed_)
        // done: Forward dependencies from (errorInterruptFlag1 | _h60 ) to transition STORE_errorInterruptFlag1_3938_sample_start_
        // end:  			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  STORE_dataRxEnrty1_3912 store
        // memory-space  memory_space_2
        //  STORE_dataRxEnrty2_3915 store
        // memory-space  memory_space_3
        //  LOAD_errorInterruptFlag1_3939 load
        //  STORE_errorInterruptFlag1_3938 store
        $T [LOAD_errorInterruptFlag1_3939_STORE_errorInterruptFlag1_3938_delay] $delay
        // LOAD_errorInterruptFlag1_3939(load) -> STORE_errorInterruptFlag1_3938(store)
        STORE_errorInterruptFlag1_3938_sample_start_ <-& (LOAD_errorInterruptFlag1_3939_STORE_errorInterruptFlag1_3938_delay)
        LOAD_errorInterruptFlag1_3939_STORE_errorInterruptFlag1_3938_delay <-& (LOAD_errorInterruptFlag1_3939_sample_completed_)
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_3934 load
        //  STORE_normalInterruptFlag1_3933 store
        $T [LOAD_normalInterruptFlag1_3934_STORE_normalInterruptFlag1_3933_delay] $delay
        // LOAD_normalInterruptFlag1_3934(load) -> STORE_normalInterruptFlag1_3933(store)
        STORE_normalInterruptFlag1_3933_sample_start_ <-& (LOAD_normalInterruptFlag1_3934_STORE_normalInterruptFlag1_3933_delay)
        LOAD_normalInterruptFlag1_3934_STORE_normalInterruptFlag1_3933_delay <-& (LOAD_normalInterruptFlag1_3934_sample_completed_)
        // memory-space  memory_space_7
        //  call_stmt_3911 store
        // memory-space  memory_space_8
        //  call_stmt_3911 store
        //  call_stmt_3921 store
        $T [call_stmt_3911_call_stmt_3921_delay] $delay
        // call_stmt_3911(store) -> call_stmt_3921(store)
        call_stmt_3921_sample_start_ <-& (call_stmt_3911_call_stmt_3921_delay)
        call_stmt_3911_call_stmt_3921_delay <-& (call_stmt_3911_update_completed_)
        //  call_stmt_3925 store
        $T [call_stmt_3921_call_stmt_3925_delay] $delay
        // call_stmt_3921(store) -> call_stmt_3925(store)
        call_stmt_3925_sample_start_ <-& (call_stmt_3921_call_stmt_3925_delay)
        call_stmt_3921_call_stmt_3925_delay <-& (call_stmt_3921_update_completed_)
        // pipe read/write dependencies for pipe DAT0Rx
        // read-dependencies for pipe DAT0Rx
        // write-dependencies for pipe DAT0Rx
        // signal write dependencies for DAT0Rx
        // pipe read/write dependencies for pipe DAT1Rx
        // read-dependencies for pipe DAT1Rx
        // write-dependencies for pipe DAT1Rx
        // signal write dependencies for DAT1Rx
        // pipe read/write dependencies for pipe DAT2Rx
        // read-dependencies for pipe DAT2Rx
        // write-dependencies for pipe DAT2Rx
        // signal write dependencies for DAT2Rx
        // pipe read/write dependencies for pipe DAT3Rx
        // read-dependencies for pipe DAT3Rx
        // write-dependencies for pipe DAT3Rx
        // signal write dependencies for DAT3Rx
        // pipe read/write dependencies for pipe dataBufferRx
        // read-dependencies for pipe dataBufferRx
        // write-dependencies for pipe dataBufferRx
        // signal write dependencies for dataBufferRx
      }
      assign_stmt_3908_to_assign_stmt_3942__entry__ |-> (assign_stmt_3908_to_assign_stmt_3942)
      assign_stmt_3908_to_assign_stmt_3942__exit__ <-| (assign_stmt_3908_to_assign_stmt_3942)
      assign_stmt_3908_to_assign_stmt_3942__entry__ <-| (if_stmt_3900_if_link)
      assign_stmt_3908_to_assign_stmt_3942__exit__ |-> (if_stmt_3900__exit__)
      if_stmt_3900__exit__ <-| (if_stmt_3900_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1324
      ;;[merge_stmt_3857_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3857__entry__ |-> (merge_stmt_3857_dead_link)
      merge_stmt_3857__exit__ <-| (merge_stmt_3857_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1324  --------------------------
      ||[merge_stmt_3857__entry___PhiReq] 
      {
        ;;[phi_stmt_3858] 
        {
          ||[phi_stmt_3858_sources] 
          {
            // sources for 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ONE_8_3860_konst_delay_trans] $delay
          }
          $T [phi_stmt_3858_req] 
        }
        ;;[phi_stmt_3862] 
        {
          ||[phi_stmt_3862_sources] 
          {
            // sources for 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_3865_konst_delay_trans] $delay
          }
          $T [phi_stmt_3862_req] 
        }
      }
      merge_stmt_3857__entry__ |-> (merge_stmt_3857__entry___PhiReq)
      ||[loopBlock2_PhiReq] 
      {
        ;;[phi_stmt_3858] 
        {
          ||[phi_stmt_3858_sources] 
          {
            // sources for 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3858_req] 
        }
        ;;[phi_stmt_3862] 
        {
          ||[phi_stmt_3862_sources] 
          {
            // sources for 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3862_req] 
        }
      }
      loopBlock2 |-> (loopBlock2_PhiReq)
      $P [merge_stmt_3857_PhiReqMerge] 
      merge_stmt_3857_PhiReqMerge <-| ( merge_stmt_3857__entry___PhiReq  loopBlock2_PhiReq )
      ||[merge_stmt_3857_PhiAck] 
      {
        $T [phi_stmt_3858_ack] 
        $T [phi_stmt_3862_ack] 
      }
      merge_stmt_3857_PhiReqMerge |-> (merge_stmt_3857_PhiAck)
      merge_stmt_3857__exit__  <-| (merge_stmt_3857_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1324  --------------------------
      assign_stmt_3856__entry__ <-| (if_stmt_3845_if_link)
      merge_stmt_3857__entry__ <-| (assign_stmt_3856__exit__)
      call_stmt_3872_to_assign_stmt_3883__entry__ <-| (merge_stmt_3857__exit__)
      if_stmt_3884__entry__ <-| (call_stmt_3872_to_assign_stmt_3883__exit__)
      assign_stmt_3894_to_assign_stmt_3899__entry__ <-| (if_stmt_3884__exit__)
      if_stmt_3900__entry__ <-| (assign_stmt_3894_to_assign_stmt_3899__exit__)
      if_stmt_3900__exit__ |-> (if_stmt_3845__exit__)
      if_stmt_3845__exit__ <-| (if_stmt_3845_else_link)
      call_stmt_3839_to_call_stmt_3844__entry__ <-| (if_stmt_3833_if_link)
      if_stmt_3845__entry__ <-| (call_stmt_3839_to_call_stmt_3844__exit__)
      if_stmt_3845__exit__ |-> (if_stmt_3833__exit__)
      if_stmt_3833__exit__ <-| (if_stmt_3833_else_link)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1306
      ;;[merge_stmt_3793_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3793__entry__ |-> (merge_stmt_3793_dead_link)
      merge_stmt_3793__exit__ <-| (merge_stmt_3793_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1306  --------------------------
      ||[merge_stmt_3793__entry___PhiReq] 
      {
        ;;[phi_stmt_3794] 
        {
          ||[phi_stmt_3794_sources] 
          {
            // sources for 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_3797_konst_delay_trans] $delay
          }
          $T [phi_stmt_3794_req] 
        }
      }
      merge_stmt_3793__entry__ |-> (merge_stmt_3793__entry___PhiReq)
      ||[loopBufferWrite_PhiReq] 
      {
        ;;[phi_stmt_3794] 
        {
          ||[phi_stmt_3794_sources] 
          {
            // sources for 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_3794_req] 
        }
      }
      loopBufferWrite |-> (loopBufferWrite_PhiReq)
      $P [merge_stmt_3793_PhiReqMerge] 
      merge_stmt_3793_PhiReqMerge <-| ( merge_stmt_3793__entry___PhiReq  loopBufferWrite_PhiReq )
      ||[merge_stmt_3793_PhiAck] 
      {
        $T [phi_stmt_3794_ack] 
      }
      merge_stmt_3793_PhiReqMerge |-> (merge_stmt_3793_PhiAck)
      merge_stmt_3793__exit__  <-| (merge_stmt_3793_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1306  --------------------------
      merge_stmt_3793__entry__ <-| (if_stmt_3785_if_link)
      assign_stmt_3802_to_assign_stmt_3812__entry__ <-| (merge_stmt_3793__exit__)
      if_stmt_3813__entry__ <-| (assign_stmt_3802_to_assign_stmt_3812__exit__)
      assign_stmt_3823_to_assign_stmt_3832__entry__ <-| (if_stmt_3813__exit__)
      if_stmt_3833__entry__ <-| (assign_stmt_3823_to_assign_stmt_3832__exit__)
      if_stmt_3833__exit__ |-> (if_stmt_3785__exit__)
      if_stmt_3785__exit__ <-| (if_stmt_3785_else_link)
      ::[call_stmt_3951_to_assign_stmt_3999] 
      {
        // start: 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
        //  file .Aa/sdhc.opt.aa, line 1352
        $T[call_stmt_3951_sample_start_] 
        $T[call_stmt_3951_sample_completed_] 
        $T[call_stmt_3951_update_start_] 
        $T[call_stmt_3951_update_completed_] 
        // Call input argument 0
        // (address + 0 )
        // address
        // start: Forward dependencies from (address + 0 ) to transition call_stmt_3951_sample_start_
        // done: Forward dependencies from (address + 0 ) to transition call_stmt_3951_sample_start_
        ;;[call_stmt_3951_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3951_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3951_sample_start_ &-> (call_stmt_3951_Sample)
        call_stmt_3951_sample_completed_ <-& (call_stmt_3951_Sample)
        call_stmt_3951_sample_completed_ &-> ($null)
        call_stmt_3951_update_start_ &-> (call_stmt_3951_Update)
        call_stmt_3951_update_completed_ <-& (call_stmt_3951_Update)
        // Call output argument 0
        // (as target) readTemp3
        // start: WAR dependencies for readTemp3
        // done: WAR dependencies for readTemp3
        // end: 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
        // start: 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
        //  file .Aa/sdhc.opt.aa, line 1353
        $T[call_stmt_3956_sample_start_] 
        $T[call_stmt_3956_sample_completed_] 
        $T[call_stmt_3956_update_start_] 
        $T[call_stmt_3956_update_completed_] 
        // Call input argument 0
        // (address + 1 )
        // address
        // start: Forward dependencies from (address + 1 ) to transition call_stmt_3956_sample_start_
        // done: Forward dependencies from (address + 1 ) to transition call_stmt_3956_sample_start_
        ;;[call_stmt_3956_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3956_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3956_sample_start_ &-> (call_stmt_3956_Sample)
        call_stmt_3956_sample_completed_ <-& (call_stmt_3956_Sample)
        call_stmt_3956_sample_completed_ &-> ($null)
        call_stmt_3956_update_start_ &-> (call_stmt_3956_Update)
        call_stmt_3956_update_completed_ <-& (call_stmt_3956_Update)
        // Call output argument 0
        // (as target) readTemp2
        // start: WAR dependencies for readTemp2
        // done: WAR dependencies for readTemp2
        // end: 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
        // start: 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
        //  file .Aa/sdhc.opt.aa, line 1354
        $T[call_stmt_3961_sample_start_] 
        $T[call_stmt_3961_sample_completed_] 
        $T[call_stmt_3961_update_start_] 
        $T[call_stmt_3961_update_completed_] 
        // Call input argument 0
        // (address + 2 )
        // address
        // start: Forward dependencies from (address + 2 ) to transition call_stmt_3961_sample_start_
        // done: Forward dependencies from (address + 2 ) to transition call_stmt_3961_sample_start_
        ;;[call_stmt_3961_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3961_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3961_sample_start_ &-> (call_stmt_3961_Sample)
        call_stmt_3961_sample_completed_ <-& (call_stmt_3961_Sample)
        call_stmt_3961_sample_completed_ &-> ($null)
        call_stmt_3961_update_start_ &-> (call_stmt_3961_Update)
        call_stmt_3961_update_completed_ <-& (call_stmt_3961_Update)
        // Call output argument 0
        // (as target) readTemp1
        // start: WAR dependencies for readTemp1
        // done: WAR dependencies for readTemp1
        // end: 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
        // start: 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
        //  file .Aa/sdhc.opt.aa, line 1355
        $T[call_stmt_3966_sample_start_] 
        $T[call_stmt_3966_sample_completed_] 
        $T[call_stmt_3966_update_start_] 
        $T[call_stmt_3966_update_completed_] 
        // Call input argument 0
        // (address + 3 )
        // address
        // start: Forward dependencies from (address + 3 ) to transition call_stmt_3966_sample_start_
        // done: Forward dependencies from (address + 3 ) to transition call_stmt_3966_sample_start_
        ;;[call_stmt_3966_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_3966_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_3966_sample_start_ &-> (call_stmt_3966_Sample)
        call_stmt_3966_sample_completed_ <-& (call_stmt_3966_Sample)
        call_stmt_3966_sample_completed_ &-> ($null)
        call_stmt_3966_update_start_ &-> (call_stmt_3966_Update)
        call_stmt_3966_update_completed_ <-& (call_stmt_3966_Update)
        // Call output argument 0
        // (as target) readTemp0
        // start: WAR dependencies for readTemp0
        // done: WAR dependencies for readTemp0
        // end: 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
        // start:  			readdata3 := ( $mux b3 readTemp3  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1356
        // Source expression
        // ( $mux b3 readTemp3  ZERO_8 ) 
        $T[MUX_3971_sample_start_] 
        $T[MUX_3971_sample_completed_] 
        $T[MUX_3971_update_start_] 
        $T[MUX_3971_update_completed_] 
        // b3
        // readTemp3
        // start: Forward dependencies from b3 to transition MUX_3971_sample_start_
        // done: Forward dependencies from b3 to transition MUX_3971_sample_start_
        // start: Forward dependencies from readTemp3 to transition MUX_3971_sample_start_
        MUX_3971_sample_start_ <-& (call_stmt_3951_update_completed_)
        // done: Forward dependencies from readTemp3 to transition MUX_3971_sample_start_
        ;;[MUX_3971_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_3971_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_3971_sample_start_ &-> (MUX_3971_start)
        MUX_3971_sample_completed_ <-& (MUX_3971_start)
        MUX_3971_sample_completed_ &-> ($null)
        MUX_3971_update_start_ &-> (MUX_3971_complete)
        MUX_3971_update_completed_ <-& (MUX_3971_complete)
        // Target expression
        // (as target) readdata3
        // start: WAR dependencies for readdata3
        // done: WAR dependencies for readdata3
        // end:  			readdata3 := ( $mux b3 readTemp3  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // start:  			readdata2 := ( $mux b2 readTemp2  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1357
        // Source expression
        // ( $mux b2 readTemp2  ZERO_8 ) 
        $T[MUX_3977_sample_start_] 
        $T[MUX_3977_sample_completed_] 
        $T[MUX_3977_update_start_] 
        $T[MUX_3977_update_completed_] 
        // b2
        // readTemp2
        // start: Forward dependencies from b2 to transition MUX_3977_sample_start_
        // done: Forward dependencies from b2 to transition MUX_3977_sample_start_
        // start: Forward dependencies from readTemp2 to transition MUX_3977_sample_start_
        MUX_3977_sample_start_ <-& (call_stmt_3956_update_completed_)
        // done: Forward dependencies from readTemp2 to transition MUX_3977_sample_start_
        ;;[MUX_3977_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_3977_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_3977_sample_start_ &-> (MUX_3977_start)
        MUX_3977_sample_completed_ <-& (MUX_3977_start)
        MUX_3977_sample_completed_ &-> ($null)
        MUX_3977_update_start_ &-> (MUX_3977_complete)
        MUX_3977_update_completed_ <-& (MUX_3977_complete)
        // Target expression
        // (as target) readdata2
        // start: WAR dependencies for readdata2
        // done: WAR dependencies for readdata2
        // end:  			readdata2 := ( $mux b2 readTemp2  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // start:  			readdata1 := ( $mux b1 readTemp1  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1358
        // Source expression
        // ( $mux b1 readTemp1  ZERO_8 ) 
        $T[MUX_3983_sample_start_] 
        $T[MUX_3983_sample_completed_] 
        $T[MUX_3983_update_start_] 
        $T[MUX_3983_update_completed_] 
        // b1
        // readTemp1
        // start: Forward dependencies from b1 to transition MUX_3983_sample_start_
        // done: Forward dependencies from b1 to transition MUX_3983_sample_start_
        // start: Forward dependencies from readTemp1 to transition MUX_3983_sample_start_
        MUX_3983_sample_start_ <-& (call_stmt_3961_update_completed_)
        // done: Forward dependencies from readTemp1 to transition MUX_3983_sample_start_
        ;;[MUX_3983_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_3983_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_3983_sample_start_ &-> (MUX_3983_start)
        MUX_3983_sample_completed_ <-& (MUX_3983_start)
        MUX_3983_sample_completed_ &-> ($null)
        MUX_3983_update_start_ &-> (MUX_3983_complete)
        MUX_3983_update_completed_ <-& (MUX_3983_complete)
        // Target expression
        // (as target) readdata1
        // start: WAR dependencies for readdata1
        // done: WAR dependencies for readdata1
        // end:  			readdata1 := ( $mux b1 readTemp1  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // start:  			readdata0 := ( $mux b0 readTemp0  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1359
        // Source expression
        // ( $mux b0 readTemp0  ZERO_8 ) 
        $T[MUX_3989_sample_start_] 
        $T[MUX_3989_sample_completed_] 
        $T[MUX_3989_update_start_] 
        $T[MUX_3989_update_completed_] 
        // b0
        // readTemp0
        // start: Forward dependencies from b0 to transition MUX_3989_sample_start_
        // done: Forward dependencies from b0 to transition MUX_3989_sample_start_
        // start: Forward dependencies from readTemp0 to transition MUX_3989_sample_start_
        MUX_3989_sample_start_ <-& (call_stmt_3966_update_completed_)
        // done: Forward dependencies from readTemp0 to transition MUX_3989_sample_start_
        ;;[MUX_3989_start] 
        {
          // ternary expression: 
          $T [req] $T [ack] // sample req/ack
        }
        ;;[MUX_3989_complete] 
        {
          // ternary expression: 
          $T [req] $T [ack] // update req/ack
        }
        MUX_3989_sample_start_ &-> (MUX_3989_start)
        MUX_3989_sample_completed_ <-& (MUX_3989_start)
        MUX_3989_sample_completed_ &-> ($null)
        MUX_3989_update_start_ &-> (MUX_3989_complete)
        MUX_3989_update_completed_ <-& (MUX_3989_complete)
        // Target expression
        // (as target) readdata0
        // start: WAR dependencies for readdata0
        // done: WAR dependencies for readdata0
        // end:  			readdata0 := ( $mux b0 readTemp0  ZERO_8 )  $buffering 1// bits of buffering = 8. 
        // start:  			sdhc_to_peripheral_bridge_response := ((readdata3 && readdata2) && (readdata1 && readdata0)) $buffering 1// bits of buffering = 32. 
        //  file .Aa/sdhc.opt.aa, line 1360
        // Source expression
        // ((readdata3 && readdata2) && (readdata1 && readdata0))
        $T[CONCAT_u16_u32_3998_sample_start_] 
        $T[CONCAT_u16_u32_3998_sample_completed_] 
        $T[CONCAT_u16_u32_3998_update_start_] 
        $T[CONCAT_u16_u32_3998_update_completed_] 
        // (readdata3 && readdata2)
        // readdata3
        // readdata2
        // (readdata1 && readdata0)
        // readdata1
        // readdata0
        // start: Forward dependencies from (readdata3 && readdata2) to transition CONCAT_u16_u32_3998_sample_start_
        CONCAT_u16_u32_3998_sample_start_ <-& (MUX_3971_update_completed_)
        CONCAT_u16_u32_3998_sample_start_ <-& (MUX_3977_update_completed_)
        // done: Forward dependencies from (readdata3 && readdata2) to transition CONCAT_u16_u32_3998_sample_start_
        // start: Forward dependencies from (readdata1 && readdata0) to transition CONCAT_u16_u32_3998_sample_start_
        CONCAT_u16_u32_3998_sample_start_ <-& (MUX_3983_update_completed_)
        CONCAT_u16_u32_3998_sample_start_ <-& (MUX_3989_update_completed_)
        // done: Forward dependencies from (readdata1 && readdata0) to transition CONCAT_u16_u32_3998_sample_start_
        ;;[CONCAT_u16_u32_3998_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u16_u32_3998_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u16_u32_3998_sample_start_ &-> (CONCAT_u16_u32_3998_Sample)
        CONCAT_u16_u32_3998_sample_completed_ <-& (CONCAT_u16_u32_3998_Sample)
        CONCAT_u16_u32_3998_sample_completed_ &-> ($null)
        CONCAT_u16_u32_3998_update_start_ &-> (CONCAT_u16_u32_3998_Update)
        CONCAT_u16_u32_3998_update_completed_ <-& (CONCAT_u16_u32_3998_Update)
        // Target expression
        // (as target) sdhc_to_peripheral_bridge_response
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_start_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_completed_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3991_update_start_] 
        $T[WPIPE_sdhc_to_peripheral_bridge_response_3991_update_completed_] 
        ;;[WPIPE_sdhc_to_peripheral_bridge_response_3991_Sample] 
        {
          // pipe write sample-start sdhc_to_peripheral_bridge_response
          $T [req] $T [ack] 
        }
        ;;[WPIPE_sdhc_to_peripheral_bridge_response_3991_Update] 
        {
          // pipe write update (complete) sdhc_to_peripheral_bridge_response
          $T [req] $T [ack] 
        }
        WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_start_ &-> (WPIPE_sdhc_to_peripheral_bridge_response_3991_Sample)
        WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_completed_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3991_Sample)
        WPIPE_sdhc_to_peripheral_bridge_response_3991_update_start_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_completed_)
        WPIPE_sdhc_to_peripheral_bridge_response_3991_update_start_ &-> (WPIPE_sdhc_to_peripheral_bridge_response_3991_Update)
        WPIPE_sdhc_to_peripheral_bridge_response_3991_update_completed_ <-& (WPIPE_sdhc_to_peripheral_bridge_response_3991_Update)
        // start: Forward dependencies from ((readdata3 && readdata2) && (readdata1 && readdata0)) to transition WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_start_
        WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_start_ <-& (CONCAT_u16_u32_3998_update_completed_)
        // done: Forward dependencies from ((readdata3 && readdata2) && (readdata1 && readdata0)) to transition WPIPE_sdhc_to_peripheral_bridge_response_3991_sample_start_
        // end:  			sdhc_to_peripheral_bridge_response := ((readdata3 && readdata2) && (readdata1 && readdata0)) $buffering 1// bits of buffering = 32. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_3951 load
        //  call_stmt_3956 load
        //  call_stmt_3961 load
        //  call_stmt_3966 load
        // pipe read/write dependencies for pipe sdhc_to_peripheral_bridge_response
        // read-dependencies for pipe sdhc_to_peripheral_bridge_response
        // write-dependencies for pipe sdhc_to_peripheral_bridge_response
        // signal write dependencies for sdhc_to_peripheral_bridge_response
      }
      call_stmt_3951_to_assign_stmt_3999__entry__ |-> (call_stmt_3951_to_assign_stmt_3999)
      call_stmt_3951_to_assign_stmt_3999__exit__ <-| (call_stmt_3951_to_assign_stmt_3999)
      assign_stmt_3784__entry__ <-| (if_stmt_3463_else_link)
      if_stmt_3785__entry__ <-| (assign_stmt_3784__exit__)
      call_stmt_3951_to_assign_stmt_3999__entry__ <-| (if_stmt_3785__exit__)
      call_stmt_3951_to_assign_stmt_3999__exit__ |-> (if_stmt_3463__exit__)
      ::[assign_stmt_4020_to_assign_stmt_4034] 
      {
        // start:  		dataErrorInterruptStatus := ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1362
        // Source expression
        // ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) )
        $T[OR_u8_u8_4019_sample_start_] 
        $T[OR_u8_u8_4019_sample_completed_] 
        $T[OR_u8_u8_4019_update_start_] 
        $T[OR_u8_u8_4019_update_completed_] 
        // (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) )
        // ( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  ) 
        // dataRxEnrty1
        $T[LOAD_dataRxEnrty1_4002_sample_start_] 
        $T[LOAD_dataRxEnrty1_4002_sample_completed_] 
        $T[LOAD_dataRxEnrty1_4002_update_start_] 
        $T[LOAD_dataRxEnrty1_4002_update_completed_] 
        $T[LOAD_dataRxEnrty1_4002_word_address_calculated] 
        $T[LOAD_dataRxEnrty1_4002_root_address_calculated] 
        LOAD_dataRxEnrty1_4002_word_address_calculated <-& (LOAD_dataRxEnrty1_4002_root_address_calculated)
        ;;[LOAD_dataRxEnrty1_4002_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataRxEnrty1_4002_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataRxEnrty1_4002_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataRxEnrty1_4002_sample_start_ <-& (LOAD_dataRxEnrty1_4002_word_address_calculated)
        LOAD_dataRxEnrty1_4002_sample_start_ &-> (LOAD_dataRxEnrty1_4002_Sample)
        LOAD_dataRxEnrty1_4002_sample_completed_ <-& (LOAD_dataRxEnrty1_4002_Sample)
        LOAD_dataRxEnrty1_4002_sample_completed_ &-> ($null)
        LOAD_dataRxEnrty1_4002_update_start_ &-> (LOAD_dataRxEnrty1_4002_Update)
        LOAD_dataRxEnrty1_4002_update_completed_ <-& (LOAD_dataRxEnrty1_4002_Update)
        // dataErrorInterruptStatusVar1
        // ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) 
        // dataRxEnrty2
        $T[LOAD_dataRxEnrty2_4006_sample_start_] 
        $T[LOAD_dataRxEnrty2_4006_sample_completed_] 
        $T[LOAD_dataRxEnrty2_4006_update_start_] 
        $T[LOAD_dataRxEnrty2_4006_update_completed_] 
        $T[LOAD_dataRxEnrty2_4006_word_address_calculated] 
        $T[LOAD_dataRxEnrty2_4006_root_address_calculated] 
        LOAD_dataRxEnrty2_4006_word_address_calculated <-& (LOAD_dataRxEnrty2_4006_root_address_calculated)
        ;;[LOAD_dataRxEnrty2_4006_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataRxEnrty2_4006_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataRxEnrty2_4006_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataRxEnrty2_4006_sample_start_ <-& (LOAD_dataRxEnrty2_4006_word_address_calculated)
        LOAD_dataRxEnrty2_4006_sample_start_ &-> (LOAD_dataRxEnrty2_4006_Sample)
        LOAD_dataRxEnrty2_4006_sample_completed_ <-& (LOAD_dataRxEnrty2_4006_Sample)
        LOAD_dataRxEnrty2_4006_sample_completed_ &-> ($null)
        LOAD_dataRxEnrty2_4006_update_start_ &-> (LOAD_dataRxEnrty2_4006_Update)
        LOAD_dataRxEnrty2_4006_update_completed_ <-& (LOAD_dataRxEnrty2_4006_Update)
        // dataErrorInterruptStatusVar
        // ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) 
        // (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 ))
        // ( ~ dataRxEnrty1 )
        // dataRxEnrty1
        $T[LOAD_dataRxEnrty1_4011_sample_start_] 
        $T[LOAD_dataRxEnrty1_4011_sample_completed_] 
        $T[LOAD_dataRxEnrty1_4011_update_start_] 
        $T[LOAD_dataRxEnrty1_4011_update_completed_] 
        $T[LOAD_dataRxEnrty1_4011_word_address_calculated] 
        $T[LOAD_dataRxEnrty1_4011_root_address_calculated] 
        LOAD_dataRxEnrty1_4011_word_address_calculated <-& (LOAD_dataRxEnrty1_4011_root_address_calculated)
        ;;[LOAD_dataRxEnrty1_4011_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataRxEnrty1_4011_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataRxEnrty1_4011_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataRxEnrty1_4011_sample_start_ <-& (LOAD_dataRxEnrty1_4011_word_address_calculated)
        LOAD_dataRxEnrty1_4011_sample_start_ &-> (LOAD_dataRxEnrty1_4011_Sample)
        LOAD_dataRxEnrty1_4011_sample_completed_ <-& (LOAD_dataRxEnrty1_4011_Sample)
        LOAD_dataRxEnrty1_4011_sample_completed_ &-> ($null)
        LOAD_dataRxEnrty1_4011_update_start_ &-> (LOAD_dataRxEnrty1_4011_Update)
        LOAD_dataRxEnrty1_4011_update_completed_ <-& (LOAD_dataRxEnrty1_4011_Update)
        // ( ~ dataRxEnrty2 )
        // dataRxEnrty2
        $T[LOAD_dataRxEnrty2_4013_sample_start_] 
        $T[LOAD_dataRxEnrty2_4013_sample_completed_] 
        $T[LOAD_dataRxEnrty2_4013_update_start_] 
        $T[LOAD_dataRxEnrty2_4013_update_completed_] 
        $T[LOAD_dataRxEnrty2_4013_word_address_calculated] 
        $T[LOAD_dataRxEnrty2_4013_root_address_calculated] 
        LOAD_dataRxEnrty2_4013_word_address_calculated <-& (LOAD_dataRxEnrty2_4013_root_address_calculated)
        ;;[LOAD_dataRxEnrty2_4013_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataRxEnrty2_4013_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataRxEnrty2_4013_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataRxEnrty2_4013_sample_start_ <-& (LOAD_dataRxEnrty2_4013_word_address_calculated)
        LOAD_dataRxEnrty2_4013_sample_start_ &-> (LOAD_dataRxEnrty2_4013_Sample)
        LOAD_dataRxEnrty2_4013_sample_completed_ <-& (LOAD_dataRxEnrty2_4013_Sample)
        LOAD_dataRxEnrty2_4013_sample_completed_ &-> ($null)
        LOAD_dataRxEnrty2_4013_update_start_ &-> (LOAD_dataRxEnrty2_4013_Update)
        LOAD_dataRxEnrty2_4013_update_completed_ <-& (LOAD_dataRxEnrty2_4013_Update)
        // start: Forward dependencies from (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) to transition OR_u8_u8_4019_sample_start_
        OR_u8_u8_4019_sample_start_ <-& (LOAD_dataRxEnrty1_4002_update_completed_)
        OR_u8_u8_4019_sample_start_ <-& (LOAD_dataRxEnrty2_4006_update_completed_)
        // done: Forward dependencies from (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) to transition OR_u8_u8_4019_sample_start_
        // start: Forward dependencies from ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  )  to transition OR_u8_u8_4019_sample_start_
        OR_u8_u8_4019_sample_start_ <-& (LOAD_dataRxEnrty1_4011_update_completed_)
        OR_u8_u8_4019_sample_start_ <-& (LOAD_dataRxEnrty2_4013_update_completed_)
        // done: Forward dependencies from ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  )  to transition OR_u8_u8_4019_sample_start_
        ;;[OR_u8_u8_4019_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_4019_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_4019_sample_start_ &-> (OR_u8_u8_4019_Sample)
        OR_u8_u8_4019_sample_completed_ <-& (OR_u8_u8_4019_Sample)
        OR_u8_u8_4019_sample_completed_ &-> ($null)
        OR_u8_u8_4019_update_start_ &-> (OR_u8_u8_4019_Update)
        OR_u8_u8_4019_update_completed_ <-& (OR_u8_u8_4019_Update)
        // Target expression
        // (as target) dataErrorInterruptStatus
        $T[STORE_dataErrorInterruptStatus_4001_sample_start_] 
        $T[STORE_dataErrorInterruptStatus_4001_sample_completed_] 
        $T[STORE_dataErrorInterruptStatus_4001_update_start_] 
        $T[STORE_dataErrorInterruptStatus_4001_update_completed_] 
        // dataErrorInterruptStatus
        $T[STORE_dataErrorInterruptStatus_4001_word_address_calculated] 
        $T[STORE_dataErrorInterruptStatus_4001_root_address_calculated] 
        STORE_dataErrorInterruptStatus_4001_word_address_calculated <-& (STORE_dataErrorInterruptStatus_4001_root_address_calculated)
        ;;[STORE_dataErrorInterruptStatus_4001_Sample] 
        {
          ;;[STORE_dataErrorInterruptStatus_4001_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_dataErrorInterruptStatus_4001_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_dataErrorInterruptStatus_4001_sample_start_ <-& (STORE_dataErrorInterruptStatus_4001_word_address_calculated)
        STORE_dataErrorInterruptStatus_4001_sample_start_ &-> (STORE_dataErrorInterruptStatus_4001_Sample)
        STORE_dataErrorInterruptStatus_4001_sample_completed_ <-& (STORE_dataErrorInterruptStatus_4001_Sample)
        STORE_dataErrorInterruptStatus_4001_sample_completed_ &-> ($null)
        STORE_dataErrorInterruptStatus_4001_update_start_ &-> (STORE_dataErrorInterruptStatus_4001_Update)
        STORE_dataErrorInterruptStatus_4001_update_completed_ <-& (STORE_dataErrorInterruptStatus_4001_Update)
        // start: Forward dependencies from ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) to transition STORE_dataErrorInterruptStatus_4001_sample_start_
        STORE_dataErrorInterruptStatus_4001_sample_start_ <-& (OR_u8_u8_4019_update_completed_)
        // done: Forward dependencies from ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) to transition STORE_dataErrorInterruptStatus_4001_sample_start_
        // end:  		dataErrorInterruptStatus := ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) $buffering 1// bits of buffering = 8. 
        // start:  		sdhcRegisters[50 ] := (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1363
        // Source expression
        // (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ])
        $T[AND_u8_u8_4033_sample_start_] 
        $T[AND_u8_u8_4033_sample_completed_] 
        $T[AND_u8_u8_4033_update_start_] 
        $T[AND_u8_u8_4033_update_completed_] 
        // ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
        // (sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1))
        // sdhcRegisters[50 ]
        $T[array_obj_ref_4024_base_address_calculated] 
        $T[array_obj_ref_4024_sample_start_] 
        $T[array_obj_ref_4024_sample_completed_] 
        $T[array_obj_ref_4024_update_start_] 
        $T[array_obj_ref_4024_update_completed_] 
        $T[array_obj_ref_4024_word_address_calculated] 
        $T[array_obj_ref_4024_root_address_calculated] 
        array_obj_ref_4024_word_address_calculated <-& (array_obj_ref_4024_root_address_calculated)
        ;;[array_obj_ref_4024_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_4024_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_4024_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_4024_sample_start_ <-& (array_obj_ref_4024_word_address_calculated)
        array_obj_ref_4024_sample_start_ &-> (array_obj_ref_4024_Sample)
        array_obj_ref_4024_sample_completed_ <-& (array_obj_ref_4024_Sample)
        array_obj_ref_4024_sample_completed_ &-> ($null)
        array_obj_ref_4024_update_start_ &-> (array_obj_ref_4024_Update)
        array_obj_ref_4024_update_completed_ <-& (array_obj_ref_4024_Update)
        // (dataErrorInterruptStatus | errorInterruptStatusVar1)
        // dataErrorInterruptStatus
        $T[LOAD_dataErrorInterruptStatus_4025_sample_start_] 
        $T[LOAD_dataErrorInterruptStatus_4025_sample_completed_] 
        $T[LOAD_dataErrorInterruptStatus_4025_update_start_] 
        $T[LOAD_dataErrorInterruptStatus_4025_update_completed_] 
        $T[LOAD_dataErrorInterruptStatus_4025_word_address_calculated] 
        $T[LOAD_dataErrorInterruptStatus_4025_root_address_calculated] 
        LOAD_dataErrorInterruptStatus_4025_word_address_calculated <-& (LOAD_dataErrorInterruptStatus_4025_root_address_calculated)
        ;;[LOAD_dataErrorInterruptStatus_4025_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataErrorInterruptStatus_4025_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataErrorInterruptStatus_4025_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataErrorInterruptStatus_4025_sample_start_ <-& (LOAD_dataErrorInterruptStatus_4025_word_address_calculated)
        LOAD_dataErrorInterruptStatus_4025_sample_start_ &-> (LOAD_dataErrorInterruptStatus_4025_Sample)
        LOAD_dataErrorInterruptStatus_4025_sample_completed_ <-& (LOAD_dataErrorInterruptStatus_4025_Sample)
        LOAD_dataErrorInterruptStatus_4025_sample_completed_ &-> ($null)
        LOAD_dataErrorInterruptStatus_4025_update_start_ &-> (LOAD_dataErrorInterruptStatus_4025_Update)
        LOAD_dataErrorInterruptStatus_4025_update_completed_ <-& (LOAD_dataErrorInterruptStatus_4025_Update)
        // errorInterruptStatusVar1
        // errorInterruptFlag1
        $T[LOAD_errorInterruptFlag1_4029_sample_start_] 
        $T[LOAD_errorInterruptFlag1_4029_sample_completed_] 
        $T[LOAD_errorInterruptFlag1_4029_update_start_] 
        $T[LOAD_errorInterruptFlag1_4029_update_completed_] 
        $T[LOAD_errorInterruptFlag1_4029_word_address_calculated] 
        $T[LOAD_errorInterruptFlag1_4029_root_address_calculated] 
        LOAD_errorInterruptFlag1_4029_word_address_calculated <-& (LOAD_errorInterruptFlag1_4029_root_address_calculated)
        ;;[LOAD_errorInterruptFlag1_4029_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag1_4029_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag1_4029_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag1_4029_sample_start_ <-& (LOAD_errorInterruptFlag1_4029_word_address_calculated)
        LOAD_errorInterruptFlag1_4029_sample_start_ &-> (LOAD_errorInterruptFlag1_4029_Sample)
        LOAD_errorInterruptFlag1_4029_sample_completed_ <-& (LOAD_errorInterruptFlag1_4029_Sample)
        LOAD_errorInterruptFlag1_4029_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag1_4029_update_start_ &-> (LOAD_errorInterruptFlag1_4029_Update)
        LOAD_errorInterruptFlag1_4029_update_completed_ <-& (LOAD_errorInterruptFlag1_4029_Update)
        // sdhcRegisters[54 ]
        $T[array_obj_ref_4032_base_address_calculated] 
        $T[array_obj_ref_4032_sample_start_] 
        $T[array_obj_ref_4032_sample_completed_] 
        $T[array_obj_ref_4032_update_start_] 
        $T[array_obj_ref_4032_update_completed_] 
        $T[array_obj_ref_4032_word_address_calculated] 
        $T[array_obj_ref_4032_root_address_calculated] 
        array_obj_ref_4032_word_address_calculated <-& (array_obj_ref_4032_root_address_calculated)
        ;;[array_obj_ref_4032_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_4032_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[array_obj_ref_4032_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        array_obj_ref_4032_sample_start_ <-& (array_obj_ref_4032_word_address_calculated)
        array_obj_ref_4032_sample_start_ &-> (array_obj_ref_4032_Sample)
        array_obj_ref_4032_sample_completed_ <-& (array_obj_ref_4032_Sample)
        array_obj_ref_4032_sample_completed_ &-> ($null)
        array_obj_ref_4032_update_start_ &-> (array_obj_ref_4032_Update)
        array_obj_ref_4032_update_completed_ <-& (array_obj_ref_4032_Update)
        // start: Forward dependencies from ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) to transition AND_u8_u8_4033_sample_start_
        AND_u8_u8_4033_sample_start_ <-& (array_obj_ref_4024_update_completed_)
        AND_u8_u8_4033_sample_start_ <-& (LOAD_dataErrorInterruptStatus_4025_update_completed_)
        AND_u8_u8_4033_sample_start_ <-& (LOAD_errorInterruptFlag1_4029_update_completed_)
        // done: Forward dependencies from ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) to transition AND_u8_u8_4033_sample_start_
        // start: Forward dependencies from sdhcRegisters[54 ] to transition AND_u8_u8_4033_sample_start_
        AND_u8_u8_4033_sample_start_ <-& (array_obj_ref_4032_update_completed_)
        // done: Forward dependencies from sdhcRegisters[54 ] to transition AND_u8_u8_4033_sample_start_
        ;;[AND_u8_u8_4033_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_4033_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_4033_sample_start_ &-> (AND_u8_u8_4033_Sample)
        AND_u8_u8_4033_sample_completed_ <-& (AND_u8_u8_4033_Sample)
        AND_u8_u8_4033_sample_completed_ &-> ($null)
        AND_u8_u8_4033_update_start_ &-> (AND_u8_u8_4033_Update)
        AND_u8_u8_4033_update_completed_ <-& (AND_u8_u8_4033_Update)
        // Target expression
        // sdhcRegisters[50 ]
        $T[array_obj_ref_4022_sample_start_] 
        $T[array_obj_ref_4022_sample_completed_] 
        $T[array_obj_ref_4022_update_start_] 
        $T[array_obj_ref_4022_update_completed_] 
        $T[array_obj_ref_4022_word_address_calculated] 
        $T[array_obj_ref_4022_root_address_calculated] 
        array_obj_ref_4022_word_address_calculated <-& (array_obj_ref_4022_root_address_calculated)
        ;;[array_obj_ref_4022_Sample] 
        {
          ;;[array_obj_ref_4022_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_4022_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_4022_sample_start_ <-& (array_obj_ref_4022_word_address_calculated)
        array_obj_ref_4022_sample_start_ &-> (array_obj_ref_4022_Sample)
        array_obj_ref_4022_sample_completed_ <-& (array_obj_ref_4022_Sample)
        array_obj_ref_4022_sample_completed_ &-> ($null)
        array_obj_ref_4022_update_start_ &-> (array_obj_ref_4022_Update)
        array_obj_ref_4022_update_completed_ <-& (array_obj_ref_4022_Update)
        // start: Forward dependencies from (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) to transition array_obj_ref_4022_sample_start_
        array_obj_ref_4022_sample_start_ <-& (AND_u8_u8_4033_update_completed_)
        // done: Forward dependencies from (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) to transition array_obj_ref_4022_sample_start_
        // end:  		sdhcRegisters[50 ] := (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_0
        //  STORE_dataErrorInterruptStatus_4001 store
        //  LOAD_dataErrorInterruptStatus_4025 load
        $T [STORE_dataErrorInterruptStatus_4001_LOAD_dataErrorInterruptStatus_4025_delay] $delay
        // STORE_dataErrorInterruptStatus_4001(store) -> LOAD_dataErrorInterruptStatus_4025(load)
        LOAD_dataErrorInterruptStatus_4025_sample_start_ <-& (STORE_dataErrorInterruptStatus_4001_LOAD_dataErrorInterruptStatus_4025_delay)
        STORE_dataErrorInterruptStatus_4001_LOAD_dataErrorInterruptStatus_4025_delay <-& (STORE_dataErrorInterruptStatus_4001_sample_completed_)
        // memory-space  memory_space_1
        //  LOAD_dataRxEnrty1_4002 load
        //  LOAD_dataRxEnrty1_4011 load
        // memory-space  memory_space_2
        //  LOAD_dataRxEnrty2_4006 load
        //  LOAD_dataRxEnrty2_4013 load
        // memory-space  memory_space_3
        //  LOAD_errorInterruptFlag1_4029 load
        // memory-space  memory_space_8
        //  array_obj_ref_4024 load
        //  array_obj_ref_4032 load
        //  array_obj_ref_4022 store
        $T [array_obj_ref_4024_array_obj_ref_4022_delay] $delay
        // array_obj_ref_4024(load) -> array_obj_ref_4022(store)
        array_obj_ref_4022_sample_start_ <-& (array_obj_ref_4024_array_obj_ref_4022_delay)
        array_obj_ref_4024_array_obj_ref_4022_delay <-& (array_obj_ref_4024_sample_completed_)
        $T [array_obj_ref_4032_array_obj_ref_4022_delay] $delay
        // array_obj_ref_4032(load) -> array_obj_ref_4022(store)
        array_obj_ref_4022_sample_start_ <-& (array_obj_ref_4032_array_obj_ref_4022_delay)
        array_obj_ref_4032_array_obj_ref_4022_delay <-& (array_obj_ref_4032_sample_completed_)
      }
      assign_stmt_4020_to_assign_stmt_4034__entry__ |-> (assign_stmt_4020_to_assign_stmt_4034)
      assign_stmt_4020_to_assign_stmt_4034__exit__ <-| (assign_stmt_4020_to_assign_stmt_4034)
      ::[call_stmt_4065_to_assign_stmt_4114] 
      {
        // start: 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1376
        $T[call_stmt_4065_sample_start_] 
        $T[call_stmt_4065_sample_completed_] 
        $T[call_stmt_4065_update_start_] 
        $T[call_stmt_4065_update_completed_] 
        // Call input argument 0
        // (50  + S)
        // S
        // start: Forward dependencies from (50  + S) to transition call_stmt_4065_sample_start_
        // done: Forward dependencies from (50  + S) to transition call_stmt_4065_sample_start_
        ;;[call_stmt_4065_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4065_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4065_sample_start_ &-> (call_stmt_4065_Sample)
        call_stmt_4065_sample_completed_ <-& (call_stmt_4065_Sample)
        call_stmt_4065_sample_completed_ &-> ($null)
        call_stmt_4065_update_start_ &-> (call_stmt_4065_Update)
        call_stmt_4065_update_completed_ <-& (call_stmt_4065_Update)
        // Call output argument 0
        // (as target) errorInterruptRegTemp
        // start: WAR dependencies for errorInterruptRegTemp
        // done: WAR dependencies for errorInterruptRegTemp
        // end: 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        // start: WAR dependencies for errorInterruptReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptReg
        // start:  		$volatile errorInterruptReg := (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1377
        // volatile! 
        // Source expression
        // (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp)
        // ( $slice readErrorInterruptReg 7 0 ) 
        // readErrorInterruptReg
        // errorInterruptRegTemp
        // Target expression
        // (as target) errorInterruptReg
        // start: WAR dependencies for errorInterruptReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptReg
        // end:  		$volatile errorInterruptReg := (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp) $buffering 1
        // start: 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1378
        $T[call_stmt_4076_sample_start_] 
        $T[call_stmt_4076_sample_completed_] 
        $T[call_stmt_4076_update_start_] 
        $T[call_stmt_4076_update_completed_] 
        // Call input argument 0
        // (54  + S)
        // S
        // start: Forward dependencies from (54  + S) to transition call_stmt_4076_sample_start_
        // done: Forward dependencies from (54  + S) to transition call_stmt_4076_sample_start_
        ;;[call_stmt_4076_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4076_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4076_sample_start_ &-> (call_stmt_4076_Sample)
        call_stmt_4076_sample_completed_ <-& (call_stmt_4076_Sample)
        call_stmt_4076_sample_completed_ &-> ($null)
        call_stmt_4076_update_start_ &-> (call_stmt_4076_Update)
        call_stmt_4076_update_completed_ <-& (call_stmt_4076_Update)
        // Call output argument 0
        // (as target) errorInterruptEnableRegTemp
        // start: WAR dependencies for errorInterruptEnableRegTemp
        // done: WAR dependencies for errorInterruptEnableRegTemp
        // end: 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        // start: WAR dependencies for errorInterruptEnableReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptEnableReg
        // start:  		$volatile errorInterruptEnableReg := (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1379
        // volatile! 
        // Source expression
        // (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp)
        // ( $slice readErrorInterruptEnableReg 7 0 ) 
        // readErrorInterruptEnableReg
        // errorInterruptEnableRegTemp
        // Target expression
        // (as target) errorInterruptEnableReg
        // start: WAR dependencies for errorInterruptEnableReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptEnableReg
        // end:  		$volatile errorInterruptEnableReg := (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp) $buffering 1
        // start: 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1380
        $T[call_stmt_4087_sample_start_] 
        $T[call_stmt_4087_sample_completed_] 
        $T[call_stmt_4087_update_start_] 
        $T[call_stmt_4087_update_completed_] 
        // Call input argument 0
        // (58  + S)
        // S
        // start: Forward dependencies from (58  + S) to transition call_stmt_4087_sample_start_
        // done: Forward dependencies from (58  + S) to transition call_stmt_4087_sample_start_
        ;;[call_stmt_4087_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4087_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4087_sample_start_ &-> (call_stmt_4087_Sample)
        call_stmt_4087_sample_completed_ <-& (call_stmt_4087_Sample)
        call_stmt_4087_sample_completed_ &-> ($null)
        call_stmt_4087_update_start_ &-> (call_stmt_4087_Update)
        call_stmt_4087_update_completed_ <-& (call_stmt_4087_Update)
        // Call output argument 0
        // (as target) errorInterruptSignalEnableRegTemp
        // start: WAR dependencies for errorInterruptSignalEnableRegTemp
        // done: WAR dependencies for errorInterruptSignalEnableRegTemp
        // end: 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        // start: WAR dependencies for errorInterruptSignalEnableReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptSignalEnableReg
        // start:  		$volatile errorInterruptSignalEnableReg := (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1381
        // volatile! 
        // Source expression
        // (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp)
        // ( $slice readErrorInterruptSignalEnableReg 7 0 ) 
        // readErrorInterruptSignalEnableReg
        // errorInterruptSignalEnableRegTemp
        // Target expression
        // (as target) errorInterruptSignalEnableReg
        // start: WAR dependencies for errorInterruptSignalEnableReg
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for errorInterruptSignalEnableReg
        // end:  		$volatile errorInterruptSignalEnableReg := (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp) $buffering 1
        // start: 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1382
        $T[call_stmt_4098_sample_start_] 
        $T[call_stmt_4098_sample_completed_] 
        $T[call_stmt_4098_update_start_] 
        $T[call_stmt_4098_update_completed_] 
        // Call input argument 0
        // (52  + S)
        // S
        // start: Forward dependencies from (52  + S) to transition call_stmt_4098_sample_start_
        // done: Forward dependencies from (52  + S) to transition call_stmt_4098_sample_start_
        ;;[call_stmt_4098_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4098_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4098_sample_start_ &-> (call_stmt_4098_Sample)
        call_stmt_4098_sample_completed_ <-& (call_stmt_4098_Sample)
        call_stmt_4098_sample_completed_ &-> ($null)
        call_stmt_4098_update_start_ &-> (call_stmt_4098_Update)
        call_stmt_4098_update_completed_ <-& (call_stmt_4098_Update)
        // Call output argument 0
        // (as target) normalInterruptEnableRegTemp
        // start: WAR dependencies for normalInterruptEnableRegTemp
        // done: WAR dependencies for normalInterruptEnableRegTemp
        // end: 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // start: WAR dependencies for normalInterruptEnableReg
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for normalInterruptEnableReg
        // start:  		$volatile normalInterruptEnableReg := (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1383
        // volatile! 
        // Source expression
        // (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp)
        // ( $slice readNormalInterruptEnableReg 7 0 ) 
        // readNormalInterruptEnableReg
        // normalInterruptEnableRegTemp
        // Target expression
        // (as target) normalInterruptEnableReg
        // start: WAR dependencies for normalInterruptEnableReg
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // done: WAR dependencies for normalInterruptEnableReg
        // end:  		$volatile normalInterruptEnableReg := (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp) $buffering 1
        // start: 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
        //  file .Aa/sdhc.opt.aa, line 1384
        $T[call_stmt_4109_sample_start_] 
        $T[call_stmt_4109_sample_completed_] 
        $T[call_stmt_4109_update_start_] 
        $T[call_stmt_4109_update_completed_] 
        // Call input argument 0
        // (44  + S)
        // S
        // start: Forward dependencies from (44  + S) to transition call_stmt_4109_sample_start_
        // done: Forward dependencies from (44  + S) to transition call_stmt_4109_sample_start_
        ;;[call_stmt_4109_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4109_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4109_sample_start_ &-> (call_stmt_4109_Sample)
        call_stmt_4109_sample_completed_ <-& (call_stmt_4109_Sample)
        call_stmt_4109_sample_completed_ &-> ($null)
        call_stmt_4109_update_start_ &-> (call_stmt_4109_Update)
        call_stmt_4109_update_completed_ <-& (call_stmt_4109_Update)
        // Call output argument 0
        // (as target) clockControlRegTemp
        // start: WAR dependencies for clockControlRegTemp
        // done: WAR dependencies for clockControlRegTemp
        // end: 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
        // start: WAR dependencies for next_S
        // ignored out-of-scope w_root 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
        // type of target is $uint<8>
        // done: WAR dependencies for next_S
        // start:  		$volatile next_S := (S - 1 ) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1385
        // volatile! 
        // Source expression
        // (S - 1 )
        // S
        // Target expression
        // (as target) next_S
        // start: WAR dependencies for next_S
        // ignored out-of-scope w_root 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
        // type of target is $uint<8>
        // done: WAR dependencies for next_S
        // end:  		$volatile next_S := (S - 1 ) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_4065 load
        //  call_stmt_4076 load
        //  call_stmt_4087 load
        //  call_stmt_4098 load
        //  call_stmt_4109 load
      }
      call_stmt_4065_to_assign_stmt_4114__entry__ |-> (call_stmt_4065_to_assign_stmt_4114)
      call_stmt_4065_to_assign_stmt_4114__exit__ <-| (call_stmt_4065_to_assign_stmt_4114)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 0
      ;;[if_stmt_4115_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_4115__entry__ |-> (if_stmt_4115_dead_link)
      if_stmt_4115__exit__ <-| (if_stmt_4115_dead_link)
      ;;[if_stmt_4115_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (S != 0 )
        ;;[NEQ_u8_u1_4118] 
        {
          // binary expression 
          ||[NEQ_u8_u1_4118_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_4115__entry__ |-> (if_stmt_4115_eval_test)
      $P [NEQ_u8_u1_4118_place]
      NEQ_u8_u1_4118_place <-| (if_stmt_4115_eval_test)
      ;;[if_stmt_4115_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_4115_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u8_u1_4118_place |-> (if_stmt_4115_if_link if_stmt_4115_else_link)
      $P [loopError]
      loopError <-| (if_stmt_4115_if_link)
      if_stmt_4115__exit__ <-| (if_stmt_4115_else_link)
      ::[assign_stmt_4124_to_assign_stmt_4192] 
      {
        // start: WAR dependencies for errorInterruptRegVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        // done: WAR dependencies for errorInterruptRegVal0
        // start:  		$volatile errorInterruptRegVal0 := ( $slice errorInterruptReg 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1389
        // volatile! 
        // Source expression
        // ( $slice errorInterruptReg 7 0 ) 
        // errorInterruptReg
        // Target expression
        // (as target) errorInterruptRegVal0
        // start: WAR dependencies for errorInterruptRegVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        // done: WAR dependencies for errorInterruptRegVal0
        // end:  		$volatile errorInterruptRegVal0 := ( $slice errorInterruptReg 7 0 )  $buffering 1
        // start: WAR dependencies for errorInterruptRegVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        // done: WAR dependencies for errorInterruptRegVal1
        // start:  		$volatile errorInterruptRegVal1 := ( $slice errorInterruptReg 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1390
        // volatile! 
        // Source expression
        // ( $slice errorInterruptReg 15 8 ) 
        // errorInterruptReg
        // Target expression
        // (as target) errorInterruptRegVal1
        // start: WAR dependencies for errorInterruptRegVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
        // done: WAR dependencies for errorInterruptRegVal1
        // end:  		$volatile errorInterruptRegVal1 := ( $slice errorInterruptReg 15 8 )  $buffering 1
        // start: WAR dependencies for errorInterruptEnableVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptEnableVal0
        // start:  		$volatile errorInterruptEnableVal0 := ( $slice errorInterruptEnableReg 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1391
        // volatile! 
        // Source expression
        // ( $slice errorInterruptEnableReg 7 0 ) 
        // errorInterruptEnableReg
        // Target expression
        // (as target) errorInterruptEnableVal0
        // start: WAR dependencies for errorInterruptEnableVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptEnableVal0
        // end:  		$volatile errorInterruptEnableVal0 := ( $slice errorInterruptEnableReg 7 0 )  $buffering 1
        // start: WAR dependencies for errorInterruptEnableVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptEnableVal1
        // start:  		$volatile errorInterruptEnableVal1 := ( $slice errorInterruptEnableReg 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1392
        // volatile! 
        // Source expression
        // ( $slice errorInterruptEnableReg 15 8 ) 
        // errorInterruptEnableReg
        // Target expression
        // (as target) errorInterruptEnableVal1
        // start: WAR dependencies for errorInterruptEnableVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptEnableVal1
        // end:  		$volatile errorInterruptEnableVal1 := ( $slice errorInterruptEnableReg 15 8 )  $buffering 1
        // start: WAR dependencies for errorInterruptSignalEnableVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptSignalEnableVal0
        // start:  		$volatile errorInterruptSignalEnableVal0 := ( $slice errorInterruptSignalEnableReg 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1393
        // volatile! 
        // Source expression
        // ( $slice errorInterruptSignalEnableReg 7 0 ) 
        // errorInterruptSignalEnableReg
        // Target expression
        // (as target) errorInterruptSignalEnableVal0
        // start: WAR dependencies for errorInterruptSignalEnableVal0
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptSignalEnableVal0
        // end:  		$volatile errorInterruptSignalEnableVal0 := ( $slice errorInterruptSignalEnableReg 7 0 )  $buffering 1
        // start: WAR dependencies for errorInterruptSignalEnableVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptSignalEnableVal1
        // start:  		$volatile errorInterruptSignalEnableVal1 := ( $slice errorInterruptSignalEnableReg 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1394
        // volatile! 
        // Source expression
        // ( $slice errorInterruptSignalEnableReg 15 8 ) 
        // errorInterruptSignalEnableReg
        // Target expression
        // (as target) errorInterruptSignalEnableVal1
        // start: WAR dependencies for errorInterruptSignalEnableVal1
        // ignored out-of-scope w_root 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
        // done: WAR dependencies for errorInterruptSignalEnableVal1
        // end:  		$volatile errorInterruptSignalEnableVal1 := ( $slice errorInterruptSignalEnableReg 15 8 )  $buffering 1
        // start: WAR dependencies for normalInterruptEnableVal0
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for normalInterruptEnableVal0
        // start:  		$volatile normalInterruptEnableVal0 := ( $slice normalInterruptEnableReg 7 0 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1395
        // volatile! 
        // Source expression
        // ( $slice normalInterruptEnableReg 7 0 ) 
        // normalInterruptEnableReg
        // Target expression
        // (as target) normalInterruptEnableVal0
        // start: WAR dependencies for normalInterruptEnableVal0
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for normalInterruptEnableVal0
        // end:  		$volatile normalInterruptEnableVal0 := ( $slice normalInterruptEnableReg 7 0 )  $buffering 1
        // start: WAR dependencies for normalInterruptEnableVal1
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for normalInterruptEnableVal1
        // start:  		$volatile normalInterruptEnableVal1 := ( $slice normalInterruptEnableReg 15 8 )  $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1396
        // volatile! 
        // Source expression
        // ( $slice normalInterruptEnableReg 15 8 ) 
        // normalInterruptEnableReg
        // Target expression
        // (as target) normalInterruptEnableVal1
        // start: WAR dependencies for normalInterruptEnableVal1
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for normalInterruptEnableVal1
        // end:  		$volatile normalInterruptEnableVal1 := ( $slice normalInterruptEnableReg 15 8 )  $buffering 1
        // start:  		tempErrorReg0 := (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1397
        // Source expression
        // (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0)
        $T[AND_u8_u8_4162_sample_start_] 
        $T[AND_u8_u8_4162_sample_completed_] 
        $T[AND_u8_u8_4162_update_start_] 
        $T[AND_u8_u8_4162_update_completed_] 
        // ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
        // (errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1))
        // errorInterruptRegVal0
        // (dataErrorInterruptStatus | errorInterruptStatusVar1)
        // dataErrorInterruptStatus
        $T[LOAD_dataErrorInterruptStatus_4155_sample_start_] 
        $T[LOAD_dataErrorInterruptStatus_4155_sample_completed_] 
        $T[LOAD_dataErrorInterruptStatus_4155_update_start_] 
        $T[LOAD_dataErrorInterruptStatus_4155_update_completed_] 
        $T[LOAD_dataErrorInterruptStatus_4155_word_address_calculated] 
        $T[LOAD_dataErrorInterruptStatus_4155_root_address_calculated] 
        LOAD_dataErrorInterruptStatus_4155_word_address_calculated <-& (LOAD_dataErrorInterruptStatus_4155_root_address_calculated)
        ;;[LOAD_dataErrorInterruptStatus_4155_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_dataErrorInterruptStatus_4155_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_dataErrorInterruptStatus_4155_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_dataErrorInterruptStatus_4155_sample_start_ <-& (LOAD_dataErrorInterruptStatus_4155_word_address_calculated)
        LOAD_dataErrorInterruptStatus_4155_sample_start_ &-> (LOAD_dataErrorInterruptStatus_4155_Sample)
        LOAD_dataErrorInterruptStatus_4155_sample_completed_ <-& (LOAD_dataErrorInterruptStatus_4155_Sample)
        LOAD_dataErrorInterruptStatus_4155_sample_completed_ &-> ($null)
        LOAD_dataErrorInterruptStatus_4155_update_start_ &-> (LOAD_dataErrorInterruptStatus_4155_Update)
        LOAD_dataErrorInterruptStatus_4155_update_completed_ <-& (LOAD_dataErrorInterruptStatus_4155_Update)
        // errorInterruptStatusVar1
        // errorInterruptFlag1
        $T[LOAD_errorInterruptFlag1_4159_sample_start_] 
        $T[LOAD_errorInterruptFlag1_4159_sample_completed_] 
        $T[LOAD_errorInterruptFlag1_4159_update_start_] 
        $T[LOAD_errorInterruptFlag1_4159_update_completed_] 
        $T[LOAD_errorInterruptFlag1_4159_word_address_calculated] 
        $T[LOAD_errorInterruptFlag1_4159_root_address_calculated] 
        LOAD_errorInterruptFlag1_4159_word_address_calculated <-& (LOAD_errorInterruptFlag1_4159_root_address_calculated)
        ;;[LOAD_errorInterruptFlag1_4159_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag1_4159_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag1_4159_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag1_4159_sample_start_ <-& (LOAD_errorInterruptFlag1_4159_word_address_calculated)
        LOAD_errorInterruptFlag1_4159_sample_start_ &-> (LOAD_errorInterruptFlag1_4159_Sample)
        LOAD_errorInterruptFlag1_4159_sample_completed_ <-& (LOAD_errorInterruptFlag1_4159_Sample)
        LOAD_errorInterruptFlag1_4159_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag1_4159_update_start_ &-> (LOAD_errorInterruptFlag1_4159_Update)
        LOAD_errorInterruptFlag1_4159_update_completed_ <-& (LOAD_errorInterruptFlag1_4159_Update)
        // errorInterruptEnableVal0
        // start: Forward dependencies from ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) to transition AND_u8_u8_4162_sample_start_
        AND_u8_u8_4162_sample_start_ <-& (LOAD_errorInterruptFlag1_4159_update_completed_)
        AND_u8_u8_4162_sample_start_ <-& (LOAD_dataErrorInterruptStatus_4155_update_completed_)
        // done: Forward dependencies from ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) to transition AND_u8_u8_4162_sample_start_
        // start: Forward dependencies from errorInterruptEnableVal0 to transition AND_u8_u8_4162_sample_start_
        // done: Forward dependencies from errorInterruptEnableVal0 to transition AND_u8_u8_4162_sample_start_
        ;;[AND_u8_u8_4162_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_4162_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_4162_sample_start_ &-> (AND_u8_u8_4162_Sample)
        AND_u8_u8_4162_sample_completed_ <-& (AND_u8_u8_4162_Sample)
        AND_u8_u8_4162_sample_completed_ &-> ($null)
        AND_u8_u8_4162_update_start_ &-> (AND_u8_u8_4162_Update)
        AND_u8_u8_4162_update_completed_ <-& (AND_u8_u8_4162_Update)
        // Target expression
        // (as target) tempErrorReg0
        // start: WAR dependencies for tempErrorReg0
        // done: WAR dependencies for tempErrorReg0
        // end:  		tempErrorReg0 := (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0) $buffering 1// bits of buffering = 8. 
        // start:  		tempErrorReg1 := (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1398
        // Source expression
        // (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1)
        $T[AND_u8_u8_4171_sample_start_] 
        $T[AND_u8_u8_4171_sample_completed_] 
        $T[AND_u8_u8_4171_update_start_] 
        $T[AND_u8_u8_4171_update_completed_] 
        // ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2)
        // (errorInterruptRegVal1 | errorInterruptStatusVar2)
        // errorInterruptRegVal1
        // errorInterruptStatusVar2
        // errorInterruptFlag2
        $T[LOAD_errorInterruptFlag2_4168_sample_start_] 
        $T[LOAD_errorInterruptFlag2_4168_sample_completed_] 
        $T[LOAD_errorInterruptFlag2_4168_update_start_] 
        $T[LOAD_errorInterruptFlag2_4168_update_completed_] 
        $T[LOAD_errorInterruptFlag2_4168_word_address_calculated] 
        $T[LOAD_errorInterruptFlag2_4168_root_address_calculated] 
        LOAD_errorInterruptFlag2_4168_word_address_calculated <-& (LOAD_errorInterruptFlag2_4168_root_address_calculated)
        ;;[LOAD_errorInterruptFlag2_4168_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_errorInterruptFlag2_4168_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_errorInterruptFlag2_4168_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_errorInterruptFlag2_4168_sample_start_ <-& (LOAD_errorInterruptFlag2_4168_word_address_calculated)
        LOAD_errorInterruptFlag2_4168_sample_start_ &-> (LOAD_errorInterruptFlag2_4168_Sample)
        LOAD_errorInterruptFlag2_4168_sample_completed_ <-& (LOAD_errorInterruptFlag2_4168_Sample)
        LOAD_errorInterruptFlag2_4168_sample_completed_ &-> ($null)
        LOAD_errorInterruptFlag2_4168_update_start_ &-> (LOAD_errorInterruptFlag2_4168_Update)
        LOAD_errorInterruptFlag2_4168_update_completed_ <-& (LOAD_errorInterruptFlag2_4168_Update)
        // errorInterruptEnableVal1
        // start: Forward dependencies from ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) to transition AND_u8_u8_4171_sample_start_
        AND_u8_u8_4171_sample_start_ <-& (LOAD_errorInterruptFlag2_4168_update_completed_)
        // done: Forward dependencies from ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) to transition AND_u8_u8_4171_sample_start_
        // start: Forward dependencies from errorInterruptEnableVal1 to transition AND_u8_u8_4171_sample_start_
        // done: Forward dependencies from errorInterruptEnableVal1 to transition AND_u8_u8_4171_sample_start_
        ;;[AND_u8_u8_4171_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_4171_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_4171_sample_start_ &-> (AND_u8_u8_4171_Sample)
        AND_u8_u8_4171_sample_completed_ <-& (AND_u8_u8_4171_Sample)
        AND_u8_u8_4171_sample_completed_ &-> ($null)
        AND_u8_u8_4171_update_start_ &-> (AND_u8_u8_4171_Update)
        AND_u8_u8_4171_update_completed_ <-& (AND_u8_u8_4171_Update)
        // Target expression
        // (as target) tempErrorReg1
        // start: WAR dependencies for tempErrorReg1
        // done: WAR dependencies for tempErrorReg1
        // end:  		tempErrorReg1 := (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1) $buffering 1// bits of buffering = 8. 
        // start: 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
        //  file .Aa/sdhc.opt.aa, line 1399
        $T[call_stmt_4175_sample_start_] 
        $T[call_stmt_4175_sample_completed_] 
        $T[call_stmt_4175_update_start_] 
        $T[call_stmt_4175_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // tempErrorReg1
        // start: Forward dependencies from tempErrorReg1 to transition call_stmt_4175_sample_start_
        call_stmt_4175_sample_start_ <-& (AND_u8_u8_4171_update_completed_)
        // done: Forward dependencies from tempErrorReg1 to transition call_stmt_4175_sample_start_
        ;;[call_stmt_4175_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4175_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4175_sample_start_ &-> (call_stmt_4175_Sample)
        call_stmt_4175_sample_completed_ <-& (call_stmt_4175_Sample)
        call_stmt_4175_sample_completed_ &-> ($null)
        call_stmt_4175_update_start_ &-> (call_stmt_4175_Update)
        call_stmt_4175_update_completed_ <-& (call_stmt_4175_Update)
        // end: 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
        // start:  		errorInterruptBit := (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  )) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1400
        // Source expression
        // (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  ))
        $T[CONCAT_u1_u8_4184_sample_start_] 
        $T[CONCAT_u1_u8_4184_sample_completed_] 
        $T[CONCAT_u1_u8_4184_update_start_] 
        $T[CONCAT_u1_u8_4184_update_completed_] 
        // ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 ))
        // (  $bitreduce |  tempErrorReg0 )
        // tempErrorReg0
        // (  $bitreduce |  tempErrorReg1 )
        // tempErrorReg1
        // start: Forward dependencies from ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) to transition CONCAT_u1_u8_4184_sample_start_
        CONCAT_u1_u8_4184_sample_start_ <-& (AND_u8_u8_4171_update_completed_)
        CONCAT_u1_u8_4184_sample_start_ <-& (AND_u8_u8_4162_update_completed_)
        // done: Forward dependencies from ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) to transition CONCAT_u1_u8_4184_sample_start_
        ;;[CONCAT_u1_u8_4184_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u1_u8_4184_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u1_u8_4184_sample_start_ &-> (CONCAT_u1_u8_4184_Sample)
        CONCAT_u1_u8_4184_sample_completed_ <-& (CONCAT_u1_u8_4184_Sample)
        CONCAT_u1_u8_4184_sample_completed_ &-> ($null)
        CONCAT_u1_u8_4184_update_start_ &-> (CONCAT_u1_u8_4184_Update)
        CONCAT_u1_u8_4184_update_completed_ <-& (CONCAT_u1_u8_4184_Update)
        // Target expression
        // (as target) errorInterruptBit
        // start: WAR dependencies for errorInterruptBit
        // done: WAR dependencies for errorInterruptBit
        // end:  		errorInterruptBit := (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  )) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for checkInterruptEnable
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for checkInterruptEnable
        // start:  		$volatile checkInterruptEnable := ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 )) $buffering 1
        //  file .Aa/sdhc.opt.aa, line 1401
        // volatile! 
        // Source expression
        // ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 ))
        // (  $bitreduce |  normalInterruptEnableVal0 )
        // normalInterruptEnableVal0
        // (  $bitreduce |  normalInterruptEnableVal1 )
        // normalInterruptEnableVal1
        // Target expression
        // (as target) checkInterruptEnable
        // start: WAR dependencies for checkInterruptEnable
        // ignored out-of-scope w_root 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
        // type of target is $uint<16>
        // ignored out-of-scope w_root 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
        // done: WAR dependencies for checkInterruptEnable
        // end:  		$volatile checkInterruptEnable := ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 )) $buffering 1
        // load-store dependencies..
        // memory-space  memory_space_0
        //  LOAD_dataErrorInterruptStatus_4155 load
        // memory-space  memory_space_3
        //  LOAD_errorInterruptFlag1_4159 load
        // memory-space  memory_space_4
        //  LOAD_errorInterruptFlag2_4168 load
        // memory-space  memory_space_8
        //  call_stmt_4175 store
      }
      assign_stmt_4124_to_assign_stmt_4192__entry__ |-> (assign_stmt_4124_to_assign_stmt_4192)
      assign_stmt_4124_to_assign_stmt_4192__exit__ <-| (assign_stmt_4124_to_assign_stmt_4192)
      // if-statement  
      //  file .Aa/sdhc.opt.aa, line 1402
      ;;[if_stmt_4193_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_4193__entry__ |-> (if_stmt_4193_dead_link)
      if_stmt_4193__exit__ <-| (if_stmt_4193_dead_link)
      ;;[if_stmt_4193_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (checkInterruptEnable == 1 )
        ;;[EQ_u1_u1_4196] 
        {
          // binary expression 
          ||[EQ_u1_u1_4196_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_4193__entry__ |-> (if_stmt_4193_eval_test)
      $P [EQ_u1_u1_4196_place]
      EQ_u1_u1_4196_place <-| (if_stmt_4193_eval_test)
      ;;[if_stmt_4193_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_4193_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_4196_place |-> (if_stmt_4193_if_link if_stmt_4193_else_link)
      $P [assign_stmt_4213_to_assign_stmt_4243__entry__] 
      $P [assign_stmt_4213_to_assign_stmt_4243__exit__] 
      ::[assign_stmt_4213_to_assign_stmt_4243] 
      {
        // start:  			interrupt := (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1403
        // Source expression
        // (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1)
        $T[AND_u8_u8_4212_sample_start_] 
        $T[AND_u8_u8_4212_sample_completed_] 
        $T[AND_u8_u8_4212_update_start_] 
        $T[AND_u8_u8_4212_update_completed_] 
        // ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0)
        // (((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1))
        // ((readDataTransferComplete | dataTransferComplete) | transferComplete)
        // (readDataTransferComplete | dataTransferComplete)
        // readDataTransferComplete
        // dataTransferComplete
        // transferComplete
        // ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)
        // normalInterruptStatusVar1
        // normalInterruptEnableVal0
        // normalInterruptFlag1
        $T[LOAD_normalInterruptFlag1_4211_sample_start_] 
        $T[LOAD_normalInterruptFlag1_4211_sample_completed_] 
        $T[LOAD_normalInterruptFlag1_4211_update_start_] 
        $T[LOAD_normalInterruptFlag1_4211_update_completed_] 
        $T[LOAD_normalInterruptFlag1_4211_word_address_calculated] 
        $T[LOAD_normalInterruptFlag1_4211_root_address_calculated] 
        LOAD_normalInterruptFlag1_4211_word_address_calculated <-& (LOAD_normalInterruptFlag1_4211_root_address_calculated)
        ;;[LOAD_normalInterruptFlag1_4211_Sample] 
        {
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[LOAD_normalInterruptFlag1_4211_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
          ;;[LOAD_normalInterruptFlag1_4211_Merge] 
          {
            $T [merge_req] $T [merge_ack]
          }
        }
        LOAD_normalInterruptFlag1_4211_sample_start_ <-& (LOAD_normalInterruptFlag1_4211_word_address_calculated)
        LOAD_normalInterruptFlag1_4211_sample_start_ &-> (LOAD_normalInterruptFlag1_4211_Sample)
        LOAD_normalInterruptFlag1_4211_sample_completed_ <-& (LOAD_normalInterruptFlag1_4211_Sample)
        LOAD_normalInterruptFlag1_4211_sample_completed_ &-> ($null)
        LOAD_normalInterruptFlag1_4211_update_start_ &-> (LOAD_normalInterruptFlag1_4211_Update)
        LOAD_normalInterruptFlag1_4211_update_completed_ <-& (LOAD_normalInterruptFlag1_4211_Update)
        // start: Forward dependencies from ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) to transition AND_u8_u8_4212_sample_start_
        // done: Forward dependencies from ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) to transition AND_u8_u8_4212_sample_start_
        // start: Forward dependencies from normalInterruptFlag1 to transition AND_u8_u8_4212_sample_start_
        AND_u8_u8_4212_sample_start_ <-& (LOAD_normalInterruptFlag1_4211_update_completed_)
        // done: Forward dependencies from normalInterruptFlag1 to transition AND_u8_u8_4212_sample_start_
        ;;[AND_u8_u8_4212_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_4212_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_4212_sample_start_ &-> (AND_u8_u8_4212_Sample)
        AND_u8_u8_4212_sample_completed_ <-& (AND_u8_u8_4212_Sample)
        AND_u8_u8_4212_sample_completed_ &-> ($null)
        AND_u8_u8_4212_update_start_ &-> (AND_u8_u8_4212_Update)
        AND_u8_u8_4212_update_completed_ <-& (AND_u8_u8_4212_Update)
        // Target expression
        // (as target) interrupt
        // start: WAR dependencies for interrupt
        // done: WAR dependencies for interrupt
        // end:  			interrupt := (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
        // start: 			$call writeSDHCRegisters (48  interrupt ) () 
        //  file .Aa/sdhc.opt.aa, line 1404
        $T[call_stmt_4216_sample_start_] 
        $T[call_stmt_4216_sample_completed_] 
        $T[call_stmt_4216_update_start_] 
        $T[call_stmt_4216_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // interrupt
        // start: Forward dependencies from interrupt to transition call_stmt_4216_sample_start_
        call_stmt_4216_sample_start_ <-& (AND_u8_u8_4212_update_completed_)
        // done: Forward dependencies from interrupt to transition call_stmt_4216_sample_start_
        ;;[call_stmt_4216_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4216_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4216_sample_start_ &-> (call_stmt_4216_Sample)
        call_stmt_4216_sample_completed_ <-& (call_stmt_4216_Sample)
        call_stmt_4216_sample_completed_ &-> ($null)
        call_stmt_4216_update_start_ &-> (call_stmt_4216_Update)
        call_stmt_4216_update_completed_ <-& (call_stmt_4216_Update)
        // end: 			$call writeSDHCRegisters (48  interrupt ) () 
        // start: 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
        //  file .Aa/sdhc.opt.aa, line 1405
        $T[call_stmt_4219_sample_start_] 
        $T[call_stmt_4219_sample_completed_] 
        $T[call_stmt_4219_update_start_] 
        $T[call_stmt_4219_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // errorInterruptBit
        // start: Forward dependencies from errorInterruptBit to transition call_stmt_4219_sample_start_
        // done: Forward dependencies from errorInterruptBit to transition call_stmt_4219_sample_start_
        ;;[call_stmt_4219_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4219_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4219_sample_start_ &-> (call_stmt_4219_Sample)
        call_stmt_4219_sample_completed_ <-& (call_stmt_4219_Sample)
        call_stmt_4219_sample_completed_ &-> ($null)
        call_stmt_4219_update_start_ &-> (call_stmt_4219_Update)
        call_stmt_4219_update_completed_ <-& (call_stmt_4219_Update)
        // end: 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
        // start: 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
        //  file .Aa/sdhc.opt.aa, line 1406
        $T[call_stmt_4222_sample_start_] 
        $T[call_stmt_4222_sample_completed_] 
        $T[call_stmt_4222_update_start_] 
        $T[call_stmt_4222_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_4222_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4222_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4222_sample_start_ &-> (call_stmt_4222_Sample)
        call_stmt_4222_sample_completed_ <-& (call_stmt_4222_Sample)
        call_stmt_4222_sample_completed_ &-> ($null)
        call_stmt_4222_update_start_ &-> (call_stmt_4222_Update)
        call_stmt_4222_update_completed_ <-& (call_stmt_4222_Update)
        // Call output argument 0
        // (as target) tempNormalSignal
        // start: WAR dependencies for tempNormalSignal
        // done: WAR dependencies for tempNormalSignal
        // end: 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
        // start:  			interruptLine := (tempNormalSignal & interrupt) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1407
        // Source expression
        // (tempNormalSignal & interrupt)
        $T[AND_u8_u8_4226_sample_start_] 
        $T[AND_u8_u8_4226_sample_completed_] 
        $T[AND_u8_u8_4226_update_start_] 
        $T[AND_u8_u8_4226_update_completed_] 
        // tempNormalSignal
        // interrupt
        // start: Forward dependencies from tempNormalSignal to transition AND_u8_u8_4226_sample_start_
        AND_u8_u8_4226_sample_start_ <-& (call_stmt_4222_update_completed_)
        // done: Forward dependencies from tempNormalSignal to transition AND_u8_u8_4226_sample_start_
        // start: Forward dependencies from interrupt to transition AND_u8_u8_4226_sample_start_
        AND_u8_u8_4226_sample_start_ <-& (AND_u8_u8_4212_update_completed_)
        // done: Forward dependencies from interrupt to transition AND_u8_u8_4226_sample_start_
        ;;[AND_u8_u8_4226_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u8_u8_4226_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u8_u8_4226_sample_start_ &-> (AND_u8_u8_4226_Sample)
        AND_u8_u8_4226_sample_completed_ <-& (AND_u8_u8_4226_Sample)
        AND_u8_u8_4226_sample_completed_ &-> ($null)
        AND_u8_u8_4226_update_start_ &-> (AND_u8_u8_4226_Update)
        AND_u8_u8_4226_update_completed_ <-& (AND_u8_u8_4226_Update)
        // Target expression
        // (as target) interruptLine
        // start: WAR dependencies for interruptLine
        // done: WAR dependencies for interruptLine
        // end:  			interruptLine := (tempNormalSignal & interrupt) $buffering 1// bits of buffering = 8. 
        // start:  			errorInterruptLine := ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1)) $buffering 1// bits of buffering = 8. 
        //  file .Aa/sdhc.opt.aa, line 1408
        // Source expression
        // ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1))
        $T[OR_u8_u8_4235_sample_start_] 
        $T[OR_u8_u8_4235_sample_completed_] 
        $T[OR_u8_u8_4235_update_start_] 
        $T[OR_u8_u8_4235_update_completed_] 
        // (tempErrorReg0 & errorInterruptSignalEnableVal0)
        // tempErrorReg0
        // errorInterruptSignalEnableVal0
        // (tempErrorReg1 & errorInterruptSignalEnableVal1)
        // tempErrorReg1
        // errorInterruptSignalEnableVal1
        // start: Forward dependencies from (tempErrorReg0 & errorInterruptSignalEnableVal0) to transition OR_u8_u8_4235_sample_start_
        // done: Forward dependencies from (tempErrorReg0 & errorInterruptSignalEnableVal0) to transition OR_u8_u8_4235_sample_start_
        // start: Forward dependencies from (tempErrorReg1 & errorInterruptSignalEnableVal1) to transition OR_u8_u8_4235_sample_start_
        // done: Forward dependencies from (tempErrorReg1 & errorInterruptSignalEnableVal1) to transition OR_u8_u8_4235_sample_start_
        ;;[OR_u8_u8_4235_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u8_u8_4235_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u8_u8_4235_sample_start_ &-> (OR_u8_u8_4235_Sample)
        OR_u8_u8_4235_sample_completed_ <-& (OR_u8_u8_4235_Sample)
        OR_u8_u8_4235_sample_completed_ &-> ($null)
        OR_u8_u8_4235_update_start_ &-> (OR_u8_u8_4235_Update)
        OR_u8_u8_4235_update_completed_ <-& (OR_u8_u8_4235_Update)
        // Target expression
        // (as target) errorInterruptLine
        // start: WAR dependencies for errorInterruptLine
        // done: WAR dependencies for errorInterruptLine
        // end:  			errorInterruptLine := ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1)) $buffering 1// bits of buffering = 8. 
        // start:  			SDHC_to_IRC_INT := ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1409
        // Source expression
        // ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine ))
        $T[OR_u1_u1_4242_sample_start_] 
        $T[OR_u1_u1_4242_sample_completed_] 
        $T[OR_u1_u1_4242_update_start_] 
        $T[OR_u1_u1_4242_update_completed_] 
        // (  $bitreduce |  interruptLine )
        // interruptLine
        // (  $bitreduce |  errorInterruptLine )
        // errorInterruptLine
        // start: Forward dependencies from (  $bitreduce |  interruptLine ) to transition OR_u1_u1_4242_sample_start_
        OR_u1_u1_4242_sample_start_ <-& (AND_u8_u8_4226_update_completed_)
        // done: Forward dependencies from (  $bitreduce |  interruptLine ) to transition OR_u1_u1_4242_sample_start_
        // start: Forward dependencies from (  $bitreduce |  errorInterruptLine ) to transition OR_u1_u1_4242_sample_start_
        OR_u1_u1_4242_sample_start_ <-& (OR_u8_u8_4235_update_completed_)
        // done: Forward dependencies from (  $bitreduce |  errorInterruptLine ) to transition OR_u1_u1_4242_sample_start_
        ;;[OR_u1_u1_4242_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[OR_u1_u1_4242_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        OR_u1_u1_4242_sample_start_ &-> (OR_u1_u1_4242_Sample)
        OR_u1_u1_4242_sample_completed_ <-& (OR_u1_u1_4242_Sample)
        OR_u1_u1_4242_sample_completed_ &-> ($null)
        OR_u1_u1_4242_update_start_ &-> (OR_u1_u1_4242_Update)
        OR_u1_u1_4242_update_completed_ <-& (OR_u1_u1_4242_Update)
        // Target expression
        // (as target) SDHC_to_IRC_INT
        $T[WPIPE_SDHC_to_IRC_INT_4237_sample_start_] 
        $T[WPIPE_SDHC_to_IRC_INT_4237_sample_completed_] 
        $T[WPIPE_SDHC_to_IRC_INT_4237_update_start_] 
        $T[WPIPE_SDHC_to_IRC_INT_4237_update_completed_] 
        ;;[WPIPE_SDHC_to_IRC_INT_4237_Sample] 
        {
          // pipe write sample-start SDHC_to_IRC_INT
          $T [req] $T [ack] 
        }
        ;;[WPIPE_SDHC_to_IRC_INT_4237_Update] 
        {
          // pipe write update (complete) SDHC_to_IRC_INT
          $T [req] $T [ack] 
        }
        WPIPE_SDHC_to_IRC_INT_4237_sample_start_ &-> (WPIPE_SDHC_to_IRC_INT_4237_Sample)
        WPIPE_SDHC_to_IRC_INT_4237_sample_completed_ <-& (WPIPE_SDHC_to_IRC_INT_4237_Sample)
        WPIPE_SDHC_to_IRC_INT_4237_update_start_ <-& (WPIPE_SDHC_to_IRC_INT_4237_sample_completed_)
        WPIPE_SDHC_to_IRC_INT_4237_update_start_ &-> (WPIPE_SDHC_to_IRC_INT_4237_Update)
        WPIPE_SDHC_to_IRC_INT_4237_update_completed_ <-& (WPIPE_SDHC_to_IRC_INT_4237_Update)
        // start: Forward dependencies from ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) to transition WPIPE_SDHC_to_IRC_INT_4237_sample_start_
        WPIPE_SDHC_to_IRC_INT_4237_sample_start_ <-& (OR_u1_u1_4242_update_completed_)
        // done: Forward dependencies from ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) to transition WPIPE_SDHC_to_IRC_INT_4237_sample_start_
        // end:  			SDHC_to_IRC_INT := ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // memory-space  memory_space_5
        //  LOAD_normalInterruptFlag1_4211 load
        // memory-space  memory_space_8
        //  call_stmt_4216 store
        //  call_stmt_4219 store
        $T [call_stmt_4216_call_stmt_4219_delay] $delay
        // call_stmt_4216(store) -> call_stmt_4219(store)
        call_stmt_4219_sample_start_ <-& (call_stmt_4216_call_stmt_4219_delay)
        call_stmt_4216_call_stmt_4219_delay <-& (call_stmt_4216_update_completed_)
        //  call_stmt_4222 load
        $T [call_stmt_4219_call_stmt_4222_delay] $delay
        // call_stmt_4219(store) -> call_stmt_4222(load)
        call_stmt_4222_sample_start_ <-& (call_stmt_4219_call_stmt_4222_delay)
        call_stmt_4219_call_stmt_4222_delay <-& (call_stmt_4219_update_completed_)
        // pipe read/write dependencies for pipe SDHC_to_IRC_INT
        // read-dependencies for pipe SDHC_to_IRC_INT
        // write-dependencies for pipe SDHC_to_IRC_INT
        // signal write dependencies for SDHC_to_IRC_INT
      }
      assign_stmt_4213_to_assign_stmt_4243__entry__ |-> (assign_stmt_4213_to_assign_stmt_4243)
      assign_stmt_4213_to_assign_stmt_4243__exit__ <-| (assign_stmt_4213_to_assign_stmt_4243)
      assign_stmt_4213_to_assign_stmt_4243__entry__ <-| (if_stmt_4193_if_link)
      assign_stmt_4213_to_assign_stmt_4243__exit__ |-> (if_stmt_4193__exit__)
      $P [call_stmt_4247_to_assign_stmt_4250__entry__] 
      $P [call_stmt_4247_to_assign_stmt_4250__exit__] 
      ::[call_stmt_4247_to_assign_stmt_4250] 
      {
        // start: 			$call writeSDHCRegisters (48  ZERO_8 ) () 
        //  file .Aa/sdhc.opt.aa, line 1411
        $T[call_stmt_4247_sample_start_] 
        $T[call_stmt_4247_sample_completed_] 
        $T[call_stmt_4247_update_start_] 
        $T[call_stmt_4247_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        ;;[call_stmt_4247_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_4247_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_4247_sample_start_ &-> (call_stmt_4247_Sample)
        call_stmt_4247_sample_completed_ <-& (call_stmt_4247_Sample)
        call_stmt_4247_sample_completed_ &-> ($null)
        call_stmt_4247_update_start_ &-> (call_stmt_4247_Update)
        call_stmt_4247_update_completed_ <-& (call_stmt_4247_Update)
        // end: 			$call writeSDHCRegisters (48  ZERO_8 ) () 
        // start:  			SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
        //  file .Aa/sdhc.opt.aa, line 1412
        // Target expression
        // (as target) SDHC_to_IRC_INT
        $T[WPIPE_SDHC_to_IRC_INT_4248_sample_start_] 
        $T[WPIPE_SDHC_to_IRC_INT_4248_sample_completed_] 
        $T[WPIPE_SDHC_to_IRC_INT_4248_update_start_] 
        $T[WPIPE_SDHC_to_IRC_INT_4248_update_completed_] 
        ;;[WPIPE_SDHC_to_IRC_INT_4248_Sample] 
        {
          // pipe write sample-start SDHC_to_IRC_INT
          $T [req] $T [ack] 
        }
        ;;[WPIPE_SDHC_to_IRC_INT_4248_Update] 
        {
          // pipe write update (complete) SDHC_to_IRC_INT
          $T [req] $T [ack] 
        }
        WPIPE_SDHC_to_IRC_INT_4248_sample_start_ &-> (WPIPE_SDHC_to_IRC_INT_4248_Sample)
        WPIPE_SDHC_to_IRC_INT_4248_sample_completed_ <-& (WPIPE_SDHC_to_IRC_INT_4248_Sample)
        WPIPE_SDHC_to_IRC_INT_4248_update_start_ <-& (WPIPE_SDHC_to_IRC_INT_4248_sample_completed_)
        WPIPE_SDHC_to_IRC_INT_4248_update_start_ &-> (WPIPE_SDHC_to_IRC_INT_4248_Update)
        WPIPE_SDHC_to_IRC_INT_4248_update_completed_ <-& (WPIPE_SDHC_to_IRC_INT_4248_Update)
        // end:  			SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // memory-space  memory_space_8
        //  call_stmt_4247 store
        // pipe read/write dependencies for pipe SDHC_to_IRC_INT
        // read-dependencies for pipe SDHC_to_IRC_INT
        // write-dependencies for pipe SDHC_to_IRC_INT
        // signal write dependencies for SDHC_to_IRC_INT
      }
      call_stmt_4247_to_assign_stmt_4250__entry__ |-> (call_stmt_4247_to_assign_stmt_4250)
      call_stmt_4247_to_assign_stmt_4250__exit__ <-| (call_stmt_4247_to_assign_stmt_4250)
      call_stmt_4247_to_assign_stmt_4250__entry__ <-| (if_stmt_4193_else_link)
      call_stmt_4247_to_assign_stmt_4250__exit__ |-> (if_stmt_4193__exit__)
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1204
      ;;[merge_stmt_3415_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_3415__entry__ |-> (merge_stmt_3415_dead_link)
      merge_stmt_3415__exit__ <-| (merge_stmt_3415_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1204  --------------------------
      ||[merge_stmt_3415__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_3415__entry__ |-> (merge_stmt_3415__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_3415_PhiReqMerge] 
      merge_stmt_3415_PhiReqMerge <-| ( merge_stmt_3415__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_3415_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_3415_PhiReqMerge |-> (merge_stmt_3415_PhiAck)
      merge_stmt_3415__exit__  <-| (merge_stmt_3415_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1204  --------------------------
      // control-path for merge  
      //  file .Aa/sdhc.opt.aa, line 1364
      ;;[merge_stmt_4035_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_4035__entry__ |-> (merge_stmt_4035_dead_link)
      merge_stmt_4035__exit__ <-| (merge_stmt_4035_dead_link)
      //---------------------   merge statement  file .Aa/sdhc.opt.aa, line 1364  --------------------------
      ||[merge_stmt_4035__entry___PhiReq] 
      {
        ;;[phi_stmt_4036] 
        {
          ||[phi_stmt_4036_sources] 
          {
            // sources for 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [R_ONE_8_4038_konst_delay_trans] $delay
          }
          $T [phi_stmt_4036_req] 
        }
        ;;[phi_stmt_4040] 
        {
          ||[phi_stmt_4040_sources] 
          {
            // sources for 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_4043_konst_delay_trans] $delay
          }
          $T [phi_stmt_4040_req] 
        }
        ;;[phi_stmt_4045] 
        {
          ||[phi_stmt_4045_sources] 
          {
            // sources for 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_4048_konst_delay_trans] $delay
          }
          $T [phi_stmt_4045_req] 
        }
        ;;[phi_stmt_4050] 
        {
          ||[phi_stmt_4050_sources] 
          {
            // sources for 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_4053_konst_delay_trans] $delay
          }
          $T [phi_stmt_4050_req] 
        }
        ;;[phi_stmt_4055] 
        {
          ||[phi_stmt_4055_sources] 
          {
            // sources for 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_4058_konst_delay_trans] $delay
          }
          $T [phi_stmt_4055_req] 
        }
      }
      merge_stmt_4035__entry__ |-> (merge_stmt_4035__entry___PhiReq)
      ||[loopError_PhiReq] 
      {
        ;;[phi_stmt_4036] 
        {
          ||[phi_stmt_4036_sources] 
          {
            // sources for 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_4036_req] 
        }
        ;;[phi_stmt_4040] 
        {
          ||[phi_stmt_4040_sources] 
          {
            // sources for 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_4040_req] 
        }
        ;;[phi_stmt_4045] 
        {
          ||[phi_stmt_4045_sources] 
          {
            // sources for 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_4045_req] 
        }
        ;;[phi_stmt_4050] 
        {
          ||[phi_stmt_4050_sources] 
          {
            // sources for 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_4050_req] 
        }
        ;;[phi_stmt_4055] 
        {
          ||[phi_stmt_4055_sources] 
          {
            // sources for 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_4055_req] 
        }
      }
      loopError |-> (loopError_PhiReq)
      $P [merge_stmt_4035_PhiReqMerge] 
      merge_stmt_4035_PhiReqMerge <-| ( merge_stmt_4035__entry___PhiReq  loopError_PhiReq )
      ||[merge_stmt_4035_PhiAck] 
      {
        $T [phi_stmt_4036_ack] 
        $T [phi_stmt_4040_ack] 
        $T [phi_stmt_4045_ack] 
        $T [phi_stmt_4050_ack] 
        $T [phi_stmt_4055_ack] 
      }
      merge_stmt_4035_PhiReqMerge |-> (merge_stmt_4035_PhiAck)
      merge_stmt_4035__exit__  <-| (merge_stmt_4035_PhiAck)
      //---------------------  end of merge statement  file .Aa/sdhc.opt.aa, line 1364  --------------------------
      merge_stmt_3415__entry__ <-| (branch_block_stmt_3414__entry__)
      assign_stmt_3418_to_assign_stmt_3462__entry__ <-| (merge_stmt_3415__exit__)
      if_stmt_3463__entry__ <-| (assign_stmt_3418_to_assign_stmt_3462__exit__)
      assign_stmt_4020_to_assign_stmt_4034__entry__ <-| (if_stmt_3463__exit__)
      merge_stmt_4035__entry__ <-| (assign_stmt_4020_to_assign_stmt_4034__exit__)
      call_stmt_4065_to_assign_stmt_4114__entry__ <-| (merge_stmt_4035__exit__)
      if_stmt_4115__entry__ <-| (call_stmt_4065_to_assign_stmt_4114__exit__)
      assign_stmt_4124_to_assign_stmt_4192__entry__ <-| (if_stmt_4115__exit__)
      if_stmt_4193__entry__ <-| (assign_stmt_4124_to_assign_stmt_4192__exit__)
      loopback <-| (if_stmt_4193__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1204
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1265
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1282
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1306
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1324
    // constant-object-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1364
    // constant-object-declarations for block %sdhc_daemon%loop
    //  file .Aa/sdhc.opt.aa, line 1202
    // constant-object-declarations for block %sdhc_daemon
    //  file .Aa/sdhc.opt.aa, line 1183
    // ZERO_1
    $constant $W[R_ZERO_1_3372_wire_constant] : $int<1> := _b0// 0
    // ZERO_1
    $constant $W[R_ZERO_1_3375_wire_constant] : $int<1> := _b0// 0
    // ZERO_1
    $constant $W[R_ZERO_1_3378_wire_constant] : $int<1> := _b0// 0
    // ONE_1
    $constant $W[R_ONE_1_3381_wire_constant] : $int<1> := _b1// 1
    // _hFF 
    $constant $W[konst_3384_wire_constant] : $int<8> := _b11111111// 255
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3383_word_address_0] : $pointer<memory_space_5> := _b0
    // _hFF 
    $constant $W[konst_3387_wire_constant] : $int<8> := _b11111111// 255
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_3386_word_address_0] : $pointer<memory_space_6> := _b0
    // _hFF 
    $constant $W[konst_3390_wire_constant] : $int<8> := _b11111111// 255
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3389_word_address_0] : $pointer<memory_space_3> := _b0
    // _hFF 
    $constant $W[konst_3393_wire_constant] : $int<8> := _b11111111// 255
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_3392_word_address_0] : $pointer<memory_space_4> := _b0
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_3397_wire_constant] : $int<10> := _b0000000000// 0
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_3395_word_address_0] : $pointer<memory_space_9> := _b0
    // ($bitcast ($uint<10>) 0  )
    $constant $W[type_cast_3401_wire_constant] : $int<10> := _b0000000000// 0
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_3399_word_address_0] : $pointer<memory_space_7> := _b0
    // ZERO_1
    $constant $W[R_ZERO_1_3404_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3403_word_address_0] : $pointer<memory_space_1> := _b0
    // ZERO_1
    $constant $W[R_ZERO_1_3407_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3406_word_address_0] : $pointer<memory_space_2> := _b0
    // ZERO_8
    $constant $W[R_ZERO_8_3410_wire_constant] : $int<8> := _b00000000// 0
    // dataErrorInterruptStatus
    $constant $W[STORE_dataErrorInterruptStatus_3409_word_address_0] : $pointer<memory_space_0> := _b0
    // 	$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1201
    // ZERO_2
    $constant $W[R_ZERO_2_3412_wire_constant] : $int<2> := _b00// 0
    // constant-declarations for block %sdhc_daemon%loop
    //  file .Aa/sdhc.opt.aa, line 1202
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1204
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1218
    // 0 
    $constant $W[konst_3465_wire_constant] : $int<1> := _b0// 0
    // 			$guard (b3) $call sdhc_register_write (address data3 ) () 
    //  file .Aa/sdhc.opt.aa, line 1219
    // 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1220
    // 1 
    $constant $W[konst_3473_wire_constant] : $int<8> := _b00000001// 1
    // 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1221
    // 2 
    $constant $W[konst_3479_wire_constant] : $int<8> := _b00000010// 2
    // 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
    //  file .Aa/sdhc.opt.aa, line 1222
    // 3 
    $constant $W[konst_3485_wire_constant] : $int<8> := _b00000011// 3
    // ZERO_32
    $constant $W[R_ZERO_32_3490_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 3 
    $constant $W[konst_3494_wire_constant] : $int<8> := _b00000011// 3
    // 47 
    $constant $W[konst_3496_wire_constant] : $int<8> := _b00101111// 47
    // 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
    //  file .Aa/sdhc.opt.aa, line 1225
    // 47 
    $constant $W[konst_3498_wire_constant] : $int<8> := _b00101111// 47
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_3503_wire_constant] : $int<8> := _b00000000// 0
    // 			$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1227
    // ZERO_2
    $constant $W[R_ZERO_2_3505_wire_constant] : $int<2> := _b00// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_3510_wire_constant] : $int<8> := _b00000001// 1
    // 			$call resetRegisters (ONE_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1230
    // ONE_2
    $constant $W[R_ONE_2_3512_wire_constant] : $int<2> := _b01// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 2 
    $constant $W[konst_3517_wire_constant] : $int<8> := _b00000010// 2
    // 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1233
    // ($bitcast ($uint<2>) 2  )
    $constant $W[type_cast_3520_wire_constant] : $int<2> := _b10// 2
    // 			$call readSDHCRegisters (36  ) (presentStateVal ) 
    //  file .Aa/sdhc.opt.aa, line 1236
    // 36 
    $constant $W[konst_3524_wire_constant] : $int<8> := _b00100100// 36
    // 0 
    $constant $W[konst_3529_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_3531_wire_constant] : $int<1> := _b0// 0
    // 3 
    $constant $W[konst_3536_wire_constant] : $int<8> := _b00000011// 3
    // _h0f 
    $constant $W[konst_3538_wire_constant] : $int<8> := _b00001111// 15
    // 1 
    $constant $W[konst_3545_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_3547_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // _h01 
    $constant $W[konst_3556_wire_constant] : $int<8> := _b00000001// 1
    // 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
    //  file .Aa/sdhc.opt.aa, line 1242
    // 36 
    $constant $W[konst_3559_wire_constant] : $int<8> := _b00100100// 36
    // ZERO_1
    $constant $W[R_ZERO_1_3563_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3562_word_address_0] : $pointer<memory_space_1> := _b0
    // ZERO_1
    $constant $W[R_ZERO_1_3566_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3565_word_address_0] : $pointer<memory_space_2> := _b0
    // 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1245
    // _hFF 
    $constant $W[konst_3576_wire_constant] : $int<8> := _b11111111// 255
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3575_word_address_0] : $pointer<memory_space_5> := _b0
    // _hFF 
    $constant $W[konst_3579_wire_constant] : $int<8> := _b11111111// 255
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_3578_word_address_0] : $pointer<memory_space_6> := _b0
    // _hFF 
    $constant $W[konst_3582_wire_constant] : $int<8> := _b11111111// 255
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3581_word_address_0] : $pointer<memory_space_3> := _b0
    // _hFF 
    $constant $W[konst_3585_wire_constant] : $int<8> := _b11111111// 255
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_3584_word_address_0] : $pointer<memory_space_4> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $constant $W[LOAD_rxBufferPointer_3589_word_address_0] : $pointer<memory_space_7> := _b0
    // 0 
    $constant $W[konst_3590_wire_constant] : $int<10> := _b0000000000// 0
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
    //  file .Aa/sdhc.opt.aa, line 1252
    // 37 
    $constant $W[konst_3592_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1253
    // 37 
    $constant $W[konst_3595_wire_constant] : $int<8> := _b00100101// 37
    // _h08 
    $constant $W[konst_3597_wire_constant] : $int<8> := _b00001000// 8
    // 			bufferReadReady := (ZERO_8 | _h20 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1254
    $constant $W[bufferReadReady_3604] : $int<8> := _b00100000 // 32
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_3606_word_address_0] : $pointer<memory_space_5> := _b0
    // _h20 
    $constant $W[konst_3607_wire_constant] : $int<8> := _b00100000// 32
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3605_word_address_0] : $pointer<memory_space_5> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $constant $W[LOAD_txBufferPointer_3612_word_address_0] : $pointer<memory_space_9> := _b0
    // 512 
    $constant $W[konst_3613_wire_constant] : $int<10> := _b1000000000// 512
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
    //  file .Aa/sdhc.opt.aa, line 1258
    // 37 
    $constant $W[konst_3615_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1259
    // 37 
    $constant $W[konst_3618_wire_constant] : $int<8> := _b00100101// 37
    // _h04 
    $constant $W[konst_3620_wire_constant] : $int<8> := _b00000100// 4
    // 			bufferWriteReady := (ZERO_8 | _h10 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1260
    $constant $W[bufferWriteReady_3627] : $int<8> := _b00010000 // 16
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_3629_word_address_0] : $pointer<memory_space_5> := _b0
    // _h10 
    $constant $W[konst_3630_wire_constant] : $int<8> := _b00010000// 16
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3628_word_address_0] : $pointer<memory_space_5> := _b0
    // 32 
    $constant $W[konst_3636_wire_constant] : $int<8> := _b00100000// 32
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_3641_wire_constant] : $int<1> := _b1// 1
    // txBufferPointer
    $constant $W[LOAD_txBufferPointer_3643_word_address_0] : $pointer<memory_space_9> := _b0
    // 512 
    $constant $W[konst_3644_wire_constant] : $int<10> := _b1000000000// 512
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1265
    // constant-declarations for phi:  				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1266
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_3652_wire_constant] : $int<8> := _b00000000// 0
    // 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
    //  file .Aa/sdhc.opt.aa, line 1269
    // 32 
    $constant $W[konst_3654_wire_constant] : $int<8> := _b00100000// 32
    // 1 
    $constant $W[konst_3664_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4 
    $constant $W[konst_3669_wire_constant] : $int<8> := _b00000100// 4
    // txBufferPointer
    $constant $W[LOAD_txBufferPointer_3674_word_address_0] : $pointer<memory_space_9> := _b0
    // 4 
    $constant $W[konst_3675_wire_constant] : $int<10> := _b0000000100// 4
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_3673_word_address_0] : $pointer<memory_space_9> := _b0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $constant $W[LOAD_txBufferPointer_3679_word_address_0] : $pointer<memory_space_9> := _b0
    // 512 
    $constant $W[konst_3680_wire_constant] : $int<10> := _b1000000000// 512
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
    //  file .Aa/sdhc.opt.aa, line 1277
    // 37 
    $constant $W[konst_3682_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1278
    // 37 
    $constant $W[konst_3685_wire_constant] : $int<8> := _b00100101// 37
    // _hfb 
    $constant $W[konst_3687_wire_constant] : $int<8> := _b11111011// 251
    // 			$call readSDHCRegisters (12  ) (transferRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 1279
    // 12 
    $constant $W[konst_3690_wire_constant] : $int<8> := _b00001100// 12
    // _h20 
    $constant $W[konst_3695_wire_constant] : $int<8> := _b00100000// 32
    // _h02 
    $constant $W[konst_3701_wire_constant] : $int<8> := _b00000010// 2
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1282
    // constant-declarations for phi:  				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1283
    // ONE_8
    $constant $W[R_ONE_8_3710_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for phi:  				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1285
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_3715_wire_constant] : $int<16> := _b0000000000000000// 0
    // 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1288
    // 6 
    $constant $W[konst_3718_wire_constant] : $int<8> := _b00000110// 6
    // 1 
    $constant $W[konst_3731_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_3736_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_3742_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1296
    // 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1297
    // 7 
    $constant $W[konst_3759_wire_constant] : $int<8> := _b00000111// 7
    // 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1298
    // 6 
    $constant $W[konst_3763_wire_constant] : $int<8> := _b00000110// 6
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_3768_word_address_0] : $pointer<memory_space_5> := _b0
    // _h02 
    $constant $W[konst_3769_wire_constant] : $int<8> := _b00000010// 2
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3767_word_address_0] : $pointer<memory_space_5> := _b0
    // errorInterruptFlag1
    $constant $W[LOAD_errorInterruptFlag1_3773_word_address_0] : $pointer<memory_space_3> := _b0
    // _h60 
    $constant $W[konst_3774_wire_constant] : $int<8> := _b01100000// 96
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3772_word_address_0] : $pointer<memory_space_3> := _b0
    // 32 
    $constant $W[konst_3782_wire_constant] : $int<8> := _b00100000// 32
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_3787_wire_constant] : $int<1> := _b1// 1
    // rxBufferPointer
    $constant $W[LOAD_rxBufferPointer_3789_word_address_0] : $pointer<memory_space_7> := _b0
    // 0 
    $constant $W[konst_3790_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1306
    // constant-declarations for phi:  				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1307
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_3797_wire_constant] : $int<8> := _b00000000// 0
    // 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1311
    // 32 
    $constant $W[konst_3803_wire_constant] : $int<8> := _b00100000// 32
    // 1 
    $constant $W[konst_3810_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 4 
    $constant $W[konst_3815_wire_constant] : $int<8> := _b00000100// 4
    // rxBufferPointer
    $constant $W[LOAD_rxBufferPointer_3820_word_address_0] : $pointer<memory_space_7> := _b0
    // 4 
    $constant $W[konst_3821_wire_constant] : $int<10> := _b0000000100// 4
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_3819_word_address_0] : $pointer<memory_space_7> := _b0
    // 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
    //  file .Aa/sdhc.opt.aa, line 1317
    // 12 
    $constant $W[konst_3824_wire_constant] : $int<8> := _b00001100// 12
    // _h20 
    $constant $W[konst_3829_wire_constant] : $int<8> := _b00100000// 32
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $constant $W[LOAD_rxBufferPointer_3834_word_address_0] : $pointer<memory_space_7> := _b0
    // 0 
    $constant $W[konst_3835_wire_constant] : $int<10> := _b0000000000// 0
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
    //  file .Aa/sdhc.opt.aa, line 1320
    // 37 
    $constant $W[konst_3837_wire_constant] : $int<8> := _b00100101// 37
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1321
    // 37 
    $constant $W[konst_3840_wire_constant] : $int<8> := _b00100101// 37
    // _hf7 
    $constant $W[konst_3842_wire_constant] : $int<8> := _b11110111// 247
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 1 
    $constant $W[konst_3847_wire_constant] : $int<1> := _b1// 1
    // _h02 
    $constant $W[konst_3851_wire_constant] : $int<8> := _b00000010// 2
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1324
    // constant-declarations for phi:  				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1325
    // ONE_8
    $constant $W[R_ONE_8_3860_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for phi:  				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1327
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_3865_wire_constant] : $int<16> := _b0000000000000000// 0
    // 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1330
    // 6 
    $constant $W[konst_3868_wire_constant] : $int<8> := _b00000110// 6
    // 1 
    $constant $W[konst_3881_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_3886_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_3892_wire_constant] : $int<16> := _b0000000000000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_3902_wire_constant] : $int<16> := _b0000000000000000// 0
    // 1 
    $constant $W[konst_3906_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
    //  file .Aa/sdhc.opt.aa, line 1340
    // ZERO_1
    $constant $W[R_ZERO_1_3913_wire_constant] : $int<1> := _b0// 0
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3912_word_address_0] : $pointer<memory_space_1> := _b0
    // ONE_1
    $constant $W[R_ONE_1_3916_wire_constant] : $int<1> := _b1// 1
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3915_word_address_0] : $pointer<memory_space_2> := _b0
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1343
    // 7 
    $constant $W[konst_3918_wire_constant] : $int<8> := _b00000111// 7
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1344
    // 6 
    $constant $W[konst_3922_wire_constant] : $int<8> := _b00000110// 6
    // ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
    // ($bitcast ($uint<8>) 2  )
    $constant $W[type_cast_3929_wire_constant] : $int<8> := _b00000010// 2
    // ZERO_8
    $constant $W[R_ZERO_8_3930_wire_constant] : $int<8> := _b00000000// 0
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_3934_word_address_0] : $pointer<memory_space_5> := _b0
    // _h02 
    $constant $W[konst_3935_wire_constant] : $int<8> := _b00000010// 2
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3933_word_address_0] : $pointer<memory_space_5> := _b0
    // errorInterruptFlag1
    $constant $W[LOAD_errorInterruptFlag1_3939_word_address_0] : $pointer<memory_space_3> := _b0
    // _h60 
    $constant $W[konst_3940_wire_constant] : $int<8> := _b01100000// 96
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3938_word_address_0] : $pointer<memory_space_3> := _b0
    // 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
    //  file .Aa/sdhc.opt.aa, line 1352
    // 0 
    $constant $W[konst_3948_wire_constant] : $int<8> := _b00000000// 0
    // 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
    //  file .Aa/sdhc.opt.aa, line 1353
    // 1 
    $constant $W[konst_3953_wire_constant] : $int<8> := _b00000001// 1
    // 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
    //  file .Aa/sdhc.opt.aa, line 1354
    // 2 
    $constant $W[konst_3958_wire_constant] : $int<8> := _b00000010// 2
    // 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
    //  file .Aa/sdhc.opt.aa, line 1355
    // 3 
    $constant $W[konst_3963_wire_constant] : $int<8> := _b00000011// 3
    // ( $mux b3 readTemp3  ZERO_8 ) 
    // ZERO_8
    $constant $W[R_ZERO_8_3970_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux b2 readTemp2  ZERO_8 ) 
    // ZERO_8
    $constant $W[R_ZERO_8_3976_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux b1 readTemp1  ZERO_8 ) 
    // ZERO_8
    $constant $W[R_ZERO_8_3982_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux b0 readTemp0  ZERO_8 ) 
    // ZERO_8
    $constant $W[R_ZERO_8_3988_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  ) 
    // dataRxEnrty1
    $constant $W[LOAD_dataRxEnrty1_4002_word_address_0] : $pointer<memory_space_1> := _b0
    // _b0 
    $constant $W[konst_4004_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) 
    // dataRxEnrty2
    $constant $W[LOAD_dataRxEnrty2_4006_word_address_0] : $pointer<memory_space_2> := _b0
    // _b0 
    $constant $W[konst_4008_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) 
    // dataRxEnrty1
    $constant $W[LOAD_dataRxEnrty1_4011_word_address_0] : $pointer<memory_space_1> := _b0
    // dataRxEnrty2
    $constant $W[LOAD_dataRxEnrty2_4013_word_address_0] : $pointer<memory_space_2> := _b0
    // ZERO_8
    $constant $W[R_ZERO_8_4016_wire_constant] : $int<8> := _b00000000// 0
    // _b0 
    $constant $W[konst_4017_wire_constant] : $int<8> := _b00000000// 0
    // dataErrorInterruptStatus
    $constant $W[STORE_dataErrorInterruptStatus_4001_word_address_0] : $pointer<memory_space_0> := _b0
    // sdhcRegisters[50 ]
    $constant $W[array_obj_ref_4024_word_address_0] : $pointer<memory_space_8> := _b0110010
    // dataErrorInterruptStatus
    $constant $W[LOAD_dataErrorInterruptStatus_4025_word_address_0] : $pointer<memory_space_0> := _b0
    // errorInterruptFlag1
    $constant $W[LOAD_errorInterruptFlag1_4029_word_address_0] : $pointer<memory_space_3> := _b0
    // sdhcRegisters[54 ]
    $constant $W[array_obj_ref_4032_word_address_0] : $pointer<memory_space_8> := _b0110110
    // sdhcRegisters[50 ]
    $constant $W[array_obj_ref_4022_word_address_0] : $pointer<memory_space_8> := _b0110010
    // constant-declarations for block %sdhc_daemon%loop%
    //  file .Aa/sdhc.opt.aa, line 1364
    // constant-declarations for phi:  			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1365
    // ONE_8
    $constant $W[R_ONE_8_4038_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for phi:  			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1367
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_4043_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1369
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_4048_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1371
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_4053_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1373
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_4058_wire_constant] : $int<16> := _b0000000000000000// 0
    // 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1376
    // 50 
    $constant $W[konst_4061_wire_constant] : $int<8> := _b00110010// 50
    // 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1378
    // 54 
    $constant $W[konst_4072_wire_constant] : $int<8> := _b00110110// 54
    // 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1380
    // 58 
    $constant $W[konst_4083_wire_constant] : $int<8> := _b00111010// 58
    // 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1382
    // 52 
    $constant $W[konst_4094_wire_constant] : $int<8> := _b00110100// 52
    // 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1384
    // 44 
    $constant $W[konst_4105_wire_constant] : $int<8> := _b00101100// 44
    // 1 
    $constant $W[konst_4112_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // 0 
    $constant $W[konst_4117_wire_constant] : $int<8> := _b00000000// 0
    // dataErrorInterruptStatus
    $constant $W[LOAD_dataErrorInterruptStatus_4155_word_address_0] : $pointer<memory_space_0> := _b0
    // errorInterruptFlag1
    $constant $W[LOAD_errorInterruptFlag1_4159_word_address_0] : $pointer<memory_space_3> := _b0
    // errorInterruptFlag2
    $constant $W[LOAD_errorInterruptFlag2_4168_word_address_0] : $pointer<memory_space_4> := _b0
    // 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1399
    // 51 
    $constant $W[konst_4173_wire_constant] : $int<8> := _b00110011// 51
    // ($bitcast ($uint<7>) 0  )
    $constant $W[type_cast_4183_wire_constant] : $int<7> := _b0000000// 0
    // if-statement  
    //  file .Aa/sdhc.opt.aa, line 1402
    // 1 
    $constant $W[konst_4195_wire_constant] : $int<1> := _b1// 1
    // (bufferReadReady | bufferWriteReady)
    $constant $W[OR_u8_u8_4205_wire_constant] : $int<8> := _b00110000// 48
    // normalInterruptFlag1
    $constant $W[LOAD_normalInterruptFlag1_4211_word_address_0] : $pointer<memory_space_5> := _b0
    // 			$call writeSDHCRegisters (48  interrupt ) () 
    //  file .Aa/sdhc.opt.aa, line 1404
    // 48 
    $constant $W[konst_4214_wire_constant] : $int<8> := _b00110000// 48
    // 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
    //  file .Aa/sdhc.opt.aa, line 1405
    // 49 
    $constant $W[konst_4217_wire_constant] : $int<8> := _b00110001// 49
    // 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
    //  file .Aa/sdhc.opt.aa, line 1406
    // 56 
    $constant $W[konst_4220_wire_constant] : $int<8> := _b00111000// 56
    // 			$call writeSDHCRegisters (48  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1411
    // 48 
    $constant $W[konst_4245_wire_constant] : $int<8> := _b00110000// 48
    // ZERO_8
    $constant $W[R_ZERO_8_4246_wire_constant] : $int<8> := _b00000000// 0
    // ZERO_1
    $constant $W[R_ZERO_1_4249_wire_constant] : $int<1> := _b0// 0
    // 	SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1188
    // SDHC_to_IRC_INT
    // 	oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1189
    // oe
    // 	busy := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1190
    // busy
    // 	readyClockCountEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1191
    // readyClockCountEnable
    // 	normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1192
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3383_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3383_data_0] : $int<8>
    // 	normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1193
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_3386_word_address_0] : $pointer<memory_space_6> := _b0
    $W[STORE_normalInterruptFlag2_3386_data_0] : $int<8>
    // 	errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1194
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3389_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_errorInterruptFlag1_3389_data_0] : $int<8>
    // 	errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1195
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_3392_word_address_0] : $pointer<memory_space_4> := _b0
    $W[STORE_errorInterruptFlag2_3392_data_0] : $int<8>
    // 	txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1196
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_3395_word_address_0] : $pointer<memory_space_9> := _b0
    $W[STORE_txBufferPointer_3395_data_0] : $int<10>
    // 	rxBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1197
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_3399_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_rxBufferPointer_3399_data_0] : $int<10>
    // 	dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1198
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3403_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_dataRxEnrty1_3403_data_0] : $int<1>
    // 	dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1199
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3406_word_address_0] : $pointer<memory_space_2> := _b0
    $W[STORE_dataRxEnrty2_3406_data_0] : $int<1>
    // 	dataErrorInterruptStatus := ZERO_8 $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1200
    // dataErrorInterruptStatus
    $constant $W[STORE_dataErrorInterruptStatus_3409_word_address_0] : $pointer<memory_space_0> := _b0
    $W[STORE_dataErrorInterruptStatus_3409_data_0] : $int<8>
    // 	$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1201
    // block %sdhc_daemon%loop
    //  file .Aa/sdhc.opt.aa, line 1202
    // 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
    //  file .Aa/sdhc.opt.aa, line 1206
    // request
    $W[request_3418] : $int<64>
    // 		$volatile rwbar := ( $slice request 63 63 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1207
    // rwbar
    $W[rwbar_3422] : $int<1>
    // 		$volatile bytemask := ( $slice request 62 59 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1208
    // bytemask
    $W[bytemask_3426] : $int<4>
    // 		$volatile address := ( $slice request 39 32 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1209
    // address
    $W[address_3430] : $int<8>
    // 		$volatile data3 := ( $slice request 31 24 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1210
    // data3
    $W[data3_3434] : $int<8>
    // 		$volatile data2 := ( $slice request 23 16 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1211
    // data2
    $W[data2_3438] : $int<8>
    // 		$volatile data1 := ( $slice request 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1212
    // data1
    $W[data1_3442] : $int<8>
    // 		$volatile data0 := ( $slice request 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1213
    // data0
    $W[data0_3446] : $int<8>
    // 		$volatile b3 := ( $slice bytemask 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1214
    // b3
    $W[b3_3450] : $int<1>
    // 		$volatile b2 := ( $slice bytemask 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1215
    // b2
    $W[b2_3454] : $int<1>
    // 		$volatile b1 := ( $slice bytemask 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1216
    // b1
    $W[b1_3458] : $int<1>
    // 		$volatile b0 := ( $slice bytemask 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1217
    // b0
    $W[b0_3462] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1218
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_3466_wire] : $int<1>
    // 			$guard (b3) $call sdhc_register_write (address data3 ) () 
    //  file .Aa/sdhc.opt.aa, line 1219
    // 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1220
    // (address + 1 )
    $intermediate $W[ADD_u8_u8_3474_wire] : $int<8>
    // 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1221
    // (address + 2 )
    $intermediate $W[ADD_u8_u8_3480_wire] : $int<8>
    // 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
    //  file .Aa/sdhc.opt.aa, line 1222
    // (address + 3 )
    $intermediate $W[ADD_u8_u8_3486_wire] : $int<8>
    // 			sdhc_to_peripheral_bridge_response := ZERO_32 $buffering 1// bits of buffering = 32. 
    //  file .Aa/sdhc.opt.aa, line 1223
    // sdhc_to_peripheral_bridge_response
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address + 3 )
    $intermediate $W[ADD_u8_u8_3495_wire] : $int<8>
    // ((address + 3 ) == 47 )
    $intermediate $W[EQ_u8_u1_3497_wire] : $int<1>
    // 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
    //  file .Aa/sdhc.opt.aa, line 1225
    // softwareResetVal
    $W[softwareResetVal_3500] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 0 )
    $intermediate $W[BITSEL_u8_u1_3504_wire] : $int<1>
    // 			$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1227
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 1 )
    $intermediate $W[BITSEL_u8_u1_3511_wire] : $int<1>
    // 			$call resetRegisters (ONE_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1230
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 2 )
    $intermediate $W[BITSEL_u8_u1_3518_wire] : $int<1>
    // 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1233
    // 			$call readSDHCRegisters (36  ) (presentStateVal ) 
    //  file .Aa/sdhc.opt.aa, line 1236
    // presentStateVal
    $W[presentStateVal_3526] : $int<8>
    // 			$volatile commandInhibit_CMD := ((presentStateVal [] 0 ) == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1237
    // (presentStateVal [] 0 )
    $intermediate $W[BITSEL_u8_u1_3530_wire] : $int<1>
    // commandInhibit_CMD
    $W[commandInhibit_CMD_3533] : $int<1>
    // 			$volatile addresscheck := (((address + 3 ) == _h0f ) & b0) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1238
    // (address + 3 )
    $intermediate $W[ADD_u8_u8_3537_wire] : $int<8>
    // ((address + 3 ) == _h0f )
    $intermediate $W[EQ_u8_u1_3539_wire] : $int<1>
    // addresscheck
    $W[addresscheck_3542] : $int<1>
    // 			$volatile presentState := ((presentStateVal >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1239
    // (presentStateVal >> 1 )
    $intermediate $W[LSHR_u8_u8_3546_wire] : $int<8>
    // presentState
    $W[presentState_3549] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (addresscheck & commandInhibit_CMD)
    $intermediate $W[AND_u1_u1_3553_wire] : $int<1>
    // 			$volatile tempPresentStateHere := (presentState | _h01 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1241
    // tempPresentStateHere
    $W[tempPresentStateHere_3558] : $int<8>
    // 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
    //  file .Aa/sdhc.opt.aa, line 1242
    // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1243
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3562_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_dataRxEnrty1_3562_data_0] : $int<1>
    // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1244
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3565_word_address_0] : $pointer<memory_space_2> := _b0
    $W[STORE_dataRxEnrty2_3565_data_0] : $int<1>
    // 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1245
    // normalInterruptStatusVar1
    $W[normalInterruptStatusVar1_3574] : $int<8>
    // normalInterruptStatusVar2
    $W[normalInterruptStatusVar2_3574] : $int<8>
    // errorInterruptStatusVar1
    $W[errorInterruptStatusVar1_3574] : $int<8>
    // errorInterruptStatusVar2
    $W[errorInterruptStatusVar2_3574] : $int<8>
    // dataErrorInterruptStatusVar1
    $W[dataErrorInterruptStatusVar1_3574] : $int<8>
    // dataTransferComplete
    $W[dataTransferComplete_3574] : $int<8>
    // 			normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1246
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3575_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3575_data_0] : $int<8>
    // 			normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1247
    // normalInterruptFlag2
    $constant $W[STORE_normalInterruptFlag2_3578_word_address_0] : $pointer<memory_space_6> := _b0
    $W[STORE_normalInterruptFlag2_3578_data_0] : $int<8>
    // 			errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1248
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3581_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_errorInterruptFlag1_3581_data_0] : $int<8>
    // 			errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1249
    // errorInterruptFlag2
    $constant $W[STORE_errorInterruptFlag2_3584_word_address_0] : $pointer<memory_space_4> := _b0
    $W[STORE_errorInterruptFlag2_3584_data_0] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3589_wire] : $int<10>
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3589_data_0] : $int<10>
    // (rxBufferPointer > 0 )
    $intermediate $W[UGT_u10_u1_3591_wire] : $int<1>
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
    //  file .Aa/sdhc.opt.aa, line 1252
    // tempPresentState_1_1
    $W[tempPresentState_1_1_3594] : $int<8>
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1253
    // (tempPresentState_1_1 | _h08 )
    $intermediate $W[OR_u8_u8_3598_wire] : $int<8>
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h20 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1255
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3606_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3606_data_0] : $int<8>
    // (normalInterruptFlag1 | _h20 )
    $intermediate $W[OR_u8_u8_3608_wire] : $int<8>
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3605_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3605_data_0] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $W[LOAD_txBufferPointer_3612_wire] : $int<10>
    // txBufferPointer
    $W[LOAD_txBufferPointer_3612_data_0] : $int<10>
    // (txBufferPointer < 512 )
    $intermediate $W[ULT_u10_u1_3614_wire] : $int<1>
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
    //  file .Aa/sdhc.opt.aa, line 1258
    // tempPresentState_1_2
    $W[tempPresentState_1_2_3617] : $int<8>
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1259
    // (tempPresentState_1_2 | _h04 )
    $intermediate $W[OR_u8_u8_3621_wire] : $int<8>
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h10 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1261
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3629_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3629_data_0] : $int<8>
    // (normalInterruptFlag1 | _h10 )
    $intermediate $W[OR_u8_u8_3631_wire] : $int<8>
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3628_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3628_data_0] : $int<8>
    // 			$volatile bufferDataPortCheck := (address == 32 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1263
    // bufferDataPortCheck
    $W[bufferDataPortCheck_3638] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (bufferDataPortCheck == 1 )
    $intermediate $W[EQ_u1_u1_3642_wire] : $int<1>
    // txBufferPointer
    $W[LOAD_txBufferPointer_3643_wire] : $int<10>
    // txBufferPointer
    $W[LOAD_txBufferPointer_3643_data_0] : $int<10>
    // (txBufferPointer < 512 )
    $intermediate $W[ULT_u10_u1_3645_wire] : $int<1>
    // ((bufferDataPortCheck == 1 ) & (txBufferPointer < 512 ))
    $intermediate $W[AND_u1_u1_3646_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1265
    // 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1266
    $W[next_B_3666_3650_buffered] : $int<8>
    // B
    $W[B_3648] : $int<8>
    // 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
    //  file .Aa/sdhc.opt.aa, line 1269
    // (32  + B)
    $intermediate $W[ADD_u8_u8_3656_wire] : $int<8>
    // tempBuf
    $W[tempBuf_3658] : $int<8>
    // 			dataBufferTx := tempBuf $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1270
    // dataBufferTx
    // 			$volatile next_B := (B + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1271
    // next_B
    $W[next_B_3666] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_B < 4 )
    $intermediate $W[ULT_u8_u1_3670_wire] : $int<1>
    // 			txBufferPointer := (txBufferPointer + 4 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1275
    // txBufferPointer
    $W[LOAD_txBufferPointer_3674_wire] : $int<10>
    // txBufferPointer
    $W[LOAD_txBufferPointer_3674_data_0] : $int<10>
    // (txBufferPointer + 4 )
    $intermediate $W[ADD_u10_u10_3676_wire] : $int<10>
    // txBufferPointer
    $constant $W[STORE_txBufferPointer_3673_word_address_0] : $pointer<memory_space_9> := _b0
    $W[STORE_txBufferPointer_3673_data_0] : $int<10>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $W[LOAD_txBufferPointer_3679_wire] : $int<10>
    // txBufferPointer
    $W[LOAD_txBufferPointer_3679_data_0] : $int<10>
    // (txBufferPointer == 512 )
    $intermediate $W[EQ_u10_u1_3681_wire] : $int<1>
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
    //  file .Aa/sdhc.opt.aa, line 1277
    // tempPresentState_1_3
    $W[tempPresentState_1_3_3684] : $int<8>
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1278
    // (tempPresentState_1_3 | _hfb )
    $intermediate $W[OR_u8_u8_3688_wire] : $int<8>
    // 			$call readSDHCRegisters (12  ) (transferRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 1279
    // transferRegVal
    $W[transferRegVal_3692] : $int<8>
    // 			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1280
    // (transferRegVal & _h20 )
    $intermediate $W[AND_u8_u8_3696_wire] : $int<8>
    // singleMultipleBlock
    $W[singleMultipleBlock_3698] : $int<1>
    // 			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1281
    // (transferRegVal & _h02 )
    $intermediate $W[AND_u8_u8_3702_wire] : $int<8>
    // (  $bitreduce |  (transferRegVal & _h02 ) )
    $intermediate $W[BITREDUCEOR_u8_u1_3703_wire] : $int<1>
    // blockCountEnable
    $W[blockCountEnable_3706] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1282
    // 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1283
    $W[next_C_3733_3711_buffered] : $int<8>
    // C
    $W[C_3708] : $int<8>
    // 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1285
    $W[blockCount_3728_3716_buffered] : $int<16>
    // newBlockCount
    $W[newBlockCount_3712] : $int<16>
    // 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1288
    // (6  + C)
    $intermediate $W[ADD_u8_u8_3720_wire] : $int<8>
    // newBlockCountTemp
    $W[newBlockCountTemp_3722] : $int<8>
    // 			$volatile blockCount := (( $slice newBlockCount 7 0 )  && newBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1289
    // ( $slice newBlockCount 7 0 ) 
    $intermediate $W[slice_3725_wire] : $int<8>
    // blockCount
    $W[blockCount_3728] : $int<16>
    // 			$volatile next_C := (C - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1290
    // next_C
    $W[next_C_3733] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (C != 0 )
    $intermediate $W[NEQ_u8_u1_3737_wire] : $int<1>
    // 			$volatile blockCountTrue := (blockCount == 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1294
    // blockCountTrue
    $W[blockCountTrue_3744] : $int<1>
    // 			$volatile lastBlock := (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1295
    // ( ~ singleMultipleBlock )
    $intermediate $W[NOT_u1_u1_3747_wire] : $int<1>
    // (blockCountEnable & blockCountTrue)
    $intermediate $W[AND_u1_u1_3750_wire] : $int<1>
    // lastBlock
    $W[lastBlock_3752] : $int<1>
    // 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1296
    // blockCountNext
    $W[blockCountNext_3758] : $int<16>
    // transferComplete
    $W[transferComplete_3758] : $int<8>
    // 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1297
    // ( $slice blockCountNext 15 8 ) 
    $intermediate $W[slice_3761_wire] : $int<8>
    // 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1298
    // ( $slice blockCountNext 7 0 ) 
    $intermediate $W[slice_3765_wire] : $int<8>
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1299
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3768_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3768_data_0] : $int<8>
    // (normalInterruptFlag1 | _h02 )
    $intermediate $W[OR_u8_u8_3770_wire] : $int<8>
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3767_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3767_data_0] : $int<8>
    // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1300
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_3773_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_3773_data_0] : $int<8>
    // (errorInterruptFlag1 | _h60 )
    $intermediate $W[OR_u8_u8_3775_wire] : $int<8>
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3772_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_errorInterruptFlag1_3772_data_0] : $int<8>
    // 			$volatile readBufferDataPortCheck := (address == 32 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1304
    // readBufferDataPortCheck
    $W[readBufferDataPortCheck_3784] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (readBufferDataPortCheck == 1 )
    $intermediate $W[EQ_u1_u1_3788_wire] : $int<1>
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3789_wire] : $int<10>
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3789_data_0] : $int<10>
    // (rxBufferPointer != 0 )
    $intermediate $W[NEQ_u10_u1_3791_wire] : $int<1>
    // ((readBufferDataPortCheck == 1 ) & (rxBufferPointer != 0 ))
    $intermediate $W[AND_u1_u1_3792_wire] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1306
    // 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1307
    $W[next_D_3812_3798_buffered] : $int<8>
    // D
    $W[D_3794] : $int<8>
    // 			tempBuf2 := dataBufferRx $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1310
    // tempBuf2
    $W[tempBuf2_3802] : $int<8>
    // 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1311
    // (32  + D)
    $intermediate $W[ADD_u8_u8_3805_wire] : $int<8>
    // 			$volatile next_D := (D + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1312
    // next_D
    $W[next_D_3812] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_D < 4 )
    $intermediate $W[ULT_u8_u1_3816_wire] : $int<1>
    // 			rxBufferPointer := (rxBufferPointer - 4 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1316
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3820_wire] : $int<10>
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3820_data_0] : $int<10>
    // (rxBufferPointer - 4 )
    $intermediate $W[SUB_u10_u10_3822_wire] : $int<10>
    // rxBufferPointer
    $constant $W[STORE_rxBufferPointer_3819_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_rxBufferPointer_3819_data_0] : $int<10>
    // 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
    //  file .Aa/sdhc.opt.aa, line 1317
    // transferRegVal2
    $W[transferRegVal2_3826] : $int<8>
    // 			singleMultipleReadBlock := (  $bitreduce |  (transferRegVal2 & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1318
    // (transferRegVal2 & _h20 )
    $intermediate $W[AND_u8_u8_3830_wire] : $int<8>
    // singleMultipleReadBlock
    $W[singleMultipleReadBlock_3832] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3834_wire] : $int<10>
    // rxBufferPointer
    $W[LOAD_rxBufferPointer_3834_data_0] : $int<10>
    // (rxBufferPointer == 0 )
    $intermediate $W[EQ_u10_u1_3836_wire] : $int<1>
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
    //  file .Aa/sdhc.opt.aa, line 1320
    // tempPresentState_1_4
    $W[tempPresentState_1_4_3839] : $int<8>
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1321
    // (tempPresentState_1_4 & _hf7 )
    $intermediate $W[AND_u8_u8_3843_wire] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 1 )
    $intermediate $W[EQ_u1_u1_3848_wire] : $int<1>
    // 			readBlockCountEnable := ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1323
    // (transferRegVal2 & _h02 )
    $intermediate $W[AND_u8_u8_3852_wire] : $int<8>
    // (  $bitreduce |  (transferRegVal2 & _h02 ) )
    $intermediate $W[BITREDUCEOR_u8_u1_3853_wire] : $int<1>
    // readBlockCountEnable
    $W[readBlockCountEnable_3856] : $int<1>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1324
    // 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1325
    $W[next_E_3883_3861_buffered] : $int<8>
    // E
    $W[E_3858] : $int<8>
    // 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1327
    $W[readBlockCount_3878_3866_buffered] : $int<16>
    // readNewBlockCount
    $W[readNewBlockCount_3862] : $int<16>
    // 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1330
    // (6  + E)
    $intermediate $W[ADD_u8_u8_3870_wire] : $int<8>
    // readnewBlockCountTemp
    $W[readnewBlockCountTemp_3872] : $int<8>
    // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1331
    // ( $slice readNewBlockCount 7 0 ) 
    $intermediate $W[slice_3875_wire] : $int<8>
    // readBlockCount
    $W[readBlockCount_3878] : $int<16>
    // 			$volatile next_E := (E - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1332
    // next_E
    $W[next_E_3883] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (E != 0 )
    $intermediate $W[NEQ_u8_u1_3887_wire] : $int<1>
    // 			readBlockCountTrue := (readBlockCount == 1 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1336
    // readBlockCountTrue
    $W[readBlockCountTrue_3894] : $int<1>
    // 			readLastBlock := (readBlockCountEnable & readBlockCountTrue) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1337
    // readLastBlock
    $W[readLastBlock_3899] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (readBlockCount != 0 )
    $intermediate $W[NEQ_u16_u1_3903_wire] : $int<1>
    // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 1339
    // newReadBlockCount
    $W[newReadBlockCount_3908] : $int<16>
    // 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
    //  file .Aa/sdhc.opt.aa, line 1340
    // dataErrorInterruptStatusVar
    $W[dataErrorInterruptStatusVar_3911] : $int<8>
    // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1341
    // dataRxEnrty1
    $constant $W[STORE_dataRxEnrty1_3912_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_dataRxEnrty1_3912_data_0] : $int<1>
    // 			dataRxEnrty2 := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1342
    // dataRxEnrty2
    $constant $W[STORE_dataRxEnrty2_3915_word_address_0] : $pointer<memory_space_2> := _b0
    $W[STORE_dataRxEnrty2_3915_data_0] : $int<1>
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1343
    // ( $slice newReadBlockCount 15 8 ) 
    $intermediate $W[slice_3920_wire] : $int<8>
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1344
    // ( $slice newReadBlockCount 7 0 ) 
    $intermediate $W[slice_3924_wire] : $int<8>
    // 			readDataTransferComplete := ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1345
    // readDataTransferComplete
    $W[readDataTransferComplete_3932] : $int<8>
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1346
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3934_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_3934_data_0] : $int<8>
    // (normalInterruptFlag1 | _h02 )
    $intermediate $W[OR_u8_u8_3936_wire] : $int<8>
    // normalInterruptFlag1
    $constant $W[STORE_normalInterruptFlag1_3933_word_address_0] : $pointer<memory_space_5> := _b0
    $W[STORE_normalInterruptFlag1_3933_data_0] : $int<8>
    // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1347
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_3939_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_3939_data_0] : $int<8>
    // (errorInterruptFlag1 | _h60 )
    $intermediate $W[OR_u8_u8_3941_wire] : $int<8>
    // errorInterruptFlag1
    $constant $W[STORE_errorInterruptFlag1_3938_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_errorInterruptFlag1_3938_data_0] : $int<8>
    // 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
    //  file .Aa/sdhc.opt.aa, line 1352
    // (address + 0 )
    $intermediate $W[ADD_u8_u8_3949_wire] : $int<8>
    // readTemp3
    $W[readTemp3_3951] : $int<8>
    // 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
    //  file .Aa/sdhc.opt.aa, line 1353
    // (address + 1 )
    $intermediate $W[ADD_u8_u8_3954_wire] : $int<8>
    // readTemp2
    $W[readTemp2_3956] : $int<8>
    // 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
    //  file .Aa/sdhc.opt.aa, line 1354
    // (address + 2 )
    $intermediate $W[ADD_u8_u8_3959_wire] : $int<8>
    // readTemp1
    $W[readTemp1_3961] : $int<8>
    // 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
    //  file .Aa/sdhc.opt.aa, line 1355
    // (address + 3 )
    $intermediate $W[ADD_u8_u8_3964_wire] : $int<8>
    // readTemp0
    $W[readTemp0_3966] : $int<8>
    // 			readdata3 := ( $mux b3 readTemp3  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1356
    // readdata3
    $W[readdata3_3972] : $int<8>
    // 			readdata2 := ( $mux b2 readTemp2  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1357
    // readdata2
    $W[readdata2_3978] : $int<8>
    // 			readdata1 := ( $mux b1 readTemp1  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1358
    // readdata1
    $W[readdata1_3984] : $int<8>
    // 			readdata0 := ( $mux b0 readTemp0  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1359
    // readdata0
    $W[readdata0_3990] : $int<8>
    // 			sdhc_to_peripheral_bridge_response := ((readdata3 && readdata2) && (readdata1 && readdata0)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/sdhc.opt.aa, line 1360
    // (readdata3 && readdata2)
    $intermediate $W[CONCAT_u8_u16_3994_wire] : $int<16>
    // (readdata1 && readdata0)
    $intermediate $W[CONCAT_u8_u16_3997_wire] : $int<16>
    // ((readdata3 && readdata2) && (readdata1 && readdata0))
    $intermediate $W[CONCAT_u16_u32_3998_wire] : $int<32>
    // sdhc_to_peripheral_bridge_response
    // 		dataErrorInterruptStatus := ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1362
    // dataRxEnrty1
    $W[LOAD_dataRxEnrty1_4002_wire] : $int<1>
    // dataRxEnrty1
    $W[LOAD_dataRxEnrty1_4002_data_0] : $int<1>
    // ( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  ) 
    $intermediate $W[MUX_4005_wire] : $int<8>
    // dataRxEnrty2
    $W[LOAD_dataRxEnrty2_4006_wire] : $int<1>
    // dataRxEnrty2
    $W[LOAD_dataRxEnrty2_4006_data_0] : $int<1>
    // ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) 
    $intermediate $W[MUX_4009_wire] : $int<8>
    // (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) )
    $intermediate $W[OR_u8_u8_4010_wire] : $int<8>
    // dataRxEnrty1
    $W[LOAD_dataRxEnrty1_4011_wire] : $int<1>
    // dataRxEnrty1
    $W[LOAD_dataRxEnrty1_4011_data_0] : $int<1>
    // ( ~ dataRxEnrty1 )
    $intermediate $W[NOT_u1_u1_4012_wire] : $int<1>
    // dataRxEnrty2
    $W[LOAD_dataRxEnrty2_4013_wire] : $int<1>
    // dataRxEnrty2
    $W[LOAD_dataRxEnrty2_4013_data_0] : $int<1>
    // ( ~ dataRxEnrty2 )
    $intermediate $W[NOT_u1_u1_4014_wire] : $int<1>
    // (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 ))
    $intermediate $W[AND_u1_u1_4015_wire] : $int<1>
    // ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) 
    $intermediate $W[MUX_4018_wire] : $int<8>
    // ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) )
    $intermediate $W[OR_u8_u8_4019_wire] : $int<8>
    // dataErrorInterruptStatus
    $constant $W[STORE_dataErrorInterruptStatus_4001_word_address_0] : $pointer<memory_space_0> := _b0
    $W[STORE_dataErrorInterruptStatus_4001_data_0] : $int<8>
    // 		sdhcRegisters[50 ] := (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1363
    // sdhcRegisters[50 ]
    $W[array_obj_ref_4024_data_0] : $int<8>
    $W[array_obj_ref_4024_wire] : $int<8>
    // dataErrorInterruptStatus
    $W[LOAD_dataErrorInterruptStatus_4025_wire] : $int<8>
    // dataErrorInterruptStatus
    $W[LOAD_dataErrorInterruptStatus_4025_data_0] : $int<8>
    // (dataErrorInterruptStatus | errorInterruptStatusVar1)
    $intermediate $W[OR_u8_u8_4027_wire] : $int<8>
    // (sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1))
    $intermediate $W[OR_u8_u8_4028_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_4029_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_4029_data_0] : $int<8>
    // ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
    $intermediate $W[AND_u8_u8_4030_wire] : $int<8>
    // sdhcRegisters[54 ]
    $W[array_obj_ref_4032_data_0] : $int<8>
    $W[array_obj_ref_4032_wire] : $int<8>
    // (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ])
    $intermediate $W[AND_u8_u8_4033_wire] : $int<8>
    // sdhcRegisters[50 ]
    $W[array_obj_ref_4022_data_0] : $int<8>
    // merge-statement  
    //  file .Aa/sdhc.opt.aa, line 1364
    // 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1365
    $W[next_S_4114_4039_buffered] : $int<8>
    // S
    $W[S_4036] : $int<8>
    // 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1367
    $W[errorInterruptReg_4071_4044_buffered] : $int<16>
    // readErrorInterruptReg
    $W[readErrorInterruptReg_4040] : $int<16>
    // 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1369
    $W[errorInterruptEnableReg_4082_4049_buffered] : $int<16>
    // readErrorInterruptEnableReg
    $W[readErrorInterruptEnableReg_4045] : $int<16>
    // 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1371
    $W[errorInterruptSignalEnableReg_4093_4054_buffered] : $int<16>
    // readErrorInterruptSignalEnableReg
    $W[readErrorInterruptSignalEnableReg_4050] : $int<16>
    // 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1373
    $W[normalInterruptEnableReg_4104_4059_buffered] : $int<16>
    // readNormalInterruptEnableReg
    $W[readNormalInterruptEnableReg_4055] : $int<16>
    // 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1376
    // (50  + S)
    $intermediate $W[ADD_u8_u8_4063_wire] : $int<8>
    // errorInterruptRegTemp
    $W[errorInterruptRegTemp_4065] : $int<8>
    // 		$volatile errorInterruptReg := (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1377
    // ( $slice readErrorInterruptReg 7 0 ) 
    $intermediate $W[slice_4068_wire] : $int<8>
    // errorInterruptReg
    $W[errorInterruptReg_4071] : $int<16>
    // 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1378
    // (54  + S)
    $intermediate $W[ADD_u8_u8_4074_wire] : $int<8>
    // errorInterruptEnableRegTemp
    $W[errorInterruptEnableRegTemp_4076] : $int<8>
    // 		$volatile errorInterruptEnableReg := (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1379
    // ( $slice readErrorInterruptEnableReg 7 0 ) 
    $intermediate $W[slice_4079_wire] : $int<8>
    // errorInterruptEnableReg
    $W[errorInterruptEnableReg_4082] : $int<16>
    // 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1380
    // (58  + S)
    $intermediate $W[ADD_u8_u8_4085_wire] : $int<8>
    // errorInterruptSignalEnableRegTemp
    $W[errorInterruptSignalEnableRegTemp_4087] : $int<8>
    // 		$volatile errorInterruptSignalEnableReg := (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1381
    // ( $slice readErrorInterruptSignalEnableReg 7 0 ) 
    $intermediate $W[slice_4090_wire] : $int<8>
    // errorInterruptSignalEnableReg
    $W[errorInterruptSignalEnableReg_4093] : $int<16>
    // 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1382
    // (52  + S)
    $intermediate $W[ADD_u8_u8_4096_wire] : $int<8>
    // normalInterruptEnableRegTemp
    $W[normalInterruptEnableRegTemp_4098] : $int<8>
    // 		$volatile normalInterruptEnableReg := (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1383
    // ( $slice readNormalInterruptEnableReg 7 0 ) 
    $intermediate $W[slice_4101_wire] : $int<8>
    // normalInterruptEnableReg
    $W[normalInterruptEnableReg_4104] : $int<16>
    // 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1384
    // (44  + S)
    $intermediate $W[ADD_u8_u8_4107_wire] : $int<8>
    // clockControlRegTemp
    $W[clockControlRegTemp_4109] : $int<8>
    // 		$volatile next_S := (S - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1385
    // next_S
    $W[next_S_4114] : $int<8>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 0
    // (S != 0 )
    $intermediate $W[NEQ_u8_u1_4118_wire] : $int<1>
    // 		$volatile errorInterruptRegVal0 := ( $slice errorInterruptReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1389
    // errorInterruptRegVal0
    $W[errorInterruptRegVal0_4124] : $int<8>
    // 		$volatile errorInterruptRegVal1 := ( $slice errorInterruptReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1390
    // errorInterruptRegVal1
    $W[errorInterruptRegVal1_4128] : $int<8>
    // 		$volatile errorInterruptEnableVal0 := ( $slice errorInterruptEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1391
    // errorInterruptEnableVal0
    $W[errorInterruptEnableVal0_4132] : $int<8>
    // 		$volatile errorInterruptEnableVal1 := ( $slice errorInterruptEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1392
    // errorInterruptEnableVal1
    $W[errorInterruptEnableVal1_4136] : $int<8>
    // 		$volatile errorInterruptSignalEnableVal0 := ( $slice errorInterruptSignalEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1393
    // errorInterruptSignalEnableVal0
    $W[errorInterruptSignalEnableVal0_4140] : $int<8>
    // 		$volatile errorInterruptSignalEnableVal1 := ( $slice errorInterruptSignalEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1394
    // errorInterruptSignalEnableVal1
    $W[errorInterruptSignalEnableVal1_4144] : $int<8>
    // 		$volatile normalInterruptEnableVal0 := ( $slice normalInterruptEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1395
    // normalInterruptEnableVal0
    $W[normalInterruptEnableVal0_4148] : $int<8>
    // 		$volatile normalInterruptEnableVal1 := ( $slice normalInterruptEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1396
    // normalInterruptEnableVal1
    $W[normalInterruptEnableVal1_4152] : $int<8>
    // 		tempErrorReg0 := (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1397
    // dataErrorInterruptStatus
    $W[LOAD_dataErrorInterruptStatus_4155_wire] : $int<8>
    // dataErrorInterruptStatus
    $W[LOAD_dataErrorInterruptStatus_4155_data_0] : $int<8>
    // (dataErrorInterruptStatus | errorInterruptStatusVar1)
    $intermediate $W[OR_u8_u8_4157_wire] : $int<8>
    // (errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1))
    $intermediate $W[OR_u8_u8_4158_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_4159_wire] : $int<8>
    // errorInterruptFlag1
    $W[LOAD_errorInterruptFlag1_4159_data_0] : $int<8>
    // ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
    $intermediate $W[AND_u8_u8_4160_wire] : $int<8>
    // tempErrorReg0
    $W[tempErrorReg0_4163] : $int<8>
    // 		tempErrorReg1 := (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1398
    // (errorInterruptRegVal1 | errorInterruptStatusVar2)
    $intermediate $W[OR_u8_u8_4167_wire] : $int<8>
    // errorInterruptFlag2
    $W[LOAD_errorInterruptFlag2_4168_wire] : $int<8>
    // errorInterruptFlag2
    $W[LOAD_errorInterruptFlag2_4168_data_0] : $int<8>
    // ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2)
    $intermediate $W[AND_u8_u8_4169_wire] : $int<8>
    // tempErrorReg1
    $W[tempErrorReg1_4172] : $int<8>
    // 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1399
    // 		errorInterruptBit := (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  )) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1400
    // (  $bitreduce |  tempErrorReg0 )
    $intermediate $W[BITREDUCEOR_u8_u1_4178_wire] : $int<1>
    // (  $bitreduce |  tempErrorReg1 )
    $intermediate $W[BITREDUCEOR_u8_u1_4180_wire] : $int<1>
    // ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 ))
    $intermediate $W[OR_u1_u1_4181_wire] : $int<1>
    // errorInterruptBit
    $W[errorInterruptBit_4185] : $int<8>
    // 		$volatile checkInterruptEnable := ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1401
    // (  $bitreduce |  normalInterruptEnableVal0 )
    $intermediate $W[BITREDUCEOR_u8_u1_4188_wire] : $int<1>
    // (  $bitreduce |  normalInterruptEnableVal1 )
    $intermediate $W[BITREDUCEOR_u8_u1_4190_wire] : $int<1>
    // checkInterruptEnable
    $W[checkInterruptEnable_4192] : $int<1>
    // if statement  
    //  file .Aa/sdhc.opt.aa, line 1402
    // (checkInterruptEnable == 1 )
    $intermediate $W[EQ_u1_u1_4196_wire] : $int<1>
    // 			interrupt := (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1403
    // (readDataTransferComplete | dataTransferComplete)
    $intermediate $W[OR_u8_u8_4200_wire] : $int<8>
    // ((readDataTransferComplete | dataTransferComplete) | transferComplete)
    $intermediate $W[OR_u8_u8_4202_wire] : $int<8>
    // ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)
    $intermediate $W[OR_u8_u8_4207_wire] : $int<8>
    // (((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1))
    $intermediate $W[OR_u8_u8_4208_wire] : $int<8>
    // ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0)
    $intermediate $W[AND_u8_u8_4210_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_4211_wire] : $int<8>
    // normalInterruptFlag1
    $W[LOAD_normalInterruptFlag1_4211_data_0] : $int<8>
    // interrupt
    $W[interrupt_4213] : $int<8>
    // 			$call writeSDHCRegisters (48  interrupt ) () 
    //  file .Aa/sdhc.opt.aa, line 1404
    // 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
    //  file .Aa/sdhc.opt.aa, line 1405
    // 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
    //  file .Aa/sdhc.opt.aa, line 1406
    // tempNormalSignal
    $W[tempNormalSignal_4222] : $int<8>
    // 			interruptLine := (tempNormalSignal & interrupt) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1407
    // interruptLine
    $W[interruptLine_4227] : $int<8>
    // 			errorInterruptLine := ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1408
    // (tempErrorReg0 & errorInterruptSignalEnableVal0)
    $intermediate $W[AND_u8_u8_4231_wire] : $int<8>
    // (tempErrorReg1 & errorInterruptSignalEnableVal1)
    $intermediate $W[AND_u8_u8_4234_wire] : $int<8>
    // errorInterruptLine
    $W[errorInterruptLine_4236] : $int<8>
    // 			SDHC_to_IRC_INT := ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1409
    // (  $bitreduce |  interruptLine )
    $intermediate $W[BITREDUCEOR_u8_u1_4239_wire] : $int<1>
    // (  $bitreduce |  errorInterruptLine )
    $intermediate $W[BITREDUCEOR_u8_u1_4241_wire] : $int<1>
    // ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine ))
    $intermediate $W[OR_u1_u1_4242_wire] : $int<1>
    // SDHC_to_IRC_INT
    // 			$call writeSDHCRegisters (48  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1411
    // 			SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1412
    // SDHC_to_IRC_INT
    // 	SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1188
    // SDHC_to_IRC_INT
    $ioport $out [WPIPE_SDHC_to_IRC_INT_3371_inst]  (R_ZERO_1_3372_wire_constant) (SDHC_to_IRC_INT) 
    // 	oe := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1189
    // oe
    $ioport $out [WPIPE_oe_3374_inst]  (R_ZERO_1_3375_wire_constant) (oe) 
    // 	busy := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1190
    // busy
    $ioport $out [WPIPE_busy_3377_inst]  (R_ZERO_1_3378_wire_constant) (busy) 
    // 	readyClockCountEnable := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1191
    // readyClockCountEnable
    $ioport $out [WPIPE_readyClockCountEnable_3380_inst]  (R_ONE_1_3381_wire_constant) (readyClockCountEnable) 
    // 	normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1192
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3383_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3383_word_address_0 STORE_normalInterruptFlag1_3383_data_0) 
    $delay STORE_normalInterruptFlag1_3383_store_0 5
    &/ [STORE_normalInterruptFlag1_3383_gather_scatter] (konst_3384_wire_constant) (STORE_normalInterruptFlag1_3383_data_0) 
    $flowthrough 
    // 	normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1193
    // normalInterruptFlag2
    $store [STORE_normalInterruptFlag2_3386_store_0] $to memory_space_6 (STORE_normalInterruptFlag2_3386_word_address_0 STORE_normalInterruptFlag2_3386_data_0) 
    $delay STORE_normalInterruptFlag2_3386_store_0 5
    &/ [STORE_normalInterruptFlag2_3386_gather_scatter] (konst_3387_wire_constant) (STORE_normalInterruptFlag2_3386_data_0) 
    $flowthrough 
    // 	errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1194
    // errorInterruptFlag1
    $store [STORE_errorInterruptFlag1_3389_store_0] $to memory_space_3 (STORE_errorInterruptFlag1_3389_word_address_0 STORE_errorInterruptFlag1_3389_data_0) 
    $delay STORE_errorInterruptFlag1_3389_store_0 5
    &/ [STORE_errorInterruptFlag1_3389_gather_scatter] (konst_3390_wire_constant) (STORE_errorInterruptFlag1_3389_data_0) 
    $flowthrough 
    // 	errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1195
    // errorInterruptFlag2
    $store [STORE_errorInterruptFlag2_3392_store_0] $to memory_space_4 (STORE_errorInterruptFlag2_3392_word_address_0 STORE_errorInterruptFlag2_3392_data_0) 
    $delay STORE_errorInterruptFlag2_3392_store_0 5
    &/ [STORE_errorInterruptFlag2_3392_gather_scatter] (konst_3393_wire_constant) (STORE_errorInterruptFlag2_3392_data_0) 
    $flowthrough 
    // 	txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1196
    // txBufferPointer
    $store [STORE_txBufferPointer_3395_store_0] $to memory_space_9 (STORE_txBufferPointer_3395_word_address_0 STORE_txBufferPointer_3395_data_0) 
    $delay STORE_txBufferPointer_3395_store_0 5
    &/ [STORE_txBufferPointer_3395_gather_scatter] (type_cast_3397_wire_constant) (STORE_txBufferPointer_3395_data_0) 
    $flowthrough 
    // 	rxBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1197
    // rxBufferPointer
    $store [STORE_rxBufferPointer_3399_store_0] $to memory_space_7 (STORE_rxBufferPointer_3399_word_address_0 STORE_rxBufferPointer_3399_data_0) 
    $delay STORE_rxBufferPointer_3399_store_0 5
    &/ [STORE_rxBufferPointer_3399_gather_scatter] (type_cast_3401_wire_constant) (STORE_rxBufferPointer_3399_data_0) 
    $flowthrough 
    // 	dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1198
    // dataRxEnrty1
    $store [STORE_dataRxEnrty1_3403_store_0] $to memory_space_1 (STORE_dataRxEnrty1_3403_word_address_0 STORE_dataRxEnrty1_3403_data_0) 
    $delay STORE_dataRxEnrty1_3403_store_0 5
    &/ [STORE_dataRxEnrty1_3403_gather_scatter] (R_ZERO_1_3404_wire_constant) (STORE_dataRxEnrty1_3403_data_0) 
    $flowthrough 
    // 	dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1199
    // dataRxEnrty2
    $store [STORE_dataRxEnrty2_3406_store_0] $to memory_space_2 (STORE_dataRxEnrty2_3406_word_address_0 STORE_dataRxEnrty2_3406_data_0) 
    $delay STORE_dataRxEnrty2_3406_store_0 5
    &/ [STORE_dataRxEnrty2_3406_gather_scatter] (R_ZERO_1_3407_wire_constant) (STORE_dataRxEnrty2_3406_data_0) 
    $flowthrough 
    // 	dataErrorInterruptStatus := ZERO_8 $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1200
    // dataErrorInterruptStatus
    $store [STORE_dataErrorInterruptStatus_3409_store_0] $to memory_space_0 (STORE_dataErrorInterruptStatus_3409_word_address_0 STORE_dataErrorInterruptStatus_3409_data_0) 
    $delay STORE_dataErrorInterruptStatus_3409_store_0 4
    &/ [STORE_dataErrorInterruptStatus_3409_gather_scatter] (R_ZERO_8_3410_wire_constant) (STORE_dataErrorInterruptStatus_3409_data_0) 
    $flowthrough 
    // 	$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1201
    $call [call_stmt_3413_call] $module resetRegisters(R_ZERO_2_3412_wire_constant) ()  
    $delay call_stmt_3413_call 4
    $buffering  $in call_stmt_3413_call R_ZERO_2_3412_wire_constant 1
    // datapath-instances for block %sdhc_daemon%loop
    //  file .Aa/sdhc.opt.aa, line 1202
    // 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
    //  file .Aa/sdhc.opt.aa, line 1206
    // peripheral_bridge_to_sdhc_request
    $ioport $in [RPIPE_peripheral_bridge_to_sdhc_request_3417_inst] (peripheral_bridge_to_sdhc_request) (request_3418) 
    $buffering $out RPIPE_peripheral_bridge_to_sdhc_request_3417_inst request_3418 1
    // 		$volatile rwbar := ( $slice request 63 63 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1207
    // ( $slice request 63 63 ) 
    [:] [slice_3421_inst] (request_3418 63 63) (rwbar_3422)  $flowthrough
    $delay slice_3421_inst 0
    // 		$volatile bytemask := ( $slice request 62 59 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1208
    // ( $slice request 62 59 ) 
    [:] [slice_3425_inst] (request_3418 62 59) (bytemask_3426)  $flowthrough
    $delay slice_3425_inst 0
    // 		$volatile address := ( $slice request 39 32 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1209
    // ( $slice request 39 32 ) 
    [:] [slice_3429_inst] (request_3418 39 32) (address_3430)  $flowthrough
    $delay slice_3429_inst 0
    // 		$volatile data3 := ( $slice request 31 24 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1210
    // ( $slice request 31 24 ) 
    [:] [slice_3433_inst] (request_3418 31 24) (data3_3434)  $flowthrough
    $delay slice_3433_inst 0
    // 		$volatile data2 := ( $slice request 23 16 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1211
    // ( $slice request 23 16 ) 
    [:] [slice_3437_inst] (request_3418 23 16) (data2_3438)  $flowthrough
    $delay slice_3437_inst 0
    // 		$volatile data1 := ( $slice request 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1212
    // ( $slice request 15 8 ) 
    [:] [slice_3441_inst] (request_3418 15 8) (data1_3442)  $flowthrough
    $delay slice_3441_inst 0
    // 		$volatile data0 := ( $slice request 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1213
    // ( $slice request 7 0 ) 
    [:] [slice_3445_inst] (request_3418 7 0) (data0_3446)  $flowthrough
    $delay slice_3445_inst 0
    // 		$volatile b3 := ( $slice bytemask 3 3 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1214
    // ( $slice bytemask 3 3 ) 
    [:] [slice_3449_inst] (bytemask_3426 3 3) (b3_3450)  $flowthrough
    $delay slice_3449_inst 0
    // 		$volatile b2 := ( $slice bytemask 2 2 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1215
    // ( $slice bytemask 2 2 ) 
    [:] [slice_3453_inst] (bytemask_3426 2 2) (b2_3454)  $flowthrough
    $delay slice_3453_inst 0
    // 		$volatile b1 := ( $slice bytemask 1 1 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1216
    // ( $slice bytemask 1 1 ) 
    [:] [slice_3457_inst] (bytemask_3426 1 1) (b1_3458)  $flowthrough
    $delay slice_3457_inst 0
    // 		$volatile b0 := ( $slice bytemask 0 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1217
    // ( $slice bytemask 0 0 ) 
    [:] [slice_3461_inst] (bytemask_3426 0 0) (b0_3462)  $flowthrough
    $delay slice_3461_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1218
    // (rwbar == 0 )
    ==[EQ_u1_u1_3466_inst] (rwbar_3422 konst_3465_wire_constant) (EQ_u1_u1_3466_wire)   $flowthrough 
    $delay EQ_u1_u1_3466_inst 0
    ==0? [if_stmt_3463_branch] (EQ_u1_u1_3466_wire)
    // 			$guard (b3) $call sdhc_register_write (address data3 ) () 
    //  file .Aa/sdhc.opt.aa, line 1219
    $call [call_stmt_3470_call] $module sdhc_register_write(address_3430 data3_3434) () $guard ( b3_3450 )  
    $delay call_stmt_3470_call 4
    $buffering  $in call_stmt_3470_call address_3430 1
    $buffering  $in call_stmt_3470_call data3_3434 1
    // 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1220
    // (address + 1 )
    +[ADD_u8_u8_3474_inst] (address_3430 konst_3473_wire_constant) (ADD_u8_u8_3474_wire) $guard ( b2_3454 )   $flowthrough 
    $delay ADD_u8_u8_3474_inst 0
    $call [call_stmt_3476_call] $module sdhc_register_write(ADD_u8_u8_3474_wire data2_3438) () $guard ( b2_3454 )  
    $delay call_stmt_3476_call 4
    $buffering  $in call_stmt_3476_call ADD_u8_u8_3474_wire 1
    $buffering  $in call_stmt_3476_call data2_3438 1
    // 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1221
    // (address + 2 )
    +[ADD_u8_u8_3480_inst] (address_3430 konst_3479_wire_constant) (ADD_u8_u8_3480_wire) $guard ( b1_3458 )   $flowthrough 
    $delay ADD_u8_u8_3480_inst 0
    $call [call_stmt_3482_call] $module sdhc_register_write(ADD_u8_u8_3480_wire data1_3442) () $guard ( b1_3458 )  
    $delay call_stmt_3482_call 4
    $buffering  $in call_stmt_3482_call ADD_u8_u8_3480_wire 1
    $buffering  $in call_stmt_3482_call data1_3442 1
    // 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
    //  file .Aa/sdhc.opt.aa, line 1222
    // (address + 3 )
    +[ADD_u8_u8_3486_inst] (address_3430 konst_3485_wire_constant) (ADD_u8_u8_3486_wire) $guard ( b0_3462 )   $flowthrough 
    $delay ADD_u8_u8_3486_inst 0
    $call [call_stmt_3488_call] $module sdhc_register_write(ADD_u8_u8_3486_wire data0_3446) () $guard ( b0_3462 )  
    $delay call_stmt_3488_call 4
    $buffering  $in call_stmt_3488_call ADD_u8_u8_3486_wire 1
    $buffering  $in call_stmt_3488_call data0_3446 1
    // 			sdhc_to_peripheral_bridge_response := ZERO_32 $buffering 1// bits of buffering = 32. 
    //  file .Aa/sdhc.opt.aa, line 1223
    // sdhc_to_peripheral_bridge_response
    $ioport $out [WPIPE_sdhc_to_peripheral_bridge_response_3489_inst]  (R_ZERO_32_3490_wire_constant) (sdhc_to_peripheral_bridge_response) 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (address + 3 )
    +[ADD_u8_u8_3495_inst] (address_3430 konst_3494_wire_constant) (ADD_u8_u8_3495_wire)   $flowthrough 
    $delay ADD_u8_u8_3495_inst 0
    // ((address + 3 ) == 47 )
    ==[EQ_u8_u1_3497_inst] (ADD_u8_u8_3495_wire konst_3496_wire_constant) (EQ_u8_u1_3497_wire)   $flowthrough 
    $delay EQ_u8_u1_3497_inst 0
    ==0? [if_stmt_3492_branch] (EQ_u8_u1_3497_wire)
    // 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
    //  file .Aa/sdhc.opt.aa, line 1225
    $call [call_stmt_3500_call] $module readSDHCRegisters(konst_3498_wire_constant) (softwareResetVal_3500)  
    $delay call_stmt_3500_call 4
    $buffering  $in call_stmt_3500_call konst_3498_wire_constant 1
    $buffering  $out call_stmt_3500_call softwareResetVal_3500 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 0 )
    [][BITSEL_u8_u1_3504_inst] (softwareResetVal_3500 konst_3503_wire_constant) (BITSEL_u8_u1_3504_wire)   $flowthrough 
    $delay BITSEL_u8_u1_3504_inst 0
    ==0? [if_stmt_3501_branch] (BITSEL_u8_u1_3504_wire)
    // 			$call resetRegisters (ZERO_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1227
    $call [call_stmt_3506_call] $module resetRegisters(R_ZERO_2_3505_wire_constant) ()  
    $delay call_stmt_3506_call 4
    $buffering  $in call_stmt_3506_call R_ZERO_2_3505_wire_constant 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 1 )
    [][BITSEL_u8_u1_3511_inst] (softwareResetVal_3500 konst_3510_wire_constant) (BITSEL_u8_u1_3511_wire)   $flowthrough 
    $delay BITSEL_u8_u1_3511_inst 0
    ==0? [if_stmt_3508_branch] (BITSEL_u8_u1_3511_wire)
    // 			$call resetRegisters (ONE_2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1230
    $call [call_stmt_3513_call] $module resetRegisters(R_ONE_2_3512_wire_constant) ()  
    $delay call_stmt_3513_call 4
    $buffering  $in call_stmt_3513_call R_ONE_2_3512_wire_constant 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (softwareResetVal [] 2 )
    [][BITSEL_u8_u1_3518_inst] (softwareResetVal_3500 konst_3517_wire_constant) (BITSEL_u8_u1_3518_wire)   $flowthrough 
    $delay BITSEL_u8_u1_3518_inst 0
    ==0? [if_stmt_3515_branch] (BITSEL_u8_u1_3518_wire)
    // 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1233
    $call [call_stmt_3521_call] $module resetRegisters(type_cast_3520_wire_constant) ()  
    $delay call_stmt_3521_call 4
    $buffering  $in call_stmt_3521_call type_cast_3520_wire_constant 1
    // 			$call readSDHCRegisters (36  ) (presentStateVal ) 
    //  file .Aa/sdhc.opt.aa, line 1236
    $call [call_stmt_3526_call] $module readSDHCRegisters(konst_3524_wire_constant) (presentStateVal_3526)  
    $delay call_stmt_3526_call 4
    $buffering  $in call_stmt_3526_call konst_3524_wire_constant 1
    $buffering  $out call_stmt_3526_call presentStateVal_3526 1
    // 			$volatile commandInhibit_CMD := ((presentStateVal [] 0 ) == 0 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1237
    // (presentStateVal [] 0 )
    [][BITSEL_u8_u1_3530_inst] (presentStateVal_3526 konst_3529_wire_constant) (BITSEL_u8_u1_3530_wire)   $flowthrough 
    $delay BITSEL_u8_u1_3530_inst 0
    // ((presentStateVal [] 0 ) == 0 )
    ==[EQ_u1_u1_3532_inst] (BITSEL_u8_u1_3530_wire konst_3531_wire_constant) (commandInhibit_CMD_3533)   $flowthrough 
    $delay EQ_u1_u1_3532_inst 0
    // 			$volatile addresscheck := (((address + 3 ) == _h0f ) & b0) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1238
    // (address + 3 )
    +[ADD_u8_u8_3537_inst] (address_3430 konst_3536_wire_constant) (ADD_u8_u8_3537_wire)   $flowthrough 
    $delay ADD_u8_u8_3537_inst 0
    // ((address + 3 ) == _h0f )
    ==[EQ_u8_u1_3539_inst] (ADD_u8_u8_3537_wire konst_3538_wire_constant) (EQ_u8_u1_3539_wire)   $flowthrough 
    $delay EQ_u8_u1_3539_inst 0
    // (((address + 3 ) == _h0f ) & b0)
    &[AND_u1_u1_3541_inst] (EQ_u8_u1_3539_wire b0_3462) (addresscheck_3542)   $flowthrough 
    $delay AND_u1_u1_3541_inst 0
    // 			$volatile presentState := ((presentStateVal >> 1 ) << 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1239
    // (presentStateVal >> 1 )
    >>[LSHR_u8_u8_3546_inst] (presentStateVal_3526 konst_3545_wire_constant) (LSHR_u8_u8_3546_wire)   $flowthrough 
    $delay LSHR_u8_u8_3546_inst 0
    // ((presentStateVal >> 1 ) << 1 )
    <<[SHL_u8_u8_3548_inst] (LSHR_u8_u8_3546_wire konst_3547_wire_constant) (presentState_3549)   $flowthrough 
    $delay SHL_u8_u8_3548_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (addresscheck & commandInhibit_CMD)
    &[AND_u1_u1_3553_inst] (addresscheck_3542 commandInhibit_CMD_3533) (AND_u1_u1_3553_wire)   $flowthrough 
    $delay AND_u1_u1_3553_inst 0
    ==0? [if_stmt_3550_branch] (AND_u1_u1_3553_wire)
    // 			$volatile tempPresentStateHere := (presentState | _h01 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1241
    // (presentState | _h01 )
    |[OR_u8_u8_3557_inst] (presentState_3549 konst_3556_wire_constant) (tempPresentStateHere_3558)   $flowthrough 
    $delay OR_u8_u8_3557_inst 0
    // 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
    //  file .Aa/sdhc.opt.aa, line 1242
    $call [call_stmt_3561_call] $module writeSDHCRegisters(konst_3559_wire_constant tempPresentStateHere_3558) ()  
    $delay call_stmt_3561_call 4
    $buffering  $in call_stmt_3561_call konst_3559_wire_constant 1
    $buffering  $in call_stmt_3561_call tempPresentStateHere_3558 1
    // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1243
    // dataRxEnrty1
    $store [STORE_dataRxEnrty1_3562_store_0] $to memory_space_1 (STORE_dataRxEnrty1_3562_word_address_0 STORE_dataRxEnrty1_3562_data_0) 
    $delay STORE_dataRxEnrty1_3562_store_0 5
    &/ [STORE_dataRxEnrty1_3562_gather_scatter] (R_ZERO_1_3563_wire_constant) (STORE_dataRxEnrty1_3562_data_0) 
    $flowthrough 
    // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1244
    // dataRxEnrty2
    $store [STORE_dataRxEnrty2_3565_store_0] $to memory_space_2 (STORE_dataRxEnrty2_3565_word_address_0 STORE_dataRxEnrty2_3565_data_0) 
    $delay STORE_dataRxEnrty2_3565_store_0 5
    &/ [STORE_dataRxEnrty2_3565_gather_scatter] (R_ZERO_1_3566_wire_constant) (STORE_dataRxEnrty2_3565_data_0) 
    $flowthrough 
    // 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1245
    $call [call_stmt_3574_call] $module command_generator() (normalInterruptStatusVar1_3574 normalInterruptStatusVar2_3574 errorInterruptStatusVar1_3574 errorInterruptStatusVar2_3574 dataErrorInterruptStatusVar1_3574 dataTransferComplete_3574)  
    $delay call_stmt_3574_call 4
    $buffering  $out call_stmt_3574_call normalInterruptStatusVar1_3574 1
    $buffering  $out call_stmt_3574_call normalInterruptStatusVar2_3574 1
    $buffering  $out call_stmt_3574_call errorInterruptStatusVar1_3574 1
    $buffering  $out call_stmt_3574_call errorInterruptStatusVar2_3574 1
    $buffering  $out call_stmt_3574_call dataErrorInterruptStatusVar1_3574 1
    $buffering  $out call_stmt_3574_call dataTransferComplete_3574 1
    // 			normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1246
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3575_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3575_word_address_0 STORE_normalInterruptFlag1_3575_data_0) 
    $delay STORE_normalInterruptFlag1_3575_store_0 5
    &/ [STORE_normalInterruptFlag1_3575_gather_scatter] (konst_3576_wire_constant) (STORE_normalInterruptFlag1_3575_data_0) 
    $flowthrough 
    // 			normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1247
    // normalInterruptFlag2
    $store [STORE_normalInterruptFlag2_3578_store_0] $to memory_space_6 (STORE_normalInterruptFlag2_3578_word_address_0 STORE_normalInterruptFlag2_3578_data_0) 
    $delay STORE_normalInterruptFlag2_3578_store_0 5
    &/ [STORE_normalInterruptFlag2_3578_gather_scatter] (konst_3579_wire_constant) (STORE_normalInterruptFlag2_3578_data_0) 
    $flowthrough 
    // 			errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1248
    // errorInterruptFlag1
    $store [STORE_errorInterruptFlag1_3581_store_0] $to memory_space_3 (STORE_errorInterruptFlag1_3581_word_address_0 STORE_errorInterruptFlag1_3581_data_0) 
    $delay STORE_errorInterruptFlag1_3581_store_0 5
    &/ [STORE_errorInterruptFlag1_3581_gather_scatter] (konst_3582_wire_constant) (STORE_errorInterruptFlag1_3581_data_0) 
    $flowthrough 
    // 			errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1249
    // errorInterruptFlag2
    $store [STORE_errorInterruptFlag2_3584_store_0] $to memory_space_4 (STORE_errorInterruptFlag2_3584_word_address_0 STORE_errorInterruptFlag2_3584_data_0) 
    $delay STORE_errorInterruptFlag2_3584_store_0 5
    &/ [STORE_errorInterruptFlag2_3584_gather_scatter] (konst_3585_wire_constant) (STORE_errorInterruptFlag2_3584_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $load [LOAD_rxBufferPointer_3589_load_0] $from memory_space_7 (LOAD_rxBufferPointer_3589_word_address_0) (LOAD_rxBufferPointer_3589_data_0) 
    $delay LOAD_rxBufferPointer_3589_load_0 5
    &/ [LOAD_rxBufferPointer_3589_gather_scatter] (LOAD_rxBufferPointer_3589_data_0) (LOAD_rxBufferPointer_3589_wire) 
    $flowthrough 
    // (rxBufferPointer > 0 )
    >[UGT_u10_u1_3591_inst] (LOAD_rxBufferPointer_3589_wire konst_3590_wire_constant) (UGT_u10_u1_3591_wire)   $flowthrough 
    $delay UGT_u10_u1_3591_inst 0
    ==0? [if_stmt_3588_branch] (UGT_u10_u1_3591_wire)
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
    //  file .Aa/sdhc.opt.aa, line 1252
    $call [call_stmt_3594_call] $module readSDHCRegisters(konst_3592_wire_constant) (tempPresentState_1_1_3594)  
    $delay call_stmt_3594_call 4
    $buffering  $in call_stmt_3594_call konst_3592_wire_constant 1
    $buffering  $out call_stmt_3594_call tempPresentState_1_1_3594 1
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1253
    // (tempPresentState_1_1 | _h08 )
    |[OR_u8_u8_3598_inst] (tempPresentState_1_1_3594 konst_3597_wire_constant) (OR_u8_u8_3598_wire)   $flowthrough 
    $delay OR_u8_u8_3598_inst 0
    $call [call_stmt_3599_call] $module writeSDHCRegisters(konst_3595_wire_constant OR_u8_u8_3598_wire) ()  
    $delay call_stmt_3599_call 4
    $buffering  $in call_stmt_3599_call konst_3595_wire_constant 1
    $buffering  $in call_stmt_3599_call OR_u8_u8_3598_wire 1
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h20 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1255
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_3606_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_3606_word_address_0) (LOAD_normalInterruptFlag1_3606_data_0) 
    $delay LOAD_normalInterruptFlag1_3606_load_0 5
    &/ [LOAD_normalInterruptFlag1_3606_gather_scatter] (LOAD_normalInterruptFlag1_3606_data_0) (LOAD_normalInterruptFlag1_3606_wire) 
    $flowthrough 
    // (normalInterruptFlag1 | _h20 )
    |[OR_u8_u8_3608_inst] (LOAD_normalInterruptFlag1_3606_wire konst_3607_wire_constant) (OR_u8_u8_3608_wire)   
    $buffering  $out OR_u8_u8_3608_inst OR_u8_u8_3608_wire 1
    $delay OR_u8_u8_3608_inst 1
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3605_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3605_word_address_0 STORE_normalInterruptFlag1_3605_data_0) 
    $delay STORE_normalInterruptFlag1_3605_store_0 5
    &/ [STORE_normalInterruptFlag1_3605_gather_scatter] (OR_u8_u8_3608_wire) (STORE_normalInterruptFlag1_3605_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $load [LOAD_txBufferPointer_3612_load_0] $from memory_space_9 (LOAD_txBufferPointer_3612_word_address_0) (LOAD_txBufferPointer_3612_data_0) 
    $delay LOAD_txBufferPointer_3612_load_0 4
    &/ [LOAD_txBufferPointer_3612_gather_scatter] (LOAD_txBufferPointer_3612_data_0) (LOAD_txBufferPointer_3612_wire) 
    $flowthrough 
    // (txBufferPointer < 512 )
    <[ULT_u10_u1_3614_inst] (LOAD_txBufferPointer_3612_wire konst_3613_wire_constant) (ULT_u10_u1_3614_wire)   $flowthrough 
    $delay ULT_u10_u1_3614_inst 0
    ==0? [if_stmt_3611_branch] (ULT_u10_u1_3614_wire)
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
    //  file .Aa/sdhc.opt.aa, line 1258
    $call [call_stmt_3617_call] $module readSDHCRegisters(konst_3615_wire_constant) (tempPresentState_1_2_3617)  
    $delay call_stmt_3617_call 4
    $buffering  $in call_stmt_3617_call konst_3615_wire_constant 1
    $buffering  $out call_stmt_3617_call tempPresentState_1_2_3617 1
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1259
    // (tempPresentState_1_2 | _h04 )
    |[OR_u8_u8_3621_inst] (tempPresentState_1_2_3617 konst_3620_wire_constant) (OR_u8_u8_3621_wire)   $flowthrough 
    $delay OR_u8_u8_3621_inst 0
    $call [call_stmt_3622_call] $module writeSDHCRegisters(konst_3618_wire_constant OR_u8_u8_3621_wire) ()  
    $delay call_stmt_3622_call 4
    $buffering  $in call_stmt_3622_call konst_3618_wire_constant 1
    $buffering  $in call_stmt_3622_call OR_u8_u8_3621_wire 1
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h10 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1261
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_3629_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_3629_word_address_0) (LOAD_normalInterruptFlag1_3629_data_0) 
    $delay LOAD_normalInterruptFlag1_3629_load_0 5
    &/ [LOAD_normalInterruptFlag1_3629_gather_scatter] (LOAD_normalInterruptFlag1_3629_data_0) (LOAD_normalInterruptFlag1_3629_wire) 
    $flowthrough 
    // (normalInterruptFlag1 | _h10 )
    |[OR_u8_u8_3631_inst] (LOAD_normalInterruptFlag1_3629_wire konst_3630_wire_constant) (OR_u8_u8_3631_wire)   
    $buffering  $out OR_u8_u8_3631_inst OR_u8_u8_3631_wire 1
    $delay OR_u8_u8_3631_inst 1
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3628_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3628_word_address_0 STORE_normalInterruptFlag1_3628_data_0) 
    $delay STORE_normalInterruptFlag1_3628_store_0 5
    &/ [STORE_normalInterruptFlag1_3628_gather_scatter] (OR_u8_u8_3631_wire) (STORE_normalInterruptFlag1_3628_data_0) 
    $flowthrough 
    // 			$volatile bufferDataPortCheck := (address == 32 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1263
    // (address == 32 )
    ==[EQ_u8_u1_3637_inst] (address_3430 konst_3636_wire_constant) (bufferDataPortCheck_3638)   $flowthrough 
    $delay EQ_u8_u1_3637_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (bufferDataPortCheck == 1 )
    ==[EQ_u1_u1_3642_inst] (bufferDataPortCheck_3638 konst_3641_wire_constant) (EQ_u1_u1_3642_wire)   $flowthrough 
    $delay EQ_u1_u1_3642_inst 0
    // txBufferPointer
    $load [LOAD_txBufferPointer_3643_load_0] $from memory_space_9 (LOAD_txBufferPointer_3643_word_address_0) (LOAD_txBufferPointer_3643_data_0) 
    $delay LOAD_txBufferPointer_3643_load_0 4
    &/ [LOAD_txBufferPointer_3643_gather_scatter] (LOAD_txBufferPointer_3643_data_0) (LOAD_txBufferPointer_3643_wire) 
    $flowthrough 
    // (txBufferPointer < 512 )
    <[ULT_u10_u1_3645_inst] (LOAD_txBufferPointer_3643_wire konst_3644_wire_constant) (ULT_u10_u1_3645_wire)   $flowthrough 
    $delay ULT_u10_u1_3645_inst 0
    // ((bufferDataPortCheck == 1 ) & (txBufferPointer < 512 ))
    &[AND_u1_u1_3646_inst] (EQ_u1_u1_3642_wire ULT_u10_u1_3645_wire) (AND_u1_u1_3646_wire)   $flowthrough 
    $delay AND_u1_u1_3646_inst 0
    ==0? [if_stmt_3639_branch] (AND_u1_u1_3646_wire)
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1265
    // 				$phi B := 				  next_B $on   loopBuffer 				  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1266
    # := [next_B_3666_3650_buf] (next_B_3666) (next_B_3666_3650_buffered)    
    $phi [phi_stmt_3648] (next_B_3666_3650_buffered type_cast_3652_wire_constant) ( B_3648 ) 
    // 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
    //  file .Aa/sdhc.opt.aa, line 1269
    // (32  + B)
    +[ADD_u8_u8_3656_inst] (konst_3654_wire_constant B_3648) (ADD_u8_u8_3656_wire)   $flowthrough 
    $delay ADD_u8_u8_3656_inst 0
    $call [call_stmt_3658_call] $module readSDHCRegisters(ADD_u8_u8_3656_wire) (tempBuf_3658)  
    $delay call_stmt_3658_call 4
    $buffering  $in call_stmt_3658_call ADD_u8_u8_3656_wire 1
    $buffering  $out call_stmt_3658_call tempBuf_3658 1
    // 			dataBufferTx := tempBuf $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1270
    // dataBufferTx
    $ioport $out [WPIPE_dataBufferTx_3659_inst]  (tempBuf_3658) (dataBufferTx) 
    // 			$volatile next_B := (B + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1271
    // (B + 1 )
    +[ADD_u8_u8_3665_inst] (B_3648 konst_3664_wire_constant) (next_B_3666)   $flowthrough 
    $delay ADD_u8_u8_3665_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_B < 4 )
    <[ULT_u8_u1_3670_inst] (next_B_3666 konst_3669_wire_constant) (ULT_u8_u1_3670_wire)   $flowthrough 
    $delay ULT_u8_u1_3670_inst 0
    ==0? [if_stmt_3667_branch] (ULT_u8_u1_3670_wire)
    // 			txBufferPointer := (txBufferPointer + 4 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1275
    // txBufferPointer
    $load [LOAD_txBufferPointer_3674_load_0] $from memory_space_9 (LOAD_txBufferPointer_3674_word_address_0) (LOAD_txBufferPointer_3674_data_0) 
    $delay LOAD_txBufferPointer_3674_load_0 4
    &/ [LOAD_txBufferPointer_3674_gather_scatter] (LOAD_txBufferPointer_3674_data_0) (LOAD_txBufferPointer_3674_wire) 
    $flowthrough 
    // (txBufferPointer + 4 )
    +[ADD_u10_u10_3676_inst] (LOAD_txBufferPointer_3674_wire konst_3675_wire_constant) (ADD_u10_u10_3676_wire)   
    $buffering  $out ADD_u10_u10_3676_inst ADD_u10_u10_3676_wire 1
    $delay ADD_u10_u10_3676_inst 1
    // txBufferPointer
    $store [STORE_txBufferPointer_3673_store_0] $to memory_space_9 (STORE_txBufferPointer_3673_word_address_0 STORE_txBufferPointer_3673_data_0) 
    $delay STORE_txBufferPointer_3673_store_0 5
    &/ [STORE_txBufferPointer_3673_gather_scatter] (ADD_u10_u10_3676_wire) (STORE_txBufferPointer_3673_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // txBufferPointer
    $load [LOAD_txBufferPointer_3679_load_0] $from memory_space_9 (LOAD_txBufferPointer_3679_word_address_0) (LOAD_txBufferPointer_3679_data_0) 
    $delay LOAD_txBufferPointer_3679_load_0 4
    &/ [LOAD_txBufferPointer_3679_gather_scatter] (LOAD_txBufferPointer_3679_data_0) (LOAD_txBufferPointer_3679_wire) 
    $flowthrough 
    // (txBufferPointer == 512 )
    ==[EQ_u10_u1_3681_inst] (LOAD_txBufferPointer_3679_wire konst_3680_wire_constant) (EQ_u10_u1_3681_wire)   $flowthrough 
    $delay EQ_u10_u1_3681_inst 0
    ==0? [if_stmt_3678_branch] (EQ_u10_u1_3681_wire)
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
    //  file .Aa/sdhc.opt.aa, line 1277
    $call [call_stmt_3684_call] $module readSDHCRegisters(konst_3682_wire_constant) (tempPresentState_1_3_3684)  
    $delay call_stmt_3684_call 4
    $buffering  $in call_stmt_3684_call konst_3682_wire_constant 1
    $buffering  $out call_stmt_3684_call tempPresentState_1_3_3684 1
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1278
    // (tempPresentState_1_3 | _hfb )
    |[OR_u8_u8_3688_inst] (tempPresentState_1_3_3684 konst_3687_wire_constant) (OR_u8_u8_3688_wire)   $flowthrough 
    $delay OR_u8_u8_3688_inst 0
    $call [call_stmt_3689_call] $module writeSDHCRegisters(konst_3685_wire_constant OR_u8_u8_3688_wire) ()  
    $delay call_stmt_3689_call 4
    $buffering  $in call_stmt_3689_call konst_3685_wire_constant 1
    $buffering  $in call_stmt_3689_call OR_u8_u8_3688_wire 1
    // 			$call readSDHCRegisters (12  ) (transferRegVal ) 
    //  file .Aa/sdhc.opt.aa, line 1279
    $call [call_stmt_3692_call] $module readSDHCRegisters(konst_3690_wire_constant) (transferRegVal_3692)  
    $delay call_stmt_3692_call 4
    $buffering  $in call_stmt_3692_call konst_3690_wire_constant 1
    $buffering  $out call_stmt_3692_call transferRegVal_3692 1
    // 			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1280
    // (transferRegVal & _h20 )
    &[AND_u8_u8_3696_inst] (transferRegVal_3692 konst_3695_wire_constant) (AND_u8_u8_3696_wire)   $flowthrough 
    $delay AND_u8_u8_3696_inst 0
    // (  $bitreduce |  (transferRegVal & _h20 ) )
    !| [BITREDUCEOR_u8_u1_3697_inst] (AND_u8_u8_3696_wire) (singleMultipleBlock_3698)  
    $buffering  $out BITREDUCEOR_u8_u1_3697_inst singleMultipleBlock_3698 1
    $delay BITREDUCEOR_u8_u1_3697_inst 1
    // 			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1281
    // (transferRegVal & _h02 )
    &[AND_u8_u8_3702_inst] (transferRegVal_3692 konst_3701_wire_constant) (AND_u8_u8_3702_wire)   $flowthrough 
    $delay AND_u8_u8_3702_inst 0
    // (  $bitreduce |  (transferRegVal & _h02 ) )
    !| [BITREDUCEOR_u8_u1_3703_inst] (AND_u8_u8_3702_wire) (BITREDUCEOR_u8_u1_3703_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_3703_inst 0
    // ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock)
    &[AND_u1_u1_3705_inst] (BITREDUCEOR_u8_u1_3703_wire singleMultipleBlock_3698) (blockCountEnable_3706)   
    $buffering  $out AND_u1_u1_3705_inst blockCountEnable_3706 1
    $delay AND_u1_u1_3705_inst 1
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1282
    // 				$phi C := 				  ONE_8 $on   $entry 				  next_C $on   loopBlock 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1283
    # := [next_C_3733_3711_buf] (next_C_3733) (next_C_3733_3711_buffered)    
    $phi [phi_stmt_3708] (R_ONE_8_3710_wire_constant next_C_3733_3711_buffered) ( C_3708 ) 
    // 				$phi newBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  blockCount $on   loopBlock 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1285
    # := [blockCount_3728_3716_buf] (blockCount_3728) (blockCount_3728_3716_buffered)    
    $phi [phi_stmt_3712] (type_cast_3715_wire_constant blockCount_3728_3716_buffered) ( newBlockCount_3712 ) 
    // 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1288
    // (6  + C)
    +[ADD_u8_u8_3720_inst] (konst_3718_wire_constant C_3708) (ADD_u8_u8_3720_wire)   $flowthrough 
    $delay ADD_u8_u8_3720_inst 0
    $call [call_stmt_3722_call] $module readSDHCRegisters(ADD_u8_u8_3720_wire) (newBlockCountTemp_3722)  
    $delay call_stmt_3722_call 4
    $buffering  $in call_stmt_3722_call ADD_u8_u8_3720_wire 1
    $buffering  $out call_stmt_3722_call newBlockCountTemp_3722 1
    // 			$volatile blockCount := (( $slice newBlockCount 7 0 )  && newBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1289
    // ( $slice newBlockCount 7 0 ) 
    [:] [slice_3725_inst] (newBlockCount_3712 7 0) (slice_3725_wire)  $flowthrough
    $delay slice_3725_inst 0
    // (( $slice newBlockCount 7 0 )  && newBlockCountTemp)
    &&[CONCAT_u8_u16_3727_inst] (slice_3725_wire newBlockCountTemp_3722) (blockCount_3728)   $flowthrough 
    $delay CONCAT_u8_u16_3727_inst 0
    // 			$volatile next_C := (C - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1290
    // (C - 1 )
    -[SUB_u8_u8_3732_inst] (C_3708 konst_3731_wire_constant) (next_C_3733)   $flowthrough 
    $delay SUB_u8_u8_3732_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (C != 0 )
    !=[NEQ_u8_u1_3737_inst] (C_3708 konst_3736_wire_constant) (NEQ_u8_u1_3737_wire)   $flowthrough 
    $delay NEQ_u8_u1_3737_inst 0
    ==0? [if_stmt_3734_branch] (NEQ_u8_u1_3737_wire)
    // 			$volatile blockCountTrue := (blockCount == 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1294
    // (blockCount == 1 )
    ==[EQ_u16_u1_3743_inst] (blockCount_3728 konst_3742_wire_constant) (blockCountTrue_3744)   $flowthrough 
    $delay EQ_u16_u1_3743_inst 0
    // 			$volatile lastBlock := (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue)) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1295
    // ( ~ singleMultipleBlock )
    ~ [NOT_u1_u1_3747_inst] (singleMultipleBlock_3698) (NOT_u1_u1_3747_wire)   $flowthrough
    $delay NOT_u1_u1_3747_inst 0
    // (blockCountEnable & blockCountTrue)
    &[AND_u1_u1_3750_inst] (blockCountEnable_3706 blockCountTrue_3744) (AND_u1_u1_3750_wire)   $flowthrough 
    $delay AND_u1_u1_3750_inst 0
    // (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue))
    |[OR_u1_u1_3751_inst] (NOT_u1_u1_3747_wire AND_u1_u1_3750_wire) (lastBlock_3752)   $flowthrough 
    $delay OR_u1_u1_3751_inst 0
    // 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
    //  file .Aa/sdhc.opt.aa, line 1296
    $call [call_stmt_3758_call] $module dataTx(lastBlock_3752 blockCountEnable_3706 blockCount_3728) (blockCountNext_3758 transferComplete_3758)  
    $delay call_stmt_3758_call 4
    $buffering  $in call_stmt_3758_call lastBlock_3752 1
    $buffering  $in call_stmt_3758_call blockCountEnable_3706 1
    $buffering  $in call_stmt_3758_call blockCount_3728 1
    $buffering  $out call_stmt_3758_call blockCountNext_3758 1
    $buffering  $out call_stmt_3758_call transferComplete_3758 1
    // 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1297
    // ( $slice blockCountNext 15 8 ) 
    [:] [slice_3761_inst] (blockCountNext_3758 15 8) (slice_3761_wire)  $flowthrough
    $delay slice_3761_inst 0
    $call [call_stmt_3762_call] $module writeSDHCRegisters(konst_3759_wire_constant slice_3761_wire) ()  
    $delay call_stmt_3762_call 4
    $buffering  $in call_stmt_3762_call konst_3759_wire_constant 1
    $buffering  $in call_stmt_3762_call slice_3761_wire 1
    // 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1298
    // ( $slice blockCountNext 7 0 ) 
    [:] [slice_3765_inst] (blockCountNext_3758 7 0) (slice_3765_wire)  $flowthrough
    $delay slice_3765_inst 0
    $call [call_stmt_3766_call] $module writeSDHCRegisters(konst_3763_wire_constant slice_3765_wire) ()  
    $delay call_stmt_3766_call 4
    $buffering  $in call_stmt_3766_call konst_3763_wire_constant 1
    $buffering  $in call_stmt_3766_call slice_3765_wire 1
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1299
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_3768_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_3768_word_address_0) (LOAD_normalInterruptFlag1_3768_data_0) 
    $delay LOAD_normalInterruptFlag1_3768_load_0 5
    &/ [LOAD_normalInterruptFlag1_3768_gather_scatter] (LOAD_normalInterruptFlag1_3768_data_0) (LOAD_normalInterruptFlag1_3768_wire) 
    $flowthrough 
    // (normalInterruptFlag1 | _h02 )
    |[OR_u8_u8_3770_inst] (LOAD_normalInterruptFlag1_3768_wire konst_3769_wire_constant) (OR_u8_u8_3770_wire)   
    $buffering  $out OR_u8_u8_3770_inst OR_u8_u8_3770_wire 1
    $delay OR_u8_u8_3770_inst 1
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3767_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3767_word_address_0 STORE_normalInterruptFlag1_3767_data_0) 
    $delay STORE_normalInterruptFlag1_3767_store_0 5
    &/ [STORE_normalInterruptFlag1_3767_gather_scatter] (OR_u8_u8_3770_wire) (STORE_normalInterruptFlag1_3767_data_0) 
    $flowthrough 
    // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1300
    // errorInterruptFlag1
    $load [LOAD_errorInterruptFlag1_3773_load_0] $from memory_space_3 (LOAD_errorInterruptFlag1_3773_word_address_0) (LOAD_errorInterruptFlag1_3773_data_0) 
    $delay LOAD_errorInterruptFlag1_3773_load_0 5
    &/ [LOAD_errorInterruptFlag1_3773_gather_scatter] (LOAD_errorInterruptFlag1_3773_data_0) (LOAD_errorInterruptFlag1_3773_wire) 
    $flowthrough 
    // (errorInterruptFlag1 | _h60 )
    |[OR_u8_u8_3775_inst] (LOAD_errorInterruptFlag1_3773_wire konst_3774_wire_constant) (OR_u8_u8_3775_wire)   
    $buffering  $out OR_u8_u8_3775_inst OR_u8_u8_3775_wire 1
    $delay OR_u8_u8_3775_inst 1
    // errorInterruptFlag1
    $store [STORE_errorInterruptFlag1_3772_store_0] $to memory_space_3 (STORE_errorInterruptFlag1_3772_word_address_0 STORE_errorInterruptFlag1_3772_data_0) 
    $delay STORE_errorInterruptFlag1_3772_store_0 5
    &/ [STORE_errorInterruptFlag1_3772_gather_scatter] (OR_u8_u8_3775_wire) (STORE_errorInterruptFlag1_3772_data_0) 
    $flowthrough 
    // 			$volatile readBufferDataPortCheck := (address == 32 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1304
    // (address == 32 )
    ==[EQ_u8_u1_3783_inst] (address_3430 konst_3782_wire_constant) (readBufferDataPortCheck_3784)   $flowthrough 
    $delay EQ_u8_u1_3783_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (readBufferDataPortCheck == 1 )
    ==[EQ_u1_u1_3788_inst] (readBufferDataPortCheck_3784 konst_3787_wire_constant) (EQ_u1_u1_3788_wire)   $flowthrough 
    $delay EQ_u1_u1_3788_inst 0
    // rxBufferPointer
    $load [LOAD_rxBufferPointer_3789_load_0] $from memory_space_7 (LOAD_rxBufferPointer_3789_word_address_0) (LOAD_rxBufferPointer_3789_data_0) 
    $delay LOAD_rxBufferPointer_3789_load_0 5
    &/ [LOAD_rxBufferPointer_3789_gather_scatter] (LOAD_rxBufferPointer_3789_data_0) (LOAD_rxBufferPointer_3789_wire) 
    $flowthrough 
    // (rxBufferPointer != 0 )
    !=[NEQ_u10_u1_3791_inst] (LOAD_rxBufferPointer_3789_wire konst_3790_wire_constant) (NEQ_u10_u1_3791_wire)   $flowthrough 
    $delay NEQ_u10_u1_3791_inst 0
    // ((readBufferDataPortCheck == 1 ) & (rxBufferPointer != 0 ))
    &[AND_u1_u1_3792_inst] (EQ_u1_u1_3788_wire NEQ_u10_u1_3791_wire) (AND_u1_u1_3792_wire)   $flowthrough 
    $delay AND_u1_u1_3792_inst 0
    ==0? [if_stmt_3785_branch] (AND_u1_u1_3792_wire)
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1306
    // 				$phi D := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  next_D $on   loopBufferWrite 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1307
    # := [next_D_3812_3798_buf] (next_D_3812) (next_D_3812_3798_buffered)    
    $phi [phi_stmt_3794] (type_cast_3797_wire_constant next_D_3812_3798_buffered) ( D_3794 ) 
    // 			tempBuf2 := dataBufferRx $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1310
    // dataBufferRx
    $ioport $in [RPIPE_dataBufferRx_3801_inst] (dataBufferRx) (tempBuf2_3802) 
    $buffering $out RPIPE_dataBufferRx_3801_inst tempBuf2_3802 1
    // 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
    //  file .Aa/sdhc.opt.aa, line 1311
    // (32  + D)
    +[ADD_u8_u8_3805_inst] (konst_3803_wire_constant D_3794) (ADD_u8_u8_3805_wire)   $flowthrough 
    $delay ADD_u8_u8_3805_inst 0
    $call [call_stmt_3807_call] $module writeSDHCRegisters(ADD_u8_u8_3805_wire tempBuf2_3802) ()  
    $delay call_stmt_3807_call 4
    $buffering  $in call_stmt_3807_call ADD_u8_u8_3805_wire 1
    $buffering  $in call_stmt_3807_call tempBuf2_3802 1
    // 			$volatile next_D := (D + 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1312
    // (D + 1 )
    +[ADD_u8_u8_3811_inst] (D_3794 konst_3810_wire_constant) (next_D_3812)   $flowthrough 
    $delay ADD_u8_u8_3811_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (next_D < 4 )
    <[ULT_u8_u1_3816_inst] (next_D_3812 konst_3815_wire_constant) (ULT_u8_u1_3816_wire)   $flowthrough 
    $delay ULT_u8_u1_3816_inst 0
    ==0? [if_stmt_3813_branch] (ULT_u8_u1_3816_wire)
    // 			rxBufferPointer := (rxBufferPointer - 4 ) $buffering 1// bits of buffering = 10. 
    //  file .Aa/sdhc.opt.aa, line 1316
    // rxBufferPointer
    $load [LOAD_rxBufferPointer_3820_load_0] $from memory_space_7 (LOAD_rxBufferPointer_3820_word_address_0) (LOAD_rxBufferPointer_3820_data_0) 
    $delay LOAD_rxBufferPointer_3820_load_0 5
    &/ [LOAD_rxBufferPointer_3820_gather_scatter] (LOAD_rxBufferPointer_3820_data_0) (LOAD_rxBufferPointer_3820_wire) 
    $flowthrough 
    // (rxBufferPointer - 4 )
    -[SUB_u10_u10_3822_inst] (LOAD_rxBufferPointer_3820_wire konst_3821_wire_constant) (SUB_u10_u10_3822_wire)   
    $buffering  $out SUB_u10_u10_3822_inst SUB_u10_u10_3822_wire 1
    $delay SUB_u10_u10_3822_inst 1
    // rxBufferPointer
    $store [STORE_rxBufferPointer_3819_store_0] $to memory_space_7 (STORE_rxBufferPointer_3819_word_address_0 STORE_rxBufferPointer_3819_data_0) 
    $delay STORE_rxBufferPointer_3819_store_0 5
    &/ [STORE_rxBufferPointer_3819_gather_scatter] (SUB_u10_u10_3822_wire) (STORE_rxBufferPointer_3819_data_0) 
    $flowthrough 
    // 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
    //  file .Aa/sdhc.opt.aa, line 1317
    $call [call_stmt_3826_call] $module readSDHCRegisters(konst_3824_wire_constant) (transferRegVal2_3826)  
    $delay call_stmt_3826_call 4
    $buffering  $in call_stmt_3826_call konst_3824_wire_constant 1
    $buffering  $out call_stmt_3826_call transferRegVal2_3826 1
    // 			singleMultipleReadBlock := (  $bitreduce |  (transferRegVal2 & _h20 ) ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1318
    // (transferRegVal2 & _h20 )
    &[AND_u8_u8_3830_inst] (transferRegVal2_3826 konst_3829_wire_constant) (AND_u8_u8_3830_wire)   $flowthrough 
    $delay AND_u8_u8_3830_inst 0
    // (  $bitreduce |  (transferRegVal2 & _h20 ) )
    !| [BITREDUCEOR_u8_u1_3831_inst] (AND_u8_u8_3830_wire) (singleMultipleReadBlock_3832)  
    $buffering  $out BITREDUCEOR_u8_u1_3831_inst singleMultipleReadBlock_3832 1
    $delay BITREDUCEOR_u8_u1_3831_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // rxBufferPointer
    $load [LOAD_rxBufferPointer_3834_load_0] $from memory_space_7 (LOAD_rxBufferPointer_3834_word_address_0) (LOAD_rxBufferPointer_3834_data_0) 
    $delay LOAD_rxBufferPointer_3834_load_0 5
    &/ [LOAD_rxBufferPointer_3834_gather_scatter] (LOAD_rxBufferPointer_3834_data_0) (LOAD_rxBufferPointer_3834_wire) 
    $flowthrough 
    // (rxBufferPointer == 0 )
    ==[EQ_u10_u1_3836_inst] (LOAD_rxBufferPointer_3834_wire konst_3835_wire_constant) (EQ_u10_u1_3836_wire)   $flowthrough 
    $delay EQ_u10_u1_3836_inst 0
    ==0? [if_stmt_3833_branch] (EQ_u10_u1_3836_wire)
    // 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
    //  file .Aa/sdhc.opt.aa, line 1320
    $call [call_stmt_3839_call] $module readSDHCRegisters(konst_3837_wire_constant) (tempPresentState_1_4_3839)  
    $delay call_stmt_3839_call 4
    $buffering  $in call_stmt_3839_call konst_3837_wire_constant 1
    $buffering  $out call_stmt_3839_call tempPresentState_1_4_3839 1
    // 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
    //  file .Aa/sdhc.opt.aa, line 1321
    // (tempPresentState_1_4 & _hf7 )
    &[AND_u8_u8_3843_inst] (tempPresentState_1_4_3839 konst_3842_wire_constant) (AND_u8_u8_3843_wire)   $flowthrough 
    $delay AND_u8_u8_3843_inst 0
    $call [call_stmt_3844_call] $module writeSDHCRegisters(konst_3840_wire_constant AND_u8_u8_3843_wire) ()  
    $delay call_stmt_3844_call 4
    $buffering  $in call_stmt_3844_call konst_3840_wire_constant 1
    $buffering  $in call_stmt_3844_call AND_u8_u8_3843_wire 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (singleMultipleReadBlock == 1 )
    ==[EQ_u1_u1_3848_inst] (singleMultipleReadBlock_3832 konst_3847_wire_constant) (EQ_u1_u1_3848_wire)   $flowthrough 
    $delay EQ_u1_u1_3848_inst 0
    ==0? [if_stmt_3845_branch] (EQ_u1_u1_3848_wire)
    // 			readBlockCountEnable := ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1323
    // (transferRegVal2 & _h02 )
    &[AND_u8_u8_3852_inst] (transferRegVal2_3826 konst_3851_wire_constant) (AND_u8_u8_3852_wire)   $flowthrough 
    $delay AND_u8_u8_3852_inst 0
    // (  $bitreduce |  (transferRegVal2 & _h02 ) )
    !| [BITREDUCEOR_u8_u1_3853_inst] (AND_u8_u8_3852_wire) (BITREDUCEOR_u8_u1_3853_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_3853_inst 0
    // ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock)
    &[AND_u1_u1_3855_inst] (BITREDUCEOR_u8_u1_3853_wire singleMultipleBlock_3698) (readBlockCountEnable_3856)   
    $buffering  $out AND_u1_u1_3855_inst readBlockCountEnable_3856 1
    $delay AND_u1_u1_3855_inst 1
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1324
    // 				$phi E := 				  ONE_8 $on   $entry 				  next_E $on   loopBlock2 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1325
    # := [next_E_3883_3861_buf] (next_E_3883) (next_E_3883_3861_buffered)    
    $phi [phi_stmt_3858] (R_ONE_8_3860_wire_constant next_E_3883_3861_buffered) ( E_3858 ) 
    // 				$phi readNewBlockCount := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  readBlockCount $on   loopBlock2 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1327
    # := [readBlockCount_3878_3866_buf] (readBlockCount_3878) (readBlockCount_3878_3866_buffered)    
    $phi [phi_stmt_3862] (type_cast_3865_wire_constant readBlockCount_3878_3866_buffered) ( readNewBlockCount_3862 ) 
    // 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1330
    // (6  + E)
    +[ADD_u8_u8_3870_inst] (konst_3868_wire_constant E_3858) (ADD_u8_u8_3870_wire)   $flowthrough 
    $delay ADD_u8_u8_3870_inst 0
    $call [call_stmt_3872_call] $module readSDHCRegisters(ADD_u8_u8_3870_wire) (readnewBlockCountTemp_3872)  
    $delay call_stmt_3872_call 4
    $buffering  $in call_stmt_3872_call ADD_u8_u8_3870_wire 1
    $buffering  $out call_stmt_3872_call readnewBlockCountTemp_3872 1
    // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1331
    // ( $slice readNewBlockCount 7 0 ) 
    [:] [slice_3875_inst] (readNewBlockCount_3862 7 0) (slice_3875_wire)  $flowthrough
    $delay slice_3875_inst 0
    // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
    &&[CONCAT_u8_u16_3877_inst] (slice_3875_wire readnewBlockCountTemp_3872) (readBlockCount_3878)   $flowthrough 
    $delay CONCAT_u8_u16_3877_inst 0
    // 			$volatile next_E := (E - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1332
    // (E - 1 )
    -[SUB_u8_u8_3882_inst] (E_3858 konst_3881_wire_constant) (next_E_3883)   $flowthrough 
    $delay SUB_u8_u8_3882_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (E != 0 )
    !=[NEQ_u8_u1_3887_inst] (E_3858 konst_3886_wire_constant) (NEQ_u8_u1_3887_wire)   $flowthrough 
    $delay NEQ_u8_u1_3887_inst 0
    ==0? [if_stmt_3884_branch] (NEQ_u8_u1_3887_wire)
    // 			readBlockCountTrue := (readBlockCount == 1 ) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1336
    // (readBlockCount == 1 )
    ==[EQ_u16_u1_3893_inst] (readBlockCount_3878 konst_3892_wire_constant) (readBlockCountTrue_3894)   
    $buffering  $out EQ_u16_u1_3893_inst readBlockCountTrue_3894 1
    $delay EQ_u16_u1_3893_inst 1
    // 			readLastBlock := (readBlockCountEnable & readBlockCountTrue) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1337
    // (readBlockCountEnable & readBlockCountTrue)
    &[AND_u1_u1_3898_inst] (readBlockCountEnable_3856 readBlockCountTrue_3894) (readLastBlock_3899)   
    $buffering  $out AND_u1_u1_3898_inst readLastBlock_3899 1
    $delay AND_u1_u1_3898_inst 1
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (readBlockCount != 0 )
    !=[NEQ_u16_u1_3903_inst] (readBlockCount_3878 konst_3902_wire_constant) (NEQ_u16_u1_3903_wire)   $flowthrough 
    $delay NEQ_u16_u1_3903_inst 0
    ==0? [if_stmt_3900_branch] (NEQ_u16_u1_3903_wire)
    // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
    //  file .Aa/sdhc.opt.aa, line 1339
    // (readBlockCount - 1 )
    -[SUB_u16_u16_3907_inst] (readBlockCount_3878 konst_3906_wire_constant) (newReadBlockCount_3908)   
    $buffering  $out SUB_u16_u16_3907_inst newReadBlockCount_3908 1
    $delay SUB_u16_u16_3907_inst 1
    // 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
    //  file .Aa/sdhc.opt.aa, line 1340
    $call [call_stmt_3911_call] $module dataRx(readLastBlock_3899) (dataErrorInterruptStatusVar_3911)  
    $delay call_stmt_3911_call 4
    $buffering  $in call_stmt_3911_call readLastBlock_3899 1
    $buffering  $out call_stmt_3911_call dataErrorInterruptStatusVar_3911 1
    // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1341
    // dataRxEnrty1
    $store [STORE_dataRxEnrty1_3912_store_0] $to memory_space_1 (STORE_dataRxEnrty1_3912_word_address_0 STORE_dataRxEnrty1_3912_data_0) 
    $delay STORE_dataRxEnrty1_3912_store_0 5
    &/ [STORE_dataRxEnrty1_3912_gather_scatter] (R_ZERO_1_3913_wire_constant) (STORE_dataRxEnrty1_3912_data_0) 
    $flowthrough 
    // 			dataRxEnrty2 := ONE_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1342
    // dataRxEnrty2
    $store [STORE_dataRxEnrty2_3915_store_0] $to memory_space_2 (STORE_dataRxEnrty2_3915_word_address_0 STORE_dataRxEnrty2_3915_data_0) 
    $delay STORE_dataRxEnrty2_3915_store_0 5
    &/ [STORE_dataRxEnrty2_3915_gather_scatter] (R_ONE_1_3916_wire_constant) (STORE_dataRxEnrty2_3915_data_0) 
    $flowthrough 
    // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1343
    // ( $slice newReadBlockCount 15 8 ) 
    [:] [slice_3920_inst] (newReadBlockCount_3908 15 8) (slice_3920_wire)  $flowthrough
    $delay slice_3920_inst 0
    $call [call_stmt_3921_call] $module writeSDHCRegisters(konst_3918_wire_constant slice_3920_wire) ()  
    $delay call_stmt_3921_call 4
    $buffering  $in call_stmt_3921_call konst_3918_wire_constant 1
    $buffering  $in call_stmt_3921_call slice_3920_wire 1
    // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
    //  file .Aa/sdhc.opt.aa, line 1344
    // ( $slice newReadBlockCount 7 0 ) 
    [:] [slice_3924_inst] (newReadBlockCount_3908 7 0) (slice_3924_wire)  $flowthrough
    $delay slice_3924_inst 0
    $call [call_stmt_3925_call] $module writeSDHCRegisters(konst_3922_wire_constant slice_3924_wire) ()  
    $delay call_stmt_3925_call 4
    $buffering  $in call_stmt_3925_call konst_3922_wire_constant 1
    $buffering  $in call_stmt_3925_call slice_3924_wire 1
    // 			readDataTransferComplete := ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1345
    // ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
    ? [MUX_3931_inst] (readLastBlock_3899 type_cast_3929_wire_constant R_ZERO_8_3930_wire_constant) (readDataTransferComplete_3932) 
    $buffering  $out MUX_3931_inst readDataTransferComplete_3932 1
    // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1346
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_3934_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_3934_word_address_0) (LOAD_normalInterruptFlag1_3934_data_0) 
    $delay LOAD_normalInterruptFlag1_3934_load_0 5
    &/ [LOAD_normalInterruptFlag1_3934_gather_scatter] (LOAD_normalInterruptFlag1_3934_data_0) (LOAD_normalInterruptFlag1_3934_wire) 
    $flowthrough 
    // (normalInterruptFlag1 | _h02 )
    |[OR_u8_u8_3936_inst] (LOAD_normalInterruptFlag1_3934_wire konst_3935_wire_constant) (OR_u8_u8_3936_wire)   
    $buffering  $out OR_u8_u8_3936_inst OR_u8_u8_3936_wire 1
    $delay OR_u8_u8_3936_inst 1
    // normalInterruptFlag1
    $store [STORE_normalInterruptFlag1_3933_store_0] $to memory_space_5 (STORE_normalInterruptFlag1_3933_word_address_0 STORE_normalInterruptFlag1_3933_data_0) 
    $delay STORE_normalInterruptFlag1_3933_store_0 5
    &/ [STORE_normalInterruptFlag1_3933_gather_scatter] (OR_u8_u8_3936_wire) (STORE_normalInterruptFlag1_3933_data_0) 
    $flowthrough 
    // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1347
    // errorInterruptFlag1
    $load [LOAD_errorInterruptFlag1_3939_load_0] $from memory_space_3 (LOAD_errorInterruptFlag1_3939_word_address_0) (LOAD_errorInterruptFlag1_3939_data_0) 
    $delay LOAD_errorInterruptFlag1_3939_load_0 5
    &/ [LOAD_errorInterruptFlag1_3939_gather_scatter] (LOAD_errorInterruptFlag1_3939_data_0) (LOAD_errorInterruptFlag1_3939_wire) 
    $flowthrough 
    // (errorInterruptFlag1 | _h60 )
    |[OR_u8_u8_3941_inst] (LOAD_errorInterruptFlag1_3939_wire konst_3940_wire_constant) (OR_u8_u8_3941_wire)   
    $buffering  $out OR_u8_u8_3941_inst OR_u8_u8_3941_wire 1
    $delay OR_u8_u8_3941_inst 1
    // errorInterruptFlag1
    $store [STORE_errorInterruptFlag1_3938_store_0] $to memory_space_3 (STORE_errorInterruptFlag1_3938_word_address_0 STORE_errorInterruptFlag1_3938_data_0) 
    $delay STORE_errorInterruptFlag1_3938_store_0 5
    &/ [STORE_errorInterruptFlag1_3938_gather_scatter] (OR_u8_u8_3941_wire) (STORE_errorInterruptFlag1_3938_data_0) 
    $flowthrough 
    // 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
    //  file .Aa/sdhc.opt.aa, line 1352
    // (address + 0 )
    +[ADD_u8_u8_3949_inst] (address_3430 konst_3948_wire_constant) (ADD_u8_u8_3949_wire)   $flowthrough 
    $delay ADD_u8_u8_3949_inst 0
    $call [call_stmt_3951_call] $module readSDHCRegisters(ADD_u8_u8_3949_wire) (readTemp3_3951)  
    $delay call_stmt_3951_call 4
    $buffering  $in call_stmt_3951_call ADD_u8_u8_3949_wire 1
    $buffering  $out call_stmt_3951_call readTemp3_3951 1
    // 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
    //  file .Aa/sdhc.opt.aa, line 1353
    // (address + 1 )
    +[ADD_u8_u8_3954_inst] (address_3430 konst_3953_wire_constant) (ADD_u8_u8_3954_wire)   $flowthrough 
    $delay ADD_u8_u8_3954_inst 0
    $call [call_stmt_3956_call] $module readSDHCRegisters(ADD_u8_u8_3954_wire) (readTemp2_3956)  
    $delay call_stmt_3956_call 4
    $buffering  $in call_stmt_3956_call ADD_u8_u8_3954_wire 1
    $buffering  $out call_stmt_3956_call readTemp2_3956 1
    // 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
    //  file .Aa/sdhc.opt.aa, line 1354
    // (address + 2 )
    +[ADD_u8_u8_3959_inst] (address_3430 konst_3958_wire_constant) (ADD_u8_u8_3959_wire)   $flowthrough 
    $delay ADD_u8_u8_3959_inst 0
    $call [call_stmt_3961_call] $module readSDHCRegisters(ADD_u8_u8_3959_wire) (readTemp1_3961)  
    $delay call_stmt_3961_call 4
    $buffering  $in call_stmt_3961_call ADD_u8_u8_3959_wire 1
    $buffering  $out call_stmt_3961_call readTemp1_3961 1
    // 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
    //  file .Aa/sdhc.opt.aa, line 1355
    // (address + 3 )
    +[ADD_u8_u8_3964_inst] (address_3430 konst_3963_wire_constant) (ADD_u8_u8_3964_wire)   $flowthrough 
    $delay ADD_u8_u8_3964_inst 0
    $call [call_stmt_3966_call] $module readSDHCRegisters(ADD_u8_u8_3964_wire) (readTemp0_3966)  
    $delay call_stmt_3966_call 4
    $buffering  $in call_stmt_3966_call ADD_u8_u8_3964_wire 1
    $buffering  $out call_stmt_3966_call readTemp0_3966 1
    // 			readdata3 := ( $mux b3 readTemp3  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1356
    // ( $mux b3 readTemp3  ZERO_8 ) 
    ? [MUX_3971_inst] (b3_3450 readTemp3_3951 R_ZERO_8_3970_wire_constant) (readdata3_3972) 
    $buffering  $out MUX_3971_inst readdata3_3972 1
    // 			readdata2 := ( $mux b2 readTemp2  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1357
    // ( $mux b2 readTemp2  ZERO_8 ) 
    ? [MUX_3977_inst] (b2_3454 readTemp2_3956 R_ZERO_8_3976_wire_constant) (readdata2_3978) 
    $buffering  $out MUX_3977_inst readdata2_3978 1
    // 			readdata1 := ( $mux b1 readTemp1  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1358
    // ( $mux b1 readTemp1  ZERO_8 ) 
    ? [MUX_3983_inst] (b1_3458 readTemp1_3961 R_ZERO_8_3982_wire_constant) (readdata1_3984) 
    $buffering  $out MUX_3983_inst readdata1_3984 1
    // 			readdata0 := ( $mux b0 readTemp0  ZERO_8 )  $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1359
    // ( $mux b0 readTemp0  ZERO_8 ) 
    ? [MUX_3989_inst] (b0_3462 readTemp0_3966 R_ZERO_8_3988_wire_constant) (readdata0_3990) 
    $buffering  $out MUX_3989_inst readdata0_3990 1
    // 			sdhc_to_peripheral_bridge_response := ((readdata3 && readdata2) && (readdata1 && readdata0)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/sdhc.opt.aa, line 1360
    // (readdata3 && readdata2)
    &&[CONCAT_u8_u16_3994_inst] (readdata3_3972 readdata2_3978) (CONCAT_u8_u16_3994_wire)   $flowthrough 
    $delay CONCAT_u8_u16_3994_inst 0
    // (readdata1 && readdata0)
    &&[CONCAT_u8_u16_3997_inst] (readdata1_3984 readdata0_3990) (CONCAT_u8_u16_3997_wire)   $flowthrough 
    $delay CONCAT_u8_u16_3997_inst 0
    // ((readdata3 && readdata2) && (readdata1 && readdata0))
    &&[CONCAT_u16_u32_3998_inst] (CONCAT_u8_u16_3994_wire CONCAT_u8_u16_3997_wire) (CONCAT_u16_u32_3998_wire)   
    $buffering  $out CONCAT_u16_u32_3998_inst CONCAT_u16_u32_3998_wire 1
    $delay CONCAT_u16_u32_3998_inst 1
    // sdhc_to_peripheral_bridge_response
    $ioport $out [WPIPE_sdhc_to_peripheral_bridge_response_3991_inst]  (CONCAT_u16_u32_3998_wire) (sdhc_to_peripheral_bridge_response) 
    // 		dataErrorInterruptStatus := ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1362
    // dataRxEnrty1
    $load [LOAD_dataRxEnrty1_4002_load_0] $from memory_space_1 (LOAD_dataRxEnrty1_4002_word_address_0) (LOAD_dataRxEnrty1_4002_data_0) 
    $delay LOAD_dataRxEnrty1_4002_load_0 4
    &/ [LOAD_dataRxEnrty1_4002_gather_scatter] (LOAD_dataRxEnrty1_4002_data_0) (LOAD_dataRxEnrty1_4002_wire) 
    $flowthrough 
    // ( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  ) 
    ? [MUX_4005_inst] (LOAD_dataRxEnrty1_4002_wire dataErrorInterruptStatusVar1_3574 konst_4004_wire_constant) (MUX_4005_wire)  $flowthrough
    // dataRxEnrty2
    $load [LOAD_dataRxEnrty2_4006_load_0] $from memory_space_2 (LOAD_dataRxEnrty2_4006_word_address_0) (LOAD_dataRxEnrty2_4006_data_0) 
    $delay LOAD_dataRxEnrty2_4006_load_0 4
    &/ [LOAD_dataRxEnrty2_4006_gather_scatter] (LOAD_dataRxEnrty2_4006_data_0) (LOAD_dataRxEnrty2_4006_wire) 
    $flowthrough 
    // ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) 
    ? [MUX_4009_inst] (LOAD_dataRxEnrty2_4006_wire dataErrorInterruptStatusVar_3911 konst_4008_wire_constant) (MUX_4009_wire)  $flowthrough
    // (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) )
    |[OR_u8_u8_4010_inst] (MUX_4005_wire MUX_4009_wire) (OR_u8_u8_4010_wire)   $flowthrough 
    $delay OR_u8_u8_4010_inst 0
    // dataRxEnrty1
    $load [LOAD_dataRxEnrty1_4011_load_0] $from memory_space_1 (LOAD_dataRxEnrty1_4011_word_address_0) (LOAD_dataRxEnrty1_4011_data_0) 
    $delay LOAD_dataRxEnrty1_4011_load_0 4
    &/ [LOAD_dataRxEnrty1_4011_gather_scatter] (LOAD_dataRxEnrty1_4011_data_0) (LOAD_dataRxEnrty1_4011_wire) 
    $flowthrough 
    // ( ~ dataRxEnrty1 )
    ~ [NOT_u1_u1_4012_inst] (LOAD_dataRxEnrty1_4011_wire) (NOT_u1_u1_4012_wire)   $flowthrough
    $delay NOT_u1_u1_4012_inst 0
    // dataRxEnrty2
    $load [LOAD_dataRxEnrty2_4013_load_0] $from memory_space_2 (LOAD_dataRxEnrty2_4013_word_address_0) (LOAD_dataRxEnrty2_4013_data_0) 
    $delay LOAD_dataRxEnrty2_4013_load_0 4
    &/ [LOAD_dataRxEnrty2_4013_gather_scatter] (LOAD_dataRxEnrty2_4013_data_0) (LOAD_dataRxEnrty2_4013_wire) 
    $flowthrough 
    // ( ~ dataRxEnrty2 )
    ~ [NOT_u1_u1_4014_inst] (LOAD_dataRxEnrty2_4013_wire) (NOT_u1_u1_4014_wire)   $flowthrough
    $delay NOT_u1_u1_4014_inst 0
    // (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 ))
    &[AND_u1_u1_4015_inst] (NOT_u1_u1_4012_wire NOT_u1_u1_4014_wire) (AND_u1_u1_4015_wire)   $flowthrough 
    $delay AND_u1_u1_4015_inst 0
    // ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) 
    ? [MUX_4018_inst] (AND_u1_u1_4015_wire R_ZERO_8_4016_wire_constant konst_4017_wire_constant) (MUX_4018_wire)  $flowthrough
    // ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) )
    |[OR_u8_u8_4019_inst] (OR_u8_u8_4010_wire MUX_4018_wire) (OR_u8_u8_4019_wire)   
    $buffering  $out OR_u8_u8_4019_inst OR_u8_u8_4019_wire 1
    $delay OR_u8_u8_4019_inst 1
    // dataErrorInterruptStatus
    $store [STORE_dataErrorInterruptStatus_4001_store_0] $to memory_space_0 (STORE_dataErrorInterruptStatus_4001_word_address_0 STORE_dataErrorInterruptStatus_4001_data_0) 
    $delay STORE_dataErrorInterruptStatus_4001_store_0 4
    &/ [STORE_dataErrorInterruptStatus_4001_gather_scatter] (OR_u8_u8_4019_wire) (STORE_dataErrorInterruptStatus_4001_data_0) 
    $flowthrough 
    // 		sdhcRegisters[50 ] := (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1363
    // sdhcRegisters[50 ]
    $load [array_obj_ref_4024_load_0] $from memory_space_8 (array_obj_ref_4024_word_address_0) (array_obj_ref_4024_data_0) 
    $delay array_obj_ref_4024_load_0 5
    &/ [array_obj_ref_4024_gather_scatter] (array_obj_ref_4024_data_0) (array_obj_ref_4024_wire) 
    $flowthrough 
    // dataErrorInterruptStatus
    $load [LOAD_dataErrorInterruptStatus_4025_load_0] $from memory_space_0 (LOAD_dataErrorInterruptStatus_4025_word_address_0) (LOAD_dataErrorInterruptStatus_4025_data_0) 
    $delay LOAD_dataErrorInterruptStatus_4025_load_0 4
    &/ [LOAD_dataErrorInterruptStatus_4025_gather_scatter] (LOAD_dataErrorInterruptStatus_4025_data_0) (LOAD_dataErrorInterruptStatus_4025_wire) 
    $flowthrough 
    // (dataErrorInterruptStatus | errorInterruptStatusVar1)
    |[OR_u8_u8_4027_inst] (LOAD_dataErrorInterruptStatus_4025_wire errorInterruptStatusVar1_3574) (OR_u8_u8_4027_wire)   $flowthrough 
    $delay OR_u8_u8_4027_inst 0
    // (sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1))
    |[OR_u8_u8_4028_inst] (array_obj_ref_4024_wire OR_u8_u8_4027_wire) (OR_u8_u8_4028_wire)   $flowthrough 
    $delay OR_u8_u8_4028_inst 0
    // errorInterruptFlag1
    $load [LOAD_errorInterruptFlag1_4029_load_0] $from memory_space_3 (LOAD_errorInterruptFlag1_4029_word_address_0) (LOAD_errorInterruptFlag1_4029_data_0) 
    $delay LOAD_errorInterruptFlag1_4029_load_0 5
    &/ [LOAD_errorInterruptFlag1_4029_gather_scatter] (LOAD_errorInterruptFlag1_4029_data_0) (LOAD_errorInterruptFlag1_4029_wire) 
    $flowthrough 
    // ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
    &[AND_u8_u8_4030_inst] (OR_u8_u8_4028_wire LOAD_errorInterruptFlag1_4029_wire) (AND_u8_u8_4030_wire)   $flowthrough 
    $delay AND_u8_u8_4030_inst 0
    // sdhcRegisters[54 ]
    $load [array_obj_ref_4032_load_0] $from memory_space_8 (array_obj_ref_4032_word_address_0) (array_obj_ref_4032_data_0) 
    $delay array_obj_ref_4032_load_0 5
    &/ [array_obj_ref_4032_gather_scatter] (array_obj_ref_4032_data_0) (array_obj_ref_4032_wire) 
    $flowthrough 
    // (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ])
    &[AND_u8_u8_4033_inst] (AND_u8_u8_4030_wire array_obj_ref_4032_wire) (AND_u8_u8_4033_wire)   
    $buffering  $out AND_u8_u8_4033_inst AND_u8_u8_4033_wire 1
    $delay AND_u8_u8_4033_inst 1
    // sdhcRegisters[50 ]
    $store [array_obj_ref_4022_store_0] $to memory_space_8 (array_obj_ref_4022_word_address_0 array_obj_ref_4022_data_0) 
    $delay array_obj_ref_4022_store_0 5
    &/ [array_obj_ref_4022_gather_scatter] (AND_u8_u8_4033_wire) (array_obj_ref_4022_data_0) 
    $flowthrough 
    // data-path instances for merge  
    //  file .Aa/sdhc.opt.aa, line 1364
    // 			$phi S := 			  ONE_8 $on   $entry 			  next_S $on   loopError 
    // type of target is $uint<8>
    //  file .Aa/sdhc.opt.aa, line 1365
    # := [next_S_4114_4039_buf] (next_S_4114) (next_S_4114_4039_buffered)    
    $phi [phi_stmt_4036] (R_ONE_8_4038_wire_constant next_S_4114_4039_buffered) ( S_4036 ) 
    // 			$phi readErrorInterruptReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1367
    # := [errorInterruptReg_4071_4044_buf] (errorInterruptReg_4071) (errorInterruptReg_4071_4044_buffered)    
    $phi [phi_stmt_4040] (type_cast_4043_wire_constant errorInterruptReg_4071_4044_buffered) ( readErrorInterruptReg_4040 ) 
    // 			$phi readErrorInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1369
    # := [errorInterruptEnableReg_4082_4049_buf] (errorInterruptEnableReg_4082) (errorInterruptEnableReg_4082_4049_buffered)    
    $phi [phi_stmt_4045] (type_cast_4048_wire_constant errorInterruptEnableReg_4082_4049_buffered) ( readErrorInterruptEnableReg_4045 ) 
    // 			$phi readErrorInterruptSignalEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  errorInterruptSignalEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1371
    # := [errorInterruptSignalEnableReg_4093_4054_buf] (errorInterruptSignalEnableReg_4093) (errorInterruptSignalEnableReg_4093_4054_buffered)    
    $phi [phi_stmt_4050] (type_cast_4053_wire_constant errorInterruptSignalEnableReg_4093_4054_buffered) ( readErrorInterruptSignalEnableReg_4050 ) 
    // 			$phi readNormalInterruptEnableReg := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  normalInterruptEnableReg $on   loopError 
    // type of target is $uint<16>
    //  file .Aa/sdhc.opt.aa, line 1373
    # := [normalInterruptEnableReg_4104_4059_buf] (normalInterruptEnableReg_4104) (normalInterruptEnableReg_4104_4059_buffered)    
    $phi [phi_stmt_4055] (type_cast_4058_wire_constant normalInterruptEnableReg_4104_4059_buffered) ( readNormalInterruptEnableReg_4055 ) 
    // 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1376
    // (50  + S)
    +[ADD_u8_u8_4063_inst] (konst_4061_wire_constant S_4036) (ADD_u8_u8_4063_wire)   $flowthrough 
    $delay ADD_u8_u8_4063_inst 0
    $call [call_stmt_4065_call] $module readSDHCRegisters(ADD_u8_u8_4063_wire) (errorInterruptRegTemp_4065)  
    $delay call_stmt_4065_call 4
    $buffering  $in call_stmt_4065_call ADD_u8_u8_4063_wire 1
    $buffering  $out call_stmt_4065_call errorInterruptRegTemp_4065 1
    // 		$volatile errorInterruptReg := (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1377
    // ( $slice readErrorInterruptReg 7 0 ) 
    [:] [slice_4068_inst] (readErrorInterruptReg_4040 7 0) (slice_4068_wire)  $flowthrough
    $delay slice_4068_inst 0
    // (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp)
    &&[CONCAT_u8_u16_4070_inst] (slice_4068_wire errorInterruptRegTemp_4065) (errorInterruptReg_4071)   $flowthrough 
    $delay CONCAT_u8_u16_4070_inst 0
    // 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1378
    // (54  + S)
    +[ADD_u8_u8_4074_inst] (konst_4072_wire_constant S_4036) (ADD_u8_u8_4074_wire)   $flowthrough 
    $delay ADD_u8_u8_4074_inst 0
    $call [call_stmt_4076_call] $module readSDHCRegisters(ADD_u8_u8_4074_wire) (errorInterruptEnableRegTemp_4076)  
    $delay call_stmt_4076_call 4
    $buffering  $in call_stmt_4076_call ADD_u8_u8_4074_wire 1
    $buffering  $out call_stmt_4076_call errorInterruptEnableRegTemp_4076 1
    // 		$volatile errorInterruptEnableReg := (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1379
    // ( $slice readErrorInterruptEnableReg 7 0 ) 
    [:] [slice_4079_inst] (readErrorInterruptEnableReg_4045 7 0) (slice_4079_wire)  $flowthrough
    $delay slice_4079_inst 0
    // (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp)
    &&[CONCAT_u8_u16_4081_inst] (slice_4079_wire errorInterruptEnableRegTemp_4076) (errorInterruptEnableReg_4082)   $flowthrough 
    $delay CONCAT_u8_u16_4081_inst 0
    // 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1380
    // (58  + S)
    +[ADD_u8_u8_4085_inst] (konst_4083_wire_constant S_4036) (ADD_u8_u8_4085_wire)   $flowthrough 
    $delay ADD_u8_u8_4085_inst 0
    $call [call_stmt_4087_call] $module readSDHCRegisters(ADD_u8_u8_4085_wire) (errorInterruptSignalEnableRegTemp_4087)  
    $delay call_stmt_4087_call 4
    $buffering  $in call_stmt_4087_call ADD_u8_u8_4085_wire 1
    $buffering  $out call_stmt_4087_call errorInterruptSignalEnableRegTemp_4087 1
    // 		$volatile errorInterruptSignalEnableReg := (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1381
    // ( $slice readErrorInterruptSignalEnableReg 7 0 ) 
    [:] [slice_4090_inst] (readErrorInterruptSignalEnableReg_4050 7 0) (slice_4090_wire)  $flowthrough
    $delay slice_4090_inst 0
    // (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp)
    &&[CONCAT_u8_u16_4092_inst] (slice_4090_wire errorInterruptSignalEnableRegTemp_4087) (errorInterruptSignalEnableReg_4093)   $flowthrough 
    $delay CONCAT_u8_u16_4092_inst 0
    // 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1382
    // (52  + S)
    +[ADD_u8_u8_4096_inst] (konst_4094_wire_constant S_4036) (ADD_u8_u8_4096_wire)   $flowthrough 
    $delay ADD_u8_u8_4096_inst 0
    $call [call_stmt_4098_call] $module readSDHCRegisters(ADD_u8_u8_4096_wire) (normalInterruptEnableRegTemp_4098)  
    $delay call_stmt_4098_call 4
    $buffering  $in call_stmt_4098_call ADD_u8_u8_4096_wire 1
    $buffering  $out call_stmt_4098_call normalInterruptEnableRegTemp_4098 1
    // 		$volatile normalInterruptEnableReg := (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1383
    // ( $slice readNormalInterruptEnableReg 7 0 ) 
    [:] [slice_4101_inst] (readNormalInterruptEnableReg_4055 7 0) (slice_4101_wire)  $flowthrough
    $delay slice_4101_inst 0
    // (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp)
    &&[CONCAT_u8_u16_4103_inst] (slice_4101_wire normalInterruptEnableRegTemp_4098) (normalInterruptEnableReg_4104)   $flowthrough 
    $delay CONCAT_u8_u16_4103_inst 0
    // 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
    //  file .Aa/sdhc.opt.aa, line 1384
    // (44  + S)
    +[ADD_u8_u8_4107_inst] (konst_4105_wire_constant S_4036) (ADD_u8_u8_4107_wire)   $flowthrough 
    $delay ADD_u8_u8_4107_inst 0
    $call [call_stmt_4109_call] $module readSDHCRegisters(ADD_u8_u8_4107_wire) (clockControlRegTemp_4109)  
    $delay call_stmt_4109_call 4
    $buffering  $in call_stmt_4109_call ADD_u8_u8_4107_wire 1
    $buffering  $out call_stmt_4109_call clockControlRegTemp_4109 1
    // 		$volatile next_S := (S - 1 ) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1385
    // (S - 1 )
    -[SUB_u8_u8_4113_inst] (S_4036 konst_4112_wire_constant) (next_S_4114)   $flowthrough 
    $delay SUB_u8_u8_4113_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 0
    // (S != 0 )
    !=[NEQ_u8_u1_4118_inst] (S_4036 konst_4117_wire_constant) (NEQ_u8_u1_4118_wire)   $flowthrough 
    $delay NEQ_u8_u1_4118_inst 0
    ==0? [if_stmt_4115_branch] (NEQ_u8_u1_4118_wire)
    // 		$volatile errorInterruptRegVal0 := ( $slice errorInterruptReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1389
    // ( $slice errorInterruptReg 7 0 ) 
    [:] [slice_4123_inst] (errorInterruptReg_4071 7 0) (errorInterruptRegVal0_4124)  $flowthrough
    $delay slice_4123_inst 0
    // 		$volatile errorInterruptRegVal1 := ( $slice errorInterruptReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1390
    // ( $slice errorInterruptReg 15 8 ) 
    [:] [slice_4127_inst] (errorInterruptReg_4071 15 8) (errorInterruptRegVal1_4128)  $flowthrough
    $delay slice_4127_inst 0
    // 		$volatile errorInterruptEnableVal0 := ( $slice errorInterruptEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1391
    // ( $slice errorInterruptEnableReg 7 0 ) 
    [:] [slice_4131_inst] (errorInterruptEnableReg_4082 7 0) (errorInterruptEnableVal0_4132)  $flowthrough
    $delay slice_4131_inst 0
    // 		$volatile errorInterruptEnableVal1 := ( $slice errorInterruptEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1392
    // ( $slice errorInterruptEnableReg 15 8 ) 
    [:] [slice_4135_inst] (errorInterruptEnableReg_4082 15 8) (errorInterruptEnableVal1_4136)  $flowthrough
    $delay slice_4135_inst 0
    // 		$volatile errorInterruptSignalEnableVal0 := ( $slice errorInterruptSignalEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1393
    // ( $slice errorInterruptSignalEnableReg 7 0 ) 
    [:] [slice_4139_inst] (errorInterruptSignalEnableReg_4093 7 0) (errorInterruptSignalEnableVal0_4140)  $flowthrough
    $delay slice_4139_inst 0
    // 		$volatile errorInterruptSignalEnableVal1 := ( $slice errorInterruptSignalEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1394
    // ( $slice errorInterruptSignalEnableReg 15 8 ) 
    [:] [slice_4143_inst] (errorInterruptSignalEnableReg_4093 15 8) (errorInterruptSignalEnableVal1_4144)  $flowthrough
    $delay slice_4143_inst 0
    // 		$volatile normalInterruptEnableVal0 := ( $slice normalInterruptEnableReg 7 0 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1395
    // ( $slice normalInterruptEnableReg 7 0 ) 
    [:] [slice_4147_inst] (normalInterruptEnableReg_4104 7 0) (normalInterruptEnableVal0_4148)  $flowthrough
    $delay slice_4147_inst 0
    // 		$volatile normalInterruptEnableVal1 := ( $slice normalInterruptEnableReg 15 8 )  $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1396
    // ( $slice normalInterruptEnableReg 15 8 ) 
    [:] [slice_4151_inst] (normalInterruptEnableReg_4104 15 8) (normalInterruptEnableVal1_4152)  $flowthrough
    $delay slice_4151_inst 0
    // 		tempErrorReg0 := (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1397
    // dataErrorInterruptStatus
    $load [LOAD_dataErrorInterruptStatus_4155_load_0] $from memory_space_0 (LOAD_dataErrorInterruptStatus_4155_word_address_0) (LOAD_dataErrorInterruptStatus_4155_data_0) 
    $delay LOAD_dataErrorInterruptStatus_4155_load_0 4
    &/ [LOAD_dataErrorInterruptStatus_4155_gather_scatter] (LOAD_dataErrorInterruptStatus_4155_data_0) (LOAD_dataErrorInterruptStatus_4155_wire) 
    $flowthrough 
    // (dataErrorInterruptStatus | errorInterruptStatusVar1)
    |[OR_u8_u8_4157_inst] (LOAD_dataErrorInterruptStatus_4155_wire errorInterruptStatusVar1_3574) (OR_u8_u8_4157_wire)   $flowthrough 
    $delay OR_u8_u8_4157_inst 0
    // (errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1))
    |[OR_u8_u8_4158_inst] (errorInterruptRegVal0_4124 OR_u8_u8_4157_wire) (OR_u8_u8_4158_wire)   $flowthrough 
    $delay OR_u8_u8_4158_inst 0
    // errorInterruptFlag1
    $load [LOAD_errorInterruptFlag1_4159_load_0] $from memory_space_3 (LOAD_errorInterruptFlag1_4159_word_address_0) (LOAD_errorInterruptFlag1_4159_data_0) 
    $delay LOAD_errorInterruptFlag1_4159_load_0 5
    &/ [LOAD_errorInterruptFlag1_4159_gather_scatter] (LOAD_errorInterruptFlag1_4159_data_0) (LOAD_errorInterruptFlag1_4159_wire) 
    $flowthrough 
    // ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
    &[AND_u8_u8_4160_inst] (OR_u8_u8_4158_wire LOAD_errorInterruptFlag1_4159_wire) (AND_u8_u8_4160_wire)   $flowthrough 
    $delay AND_u8_u8_4160_inst 0
    // (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0)
    &[AND_u8_u8_4162_inst] (AND_u8_u8_4160_wire errorInterruptEnableVal0_4132) (tempErrorReg0_4163)   
    $buffering  $out AND_u8_u8_4162_inst tempErrorReg0_4163 1
    $delay AND_u8_u8_4162_inst 1
    // 		tempErrorReg1 := (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1398
    // (errorInterruptRegVal1 | errorInterruptStatusVar2)
    |[OR_u8_u8_4167_inst] (errorInterruptRegVal1_4128 errorInterruptStatusVar2_3574) (OR_u8_u8_4167_wire)   $flowthrough 
    $delay OR_u8_u8_4167_inst 0
    // errorInterruptFlag2
    $load [LOAD_errorInterruptFlag2_4168_load_0] $from memory_space_4 (LOAD_errorInterruptFlag2_4168_word_address_0) (LOAD_errorInterruptFlag2_4168_data_0) 
    $delay LOAD_errorInterruptFlag2_4168_load_0 5
    &/ [LOAD_errorInterruptFlag2_4168_gather_scatter] (LOAD_errorInterruptFlag2_4168_data_0) (LOAD_errorInterruptFlag2_4168_wire) 
    $flowthrough 
    // ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2)
    &[AND_u8_u8_4169_inst] (OR_u8_u8_4167_wire LOAD_errorInterruptFlag2_4168_wire) (AND_u8_u8_4169_wire)   $flowthrough 
    $delay AND_u8_u8_4169_inst 0
    // (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1)
    &[AND_u8_u8_4171_inst] (AND_u8_u8_4169_wire errorInterruptEnableVal1_4136) (tempErrorReg1_4172)   
    $buffering  $out AND_u8_u8_4171_inst tempErrorReg1_4172 1
    $delay AND_u8_u8_4171_inst 1
    // 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
    //  file .Aa/sdhc.opt.aa, line 1399
    $call [call_stmt_4175_call] $module writeSDHCRegisters(konst_4173_wire_constant tempErrorReg1_4172) ()  
    $delay call_stmt_4175_call 4
    $buffering  $in call_stmt_4175_call konst_4173_wire_constant 1
    $buffering  $in call_stmt_4175_call tempErrorReg1_4172 1
    // 		errorInterruptBit := (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  )) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1400
    // (  $bitreduce |  tempErrorReg0 )
    !| [BITREDUCEOR_u8_u1_4178_inst] (tempErrorReg0_4163) (BITREDUCEOR_u8_u1_4178_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4178_inst 0
    // (  $bitreduce |  tempErrorReg1 )
    !| [BITREDUCEOR_u8_u1_4180_inst] (tempErrorReg1_4172) (BITREDUCEOR_u8_u1_4180_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4180_inst 0
    // ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 ))
    |[OR_u1_u1_4181_inst] (BITREDUCEOR_u8_u1_4178_wire BITREDUCEOR_u8_u1_4180_wire) (OR_u1_u1_4181_wire)   $flowthrough 
    $delay OR_u1_u1_4181_inst 0
    // (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  ))
    &&[CONCAT_u1_u8_4184_inst] (OR_u1_u1_4181_wire type_cast_4183_wire_constant) (errorInterruptBit_4185)   
    $buffering  $out CONCAT_u1_u8_4184_inst errorInterruptBit_4185 1
    $delay CONCAT_u1_u8_4184_inst 1
    // 		$volatile checkInterruptEnable := ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 )) $buffering 1
    //  file .Aa/sdhc.opt.aa, line 1401
    // (  $bitreduce |  normalInterruptEnableVal0 )
    !| [BITREDUCEOR_u8_u1_4188_inst] (normalInterruptEnableVal0_4148) (BITREDUCEOR_u8_u1_4188_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4188_inst 0
    // (  $bitreduce |  normalInterruptEnableVal1 )
    !| [BITREDUCEOR_u8_u1_4190_inst] (normalInterruptEnableVal1_4152) (BITREDUCEOR_u8_u1_4190_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4190_inst 0
    // ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 ))
    |[OR_u1_u1_4191_inst] (BITREDUCEOR_u8_u1_4188_wire BITREDUCEOR_u8_u1_4190_wire) (checkInterruptEnable_4192)   $flowthrough 
    $delay OR_u1_u1_4191_inst 0
    // datapath-instances for if  
    //  file .Aa/sdhc.opt.aa, line 1402
    // (checkInterruptEnable == 1 )
    ==[EQ_u1_u1_4196_inst] (checkInterruptEnable_4192 konst_4195_wire_constant) (EQ_u1_u1_4196_wire)   $flowthrough 
    $delay EQ_u1_u1_4196_inst 0
    ==0? [if_stmt_4193_branch] (EQ_u1_u1_4196_wire)
    // 			interrupt := (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1403
    // (readDataTransferComplete | dataTransferComplete)
    |[OR_u8_u8_4200_inst] (readDataTransferComplete_3932 dataTransferComplete_3574) (OR_u8_u8_4200_wire)   $flowthrough 
    $delay OR_u8_u8_4200_inst 0
    // ((readDataTransferComplete | dataTransferComplete) | transferComplete)
    |[OR_u8_u8_4202_inst] (OR_u8_u8_4200_wire transferComplete_3758) (OR_u8_u8_4202_wire)   $flowthrough 
    $delay OR_u8_u8_4202_inst 0
    // ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)
    |[OR_u8_u8_4207_inst] (OR_u8_u8_4205_wire_constant normalInterruptStatusVar1_3574) (OR_u8_u8_4207_wire)   $flowthrough 
    $delay OR_u8_u8_4207_inst 0
    // (((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1))
    |[OR_u8_u8_4208_inst] (OR_u8_u8_4202_wire OR_u8_u8_4207_wire) (OR_u8_u8_4208_wire)   $flowthrough 
    $delay OR_u8_u8_4208_inst 0
    // ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0)
    &[AND_u8_u8_4210_inst] (OR_u8_u8_4208_wire normalInterruptEnableVal0_4148) (AND_u8_u8_4210_wire)   $flowthrough 
    $delay AND_u8_u8_4210_inst 0
    // normalInterruptFlag1
    $load [LOAD_normalInterruptFlag1_4211_load_0] $from memory_space_5 (LOAD_normalInterruptFlag1_4211_word_address_0) (LOAD_normalInterruptFlag1_4211_data_0) 
    $delay LOAD_normalInterruptFlag1_4211_load_0 5
    &/ [LOAD_normalInterruptFlag1_4211_gather_scatter] (LOAD_normalInterruptFlag1_4211_data_0) (LOAD_normalInterruptFlag1_4211_wire) 
    $flowthrough 
    // (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1)
    &[AND_u8_u8_4212_inst] (AND_u8_u8_4210_wire LOAD_normalInterruptFlag1_4211_wire) (interrupt_4213)   
    $buffering  $out AND_u8_u8_4212_inst interrupt_4213 1
    $delay AND_u8_u8_4212_inst 1
    // 			$call writeSDHCRegisters (48  interrupt ) () 
    //  file .Aa/sdhc.opt.aa, line 1404
    $call [call_stmt_4216_call] $module writeSDHCRegisters(konst_4214_wire_constant interrupt_4213) ()  
    $delay call_stmt_4216_call 4
    $buffering  $in call_stmt_4216_call konst_4214_wire_constant 1
    $buffering  $in call_stmt_4216_call interrupt_4213 1
    // 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
    //  file .Aa/sdhc.opt.aa, line 1405
    $call [call_stmt_4219_call] $module writeSDHCRegisters(konst_4217_wire_constant errorInterruptBit_4185) ()  
    $delay call_stmt_4219_call 4
    $buffering  $in call_stmt_4219_call konst_4217_wire_constant 1
    $buffering  $in call_stmt_4219_call errorInterruptBit_4185 1
    // 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
    //  file .Aa/sdhc.opt.aa, line 1406
    $call [call_stmt_4222_call] $module readSDHCRegisters(konst_4220_wire_constant) (tempNormalSignal_4222)  
    $delay call_stmt_4222_call 4
    $buffering  $in call_stmt_4222_call konst_4220_wire_constant 1
    $buffering  $out call_stmt_4222_call tempNormalSignal_4222 1
    // 			interruptLine := (tempNormalSignal & interrupt) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1407
    // (tempNormalSignal & interrupt)
    &[AND_u8_u8_4226_inst] (tempNormalSignal_4222 interrupt_4213) (interruptLine_4227)   
    $buffering  $out AND_u8_u8_4226_inst interruptLine_4227 1
    $delay AND_u8_u8_4226_inst 1
    // 			errorInterruptLine := ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1)) $buffering 1// bits of buffering = 8. 
    //  file .Aa/sdhc.opt.aa, line 1408
    // (tempErrorReg0 & errorInterruptSignalEnableVal0)
    &[AND_u8_u8_4231_inst] (tempErrorReg0_4163 errorInterruptSignalEnableVal0_4140) (AND_u8_u8_4231_wire)   $flowthrough 
    $delay AND_u8_u8_4231_inst 0
    // (tempErrorReg1 & errorInterruptSignalEnableVal1)
    &[AND_u8_u8_4234_inst] (tempErrorReg1_4172 errorInterruptSignalEnableVal1_4144) (AND_u8_u8_4234_wire)   $flowthrough 
    $delay AND_u8_u8_4234_inst 0
    // ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1))
    |[OR_u8_u8_4235_inst] (AND_u8_u8_4231_wire AND_u8_u8_4234_wire) (errorInterruptLine_4236)   
    $buffering  $out OR_u8_u8_4235_inst errorInterruptLine_4236 1
    $delay OR_u8_u8_4235_inst 1
    // 			SDHC_to_IRC_INT := ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1409
    // (  $bitreduce |  interruptLine )
    !| [BITREDUCEOR_u8_u1_4239_inst] (interruptLine_4227) (BITREDUCEOR_u8_u1_4239_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4239_inst 0
    // (  $bitreduce |  errorInterruptLine )
    !| [BITREDUCEOR_u8_u1_4241_inst] (errorInterruptLine_4236) (BITREDUCEOR_u8_u1_4241_wire)   $flowthrough
    $delay BITREDUCEOR_u8_u1_4241_inst 0
    // ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine ))
    |[OR_u1_u1_4242_inst] (BITREDUCEOR_u8_u1_4239_wire BITREDUCEOR_u8_u1_4241_wire) (OR_u1_u1_4242_wire)   
    $buffering  $out OR_u1_u1_4242_inst OR_u1_u1_4242_wire 1
    $delay OR_u1_u1_4242_inst 1
    // SDHC_to_IRC_INT
    $ioport $out [WPIPE_SDHC_to_IRC_INT_4237_inst]  (OR_u1_u1_4242_wire) (SDHC_to_IRC_INT) 
    // 			$call writeSDHCRegisters (48  ZERO_8 ) () 
    //  file .Aa/sdhc.opt.aa, line 1411
    $call [call_stmt_4247_call] $module writeSDHCRegisters(konst_4245_wire_constant R_ZERO_8_4246_wire_constant) ()  
    $delay call_stmt_4247_call 4
    $buffering  $in call_stmt_4247_call konst_4245_wire_constant 1
    $buffering  $in call_stmt_4247_call R_ZERO_8_4246_wire_constant 1
    // 			SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
    //  file .Aa/sdhc.opt.aa, line 1412
    // SDHC_to_IRC_INT
    $ioport $out [WPIPE_SDHC_to_IRC_INT_4248_inst]  (R_ZERO_1_4249_wire_constant) (SDHC_to_IRC_INT) 
  }
  // end data-path
  // 	SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1188
  // SDHC_to_IRC_INT
  WPIPE_SDHC_to_IRC_INT_3371_inst <=> (assign_stmt_3373_to_call_stmt_3413/WPIPE_SDHC_to_IRC_INT_3371_Sample/req assign_stmt_3373_to_call_stmt_3413/WPIPE_SDHC_to_IRC_INT_3371_Update/req) (assign_stmt_3373_to_call_stmt_3413/WPIPE_SDHC_to_IRC_INT_3371_Sample/ack assign_stmt_3373_to_call_stmt_3413/WPIPE_SDHC_to_IRC_INT_3371_Update/ack)
  // 	oe := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1189
  // oe
  WPIPE_oe_3374_inst <=> (assign_stmt_3373_to_call_stmt_3413/WPIPE_oe_3374_Sample/req assign_stmt_3373_to_call_stmt_3413/WPIPE_oe_3374_Update/req) (assign_stmt_3373_to_call_stmt_3413/WPIPE_oe_3374_Sample/ack assign_stmt_3373_to_call_stmt_3413/WPIPE_oe_3374_Update/ack)
  // 	busy := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1190
  // busy
  WPIPE_busy_3377_inst <=> (assign_stmt_3373_to_call_stmt_3413/WPIPE_busy_3377_Sample/req assign_stmt_3373_to_call_stmt_3413/WPIPE_busy_3377_Update/req) (assign_stmt_3373_to_call_stmt_3413/WPIPE_busy_3377_Sample/ack assign_stmt_3373_to_call_stmt_3413/WPIPE_busy_3377_Update/ack)
  // 	readyClockCountEnable := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1191
  // readyClockCountEnable
  WPIPE_readyClockCountEnable_3380_inst <=> (assign_stmt_3373_to_call_stmt_3413/WPIPE_readyClockCountEnable_3380_Sample/req assign_stmt_3373_to_call_stmt_3413/WPIPE_readyClockCountEnable_3380_Update/req) (assign_stmt_3373_to_call_stmt_3413/WPIPE_readyClockCountEnable_3380_Sample/ack assign_stmt_3373_to_call_stmt_3413/WPIPE_readyClockCountEnable_3380_Update/ack)
  // 	normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1192
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3383_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Sample/STORE_normalInterruptFlag1_3383_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Sample/STORE_normalInterruptFlag1_3383_Split/split_ack)
  STORE_normalInterruptFlag1_3383_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag1_3383_Update/word_access_complete/word_0/ca)
  // 	normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1193
  // normalInterruptFlag2
  STORE_normalInterruptFlag2_3386_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Sample/STORE_normalInterruptFlag2_3386_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Sample/STORE_normalInterruptFlag2_3386_Split/split_ack)
  STORE_normalInterruptFlag2_3386_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_normalInterruptFlag2_3386_Update/word_access_complete/word_0/ca)
  // 	errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1194
  // errorInterruptFlag1
  STORE_errorInterruptFlag1_3389_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Sample/STORE_errorInterruptFlag1_3389_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Sample/STORE_errorInterruptFlag1_3389_Split/split_ack)
  STORE_errorInterruptFlag1_3389_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag1_3389_Update/word_access_complete/word_0/ca)
  // 	errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1195
  // errorInterruptFlag2
  STORE_errorInterruptFlag2_3392_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Sample/STORE_errorInterruptFlag2_3392_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Sample/STORE_errorInterruptFlag2_3392_Split/split_ack)
  STORE_errorInterruptFlag2_3392_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_errorInterruptFlag2_3392_Update/word_access_complete/word_0/ca)
  // 	txBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 1196
  // txBufferPointer
  STORE_txBufferPointer_3395_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Sample/STORE_txBufferPointer_3395_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Sample/STORE_txBufferPointer_3395_Split/split_ack)
  STORE_txBufferPointer_3395_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_txBufferPointer_3395_Update/word_access_complete/word_0/ca)
  // 	rxBufferPointer := ($bitcast ($uint<10>) 0  ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 1197
  // rxBufferPointer
  STORE_rxBufferPointer_3399_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Sample/STORE_rxBufferPointer_3399_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Sample/STORE_rxBufferPointer_3399_Split/split_ack)
  STORE_rxBufferPointer_3399_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_rxBufferPointer_3399_Update/word_access_complete/word_0/ca)
  // 	dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1198
  // dataRxEnrty1
  STORE_dataRxEnrty1_3403_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Sample/STORE_dataRxEnrty1_3403_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Sample/STORE_dataRxEnrty1_3403_Split/split_ack)
  STORE_dataRxEnrty1_3403_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty1_3403_Update/word_access_complete/word_0/ca)
  // 	dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1199
  // dataRxEnrty2
  STORE_dataRxEnrty2_3406_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Sample/STORE_dataRxEnrty2_3406_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Sample/STORE_dataRxEnrty2_3406_Split/split_ack)
  STORE_dataRxEnrty2_3406_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_dataRxEnrty2_3406_Update/word_access_complete/word_0/ca)
  // 	dataErrorInterruptStatus := ZERO_8 $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1200
  // dataErrorInterruptStatus
  STORE_dataErrorInterruptStatus_3409_gather_scatter <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Sample/STORE_dataErrorInterruptStatus_3409_Split/split_req) (assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Sample/STORE_dataErrorInterruptStatus_3409_Split/split_ack)
  STORE_dataErrorInterruptStatus_3409_store_0 <=> (assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Sample/word_access_start/word_0/rr assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Update/word_access_complete/word_0/cr) (assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Sample/word_access_start/word_0/ra assign_stmt_3373_to_call_stmt_3413/STORE_dataErrorInterruptStatus_3409_Update/word_access_complete/word_0/ca)
  // 	$call resetRegisters (ZERO_2 ) () 
  //  file .Aa/sdhc.opt.aa, line 1201
  call_stmt_3413_call <=> (assign_stmt_3373_to_call_stmt_3413/call_stmt_3413_Sample/crr assign_stmt_3373_to_call_stmt_3413/call_stmt_3413_Update/ccr) (assign_stmt_3373_to_call_stmt_3413/call_stmt_3413_Sample/cra assign_stmt_3373_to_call_stmt_3413/call_stmt_3413_Update/cca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1204
  // 		request := peripheral_bridge_to_sdhc_request $buffering 1// bits of buffering = 64. 
  //  file .Aa/sdhc.opt.aa, line 1206
  // peripheral_bridge_to_sdhc_request
  RPIPE_peripheral_bridge_to_sdhc_request_3417_inst <=> (branch_block_stmt_3414/assign_stmt_3418_to_assign_stmt_3462/RPIPE_peripheral_bridge_to_sdhc_request_3417_Sample/rr branch_block_stmt_3414/assign_stmt_3418_to_assign_stmt_3462/RPIPE_peripheral_bridge_to_sdhc_request_3417_Update/cr) (branch_block_stmt_3414/assign_stmt_3418_to_assign_stmt_3462/RPIPE_peripheral_bridge_to_sdhc_request_3417_Sample/ra branch_block_stmt_3414/assign_stmt_3418_to_assign_stmt_3462/RPIPE_peripheral_bridge_to_sdhc_request_3417_Update/ca)
  // 		$volatile rwbar := ( $slice request 63 63 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1207
  // request
  // 		$volatile bytemask := ( $slice request 62 59 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1208
  // request
  // 		$volatile address := ( $slice request 39 32 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1209
  // request
  // 		$volatile data3 := ( $slice request 31 24 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1210
  // request
  // 		$volatile data2 := ( $slice request 23 16 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1211
  // request
  // 		$volatile data1 := ( $slice request 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1212
  // request
  // 		$volatile data0 := ( $slice request 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1213
  // request
  // 		$volatile b3 := ( $slice bytemask 3 3 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1214
  // bytemask
  // 		$volatile b2 := ( $slice bytemask 2 2 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1215
  // bytemask
  // 		$volatile b1 := ( $slice bytemask 1 1 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1216
  // bytemask
  // 		$volatile b0 := ( $slice bytemask 0 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1217
  // bytemask
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1218
  // (rwbar == 0 )
  if_stmt_3463_branch <=> (branch_block_stmt_3414/if_stmt_3463_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3463_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3463_if_link/if_choice_transition)
  // 			$guard (b3) $call sdhc_register_write (address data3 ) () 
  //  file .Aa/sdhc.opt.aa, line 1219
  // address
  // data3
  call_stmt_3470_call <=> (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3470_Sample/crr branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3470_Update/ccr) (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3470_Sample/cra branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3470_Update/cca)
  // 			$guard (b2) $call sdhc_register_write ((address + 1 ) data2 ) () 
  //  file .Aa/sdhc.opt.aa, line 1220
  // (address + 1 )
  // address
  // data2
  call_stmt_3476_call <=> (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3476_Sample/crr branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3476_Update/ccr) (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3476_Sample/cra branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3476_Update/cca)
  // 			$guard (b1) $call sdhc_register_write ((address + 2 ) data1 ) () 
  //  file .Aa/sdhc.opt.aa, line 1221
  // (address + 2 )
  // address
  // data1
  call_stmt_3482_call <=> (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3482_Sample/crr branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3482_Update/ccr) (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3482_Sample/cra branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3482_Update/cca)
  // 			$guard (b0) $call sdhc_register_write ((address + 3 ) data0 ) () 
  //  file .Aa/sdhc.opt.aa, line 1222
  // (address + 3 )
  // address
  // data0
  call_stmt_3488_call <=> (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3488_Sample/crr branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3488_Update/ccr) (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3488_Sample/cra branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/call_stmt_3488_Update/cca)
  // 			sdhc_to_peripheral_bridge_response := ZERO_32 $buffering 1// bits of buffering = 32. 
  //  file .Aa/sdhc.opt.aa, line 1223
  // sdhc_to_peripheral_bridge_response
  WPIPE_sdhc_to_peripheral_bridge_response_3489_inst <=> (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/WPIPE_sdhc_to_peripheral_bridge_response_3489_Sample/req branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/WPIPE_sdhc_to_peripheral_bridge_response_3489_Update/req) (branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/WPIPE_sdhc_to_peripheral_bridge_response_3489_Sample/ack branch_block_stmt_3414/call_stmt_3470_to_assign_stmt_3491/WPIPE_sdhc_to_peripheral_bridge_response_3489_Update/ack)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (address + 3 )
  // ((address + 3 ) == 47 )
  if_stmt_3492_branch <=> (branch_block_stmt_3414/if_stmt_3492_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3492_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3492_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (47  ) (softwareResetVal ) 
  //  file .Aa/sdhc.opt.aa, line 1225
  call_stmt_3500_call <=> (branch_block_stmt_3414/call_stmt_3500/call_stmt_3500_Sample/crr branch_block_stmt_3414/call_stmt_3500/call_stmt_3500_Update/ccr) (branch_block_stmt_3414/call_stmt_3500/call_stmt_3500_Sample/cra branch_block_stmt_3414/call_stmt_3500/call_stmt_3500_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (softwareResetVal [] 0 )
  if_stmt_3501_branch <=> (branch_block_stmt_3414/if_stmt_3501_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3501_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3501_if_link/if_choice_transition)
  // 			$call resetRegisters (ZERO_2 ) () 
  //  file .Aa/sdhc.opt.aa, line 1227
  call_stmt_3506_call <=> (branch_block_stmt_3414/call_stmt_3506/call_stmt_3506_Sample/crr branch_block_stmt_3414/call_stmt_3506/call_stmt_3506_Update/ccr) (branch_block_stmt_3414/call_stmt_3506/call_stmt_3506_Sample/cra branch_block_stmt_3414/call_stmt_3506/call_stmt_3506_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (softwareResetVal [] 1 )
  if_stmt_3508_branch <=> (branch_block_stmt_3414/if_stmt_3508_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3508_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3508_if_link/if_choice_transition)
  // 			$call resetRegisters (ONE_2 ) () 
  //  file .Aa/sdhc.opt.aa, line 1230
  call_stmt_3513_call <=> (branch_block_stmt_3414/call_stmt_3513/call_stmt_3513_Sample/crr branch_block_stmt_3414/call_stmt_3513/call_stmt_3513_Update/ccr) (branch_block_stmt_3414/call_stmt_3513/call_stmt_3513_Sample/cra branch_block_stmt_3414/call_stmt_3513/call_stmt_3513_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (softwareResetVal [] 2 )
  if_stmt_3515_branch <=> (branch_block_stmt_3414/if_stmt_3515_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3515_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3515_if_link/if_choice_transition)
  // 			$call resetRegisters (($bitcast ($uint<2>) 2  ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1233
  call_stmt_3521_call <=> (branch_block_stmt_3414/call_stmt_3521/call_stmt_3521_Sample/crr branch_block_stmt_3414/call_stmt_3521/call_stmt_3521_Update/ccr) (branch_block_stmt_3414/call_stmt_3521/call_stmt_3521_Sample/cra branch_block_stmt_3414/call_stmt_3521/call_stmt_3521_Update/cca)
  // 			$call readSDHCRegisters (36  ) (presentStateVal ) 
  //  file .Aa/sdhc.opt.aa, line 1236
  call_stmt_3526_call <=> (branch_block_stmt_3414/call_stmt_3526_to_assign_stmt_3549/call_stmt_3526_Sample/crr branch_block_stmt_3414/call_stmt_3526_to_assign_stmt_3549/call_stmt_3526_Update/ccr) (branch_block_stmt_3414/call_stmt_3526_to_assign_stmt_3549/call_stmt_3526_Sample/cra branch_block_stmt_3414/call_stmt_3526_to_assign_stmt_3549/call_stmt_3526_Update/cca)
  // 			$volatile commandInhibit_CMD := ((presentStateVal [] 0 ) == 0 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1237
  // ((presentStateVal [] 0 ) == 0 )
  // (presentStateVal [] 0 )
  // presentStateVal
  // 			$volatile addresscheck := (((address + 3 ) == _h0f ) & b0) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1238
  // (((address + 3 ) == _h0f ) & b0)
  // ((address + 3 ) == _h0f )
  // (address + 3 )
  // address
  // b0
  // 			$volatile presentState := ((presentStateVal >> 1 ) << 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1239
  // ((presentStateVal >> 1 ) << 1 )
  // (presentStateVal >> 1 )
  // presentStateVal
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (addresscheck & commandInhibit_CMD)
  if_stmt_3550_branch <=> (branch_block_stmt_3414/if_stmt_3550_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3550_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3550_if_link/if_choice_transition)
  // 			$volatile tempPresentStateHere := (presentState | _h01 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1241
  // (presentState | _h01 )
  // presentState
  // 			$call writeSDHCRegisters (36  tempPresentStateHere ) () 
  //  file .Aa/sdhc.opt.aa, line 1242
  // tempPresentStateHere
  call_stmt_3561_call <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3561_Sample/crr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3561_Update/ccr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3561_Sample/cra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3561_Update/cca)
  // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1243
  // dataRxEnrty1
  STORE_dataRxEnrty1_3562_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Sample/STORE_dataRxEnrty1_3562_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Sample/STORE_dataRxEnrty1_3562_Split/split_ack)
  STORE_dataRxEnrty1_3562_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty1_3562_Update/word_access_complete/word_0/ca)
  // 			dataRxEnrty2 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1244
  // dataRxEnrty2
  STORE_dataRxEnrty2_3565_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Sample/STORE_dataRxEnrty2_3565_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Sample/STORE_dataRxEnrty2_3565_Split/split_ack)
  STORE_dataRxEnrty2_3565_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_dataRxEnrty2_3565_Update/word_access_complete/word_0/ca)
  // 			$call command_generator () (normalInterruptStatusVar1 normalInterruptStatusVar2 errorInterruptStatusVar1 errorInterruptStatusVar2 dataErrorInterruptStatusVar1 dataTransferComplete ) 
  //  file .Aa/sdhc.opt.aa, line 1245
  call_stmt_3574_call <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3574_Sample/crr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3574_Update/ccr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3574_Sample/cra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/call_stmt_3574_Update/cca)
  // 			normalInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1246
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3575_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Sample/STORE_normalInterruptFlag1_3575_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Sample/STORE_normalInterruptFlag1_3575_Split/split_ack)
  STORE_normalInterruptFlag1_3575_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag1_3575_Update/word_access_complete/word_0/ca)
  // 			normalInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1247
  // normalInterruptFlag2
  STORE_normalInterruptFlag2_3578_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Sample/STORE_normalInterruptFlag2_3578_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Sample/STORE_normalInterruptFlag2_3578_Split/split_ack)
  STORE_normalInterruptFlag2_3578_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_normalInterruptFlag2_3578_Update/word_access_complete/word_0/ca)
  // 			errorInterruptFlag1 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1248
  // errorInterruptFlag1
  STORE_errorInterruptFlag1_3581_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Sample/STORE_errorInterruptFlag1_3581_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Sample/STORE_errorInterruptFlag1_3581_Split/split_ack)
  STORE_errorInterruptFlag1_3581_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag1_3581_Update/word_access_complete/word_0/ca)
  // 			errorInterruptFlag2 := _hFF  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1249
  // errorInterruptFlag2
  STORE_errorInterruptFlag2_3584_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Sample/STORE_errorInterruptFlag2_3584_Split/split_req) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Sample/STORE_errorInterruptFlag2_3584_Split/split_ack)
  STORE_errorInterruptFlag2_3584_store_0 <=> (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3558_to_assign_stmt_3586/STORE_errorInterruptFlag2_3584_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // rxBufferPointer
  LOAD_rxBufferPointer_3589_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/merge_req) (branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/merge_ack)
  LOAD_rxBufferPointer_3589_load_0 <=> (branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3588_eval_test/UGT_u10_u1_3591/UGT_u10_u1_3591_inputs/LOAD_rxBufferPointer_3589/LOAD_rxBufferPointer_3589_read/word_access/word_access_0_update/ca)
  // (rxBufferPointer > 0 )
  if_stmt_3588_branch <=> (branch_block_stmt_3414/if_stmt_3588_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3588_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3588_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (37  ) (tempPresentState_1_1 ) 
  //  file .Aa/sdhc.opt.aa, line 1252
  call_stmt_3594_call <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3594_Sample/crr branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3594_Update/ccr) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3594_Sample/cra branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3594_Update/cca)
  // 			$call writeSDHCRegisters (37  (tempPresentState_1_1 | _h08 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1253
  // (tempPresentState_1_1 | _h08 )
  // tempPresentState_1_1
  call_stmt_3599_call <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3599_Sample/crr branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3599_Update/ccr) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3599_Sample/cra branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/call_stmt_3599_Update/cca)
  // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h20 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1255
  // (normalInterruptFlag1 | _h20 )
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_3606_gather_scatter <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Update/LOAD_normalInterruptFlag1_3606_Merge/merge_req) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Update/LOAD_normalInterruptFlag1_3606_Merge/merge_ack)
  LOAD_normalInterruptFlag1_3606_load_0 <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Sample/word_access_start/word_0/rr branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Sample/word_access_start/word_0/ra branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/LOAD_normalInterruptFlag1_3606_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3608_inst <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/OR_u8_u8_3608_Sample/rr branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/OR_u8_u8_3608_Update/cr) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/OR_u8_u8_3608_Sample/ra branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/OR_u8_u8_3608_Update/ca)
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3605_gather_scatter <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Sample/STORE_normalInterruptFlag1_3605_Split/split_req) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Sample/STORE_normalInterruptFlag1_3605_Split/split_ack)
  STORE_normalInterruptFlag1_3605_store_0 <=> (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Sample/word_access_start/word_0/rr branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Sample/word_access_start/word_0/ra branch_block_stmt_3414/call_stmt_3594_to_assign_stmt_3609/STORE_normalInterruptFlag1_3605_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // txBufferPointer
  LOAD_txBufferPointer_3612_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/merge_req) (branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/merge_ack)
  LOAD_txBufferPointer_3612_load_0 <=> (branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3611_eval_test/ULT_u10_u1_3614/ULT_u10_u1_3614_inputs/LOAD_txBufferPointer_3612/LOAD_txBufferPointer_3612_read/word_access/word_access_0_update/ca)
  // (txBufferPointer < 512 )
  if_stmt_3611_branch <=> (branch_block_stmt_3414/if_stmt_3611_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3611_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3611_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (37  ) (tempPresentState_1_2 ) 
  //  file .Aa/sdhc.opt.aa, line 1258
  call_stmt_3617_call <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3617_Sample/crr branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3617_Update/ccr) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3617_Sample/cra branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3617_Update/cca)
  // 			$call writeSDHCRegisters (37  (tempPresentState_1_2 | _h04 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1259
  // (tempPresentState_1_2 | _h04 )
  // tempPresentState_1_2
  call_stmt_3622_call <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3622_Sample/crr branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3622_Update/ccr) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3622_Sample/cra branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/call_stmt_3622_Update/cca)
  // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h10 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1261
  // (normalInterruptFlag1 | _h10 )
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_3629_gather_scatter <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Update/LOAD_normalInterruptFlag1_3629_Merge/merge_req) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Update/LOAD_normalInterruptFlag1_3629_Merge/merge_ack)
  LOAD_normalInterruptFlag1_3629_load_0 <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Sample/word_access_start/word_0/rr branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Sample/word_access_start/word_0/ra branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/LOAD_normalInterruptFlag1_3629_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3631_inst <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/OR_u8_u8_3631_Sample/rr branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/OR_u8_u8_3631_Update/cr) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/OR_u8_u8_3631_Sample/ra branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/OR_u8_u8_3631_Update/ca)
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3628_gather_scatter <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Sample/STORE_normalInterruptFlag1_3628_Split/split_req) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Sample/STORE_normalInterruptFlag1_3628_Split/split_ack)
  STORE_normalInterruptFlag1_3628_store_0 <=> (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Sample/word_access_start/word_0/rr branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Sample/word_access_start/word_0/ra branch_block_stmt_3414/call_stmt_3617_to_assign_stmt_3632/STORE_normalInterruptFlag1_3628_Update/word_access_complete/word_0/ca)
  // 			$volatile bufferDataPortCheck := (address == 32 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1263
  // (address == 32 )
  // address
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (bufferDataPortCheck == 1 )
  // txBufferPointer
  LOAD_txBufferPointer_3643_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/merge_req) (branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/merge_ack)
  LOAD_txBufferPointer_3643_load_0 <=> (branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3639_eval_test/AND_u1_u1_3646/AND_u1_u1_3646_inputs/ULT_u10_u1_3645/ULT_u10_u1_3645_inputs/LOAD_txBufferPointer_3643/LOAD_txBufferPointer_3643_read/word_access/word_access_0_update/ca)
  // (txBufferPointer < 512 )
  // ((bufferDataPortCheck == 1 ) & (txBufferPointer < 512 ))
  if_stmt_3639_branch <=> (branch_block_stmt_3414/if_stmt_3639_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3639_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3639_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1265
  next_B_3666_3650_buf <=> (branch_block_stmt_3414/loopBuffer_PhiReq/phi_stmt_3648/phi_stmt_3648_sources/Interlock/Sample/req branch_block_stmt_3414/loopBuffer_PhiReq/phi_stmt_3648/phi_stmt_3648_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBuffer_PhiReq/phi_stmt_3648/phi_stmt_3648_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBuffer_PhiReq/phi_stmt_3648/phi_stmt_3648_sources/Interlock/Update/ack)
  phi_stmt_3648 <=> (branch_block_stmt_3414/loopBuffer_PhiReq/phi_stmt_3648/phi_stmt_3648_req branch_block_stmt_3414/merge_stmt_3647__entry___PhiReq/phi_stmt_3648/phi_stmt_3648_req) (branch_block_stmt_3414/merge_stmt_3647_PhiAck/phi_stmt_3648_ack)
  // 			$call readSDHCRegisters ((32  + B) ) (tempBuf ) 
  //  file .Aa/sdhc.opt.aa, line 1269
  // (32  + B)
  // B
  call_stmt_3658_call <=> (branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/call_stmt_3658_Sample/crr branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/call_stmt_3658_Update/ccr) (branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/call_stmt_3658_Sample/cra branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/call_stmt_3658_Update/cca)
  // 			dataBufferTx := tempBuf $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1270
  // tempBuf
  // dataBufferTx
  WPIPE_dataBufferTx_3659_inst <=> (branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/WPIPE_dataBufferTx_3659_Sample/req branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/WPIPE_dataBufferTx_3659_Update/req) (branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/WPIPE_dataBufferTx_3659_Sample/ack branch_block_stmt_3414/call_stmt_3658_to_assign_stmt_3666/WPIPE_dataBufferTx_3659_Update/ack)
  // 			$volatile next_B := (B + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1271
  // (B + 1 )
  // B
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_B < 4 )
  if_stmt_3667_branch <=> (branch_block_stmt_3414/if_stmt_3667_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3667_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3667_if_link/if_choice_transition)
  // 			txBufferPointer := (txBufferPointer + 4 ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 1275
  // (txBufferPointer + 4 )
  // txBufferPointer
  LOAD_txBufferPointer_3674_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Update/LOAD_txBufferPointer_3674_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Update/LOAD_txBufferPointer_3674_Merge/merge_ack)
  LOAD_txBufferPointer_3674_load_0 <=> (branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3677/LOAD_txBufferPointer_3674_Update/word_access_complete/word_0/ca)
  ADD_u10_u10_3676_inst <=> (branch_block_stmt_3414/assign_stmt_3677/ADD_u10_u10_3676_Sample/rr branch_block_stmt_3414/assign_stmt_3677/ADD_u10_u10_3676_Update/cr) (branch_block_stmt_3414/assign_stmt_3677/ADD_u10_u10_3676_Sample/ra branch_block_stmt_3414/assign_stmt_3677/ADD_u10_u10_3676_Update/ca)
  // txBufferPointer
  STORE_txBufferPointer_3673_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Sample/STORE_txBufferPointer_3673_Split/split_req) (branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Sample/STORE_txBufferPointer_3673_Split/split_ack)
  STORE_txBufferPointer_3673_store_0 <=> (branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3677/STORE_txBufferPointer_3673_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // txBufferPointer
  LOAD_txBufferPointer_3679_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/merge_req) (branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/merge_ack)
  LOAD_txBufferPointer_3679_load_0 <=> (branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3678_eval_test/EQ_u10_u1_3681/EQ_u10_u1_3681_inputs/LOAD_txBufferPointer_3679/LOAD_txBufferPointer_3679_read/word_access/word_access_0_update/ca)
  // (txBufferPointer == 512 )
  if_stmt_3678_branch <=> (branch_block_stmt_3414/if_stmt_3678_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3678_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3678_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (37  ) (tempPresentState_1_3 ) 
  //  file .Aa/sdhc.opt.aa, line 1277
  call_stmt_3684_call <=> (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3684_Sample/crr branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3684_Update/ccr) (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3684_Sample/cra branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3684_Update/cca)
  // 			$call writeSDHCRegisters (37  (tempPresentState_1_3 | _hfb ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1278
  // (tempPresentState_1_3 | _hfb )
  // tempPresentState_1_3
  call_stmt_3689_call <=> (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3689_Sample/crr branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3689_Update/ccr) (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3689_Sample/cra branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3689_Update/cca)
  // 			$call readSDHCRegisters (12  ) (transferRegVal ) 
  //  file .Aa/sdhc.opt.aa, line 1279
  call_stmt_3692_call <=> (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3692_Sample/crr branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3692_Update/ccr) (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3692_Sample/cra branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/call_stmt_3692_Update/cca)
  // 			singleMultipleBlock := (  $bitreduce |  (transferRegVal & _h20 ) ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1280
  // (transferRegVal & _h20 )
  // transferRegVal
  // (  $bitreduce |  (transferRegVal & _h20 ) )
  BITREDUCEOR_u8_u1_3697_inst <=> (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/BITREDUCEOR_u8_u1_3697_Sample/rr branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/BITREDUCEOR_u8_u1_3697_Update/cr) (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/BITREDUCEOR_u8_u1_3697_Sample/ra branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/BITREDUCEOR_u8_u1_3697_Update/ca)
  // 			blockCountEnable := ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1281
  // ((  $bitreduce |  (transferRegVal & _h02 ) ) & singleMultipleBlock)
  // (transferRegVal & _h02 )
  // transferRegVal
  // singleMultipleBlock
  AND_u1_u1_3705_inst <=> (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/AND_u1_u1_3705_Sample/rr branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/AND_u1_u1_3705_Update/cr) (branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/AND_u1_u1_3705_Sample/ra branch_block_stmt_3414/call_stmt_3684_to_assign_stmt_3706/AND_u1_u1_3705_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1282
  next_C_3733_3711_buf <=> (branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3708/phi_stmt_3708_sources/Interlock/Sample/req branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3708/phi_stmt_3708_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3708/phi_stmt_3708_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3708/phi_stmt_3708_sources/Interlock/Update/ack)
  phi_stmt_3708 <=> (branch_block_stmt_3414/merge_stmt_3707__entry___PhiReq/phi_stmt_3708/phi_stmt_3708_req branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3708/phi_stmt_3708_req) (branch_block_stmt_3414/merge_stmt_3707_PhiAck/phi_stmt_3708_ack)
  blockCount_3728_3716_buf <=> (branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3712/phi_stmt_3712_sources/Interlock/Sample/req branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3712/phi_stmt_3712_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3712/phi_stmt_3712_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3712/phi_stmt_3712_sources/Interlock/Update/ack)
  phi_stmt_3712 <=> (branch_block_stmt_3414/merge_stmt_3707__entry___PhiReq/phi_stmt_3712/phi_stmt_3712_req branch_block_stmt_3414/loopBlock_PhiReq/phi_stmt_3712/phi_stmt_3712_req) (branch_block_stmt_3414/merge_stmt_3707_PhiAck/phi_stmt_3712_ack)
  // 			$call readSDHCRegisters ((6  + C) ) (newBlockCountTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1288
  // (6  + C)
  // C
  call_stmt_3722_call <=> (branch_block_stmt_3414/call_stmt_3722_to_assign_stmt_3733/call_stmt_3722_Sample/crr branch_block_stmt_3414/call_stmt_3722_to_assign_stmt_3733/call_stmt_3722_Update/ccr) (branch_block_stmt_3414/call_stmt_3722_to_assign_stmt_3733/call_stmt_3722_Sample/cra branch_block_stmt_3414/call_stmt_3722_to_assign_stmt_3733/call_stmt_3722_Update/cca)
  // 			$volatile blockCount := (( $slice newBlockCount 7 0 )  && newBlockCountTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1289
  // (( $slice newBlockCount 7 0 )  && newBlockCountTemp)
  // newBlockCount
  // newBlockCountTemp
  // 			$volatile next_C := (C - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1290
  // (C - 1 )
  // C
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (C != 0 )
  if_stmt_3734_branch <=> (branch_block_stmt_3414/if_stmt_3734_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3734_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3734_if_link/if_choice_transition)
  // 			$volatile blockCountTrue := (blockCount == 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1294
  // (blockCount == 1 )
  // blockCount
  // 			$volatile lastBlock := (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue)) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1295
  // (( ~ singleMultipleBlock ) | (blockCountEnable & blockCountTrue))
  // singleMultipleBlock
  // (blockCountEnable & blockCountTrue)
  // blockCountEnable
  // blockCountTrue
  // 			$call dataTx (lastBlock blockCountEnable blockCount ) (blockCountNext transferComplete ) 
  //  file .Aa/sdhc.opt.aa, line 1296
  // lastBlock
  // blockCountEnable
  // blockCount
  call_stmt_3758_call <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3758_Sample/crr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3758_Update/ccr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3758_Sample/cra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3758_Update/cca)
  // 			$call writeSDHCRegisters (7  ( $slice blockCountNext 15 8 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 1297
  // blockCountNext
  call_stmt_3762_call <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3762_Sample/crr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3762_Update/ccr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3762_Sample/cra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3762_Update/cca)
  // 			$call writeSDHCRegisters (6  ( $slice blockCountNext 7 0 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 1298
  // blockCountNext
  call_stmt_3766_call <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3766_Sample/crr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3766_Update/ccr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3766_Sample/cra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/call_stmt_3766_Update/cca)
  // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1299
  // (normalInterruptFlag1 | _h02 )
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_3768_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Update/LOAD_normalInterruptFlag1_3768_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Update/LOAD_normalInterruptFlag1_3768_Merge/merge_ack)
  LOAD_normalInterruptFlag1_3768_load_0 <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_normalInterruptFlag1_3768_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3770_inst <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3770_Sample/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3770_Update/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3770_Sample/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3770_Update/ca)
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3767_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Sample/STORE_normalInterruptFlag1_3767_Split/split_req) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Sample/STORE_normalInterruptFlag1_3767_Split/split_ack)
  STORE_normalInterruptFlag1_3767_store_0 <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_normalInterruptFlag1_3767_Update/word_access_complete/word_0/ca)
  // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1300
  // (errorInterruptFlag1 | _h60 )
  // errorInterruptFlag1
  LOAD_errorInterruptFlag1_3773_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Update/LOAD_errorInterruptFlag1_3773_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Update/LOAD_errorInterruptFlag1_3773_Merge/merge_ack)
  LOAD_errorInterruptFlag1_3773_load_0 <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/LOAD_errorInterruptFlag1_3773_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3775_inst <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3775_Sample/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3775_Update/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3775_Sample/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/OR_u8_u8_3775_Update/ca)
  // errorInterruptFlag1
  STORE_errorInterruptFlag1_3772_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Sample/STORE_errorInterruptFlag1_3772_Split/split_req) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Sample/STORE_errorInterruptFlag1_3772_Split/split_ack)
  STORE_errorInterruptFlag1_3772_store_0 <=> (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3744_to_assign_stmt_3776/STORE_errorInterruptFlag1_3772_Update/word_access_complete/word_0/ca)
  // 			$volatile readBufferDataPortCheck := (address == 32 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1304
  // (address == 32 )
  // address
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (readBufferDataPortCheck == 1 )
  // rxBufferPointer
  LOAD_rxBufferPointer_3789_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/merge_req) (branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/merge_ack)
  LOAD_rxBufferPointer_3789_load_0 <=> (branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3785_eval_test/AND_u1_u1_3792/AND_u1_u1_3792_inputs/NEQ_u10_u1_3791/NEQ_u10_u1_3791_inputs/LOAD_rxBufferPointer_3789/LOAD_rxBufferPointer_3789_read/word_access/word_access_0_update/ca)
  // (rxBufferPointer != 0 )
  // ((readBufferDataPortCheck == 1 ) & (rxBufferPointer != 0 ))
  if_stmt_3785_branch <=> (branch_block_stmt_3414/if_stmt_3785_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3785_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3785_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1306
  next_D_3812_3798_buf <=> (branch_block_stmt_3414/loopBufferWrite_PhiReq/phi_stmt_3794/phi_stmt_3794_sources/Interlock/Sample/req branch_block_stmt_3414/loopBufferWrite_PhiReq/phi_stmt_3794/phi_stmt_3794_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBufferWrite_PhiReq/phi_stmt_3794/phi_stmt_3794_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBufferWrite_PhiReq/phi_stmt_3794/phi_stmt_3794_sources/Interlock/Update/ack)
  phi_stmt_3794 <=> (branch_block_stmt_3414/merge_stmt_3793__entry___PhiReq/phi_stmt_3794/phi_stmt_3794_req branch_block_stmt_3414/loopBufferWrite_PhiReq/phi_stmt_3794/phi_stmt_3794_req) (branch_block_stmt_3414/merge_stmt_3793_PhiAck/phi_stmt_3794_ack)
  // 			tempBuf2 := dataBufferRx $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1310
  // dataBufferRx
  RPIPE_dataBufferRx_3801_inst <=> (branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/RPIPE_dataBufferRx_3801_Sample/rr branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/RPIPE_dataBufferRx_3801_Update/cr) (branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/RPIPE_dataBufferRx_3801_Sample/ra branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/RPIPE_dataBufferRx_3801_Update/ca)
  // 			$call writeSDHCRegisters ((32  + D) tempBuf2 ) () 
  //  file .Aa/sdhc.opt.aa, line 1311
  // (32  + D)
  // D
  // tempBuf2
  call_stmt_3807_call <=> (branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/call_stmt_3807_Sample/crr branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/call_stmt_3807_Update/ccr) (branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/call_stmt_3807_Sample/cra branch_block_stmt_3414/assign_stmt_3802_to_assign_stmt_3812/call_stmt_3807_Update/cca)
  // 			$volatile next_D := (D + 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1312
  // (D + 1 )
  // D
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (next_D < 4 )
  if_stmt_3813_branch <=> (branch_block_stmt_3414/if_stmt_3813_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3813_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3813_if_link/if_choice_transition)
  // 			rxBufferPointer := (rxBufferPointer - 4 ) $buffering 1// bits of buffering = 10. 
  //  file .Aa/sdhc.opt.aa, line 1316
  // (rxBufferPointer - 4 )
  // rxBufferPointer
  LOAD_rxBufferPointer_3820_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Update/LOAD_rxBufferPointer_3820_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Update/LOAD_rxBufferPointer_3820_Merge/merge_ack)
  LOAD_rxBufferPointer_3820_load_0 <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/LOAD_rxBufferPointer_3820_Update/word_access_complete/word_0/ca)
  SUB_u10_u10_3822_inst <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/SUB_u10_u10_3822_Sample/rr branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/SUB_u10_u10_3822_Update/cr) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/SUB_u10_u10_3822_Sample/ra branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/SUB_u10_u10_3822_Update/ca)
  // rxBufferPointer
  STORE_rxBufferPointer_3819_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Sample/STORE_rxBufferPointer_3819_Split/split_req) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Sample/STORE_rxBufferPointer_3819_Split/split_ack)
  STORE_rxBufferPointer_3819_store_0 <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/STORE_rxBufferPointer_3819_Update/word_access_complete/word_0/ca)
  // 			$call readSDHCRegisters (12  ) (transferRegVal2 ) 
  //  file .Aa/sdhc.opt.aa, line 1317
  call_stmt_3826_call <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/call_stmt_3826_Sample/crr branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/call_stmt_3826_Update/ccr) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/call_stmt_3826_Sample/cra branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/call_stmt_3826_Update/cca)
  // 			singleMultipleReadBlock := (  $bitreduce |  (transferRegVal2 & _h20 ) ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1318
  // (transferRegVal2 & _h20 )
  // transferRegVal2
  // (  $bitreduce |  (transferRegVal2 & _h20 ) )
  BITREDUCEOR_u8_u1_3831_inst <=> (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/BITREDUCEOR_u8_u1_3831_Sample/rr branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/BITREDUCEOR_u8_u1_3831_Update/cr) (branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/BITREDUCEOR_u8_u1_3831_Sample/ra branch_block_stmt_3414/assign_stmt_3823_to_assign_stmt_3832/BITREDUCEOR_u8_u1_3831_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // rxBufferPointer
  LOAD_rxBufferPointer_3834_gather_scatter <=> (branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/merge_req) (branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/merge_ack)
  LOAD_rxBufferPointer_3834_load_0 <=> (branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/word_access/word_access_0_sample/rr branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/word_access/word_access_0_update/cr) (branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/word_access/word_access_0_sample/ra branch_block_stmt_3414/if_stmt_3833_eval_test/EQ_u10_u1_3836/EQ_u10_u1_3836_inputs/LOAD_rxBufferPointer_3834/LOAD_rxBufferPointer_3834_read/word_access/word_access_0_update/ca)
  // (rxBufferPointer == 0 )
  if_stmt_3833_branch <=> (branch_block_stmt_3414/if_stmt_3833_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3833_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3833_if_link/if_choice_transition)
  // 			$call readSDHCRegisters (37  ) (tempPresentState_1_4 ) 
  //  file .Aa/sdhc.opt.aa, line 1320
  call_stmt_3839_call <=> (branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3839_Sample/crr branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3839_Update/ccr) (branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3839_Sample/cra branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3839_Update/cca)
  // 			$call writeSDHCRegisters (37  (tempPresentState_1_4 & _hf7 ) ) () 
  //  file .Aa/sdhc.opt.aa, line 1321
  // (tempPresentState_1_4 & _hf7 )
  // tempPresentState_1_4
  call_stmt_3844_call <=> (branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3844_Sample/crr branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3844_Update/ccr) (branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3844_Sample/cra branch_block_stmt_3414/call_stmt_3839_to_call_stmt_3844/call_stmt_3844_Update/cca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (singleMultipleReadBlock == 1 )
  if_stmt_3845_branch <=> (branch_block_stmt_3414/if_stmt_3845_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3845_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3845_if_link/if_choice_transition)
  // 			readBlockCountEnable := ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1323
  // ((  $bitreduce |  (transferRegVal2 & _h02 ) ) & singleMultipleBlock)
  // (transferRegVal2 & _h02 )
  // transferRegVal2
  // singleMultipleBlock
  AND_u1_u1_3855_inst <=> (branch_block_stmt_3414/assign_stmt_3856/AND_u1_u1_3855_Sample/rr branch_block_stmt_3414/assign_stmt_3856/AND_u1_u1_3855_Update/cr) (branch_block_stmt_3414/assign_stmt_3856/AND_u1_u1_3855_Sample/ra branch_block_stmt_3414/assign_stmt_3856/AND_u1_u1_3855_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1324
  next_E_3883_3861_buf <=> (branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3858/phi_stmt_3858_sources/Interlock/Sample/req branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3858/phi_stmt_3858_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3858/phi_stmt_3858_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3858/phi_stmt_3858_sources/Interlock/Update/ack)
  phi_stmt_3858 <=> (branch_block_stmt_3414/merge_stmt_3857__entry___PhiReq/phi_stmt_3858/phi_stmt_3858_req branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3858/phi_stmt_3858_req) (branch_block_stmt_3414/merge_stmt_3857_PhiAck/phi_stmt_3858_ack)
  readBlockCount_3878_3866_buf <=> (branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3862/phi_stmt_3862_sources/Interlock/Sample/req branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3862/phi_stmt_3862_sources/Interlock/Update/req) (branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3862/phi_stmt_3862_sources/Interlock/Sample/ack branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3862/phi_stmt_3862_sources/Interlock/Update/ack)
  phi_stmt_3862 <=> (branch_block_stmt_3414/merge_stmt_3857__entry___PhiReq/phi_stmt_3862/phi_stmt_3862_req branch_block_stmt_3414/loopBlock2_PhiReq/phi_stmt_3862/phi_stmt_3862_req) (branch_block_stmt_3414/merge_stmt_3857_PhiAck/phi_stmt_3862_ack)
  // 			$call readSDHCRegisters ((6  + E) ) (readnewBlockCountTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1330
  // (6  + E)
  // E
  call_stmt_3872_call <=> (branch_block_stmt_3414/call_stmt_3872_to_assign_stmt_3883/call_stmt_3872_Sample/crr branch_block_stmt_3414/call_stmt_3872_to_assign_stmt_3883/call_stmt_3872_Update/ccr) (branch_block_stmt_3414/call_stmt_3872_to_assign_stmt_3883/call_stmt_3872_Sample/cra branch_block_stmt_3414/call_stmt_3872_to_assign_stmt_3883/call_stmt_3872_Update/cca)
  // 			$volatile readBlockCount := (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1331
  // (( $slice readNewBlockCount 7 0 )  && readnewBlockCountTemp)
  // readNewBlockCount
  // readnewBlockCountTemp
  // 			$volatile next_E := (E - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1332
  // (E - 1 )
  // E
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (E != 0 )
  if_stmt_3884_branch <=> (branch_block_stmt_3414/if_stmt_3884_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3884_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3884_if_link/if_choice_transition)
  // 			readBlockCountTrue := (readBlockCount == 1 ) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1336
  // (readBlockCount == 1 )
  // readBlockCount
  EQ_u16_u1_3893_inst <=> (branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/EQ_u16_u1_3893_Sample/rr branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/EQ_u16_u1_3893_Update/cr) (branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/EQ_u16_u1_3893_Sample/ra branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/EQ_u16_u1_3893_Update/ca)
  // 			readLastBlock := (readBlockCountEnable & readBlockCountTrue) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1337
  // (readBlockCountEnable & readBlockCountTrue)
  // readBlockCountEnable
  // readBlockCountTrue
  AND_u1_u1_3898_inst <=> (branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/AND_u1_u1_3898_Sample/rr branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/AND_u1_u1_3898_Update/cr) (branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/AND_u1_u1_3898_Sample/ra branch_block_stmt_3414/assign_stmt_3894_to_assign_stmt_3899/AND_u1_u1_3898_Update/ca)
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (readBlockCount != 0 )
  if_stmt_3900_branch <=> (branch_block_stmt_3414/if_stmt_3900_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_3900_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_3900_if_link/if_choice_transition)
  // 			newReadBlockCount := (readBlockCount - 1 ) $buffering 1// bits of buffering = 16. 
  //  file .Aa/sdhc.opt.aa, line 1339
  // (readBlockCount - 1 )
  // readBlockCount
  SUB_u16_u16_3907_inst <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/SUB_u16_u16_3907_Sample/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/SUB_u16_u16_3907_Update/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/SUB_u16_u16_3907_Sample/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/SUB_u16_u16_3907_Update/ca)
  // 			$call dataRx (readLastBlock ) (dataErrorInterruptStatusVar ) 
  //  file .Aa/sdhc.opt.aa, line 1340
  // readLastBlock
  call_stmt_3911_call <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3911_Sample/crr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3911_Update/ccr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3911_Sample/cra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3911_Update/cca)
  // 			dataRxEnrty1 := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1341
  // dataRxEnrty1
  STORE_dataRxEnrty1_3912_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Sample/STORE_dataRxEnrty1_3912_Split/split_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Sample/STORE_dataRxEnrty1_3912_Split/split_ack)
  STORE_dataRxEnrty1_3912_store_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty1_3912_Update/word_access_complete/word_0/ca)
  // 			dataRxEnrty2 := ONE_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1342
  // dataRxEnrty2
  STORE_dataRxEnrty2_3915_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Sample/STORE_dataRxEnrty2_3915_Split/split_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Sample/STORE_dataRxEnrty2_3915_Split/split_ack)
  STORE_dataRxEnrty2_3915_store_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_dataRxEnrty2_3915_Update/word_access_complete/word_0/ca)
  // 			$call writeSDHCRegisters (7  ( $slice newReadBlockCount 15 8 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 1343
  // newReadBlockCount
  call_stmt_3921_call <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3921_Sample/crr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3921_Update/ccr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3921_Sample/cra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3921_Update/cca)
  // 			$call writeSDHCRegisters (6  ( $slice newReadBlockCount 7 0 )  ) () 
  //  file .Aa/sdhc.opt.aa, line 1344
  // newReadBlockCount
  call_stmt_3925_call <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3925_Sample/crr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3925_Update/ccr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3925_Sample/cra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/call_stmt_3925_Update/cca)
  // 			readDataTransferComplete := ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1345
  // readLastBlock
  // ( $mux readLastBlock ($bitcast ($uint<8>) 2  )  ZERO_8 ) 
  MUX_3931_inst <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/MUX_3931_start/req branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/MUX_3931_complete/req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/MUX_3931_start/ack branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/MUX_3931_complete/ack)
  // 			normalInterruptFlag1 := (normalInterruptFlag1 | _h02 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1346
  // (normalInterruptFlag1 | _h02 )
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_3934_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Update/LOAD_normalInterruptFlag1_3934_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Update/LOAD_normalInterruptFlag1_3934_Merge/merge_ack)
  LOAD_normalInterruptFlag1_3934_load_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_normalInterruptFlag1_3934_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3936_inst <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3936_Sample/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3936_Update/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3936_Sample/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3936_Update/ca)
  // normalInterruptFlag1
  STORE_normalInterruptFlag1_3933_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Sample/STORE_normalInterruptFlag1_3933_Split/split_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Sample/STORE_normalInterruptFlag1_3933_Split/split_ack)
  STORE_normalInterruptFlag1_3933_store_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_normalInterruptFlag1_3933_Update/word_access_complete/word_0/ca)
  // 			errorInterruptFlag1 := (errorInterruptFlag1 | _h60 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1347
  // (errorInterruptFlag1 | _h60 )
  // errorInterruptFlag1
  LOAD_errorInterruptFlag1_3939_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Update/LOAD_errorInterruptFlag1_3939_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Update/LOAD_errorInterruptFlag1_3939_Merge/merge_ack)
  LOAD_errorInterruptFlag1_3939_load_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/LOAD_errorInterruptFlag1_3939_Update/word_access_complete/word_0/ca)
  OR_u8_u8_3941_inst <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3941_Sample/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3941_Update/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3941_Sample/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/OR_u8_u8_3941_Update/ca)
  // errorInterruptFlag1
  STORE_errorInterruptFlag1_3938_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Sample/STORE_errorInterruptFlag1_3938_Split/split_req) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Sample/STORE_errorInterruptFlag1_3938_Split/split_ack)
  STORE_errorInterruptFlag1_3938_store_0 <=> (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_3908_to_assign_stmt_3942/STORE_errorInterruptFlag1_3938_Update/word_access_complete/word_0/ca)
  // 			$call readSDHCRegisters ((address + 0 ) ) (readTemp3 ) 
  //  file .Aa/sdhc.opt.aa, line 1352
  // (address + 0 )
  // address
  call_stmt_3951_call <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3951_Sample/crr branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3951_Update/ccr) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3951_Sample/cra branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3951_Update/cca)
  // 			$call readSDHCRegisters ((address + 1 ) ) (readTemp2 ) 
  //  file .Aa/sdhc.opt.aa, line 1353
  // (address + 1 )
  // address
  call_stmt_3956_call <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3956_Sample/crr branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3956_Update/ccr) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3956_Sample/cra branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3956_Update/cca)
  // 			$call readSDHCRegisters ((address + 2 ) ) (readTemp1 ) 
  //  file .Aa/sdhc.opt.aa, line 1354
  // (address + 2 )
  // address
  call_stmt_3961_call <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3961_Sample/crr branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3961_Update/ccr) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3961_Sample/cra branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3961_Update/cca)
  // 			$call readSDHCRegisters ((address + 3 ) ) (readTemp0 ) 
  //  file .Aa/sdhc.opt.aa, line 1355
  // (address + 3 )
  // address
  call_stmt_3966_call <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3966_Sample/crr branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3966_Update/ccr) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3966_Sample/cra branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/call_stmt_3966_Update/cca)
  // 			readdata3 := ( $mux b3 readTemp3  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1356
  // b3
  // readTemp3
  // ( $mux b3 readTemp3  ZERO_8 ) 
  MUX_3971_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3971_start/req branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3971_complete/req) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3971_start/ack branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3971_complete/ack)
  // 			readdata2 := ( $mux b2 readTemp2  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1357
  // b2
  // readTemp2
  // ( $mux b2 readTemp2  ZERO_8 ) 
  MUX_3977_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3977_start/req branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3977_complete/req) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3977_start/ack branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3977_complete/ack)
  // 			readdata1 := ( $mux b1 readTemp1  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1358
  // b1
  // readTemp1
  // ( $mux b1 readTemp1  ZERO_8 ) 
  MUX_3983_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3983_start/req branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3983_complete/req) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3983_start/ack branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3983_complete/ack)
  // 			readdata0 := ( $mux b0 readTemp0  ZERO_8 )  $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1359
  // b0
  // readTemp0
  // ( $mux b0 readTemp0  ZERO_8 ) 
  MUX_3989_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3989_start/req branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3989_complete/req) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3989_start/ack branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/MUX_3989_complete/ack)
  // 			sdhc_to_peripheral_bridge_response := ((readdata3 && readdata2) && (readdata1 && readdata0)) $buffering 1// bits of buffering = 32. 
  //  file .Aa/sdhc.opt.aa, line 1360
  // ((readdata3 && readdata2) && (readdata1 && readdata0))
  // (readdata3 && readdata2)
  // readdata3
  // readdata2
  // (readdata1 && readdata0)
  // readdata1
  // readdata0
  CONCAT_u16_u32_3998_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/CONCAT_u16_u32_3998_Sample/rr branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/CONCAT_u16_u32_3998_Update/cr) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/CONCAT_u16_u32_3998_Sample/ra branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/CONCAT_u16_u32_3998_Update/ca)
  // sdhc_to_peripheral_bridge_response
  WPIPE_sdhc_to_peripheral_bridge_response_3991_inst <=> (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/WPIPE_sdhc_to_peripheral_bridge_response_3991_Sample/req branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/WPIPE_sdhc_to_peripheral_bridge_response_3991_Update/req) (branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/WPIPE_sdhc_to_peripheral_bridge_response_3991_Sample/ack branch_block_stmt_3414/call_stmt_3951_to_assign_stmt_3999/WPIPE_sdhc_to_peripheral_bridge_response_3991_Update/ack)
  // 		dataErrorInterruptStatus := ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1362
  // ((( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) ) | ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) )
  // (( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  )  | ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) )
  // dataRxEnrty1
  LOAD_dataRxEnrty1_4002_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Update/LOAD_dataRxEnrty1_4002_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Update/LOAD_dataRxEnrty1_4002_Merge/merge_ack)
  LOAD_dataRxEnrty1_4002_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4002_Update/word_access_complete/word_0/ca)
  // dataErrorInterruptStatusVar1
  // ( $mux dataRxEnrty1 dataErrorInterruptStatusVar1  _b0  ) 
  // dataRxEnrty2
  LOAD_dataRxEnrty2_4006_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Update/LOAD_dataRxEnrty2_4006_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Update/LOAD_dataRxEnrty2_4006_Merge/merge_ack)
  LOAD_dataRxEnrty2_4006_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4006_Update/word_access_complete/word_0/ca)
  // dataErrorInterruptStatusVar
  // ( $mux dataRxEnrty2 dataErrorInterruptStatusVar  _b0  ) 
  // (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 ))
  // dataRxEnrty1
  LOAD_dataRxEnrty1_4011_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Update/LOAD_dataRxEnrty1_4011_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Update/LOAD_dataRxEnrty1_4011_Merge/merge_ack)
  LOAD_dataRxEnrty1_4011_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty1_4011_Update/word_access_complete/word_0/ca)
  // dataRxEnrty2
  LOAD_dataRxEnrty2_4013_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Update/LOAD_dataRxEnrty2_4013_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Update/LOAD_dataRxEnrty2_4013_Merge/merge_ack)
  LOAD_dataRxEnrty2_4013_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataRxEnrty2_4013_Update/word_access_complete/word_0/ca)
  // ( $mux (( ~ dataRxEnrty1 ) & ( ~ dataRxEnrty2 )) ZERO_8  _b0  ) 
  OR_u8_u8_4019_inst <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/OR_u8_u8_4019_Sample/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/OR_u8_u8_4019_Update/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/OR_u8_u8_4019_Sample/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/OR_u8_u8_4019_Update/ca)
  // dataErrorInterruptStatus
  STORE_dataErrorInterruptStatus_4001_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Sample/STORE_dataErrorInterruptStatus_4001_Split/split_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Sample/STORE_dataErrorInterruptStatus_4001_Split/split_ack)
  STORE_dataErrorInterruptStatus_4001_store_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/STORE_dataErrorInterruptStatus_4001_Update/word_access_complete/word_0/ca)
  // 		sdhcRegisters[50 ] := (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ]) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1363
  // (((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & sdhcRegisters[54 ])
  // ((sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
  // (sdhcRegisters[50 ] | (dataErrorInterruptStatus | errorInterruptStatusVar1))
  // sdhcRegisters[50 ]
  array_obj_ref_4024_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Update/array_obj_ref_4024_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Update/array_obj_ref_4024_Merge/merge_ack)
  array_obj_ref_4024_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4024_Update/word_access_complete/word_0/ca)
  // (dataErrorInterruptStatus | errorInterruptStatusVar1)
  // dataErrorInterruptStatus
  LOAD_dataErrorInterruptStatus_4025_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Update/LOAD_dataErrorInterruptStatus_4025_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Update/LOAD_dataErrorInterruptStatus_4025_Merge/merge_ack)
  LOAD_dataErrorInterruptStatus_4025_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_dataErrorInterruptStatus_4025_Update/word_access_complete/word_0/ca)
  // errorInterruptStatusVar1
  // errorInterruptFlag1
  LOAD_errorInterruptFlag1_4029_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Update/LOAD_errorInterruptFlag1_4029_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Update/LOAD_errorInterruptFlag1_4029_Merge/merge_ack)
  LOAD_errorInterruptFlag1_4029_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/LOAD_errorInterruptFlag1_4029_Update/word_access_complete/word_0/ca)
  // sdhcRegisters[54 ]
  array_obj_ref_4032_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Update/array_obj_ref_4032_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Update/array_obj_ref_4032_Merge/merge_ack)
  array_obj_ref_4032_load_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4032_Update/word_access_complete/word_0/ca)
  AND_u8_u8_4033_inst <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/AND_u8_u8_4033_Sample/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/AND_u8_u8_4033_Update/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/AND_u8_u8_4033_Sample/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/AND_u8_u8_4033_Update/ca)
  array_obj_ref_4022_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Sample/array_obj_ref_4022_Split/split_req) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Sample/array_obj_ref_4022_Split/split_ack)
  array_obj_ref_4022_store_0 <=> (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4020_to_assign_stmt_4034/array_obj_ref_4022_Update/word_access_complete/word_0/ca)
  // CP-DP links for merge  
  //  file .Aa/sdhc.opt.aa, line 1364
  next_S_4114_4039_buf <=> (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4036/phi_stmt_4036_sources/Interlock/Sample/req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4036/phi_stmt_4036_sources/Interlock/Update/req) (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4036/phi_stmt_4036_sources/Interlock/Sample/ack branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4036/phi_stmt_4036_sources/Interlock/Update/ack)
  phi_stmt_4036 <=> (branch_block_stmt_3414/merge_stmt_4035__entry___PhiReq/phi_stmt_4036/phi_stmt_4036_req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4036/phi_stmt_4036_req) (branch_block_stmt_3414/merge_stmt_4035_PhiAck/phi_stmt_4036_ack)
  errorInterruptReg_4071_4044_buf <=> (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4040/phi_stmt_4040_sources/Interlock/Sample/req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4040/phi_stmt_4040_sources/Interlock/Update/req) (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4040/phi_stmt_4040_sources/Interlock/Sample/ack branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4040/phi_stmt_4040_sources/Interlock/Update/ack)
  phi_stmt_4040 <=> (branch_block_stmt_3414/merge_stmt_4035__entry___PhiReq/phi_stmt_4040/phi_stmt_4040_req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4040/phi_stmt_4040_req) (branch_block_stmt_3414/merge_stmt_4035_PhiAck/phi_stmt_4040_ack)
  errorInterruptEnableReg_4082_4049_buf <=> (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4045/phi_stmt_4045_sources/Interlock/Sample/req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4045/phi_stmt_4045_sources/Interlock/Update/req) (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4045/phi_stmt_4045_sources/Interlock/Sample/ack branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4045/phi_stmt_4045_sources/Interlock/Update/ack)
  phi_stmt_4045 <=> (branch_block_stmt_3414/merge_stmt_4035__entry___PhiReq/phi_stmt_4045/phi_stmt_4045_req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4045/phi_stmt_4045_req) (branch_block_stmt_3414/merge_stmt_4035_PhiAck/phi_stmt_4045_ack)
  errorInterruptSignalEnableReg_4093_4054_buf <=> (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4050/phi_stmt_4050_sources/Interlock/Sample/req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4050/phi_stmt_4050_sources/Interlock/Update/req) (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4050/phi_stmt_4050_sources/Interlock/Sample/ack branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4050/phi_stmt_4050_sources/Interlock/Update/ack)
  phi_stmt_4050 <=> (branch_block_stmt_3414/merge_stmt_4035__entry___PhiReq/phi_stmt_4050/phi_stmt_4050_req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4050/phi_stmt_4050_req) (branch_block_stmt_3414/merge_stmt_4035_PhiAck/phi_stmt_4050_ack)
  normalInterruptEnableReg_4104_4059_buf <=> (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4055/phi_stmt_4055_sources/Interlock/Sample/req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4055/phi_stmt_4055_sources/Interlock/Update/req) (branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4055/phi_stmt_4055_sources/Interlock/Sample/ack branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4055/phi_stmt_4055_sources/Interlock/Update/ack)
  phi_stmt_4055 <=> (branch_block_stmt_3414/merge_stmt_4035__entry___PhiReq/phi_stmt_4055/phi_stmt_4055_req branch_block_stmt_3414/loopError_PhiReq/phi_stmt_4055/phi_stmt_4055_req) (branch_block_stmt_3414/merge_stmt_4035_PhiAck/phi_stmt_4055_ack)
  // 		$call readSDHCRegisters ((50  + S) ) (errorInterruptRegTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1376
  // (50  + S)
  // S
  call_stmt_4065_call <=> (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4065_Sample/crr branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4065_Update/ccr) (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4065_Sample/cra branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4065_Update/cca)
  // 		$volatile errorInterruptReg := (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1377
  // (( $slice readErrorInterruptReg 7 0 )  && errorInterruptRegTemp)
  // readErrorInterruptReg
  // errorInterruptRegTemp
  // 		$call readSDHCRegisters ((54  + S) ) (errorInterruptEnableRegTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1378
  // (54  + S)
  // S
  call_stmt_4076_call <=> (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4076_Sample/crr branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4076_Update/ccr) (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4076_Sample/cra branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4076_Update/cca)
  // 		$volatile errorInterruptEnableReg := (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1379
  // (( $slice readErrorInterruptEnableReg 7 0 )  && errorInterruptEnableRegTemp)
  // readErrorInterruptEnableReg
  // errorInterruptEnableRegTemp
  // 		$call readSDHCRegisters ((58  + S) ) (errorInterruptSignalEnableRegTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1380
  // (58  + S)
  // S
  call_stmt_4087_call <=> (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4087_Sample/crr branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4087_Update/ccr) (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4087_Sample/cra branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4087_Update/cca)
  // 		$volatile errorInterruptSignalEnableReg := (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1381
  // (( $slice readErrorInterruptSignalEnableReg 7 0 )  && errorInterruptSignalEnableRegTemp)
  // readErrorInterruptSignalEnableReg
  // errorInterruptSignalEnableRegTemp
  // 		$call readSDHCRegisters ((52  + S) ) (normalInterruptEnableRegTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1382
  // (52  + S)
  // S
  call_stmt_4098_call <=> (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4098_Sample/crr branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4098_Update/ccr) (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4098_Sample/cra branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4098_Update/cca)
  // 		$volatile normalInterruptEnableReg := (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1383
  // (( $slice readNormalInterruptEnableReg 7 0 )  && normalInterruptEnableRegTemp)
  // readNormalInterruptEnableReg
  // normalInterruptEnableRegTemp
  // 		$call readSDHCRegisters ((44  + S) ) (clockControlRegTemp ) 
  //  file .Aa/sdhc.opt.aa, line 1384
  // (44  + S)
  // S
  call_stmt_4109_call <=> (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4109_Sample/crr branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4109_Update/ccr) (branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4109_Sample/cra branch_block_stmt_3414/call_stmt_4065_to_assign_stmt_4114/call_stmt_4109_Update/cca)
  // 		$volatile next_S := (S - 1 ) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1385
  // (S - 1 )
  // S
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 0
  // (S != 0 )
  if_stmt_4115_branch <=> (branch_block_stmt_3414/if_stmt_4115_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_4115_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_4115_if_link/if_choice_transition)
  // 		$volatile errorInterruptRegVal0 := ( $slice errorInterruptReg 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1389
  // errorInterruptReg
  // 		$volatile errorInterruptRegVal1 := ( $slice errorInterruptReg 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1390
  // errorInterruptReg
  // 		$volatile errorInterruptEnableVal0 := ( $slice errorInterruptEnableReg 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1391
  // errorInterruptEnableReg
  // 		$volatile errorInterruptEnableVal1 := ( $slice errorInterruptEnableReg 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1392
  // errorInterruptEnableReg
  // 		$volatile errorInterruptSignalEnableVal0 := ( $slice errorInterruptSignalEnableReg 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1393
  // errorInterruptSignalEnableReg
  // 		$volatile errorInterruptSignalEnableVal1 := ( $slice errorInterruptSignalEnableReg 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1394
  // errorInterruptSignalEnableReg
  // 		$volatile normalInterruptEnableVal0 := ( $slice normalInterruptEnableReg 7 0 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1395
  // normalInterruptEnableReg
  // 		$volatile normalInterruptEnableVal1 := ( $slice normalInterruptEnableReg 15 8 )  $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1396
  // normalInterruptEnableReg
  // 		tempErrorReg0 := (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1397
  // (((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1) & errorInterruptEnableVal0)
  // ((errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1)) & errorInterruptFlag1)
  // (errorInterruptRegVal0 | (dataErrorInterruptStatus | errorInterruptStatusVar1))
  // errorInterruptRegVal0
  // (dataErrorInterruptStatus | errorInterruptStatusVar1)
  // dataErrorInterruptStatus
  LOAD_dataErrorInterruptStatus_4155_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Update/LOAD_dataErrorInterruptStatus_4155_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Update/LOAD_dataErrorInterruptStatus_4155_Merge/merge_ack)
  LOAD_dataErrorInterruptStatus_4155_load_0 <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_dataErrorInterruptStatus_4155_Update/word_access_complete/word_0/ca)
  // errorInterruptStatusVar1
  // errorInterruptFlag1
  LOAD_errorInterruptFlag1_4159_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Update/LOAD_errorInterruptFlag1_4159_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Update/LOAD_errorInterruptFlag1_4159_Merge/merge_ack)
  LOAD_errorInterruptFlag1_4159_load_0 <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag1_4159_Update/word_access_complete/word_0/ca)
  // errorInterruptEnableVal0
  AND_u8_u8_4162_inst <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4162_Sample/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4162_Update/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4162_Sample/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4162_Update/ca)
  // 		tempErrorReg1 := (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1398
  // (((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2) & errorInterruptEnableVal1)
  // ((errorInterruptRegVal1 | errorInterruptStatusVar2) & errorInterruptFlag2)
  // (errorInterruptRegVal1 | errorInterruptStatusVar2)
  // errorInterruptRegVal1
  // errorInterruptStatusVar2
  // errorInterruptFlag2
  LOAD_errorInterruptFlag2_4168_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Update/LOAD_errorInterruptFlag2_4168_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Update/LOAD_errorInterruptFlag2_4168_Merge/merge_ack)
  LOAD_errorInterruptFlag2_4168_load_0 <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/LOAD_errorInterruptFlag2_4168_Update/word_access_complete/word_0/ca)
  // errorInterruptEnableVal1
  AND_u8_u8_4171_inst <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4171_Sample/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4171_Update/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4171_Sample/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/AND_u8_u8_4171_Update/ca)
  // 		$call writeSDHCRegisters (51  tempErrorReg1 ) () 
  //  file .Aa/sdhc.opt.aa, line 1399
  // tempErrorReg1
  call_stmt_4175_call <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/call_stmt_4175_Sample/crr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/call_stmt_4175_Update/ccr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/call_stmt_4175_Sample/cra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/call_stmt_4175_Update/cca)
  // 		errorInterruptBit := (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  )) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1400
  // (((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 )) && ($bitcast ($uint<7>) 0  ))
  // ((  $bitreduce |  tempErrorReg0 ) | (  $bitreduce |  tempErrorReg1 ))
  // tempErrorReg0
  // tempErrorReg1
  CONCAT_u1_u8_4184_inst <=> (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/CONCAT_u1_u8_4184_Sample/rr branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/CONCAT_u1_u8_4184_Update/cr) (branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/CONCAT_u1_u8_4184_Sample/ra branch_block_stmt_3414/assign_stmt_4124_to_assign_stmt_4192/CONCAT_u1_u8_4184_Update/ca)
  // 		$volatile checkInterruptEnable := ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 )) $buffering 1
  //  file .Aa/sdhc.opt.aa, line 1401
  // ((  $bitreduce |  normalInterruptEnableVal0 ) | (  $bitreduce |  normalInterruptEnableVal1 ))
  // normalInterruptEnableVal0
  // normalInterruptEnableVal1
  // CP-DP links for if  
  //  file .Aa/sdhc.opt.aa, line 1402
  // (checkInterruptEnable == 1 )
  if_stmt_4193_branch <=> (branch_block_stmt_3414/if_stmt_4193_eval_test/branch_req) (branch_block_stmt_3414/if_stmt_4193_else_link/else_choice_transition branch_block_stmt_3414/if_stmt_4193_if_link/if_choice_transition)
  // 			interrupt := (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1403
  // (((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0) & normalInterruptFlag1)
  // ((((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)) & normalInterruptEnableVal0)
  // (((readDataTransferComplete | dataTransferComplete) | transferComplete) | ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1))
  // ((readDataTransferComplete | dataTransferComplete) | transferComplete)
  // (readDataTransferComplete | dataTransferComplete)
  // readDataTransferComplete
  // dataTransferComplete
  // transferComplete
  // ((bufferReadReady | bufferWriteReady) | normalInterruptStatusVar1)
  // normalInterruptStatusVar1
  // normalInterruptEnableVal0
  // normalInterruptFlag1
  LOAD_normalInterruptFlag1_4211_gather_scatter <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Update/LOAD_normalInterruptFlag1_4211_Merge/merge_req) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Update/LOAD_normalInterruptFlag1_4211_Merge/merge_ack)
  LOAD_normalInterruptFlag1_4211_load_0 <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Sample/word_access_start/word_0/rr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Update/word_access_complete/word_0/cr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Sample/word_access_start/word_0/ra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/LOAD_normalInterruptFlag1_4211_Update/word_access_complete/word_0/ca)
  AND_u8_u8_4212_inst <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4212_Sample/rr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4212_Update/cr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4212_Sample/ra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4212_Update/ca)
  // 			$call writeSDHCRegisters (48  interrupt ) () 
  //  file .Aa/sdhc.opt.aa, line 1404
  // interrupt
  call_stmt_4216_call <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4216_Sample/crr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4216_Update/ccr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4216_Sample/cra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4216_Update/cca)
  // 			$call writeSDHCRegisters (49  errorInterruptBit ) () 
  //  file .Aa/sdhc.opt.aa, line 1405
  // errorInterruptBit
  call_stmt_4219_call <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4219_Sample/crr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4219_Update/ccr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4219_Sample/cra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4219_Update/cca)
  // 			$call readSDHCRegisters (56  ) (tempNormalSignal ) 
  //  file .Aa/sdhc.opt.aa, line 1406
  call_stmt_4222_call <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4222_Sample/crr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4222_Update/ccr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4222_Sample/cra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/call_stmt_4222_Update/cca)
  // 			interruptLine := (tempNormalSignal & interrupt) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1407
  // (tempNormalSignal & interrupt)
  // tempNormalSignal
  // interrupt
  AND_u8_u8_4226_inst <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4226_Sample/rr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4226_Update/cr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4226_Sample/ra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/AND_u8_u8_4226_Update/ca)
  // 			errorInterruptLine := ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1)) $buffering 1// bits of buffering = 8. 
  //  file .Aa/sdhc.opt.aa, line 1408
  // ((tempErrorReg0 & errorInterruptSignalEnableVal0) | (tempErrorReg1 & errorInterruptSignalEnableVal1))
  // (tempErrorReg0 & errorInterruptSignalEnableVal0)
  // tempErrorReg0
  // errorInterruptSignalEnableVal0
  // (tempErrorReg1 & errorInterruptSignalEnableVal1)
  // tempErrorReg1
  // errorInterruptSignalEnableVal1
  OR_u8_u8_4235_inst <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u8_u8_4235_Sample/rr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u8_u8_4235_Update/cr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u8_u8_4235_Sample/ra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u8_u8_4235_Update/ca)
  // 			SDHC_to_IRC_INT := ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine )) $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1409
  // ((  $bitreduce |  interruptLine ) | (  $bitreduce |  errorInterruptLine ))
  // interruptLine
  // errorInterruptLine
  OR_u1_u1_4242_inst <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u1_u1_4242_Sample/rr branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u1_u1_4242_Update/cr) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u1_u1_4242_Sample/ra branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/OR_u1_u1_4242_Update/ca)
  // SDHC_to_IRC_INT
  WPIPE_SDHC_to_IRC_INT_4237_inst <=> (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/WPIPE_SDHC_to_IRC_INT_4237_Sample/req branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/WPIPE_SDHC_to_IRC_INT_4237_Update/req) (branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/WPIPE_SDHC_to_IRC_INT_4237_Sample/ack branch_block_stmt_3414/assign_stmt_4213_to_assign_stmt_4243/WPIPE_SDHC_to_IRC_INT_4237_Update/ack)
  // 			$call writeSDHCRegisters (48  ZERO_8 ) () 
  //  file .Aa/sdhc.opt.aa, line 1411
  call_stmt_4247_call <=> (branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/call_stmt_4247_Sample/crr branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/call_stmt_4247_Update/ccr) (branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/call_stmt_4247_Sample/cra branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/call_stmt_4247_Update/cca)
  // 			SDHC_to_IRC_INT := ZERO_1 $buffering 1// bits of buffering = 1. 
  //  file .Aa/sdhc.opt.aa, line 1412
  // SDHC_to_IRC_INT
  WPIPE_SDHC_to_IRC_INT_4248_inst <=> (branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/WPIPE_SDHC_to_IRC_INT_4248_Sample/req branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/WPIPE_SDHC_to_IRC_INT_4248_Update/req) (branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/WPIPE_SDHC_to_IRC_INT_4248_Sample/ack branch_block_stmt_3414/call_stmt_4247_to_assign_stmt_4250/WPIPE_SDHC_to_IRC_INT_4248_Update/ack)
}
